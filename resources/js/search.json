[[{"i":"#","p":["Workflow Enhancements for Creatives"]},{"l":"CommandPost","p":["The Swiss Army Knife for Post Production Professionals","CommandPost is a free and open source macOS application that makes your post production and editing life faster and more fun.","It adds hundreds of features to Apple’s Final Cut Pro to make it even better and more enjoyable to edit with.","It has extensive control surface support - allowing you to control your Mac anyway you want. It's also fully native on Apple Silicon.","It's been downloaded over 168 thousand times, and there are over 2.6 thousands members in our active Facebook Community.","It's been used for projects at Netflix, Pixar and the BBC. People at companies such as Apple, Avid and Adobe use it daily."]},{"l":"Built for Professionals","p":["We developed new CommandPost features especially for Apollo: Missions to the Moon, edited by David Tillman.","We've also built custom tools for Denmark’s second largest production company, Metronome Productions.","“ Titles to keywords is a huge timesaver when editing complex scenes. Couldn’t live without it anymore. And directors love that every delivery of any line from any take I just one click away. ” Knut Hake~ Editor on Netflix's Blood Red Sky","Blood & Gold was cut on Final Cut Pro and made extensive use of CommandPost's Titles to Keywords Toolbox."]},{"l":"Where Technology Meets Creativity","p":["“ CommandPost and FCP are so intertwined on my day to day that I see them as one app ”. Marcos Castiel BFE~ Editor on Netflix's Turn of the Tide","CommandPost has been built by filmmakers, for filmmakers.","However, it's also used by developers, scientists and macOS power users all over the world to seriously speed up mundane tasks through powerful and customisable automation tools."]},{"l":"Experience Unparalleled Control","p":["“ As someone who doesn’t like clicking to do things, CommandPost makes my work much more likeable ”. Oli Frost~ Editor","“ CommandPost supports my Loupedeck, Stream Deck and Razer devices with advanced Final Cut Pro integrations. Eliminating the need for multiple apps and reducing complexity. ” Sam Pluemacher~ Assistant Editor on Netflix's Blood Red Sky","CommandPost has deep support for a wide range of control surfaces.","It even brings back Razer keypad support to the Mac!","You can basically control ANYTHING in Final Cut Pro with a huge range of control surfaces.","Tangent, Monogram and Loupedeck all officially rely on CommandPost for Final Cut Pro support."]},{"l":"Powerful Search Console Redefines Navigation","p":["“ Search Console is like Spotlight on steroids. It can find any obscure command on a glance, NLE and OS-wide, fire up keyboard makros (scripts), and especially, find and place Effects and Effect Templates, directly onto selected clips in my FCP timeline. It constantly saves me clicks ”. Florian Duffe~ Editor","CommandPost has an insanely powerful Search Console that allows you to trigger all of CommandPost's actions.","Like Spotlight, this is accessible system-wide, and is also used to quickly assign actions to control surfaces buttons and knobs."]},{"l":"Revolutionise Your Workflow","p":["“ CommandPost is so many things for so many people. For me it is a Final Cut Pro automation system that unlocks hidden features and uniquely supports advanced workflows. CommandPost’s secret weapon? Deep connections with the postproduction community which mean that it constantly improves as the needs of editors and post professionals evolve ”. Alex ‘4D’ Gollner~ Final Cut Pro Plugin Creator","CommandPost allows you to do things in Final Cut Pro that are otherwise not possible, such as Highlight Browser Playhead and Scrolling Timeline.","There's literally hundreds of actions in CommandPost for controlling Final Cut Pro in almost unlimited ways."]},{"l":"Say Goodbye to Complexity","p":["“ Chris, you have no idea how helpful your Titles to Keywords toolbox has been on our latest production. Without the toolbox these 2-3 hour long timelines (around 900 keywords) would have been nearly impossible to tag with the FCP built in way. It's very long scenes with around 50 lines of text for all characters. ” Sam Pluemacher~ Assistant Editor on Netflix's Blood Red Sky","CommandPost can do complex things with a single keystroke, such as exporting your Final Cut Pro Timeline Index and Browser Contents to a CSV."]},{"l":"Diversify Your Creativity","p":["Whilst CommandPost was originally designed with Final Cut Pro in mind, it can actually control ANY Mac application.","It's also always growing and expanding, for example it can scan After Effects so that you can trigger any effect from a control surface.","The Search Console will also list all your Keyboard Maestro macros, macOS Shortcuts and even AppleScript's!"]},{"l":"Multi-language Support","p":["CommandPost has been translated into Arabic, Bengali, Catalan, Chinese (Simplified & Traditional), Danish, Dutch, French, German, Greek, Hindi, Hungarian, Italian, Japanese, Korean, Malayalam, Norwegian, Panjabi/Punjabi, Polish, Portuguese, Russian, Spanish, Swedish, Ukrainian & Vietnamese by our awesome community."]},{"l":"Powered by Lua","p":["Powered by Lua(the same scripting language used by Blackmagic Fusion, Adobe Lightroom and even parts of Apple iOS), it's insanely customisable and powerful.","Every part of CommandPost can be easily modified and enhanced in a simple text editor. All the interfaces are built in plain HTML.","It's also fully compatible with Hammerspoon Lua scripts.","Download now for free and accelerate your post production workflow..."]}],[{"l":"LateNite Technology","p":["CommandPost was founded by Chris Hocking from LateNite.","Constantly looking for ways to innovate, LateNite is as passionate about production and post production as it is storytelling. Their pursuit of creative excellence has seen them work closely with global cinematic technology companies to craft post workflow solutions and critically celebrated software in-house."]},{"l":"BRAW Toolbox","p":["BRAW Toolbox allows you to import Blackmagic RAW files directly into Final Cut Pro without transcoding.","No more waiting. No more transcoding. No more massive ProRes files.","Save hours of time, and terabytes of storage!","The BRAW Toolbox Workflow Extension allows you to prepare all of your footage prior to import. You can easily and quickly change all the RAW parameters, and copy and paste settings from different BRAW clips. You can even save and restore Presets that contain specific parameters, saving time for example, if you always use the same Gamut & Gamma.","Once imported into Final Cut Pro, you can still modify the RAW parameters at any time.","You can even keyframe the ISO, Exposure, Color Temp, Tint and Custom Gamma Controls!","BRAW Toolbox comes with a Metadata View that allows you to view every piece of BRAW Metadata directly within the Final Cut Pro Inspector.","There are automatic Decode Quality options for both HD and UltraHD projects, and you can also work at a low Decode Quality, then apply a \"Global Setting\" to force Full Quality prior to exporting - meaning you never have to worry about creating proxies for performance. BRAW Toolbox gives you complete freedom and flexibility.","You can also use the Workflow Extension to send your project/timeline to DaVinci Resolve for grading - all using BRAW files directly from the camera!","BRAW Toolbox requires Final Cut Pro 10.6.5 or later."]},{"l":"User Reviews","p":["This developer did what Apple Couldn't/Wouldn't This app is a great solution to a common problem Final Cut Pro users have: getting Blackmagic Raw footage into the app. At first it might seem like a bizarre workaround, but you only have to go through the process of setting it up once, and then you can easily import your Blackmagic footage right into FCP. Honestly, from that point on it works so incredibly well that I really struggle to understand why Apple has made it so difficult. Except it's not difficult, not anymore. This is great software: a small developer solving a problem that a big one (Apple) can't. That's innovation, my friends.","moosefuel – Feb 3, 2023 (Apple App Store Review)","The tool we have dreamed of is here. For lovers of Final Cut Pro who have struggled with the endless BRAW proxy XML loop, this is a dream come true. BRAW natively inside Final Cut. Controls for RAW adjustments at your fingertips. Is it the full Resolve interface? No, doesnt need to be, Between BRAW ToolBox and FCP, most edits can be done natively without ever having the leave the Final Cut NLE. If you shoot any BRAW camera, this is the best of both worlds if you live in the FCP ecosystem. Thank you latenightfilms team for this, its a huge step forward and a wonderful plugin.","Chasing Photography – May 16, 2023 (Apple App Store Review)","Perfect! Just perfect.","Viaswage – Feb 18, 2023 (Apple App Store Review)","Great! Love this! thank you!","NarimanGafurov – Feb 6, 2023 (Apple App Store Review)","UMMMMMM THANK YOU, YOU'RE A GENIUS I've needed this for years!!!!!! You are a genius and this is incredible!!! Thank you so much!!! No clue how BM never made this.","gordonfromvan – Feb 4, 2023 (Apple App Store Review)","I've been waiting for this! I can finally use my two Blackmagic cameras and shoot in BRAW. As a Final Cut Pro editor, I'm really excited. The app is working great! I really appreciate the team at LateNite for all the hard work it took to get this up and running. Well worth the money to be able to handle BRAW seamlessly. Scott_Hartman – Feb 2, 2023 (Apple App Store Review)","Boom! Such an amazing plugin and works fantastic! Grant Digital Sky – Feb 2, 2023 (Apple App Store Review)","Absolutely Amazing. Solves a massive problem and works beautifully! Jmurphy8503 – Jan 31, 2023 (Apple App Store Review)","The impossible made possible. Amazing to work natively with BRAW in my favourite editor. Thank you! MadMitch1993 – Jan 30, 2023 (Apple App Store Review)"]},{"l":"Gyroflow Toolbox","p":["Gyroflow Toolbox allows you to import Gyroflow Projects into Final Cut Pro.","Gyroflow is a free and open source third-party application that can stabilise your video by using motion data from a gyroscope and optionally an accelerometer. Modern cameras record that data internally (GoPro, Sony, Insta360 etc), and Gyroflow stabilizes the captured footage precisely by using them. It can also use gyro data from an external source (eg. from Betaflight blackbox).","Gyroflow Toolbox allows you to take the stabilised data from Gyroflow and use it within Final Cut Pro as an effect, so you don't have to export a ProRes from Gyroflow!","You can even use this in conjunction with BRAW Toolbox (also on the App Store), to stabilise Blackmagic RAW files!","None of this would be possible without the incredible Gyroflow project and the incredibly help and support from their main developer, AdrianEddy."]},{"i":"user-reviews-1","l":"User Reviews","p":["Nice product! Thank you Chris!","NarimanGafurov – Feb 6, 2023 (Apple App Store Review)","The Best Way to Stabilize Pro Res RAW I record both internally and externally with an Atomos Ninja, on my FX3 with the end goal of delivering HDR. I record internal to capture Gyroscopic data that my FX3 records. This allows me to Use GryoFlow, and Thus GryoFlow Toolbox to stabilize Pro Res RAW footage. This tool has made it possible, and works awesomely. I highly recommend this tool it will help immensely.","Tydar94 – Jan 27, 2023 (Apple App Store Review)"]},{"l":"Marker Toolbox","p":["Marker Toolbox allows you to import Vimeo CSV, Wipster CSV, Dropbox Replay JSON & Email Comments into Apple's Final Cut Pro via a handy Workflow Extension.","You can also OPTIONALLY use OpenAI's ChatGPT to help translate email comments into markers using your own personal OpenAI API key!","If you use Vimeo Review pages or Wipster to share video edits with clients to consolidate feedback, you can simply export a CSV file from Vimeo or Wipster, and drag it into the Workflow Extension to convert the comments into Markers within Final Cut Pro. It's fast and easy!","Dropbox Replay works exactly the same way, except Marker Toolbox will also import any drawn annotations!","Similar to Frame.io's Workflow Extension, the markers come in as a Compound Clip, that you can then \"break apart\" so that the markers are attached to the clips in your Primary Storyline, meaning that your clients comments stay in the correct position as you make revisions to the edit. For each marker, there's also a title, so that you can easily visually see the comments right in your Viewer - this is great if you need to export an edit with all your client feedback \"burnt\" into the export.","Replies and the date the comment was added can be included in the Marker names. It also takes \"resolved\" comments in Vimeo, Wipster & Dropbox Replay, and marks them as \"completed\" in Final Cut Pro!","You can also easily copy and paste client feedback from emails into the Workflow Extension. In most cases, you can use the \"Process Comments Locally\" button to use a custom-built algorithm that converts each line of text into a comment. However, you can also the power of OpenAI's ChatGPT to help translate more complicated feedback into markers. You can customise the ChatGPT prompt, and also pick the ChatGPT Model. You supply your own OpenAI API key, giving you full control.","This can be a MASSIVE time saver, as you can simply copy and paste a long list of email comments, and ChatGPT will do the work to convert them into easy-to-read Final Cut Pro markers, that you can then easily navigate via the Timeline Index.","Marker Toolbox requires Final Cut Pro 10.6.5 or later."]},{"i":"user-reviews-2","l":"User Reviews","p":["I’ve been absolutely flatout while working in Thailand. Wipsters has been been great, helping me manage projects and reviewers across four countries. Stoked Marker Toolbox can send Wipster notes straight into #fcpx","Alister Robbie via Twitter","Excellent addition to FCP This is a great tool. I have my clients make notes on Vimeo, and Marker Toolbox lets me download a .csv of those comments and create markers on the FCP project/timeline at the proper locations, with notes visible and that will follow the clips as I move them. Once downloaded and installed it's easy. Downloading the .csv and running it through Marker Toolbox and adding the Markers to the project/timeline takes less than a minute, then you're ready to go. Really great find!","Robert heinlein's son – May 31, 2023 (Apple App Store Review)","Amazing simple I wanted an app like this since I started editing. Now for the first time I can process the comments I get via an e-mail on an edit from the start and not, as I usualy do, begin at the end of the edit and work backwards.","Blazy – Apr 6, 2023 (Apple App Store Review)"]},{"l":"Recall Toolbox","p":["Recall Toolbox is a Final Cut Pro Workflow Extension that acts as a Shared Pasteboard.","Anything that you can copy and paste in Final Cut Pro, Recall Toolbox can store."]},{"l":"Build for Final Cut Pro","p":["There are third party tools like the amazing Copy 'Em ​(for Mac), but they're not quite as visual as Recall Toolbox, and they're not built from the ground up for Final Cut Pro users.","Recall Toolbox works as a Final Cut Pro Workflow Extension, so it's window position gets saved with your custom Workspaces.","Whilst CommandPost has had a Shared Pasteboard & Pasteboard Buffers for years, it's really optimised for Control Surfaces. You can access the Shared Pasteboard from the CommandPost menubar, and it is super powerful, but it's not as visual - you just get text, not a fully customisable thumbnail.","Recall Toolbox feels like a natural extension to Final Cut Pro, with a similar look and feel to Final Cut Pro's Effects Browser."]},{"l":"iCloud Sync","p":["Recall Toolbox automatically syncs to ALL your devices on the same iCloud account automagically!"]},{"l":"iCloud Sharing","p":["You can share folders with other iCloud users, and control permissions. For example, you could have a \"read only\" folder that contains client logos for a current job!"]},{"l":"Transfer Toolbox","p":["Transfer Toolbox allows you to convert Final Cut Pro (for Mac) libraries into Final Cut Pro (for iPad) projects!","You can now easily get from your Desktop to your iPad! Simply drag your existing Final Cut Pro library into the application's drop zone.","You should ensure your library only has a single event, and all project timecode starts at 00:00:00:00.","All Motion Content and Media should be contained within the Library.","If you have custom fonts on the Mac Final Cut Pro library, you should manually install them on the iPad before importing the project.","Transfer Toolbox requires Final Cut Pro 10.6.6 or later."]}],[{"l":"Sponsor CommandPost","p":["To help continue CommandPost to grow, evolve, and stay completely free and open-source, we offer the ability to sponsor CommandPost directly through GitHub.","You can do one-off or monthly payments.","GitHub is a safe and secure developers platform used by over 73 million users worldwide.","Sponsor CommandPost on GitHub here.","You can also sponsor the individual developers here:","Sponsor Chris on GitHub here.","Sponsor David on GitHub here.","Alternatively, you can also make a contribution via PayPal.","If you're in Australia, we can also generate a tax invoice with GST for you - just contact us.","You can also show your support by purchasing one of our paid apps."]}],[{"l":"Download","p":["You can download the latest CommandPost v1.4.17 release here.","You can find all previous versions of CommandPost on GitHub.","You can find installation instructions here."]}],[{"l":"System Requirements","p":["CommandPost supports macOS Big Sur, Monterey & Ventura.","It has native support for both Intel and Apple Silicon Macs.","We use Apple’s built-in Accessibility API, which requires both Accessibility and Screen Recording permissions, so that we can determine window and button positions.","If you're using Catalina, you can still download CommandPost v1.4.13.","If you're using Mojave, you can still download CommandPost v1.2.16."]},{"l":"Final Cut Pro","p":["The latest version of CommandPost requires Final Cut Pro 10.6.5 or later. It works great with Final Cut Pro 10.6.6.","You can find Final Cut Pro's system requirements here."]},{"l":"Other Applications","p":["You can use CommandPost to trigger keyboard shortcuts and menubar items on any macOS application.","CommandPost also has deep support for Final Cut Pro 10.5.4 to 10.6.5.","It has basic support for Adobe After Effects 2020 and later.","It has limited experimental support for DaVinci Resolve 16.2.7 and later. If there's enough interest/sponsorship, we hope to offer much better Resolve support in the future.","If you're using an earlier version of Final Cut Pro, you can use an older version of CommandPost."]}],[{"l":"Installation","p":["Again, the panel is locked, so you need to click the paddock icon in the bottom left corner of the screen to make changes.","As soon as you click it, MacOS will ask you to quit and reopen CommandPost.","As soon as you click it, System Preferences will close, and you'll go back to the CommandPost setup, presented with the Screen Recording Permissions screen:","Choose Quit & Reopen, then after a short delay, CommandPost will close the System Preferences panel and present you with the CommandPost setup:","Click CLOSE, and you're ready to use CommandPost!","Click CONTINUE.","Click Open System Preferences.","CommandPost will now launch the Welcome Screen:","Drag the CommandPost icon to the Folder icon.","Have fun!","However the panel is locked, so you need to click the paddock icon in the bottom left corner of the screen to make changes.","Navigate to your Applications folder by double-clicking the folder icon, and double-click the CommandPost icon.","No, we're not recording your screen. You can learn more here.","Once downloaded, simply open the package by double-clicking it.","Once the preferences are unlocked, you can tick CommandPost in the list.","Once the scanning is complete you'll be presented with:","Since you have already granted the permissions CommandPost needs, clicking CONTINUE will bring you straight to the Scan Final Cut Pro screen (if you have Final Cut Pro installed):","The DMG package will open, looking like this:","This process can take several minutes to complete depending on your computer and hard drive speed.","This will put CommandPost in your Applications folder.","Use Touch ID or enter your computers password to unlock:","When the Privacy Tab of the Security & Privacy System Preferences opens, you'll see CommandPost in the Allow the apps below to control your computer list.","When you click ALLOW ACCESSIBILITY, macOS will present you with this:","When you click ALLOW SCREEN RECORDING, the Privacy Tab of the Security & Privacy System Preferences opens.","When you click START SCAN CommandPost will begin scanning your system for Final Cut Pro Plugins & Motion Templates.","You can access CommandPost's features via it's menubar icon.","You can download the latest release of CommandPost as an DMG package here.","You might be presented with a warning link below - click Open to continue installation.","You might be presented with another warning like below - click Open to continue installation.","You'll see CommandPost in the Allow the apps below to record the content of your screen, even while using other apps list.","You'll then be presented with the Accessibility Permissions screen:"]}],[{"l":"Uninstall"},{"l":"Easy Uninstall","p":["Inside the CommandPost DMG package is an uninstall application:","By running this Uninstall application it will remove everything related to CommandPost, including your Preferences and Settings.","If you have enabled \"Enable Moving Markers\", or changed the \"Smart Collection Label\" or \"Backup Interval\", you should change these settings back to their defaults prior to uninstalling CommandPost.","If you have enabled \"Waveform Drawing\", \"Rendering During Playback\", \"Show Timeline in Viewers\", or \"Hidden FCPXML Import/Export Options\" you can trash the Final Cut Pro preferences by holding down OPTION+COMMAND when you launch Final Cut Pro to reset these values if you've already uninstalled CommandPost."]},{"l":"Manual Uninstall","p":["The CommandPost preferences are located at:","~/Library/Preferences/org.latenitefilms.CommandPost.plist","This file can also be dragged to the Trash to remove CommandPost’s Preferences.","Any user created Extensions, Plugins, Shortcuts or Tangent Settings are stored within:","~/Library/Application Support/CommandPost","These can be also be removed if required.","CommandPost's WebKit, Crashlytics & Sparkle caches are stored within:","These folders can also be removed if required."]}],[{"l":"Support","p":["If you run into any bugs, crashes, or you have a feature request, you can post an issue here.","If you have any general questions or feedback, you can discuss here.","GitHub registration is free, and this GitHub repository is actively monitored by LateNite Films.","When requesting technical support, we recommend including the following information:","macOS Version","CommandPost Version","Final Cut Pro Version (if installed)","A screenshot of the About This Mac screen so we can see your system specs","You can also email us: support@latenitefilms.com","We're based in Melbourne, Australia- you can check the timezone here."]}],[{"l":"Frequently Asked Questions"},{"i":"why-does-commandpost-require-screen-recording-permissions","l":"Why does CommandPost require \"Screen Recording\" permissions?","p":["If you're using macOS Catalina or later, CommandPost requires the Screen Recording permission to detect things on your screen.","This is a new Security Setting in macOS Catalina, not a change to how CommandPost works.","CommandPost does not record the screen.","We're not \"recording\" the screen as a video like a QuickTime Player or a screen recording application would do - we're simply using Apple's APIs to get access to information about the contents of the screen.","We use Apple's API's to get the name of windows that are open.","We also use the API's to help detect when Final Cut Pro is playing and paused, by \"looking\" at the play/pause button in the Viewer.","Nothing is saved to disk. Nothing is transmitted online.","We simply use Apple's APIs to access screen information.","We also have the option of OPTIONALLY sending screenshots when you submit feedback.","Lots of other applications like Bartender and BetterTouchTool have this same limitation.","Also remember, CommandPost is totally open-source, so you can always inspect the code to see what we're doing."]},{"i":"why-did-you-remove-the-vimeo-toolbox","l":"Why did you remove the \"Vimeo Toolbox\"?","p":["The Vimeo Toolbox has \"graduated\" from CommandPost and has been spun out into a standalone commercial app called Marker Toolbox.","It's our intention to \"spin out\" a lot of CommandPost's features into standalone apps with enhancements over the coming years.","However, you can still use Vimeo Toolbox in older versions of CommandPost- no one if forcing you to update CommandPost if you rely on this functionality.","You can learn more about Marker Toolbox here."]},{"i":"why-did-you-remove-moveable-markers","l":"Why did you remove \"Moveable Markers\"?","p":["Moveable Markers was first discovered by Alex Goldner back in June 2014.","To enable it, you basically just need to toggle a boolean hidden within a preference file inside the Final Cut Pro Library.","In the early days of FCPX Hacks we added an option for Moveable Markers which enables them using the same technique Alex found, except it allowed users to easily toggle the feature on and off using the menu bar or shortcut keys.","When we transitioned FCPX Hacks to CommandPost, we kept this feature, however we've since decided that it's probably a bad idea to modify the contents of the Final Cut Pro application bundle, so we removed this feature all together, along with other features that modify the contents of the Final Cut Pro application bundle (such as inserting our commands into the Final Cut Pro Command Editor).","We want CommandPost to be as safe and reliable as possible, and we want to avoid using \"hacks\" to make things happen.","The easiest way to enable Moveable Markers is via Terminal.","This works on Final Cut Pro 10.5.2 and below on both Intel and Apple Silicon.","The below assumes you have Final Cut Pro installed within the /Applications folder.","This will enable them:","sudo /usr/libexec/PlistBuddy -c Set :TLKMarkerHandler:Configuration:'Allow Moving Markers' true '/Applications/Final Cut Pro.app/Contents/Frameworks/TLKit.framework/Versions/A/Resources/EventDescriptions.plist'","This will disable them:","sudo /usr/libexec/PlistBuddy -c Set :TLKMarkerHandler:Configuration:'Allow Moving Markers' false '/Applications/Final Cut Pro.app/Contents/Frameworks/TLKit.framework/Versions/A/Resources/EventDescriptions.plist'"]},{"i":"why-did-you-remove-show-timeline-in-viewers","l":"Why did you remove \"Show Timeline in Viewers\"?","p":["Unfortunately Apple removed the hidden \"Show Timeline in Viewers\" preference in Final Cut Pro 10.4.9.","As CommandPost is just enabling this hidden preference, unfortunately there's nothing we can do to bring it back.","However, you can still use this feature if you're using Final Cut Pro 10.4.4 to 10.4.8.","If you found this feature useful, please send feedback to Apple explaining how you used it and why you found it useful."]},{"i":"why-did-you-remove-the-hidden-fcpxml-importexport-option","l":"Why did you remove the \"Hidden FCPXML Import/Export Option\"?","p":["Unfortunately Apple removed the \"Hidden FCPXML Import/Export Option\" preferences in Final Cut Pro 10.4.9.","As CommandPost is just enabling these hidden preferences, unfortunately there's nothing we can do to bring them back.","However, you can still use these features if you're using Final Cut Pro 10.4.4 to 10.4.8.","If you found this feature useful, please send feedback to Apple explaining how you used it and why you found it useful."]}],[{"l":"Release Notes"},{"i":"commandpost-1417","l":"CommandPost 1.4.17"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Increase Pasteboard Buffer Actions from 9 to 50. Thanks for suggesting Dimitar Maratilov!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Take 3! It seems we've been playing cat and mouse with Apple. \"Save Timeline Index to CSV\" should now work on both macOS Monterey and all versions of macOS Ventura. Thanks for reporting Larry Jordan!"]},{"i":"commandpost-1416","l":"CommandPost 1.4.16"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Updated from Lua v5.4.3 to v5.4.4. Thanks Chris Jones & Lua Team!","The Debug Console is now limited to 100,000 characters by default. Thanks Chris Jones!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed bug in \"Select Clip at Lane\" actions. Thanks for reporting Christopher Tasti!"]},{"i":"commandpost-1415","l":"CommandPost 1.4.15"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added support for the Stream Deck Plus.","Added support for the latest Stream Deck Mini.","Added actions for controlling the Loupedeck Screen and LED brightness. Thanks for suggesting anarchy!"]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Updated csv2notion from v0.3.5 to v0.3.7. Thanks for your amazing work Vladilen Zhdanov!","In the Shot Data Toolbox, we now save and restore the \"Export Destination\" with the settings. Thanks for suggesting Vigneswaran Rajkumar!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug where the clip duration was incorrect when using the Vimeo Toolbox. Thanks for reporting Noah Leon!","Fixed a bug which prevented \"Reveal in Keyword Collection\" actions from working. Thanks for reporting Eric Lami!","Fixed a bug in the Titles to Keywords Toolbox where we never considered that a sync-clip might actually contain a spine, if there's a gap clip at the start of the sync-clip. Thanks Olivier Galliano & Sam Pluemacher!","Fixed Logic bug in Stream Deck Banks. Thanks aj752!","Fixed logic bug in Resolve Control Surface Banks. Thanks KotzendesEinhorn-rgb!","Reverted changes we made in v1.4.14 to fix macOS Ventura bugs, as Apple has seemed to fix them in a later Ventura update.","Fixed a nil error in the Keywords action within the Loupedeck Plugin if no existing Keyword Shortcuts are allocated."]},{"i":"commandpost-1414","l":"CommandPost 1.4.14"},{"i":"important-changes","l":"⚠️ Important Changes","p":["With the release of macOS Ventura, CommandPost v1.4.14 now requires macOS Big Sur or later. You can still use CommandPost v1.4.13 on macOS Catalina."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Sony Timecode Toolbox now supports 100fps Non-Drop Frame clips. Thanks for reporting Valerio D'Andrassi!","Sony Timecode Toolbox now supports clips with Drop Frame (29.97fps, 59.94fps and 119.88fps) timecode. MASSIVE thank you to George Elias for supplying a huge amount of test clips!","Added additional actions for triggering shortcut keys, using a slightly different method that works better with macOS applications using non-native frameworks, such as Blender. Thanks for reporting Alex Petrov!","Updated csv2notion to v0.3.6. Thanks for your amazing work Vladilen Zhdanov!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug in our Timeline Index API, which caused the \"Save Timeline Index to CSV\" to fail on macOS Ventura, due to changes to the Accessibility API on macOS Ventura. Thanks for reporting Dale Ryan and Phil Swallow!","Fixed a bug in our MenuButton API, which caused triggering certain menu buttons to fail on macOS Ventura, due to changes to the Accessibility API on macOS Ventura. Thanks for reporting Oli Frost!","Fixed a potential error message in our AppleScript handler. Thanks for reporting Daniel Latimer!","Fixed a bug with the “Copy Application” function in the Control Surfaces panels. If you copied a built-in application to a user-added application, it would incorrectly replace the display name of the destination application with that of the source application. Thanks for reporting John McAfee!"]},{"i":"commandpost-1413","l":"CommandPost 1.4.13"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Titles to Keywords Toolbox now supports audio clips on the primary storyline. Also, now if you have a title that spans across multiple clips, keywords will be applied to all the clips that intersect that title. Thanks Sam Pluemacher!","We've updated the CommandPost Workflow Extension icon so that it's greyscale, matching the look of other Workflow Extension icons. This will look much better if CommandPost is the only Workflow Extension you have installed. Thanks for suggesting Byk Valkonen! Designed by the amazing Matthew Skiles!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Final Cut Pro v10.6.5 fixes a regression (introduced in v10.6.2) which prevented CommandPost from detecting selected clips within a secondary storyline. This meant, for example, if you had a clip selected in a secondary storyline and triggered Timeline Batch Export, CommandPost would think no clips are selected in the timeline. This is now fixed! Woohoo! Thanks Apple!","Fixed a bug in \"Select Middle of Next/Previous Clip in the same storyline\" actions. This now works again thanks to the above mentioned fix in Final Cut Pro v10.6.5. Thanks for reporting Nathen McEvoy!"]},{"i":"commandpost-1412","l":"CommandPost 1.4.12"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed an issue in the \"Auto Sequence\" Toolbox where audio clips were not processed correctly. Thanks for reporting Florian Duffe!"]},{"i":"commandpost-1411","l":"CommandPost 1.4.11"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added support for the Razer Stream Controller.","Added support for the Loupedeck Live-S."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Added support for titles in secondary storylines to the Titles to Keywords Toolbox. Thanks for suggesting Knut Hake!","Added a second text-box to the Titles to Keywords Toolbox, to be used for \"common\" keywords.","Added a preference to \"Add Space After Sequence\" in the Titles to Keywords Toolbox. We also now add a \"KEYWORD\" role to every title.","Added an option to \"Treat FAVORITE and REJECT as Ratings instead of Keywords\" in the Titles to Keywords Toolbox. When \"Treat FAVORITE and REJECT as Ratings instead of Keywords\" is enabled it will automatically create a \"REJECT\" and \"FAVORITE\" title when using \"Create Titles from Text\" (which also has a \"REJECT\" or \"FAVORITE\" role). We also now put the \"Create Titles from Text\" titles on a secondary storyline to make copying easier.","When using \"Create Titles from Text\" in the Titles to Keywords Toolbox, we now alternate the positioning of the titles, so that you can more easily see them in the Final Cut Pro Viewer.","Updated csv2notion to v0.3.5. Thanks for your amazing work Vladilen Zhdanov!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug where \"Screens Backlight Level\" wouldn't update correctly on Loupedeck devices.","The warning popup that appears when using the reset buttons on the Loupedeck control surfaces panels now shows the correct control surface name (i.e. if you want to reset a Loupedeck Live, it now says Loupedeck Live instead of Loupedeck CT)."]},{"i":"commandpost-1410","l":"CommandPost 1.4.10"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added a new \"Auto Sequence\" Toolbox. When you drag a Final Cut Pro Project to this Toolbox, we'll send a new Project back to Final Cut Pro with the clips sorted by timecode (with or without gaps). Thanks for suggesting Knut Hake & Sam Pluemacher!","Added a new \"Sony Timecode Repair\" Toolbox. Final Cut Pro currently doesn't always correctly interpret timecode from certain Sony Cameras that are recording into an MP4 wrapper. This Toolbox will update a Project's FCPXML to use the correct timecode values from the XML sidecar file (or the MP4 itself if no sidecar file exists), so that you can more easily send timelines from Final Cut Pro to DaVinci Resolve, Baselight or Adobe Premiere (with XtoCC). Thanks Alister Robbie & Jamie LeJeune!"]},{"i":"improvement","l":"\uD83D\uDD28 Improvement","p":["The \"Titles to Keywords\" Toolbox now supports connected clips above the Primary Storyline. This means that you can have a single title over the top of multiple clips, and all of those clips will get the same keyword from this title. Thanks for suggesting Knut Hake & Sam Pluemacher!"]},{"i":"commandpost-149","l":"CommandPost 1.4.9"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Added some workarounds for macOS 13 Ventura Beta 22A5321da. Currently the Final Cut Pro \"Edit > Start Dictation…\" and \"Edit > Emoji & Symbols\" menu item actions will only work in English due to changes in macOS - we will try to search for a proper fix for this in the future for non-English users. Thanks for reporting Jeff Asher!"]},{"i":"commandpost-148","l":"CommandPost 1.4.8"},{"i":"improvement","l":"\uD83D\uDD28 Improvement","p":["The projectTimecode token that can be used in Timeline Batch Export custom naming no longer uses dashes as separators (i.e. \"00000000\" instead of \"00-00-00-00\") so you more easily copy and paste into Final Cut Pro. Thanks for suggesting Jiří Fiala!"]},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Added missing action group labels for Razer Tartarus Chroma Applications & Banks. Thanks for reporting Frozner Videography!"]},{"i":"commandpost-147","l":"CommandPost 1.4.7"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added support for the Razer Tartarus Chroma. Thanks for suggesting Frozner Videography!","Added a projectTimecode token to the Timeline Batch Export custom naming feature, allowing you to insert the project timecode of where the clip starts to the filename. Thanks for suggesting Jiří Fiala!","Added action for \"Toggle Zoom to Fit\", allowing you to toggle between \"Zoom to Fit\" and your last zoom value. Thanks for suggesting Jiří Fiala!","Added action for \"Toggle Zoom to Selection\", allowing you to toggle between \"Zoom to Selection\" and your last zoom value. Thanks for suggesting Richard Taylor!","Added individual actions for specific timeline zoom values (1 to 10 in 0.5 increments)."]},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed a bug in the \"Mouse Left Double Click\" action."]},{"i":"commandpost-146","l":"CommandPost 1.4.6"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Disabling \"Open Debug Console on Dock Icon Click\" in the General Preferences still opened the Debug Console when clicking the dock icon. Thanks for reporting Vigneswaran Rajkumar!"]},{"i":"commandpost-145","l":"CommandPost 1.4.5"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Added an option to \"Replace Commas With Alternative Commas\" in the \"Titles to Keywords\" Toolbox. This is to workaround a bug in Final Cut Pro where it will split up a single keyword into multiple keywords when it detects a comma in the keyword name, when imported via a FCPXML. Thanks Knut Hake, Sam Pluemacher, Iain Anderson and Alex Gollner!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["The contextual menu will now appear when you right-click on the \"Create Titles from Text\" text editor in the \"Titles to Keywords\" Toolbox.","Fixed a bug that could cause a \"nil\" error in the Debug Console related to \"topToBottomBaseAligned\" sorting."]},{"i":"commandpost-144","l":"CommandPost 1.4.4"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added a new \"Titles to Keywords\" Toolbox. When you drag a Final Cut Pro Event to this Toolbox (which must only contain a single Project), we will look through all the Titles connected to the clips in the Primary Storyline, read the name of those clips, then create new Keyword Ranges for each of those Titles. We then send that data back into Final Cut Pro automagically.","We've also included a \"Create Titles from Text\" feature in this same Toolbox, that allows you to create a new Final Cut Pro Project which contains a new Title for every line in the Toolbox's text box - along with some additional formatting features, such as adding a prefix, suffix or sequential numbering. This allows you to easily copy and paste text from things like a PDF Script, convert them into Titles, adjust as required, then convert those Titles into Keywords. You can also setup the CommandPost Dock icon so that it automatically sends any dragged Events or FCPXML files directly to this new Toolbox. Thanks for suggesting Knut Hake & Sam Pluemacher! Thanks for testing Vigneswaran Rajkumar!"]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["The \"Shot Data\" Toolbox icon has been updated. Thanks Vigneswaran Rajkumar!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["In Final Cut Pro 10.6.2, Apple renamed the \"Photos and Audio\" menubar item to \"Photos, Videos and Audio\", which broke some automation features, like inserting specific Titles & Generators. This is now fixed. Thanks for reporting Trace Dominguez!","Fixed a bug that could cause a \"invalid order function for sorting\" error in the Debug Console."]},{"i":"commandpost-143","l":"CommandPost 1.4.3"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added the ability to upload directly to Notion from the Shot Data Toolbox. Thanks Vigneswaran Rajkumar!","Added a new Notion Toolbox allowing you to upload the Final Cut Pro Timeline Index and Browser Contents directly to Notion.","Added two new drop-boxes in the General section of CommandPost’s preferences allowing you to set a “Drag & Drop Text Action” and a “Drag & Drop File Action”. This allows you to, for example, drag a Final Cut Pro project directly to the CommandPost dock icon to trigger the Vimeo Toolbox.","Added a preference for “Key Repeat” and “Delay Until Repeat” in the Razer Control Surfaces panel. Thanks for suggesting Ross Batten!","Added button that allows you to copy profiles between Razer devices in the Razer Control Surfaces panel. Thanks for suggesting Ross Batten!","Added additional “Press & Hold” modifier actions. Thanks for suggesting Valerio D'Andrassi and Noé Molnár!","Added actions to control Spotify. We’ve also added a new “Spotify” section in the CommandPost Loupedeck Plugin for easy access.","Added actions to \"Increment/Decrement User Interface Element Under Mouse”. This allows you to hover your mouse over a slider, knob or text-box in Final Cut Pro or DaVinci Resolve (for example), and use a control surface to control its value. We’ve also added a new “macOS: Accessibility” section in the CommandPost Loupedeck Plugin for easy access."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Added missing labels to some Razer Action Groups.","Fixed a bug in the Color Board Angles actions. Thanks for reporting Noé Molnár!"]},{"i":"commandpost-142","l":"CommandPost 1.4.2"},{"i":"improvement","l":"\uD83D\uDD28 Improvement","p":["The Loupedeck Plugin now requires Loupedeck 5.2 or later. The CommandPost Loupedeck Plugin has been updated so that unnecessary \"reset\" actions are no longer displayed in the LoupedeckConfig application - for example, the Cinematic Focus Point action, no longer has a \"press\" action associated with it (as it previously did nothing). This was a bug in the Loupedeck Plugin API that has now been addressed in version 5.2 of their software. Thanks Loupedeck Team!"]},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed a regression that broke the \"Unmount external drives when switching to battery power\" and \"Mount external drives when switching to AC power\" features in the previous release."]},{"i":"commandpost-141","l":"CommandPost 1.4.1"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added support for the Razer Tartarus, Tartarus Pro, Nostromo & Orbweaver Chroma. We'd love to add support for the Tartarus Chroma too, but have been unable to get our hands on this older device as of yet - if you have one that you can donate, let us know!"]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["You can now \"drag and drop\" to re-arrange buttons in the Razer Control Surfaces panel. You can also right-click on buttons to copy, cut and paste buttons.","We've also added a preference to \"Prevent Excessive Thumb Taps\", to workaround issues with the thumb button on older Razer devices where the thumb button becomes too sensitive over time. Thanks for suggesting Ross Batten!","We now cache the Razer devices brightness to improve performance.","Added preference to \"Scan Running Application Menubars on Startup\" and \"Scan the Menubars of the Active Application\", which are now off by default to improve CommandPost's startup time.","We no longer load various Final Cut Pro plugins when Final Cut Pro isn't installed, to improve startup performance.","The CommandPost Workflow Extension for Final Cut Pro is no longer installed if Final Cut Pro is not installed.","The Skype Shortcuts plugin no longer loads if Skype isn't installed.","The Zoom Shortcuts plugin no longer loads if Zoom isn't installed.","We've changed the way the \"Press & Hold\" modifier key actions works for better performance.","CommandPost now defaults to controlling the Final Cut Pro Trial, if the trial is already running when CommandPost starts, even if the full version is also installed. Thanks for suggesting Nathen McEvoy!","Changed the wording from \"Unknown\" to \"Not Installed\" in the Debug Console if the Final Cut Pro version and/or path can't be detected.","Improved the German translation in the Loupedeck Plugin. Thanks Jenny!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed bugs related to the \"Copy Control to All Banks\" and \"Reset Control\" buttons in the Razer Preferences.","Fixed a bug where \"Unlisted & Ignored Applications\" wouldn't work as intended on Razer devices.","Fixed a bug where deleting a Custom User Application in Razer Preferences wouldn't update the user interface correctly."]},{"i":"commandpost-140","l":"CommandPost 1.4.0"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["We've added a new \"Loupedeck Plugin\" that acts as an alternative to our native/direct Loupedeck support - allowing you to access all of CommandPost's Final Cut Pro actions within the LoupedeckConfig application. This is really handy for users that have to jump between Adobe Premiere and Final Cut Pro, for example. All of your macOS Shortcuts macros and Keyboard Maestro macros will also appear in the LoupedeckConfig application automagically. There are also some macOS Spaces actions. Big thanks to the Loupedeck Team for their support - especially Jenny!","Added support for the Razer Orbweaver. Big thanks to Ross Batten for giving us access to the hardware! We hope to add more Razer keyboards in the near future.","We've added a new Final Cut Pro Workflow Extension, which allows us to better control the playhead (which works great with control surfaces - such as the Loupedeck CT wheel). The Workflow Extension will only load when you trigger an action that requires it. When you first load the Workflow Extension it will try and make itself as small as possible and get out of the way - however you can move it to wherever you want, and like all Workflow Extensions its position is saved with your Workspace. There are new actions for \"Move Playhead Forward/Backward\" at different increments. There's no buttons on the Workflow Extension - it's currently simply an interface for us to control the playhead."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Improved the colour accuracy of the Razer Tartarus V2 LEDs.","Fixed a bug in the Resolve Control Surfaces where the \"RELATIVE FINE CONTROL\" jog mode wouldn't trigger the correct jog mode on the hardware."]},{"i":"commandpost-1313","l":"CommandPost 1.3.13"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["We've added a new \"Relative (Fine Control)\" Jog Wheel Mode for the Blackmagic Resolve Keyboards, which uses a different algorithm for more precise control, as some users found the jog wheel too sensitive and hard to navigate when in relative mode. We’ve also added some additional sensitivity values, so you can further fine tune it to your liking. Thanks for your valuable feedback David Manganelli!","We now forcefully update the LED lights on the Blackmagic Resolve Keyboards every 5 minutes to attempt to prevent the device from falling asleep. Thanks for reporting David Manganelli!"]},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed a regression introduced in the previous release which caused applying individual effects, transitions, titles and generators to clips in Final Cut Pro via a CommandPost action to fail unexpectedly. Thanks for reporting Fernando Piñero & Andrew Griffiths!"]},{"i":"commandpost-1312","l":"CommandPost 1.3.12"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["CommandPost now remembers the menubar position if you change it by holding down COMMAND and dragging it to a new location.","In the previous release of CommandPost if you tried to trigger a Final Cut Pro shortcut key that didn't actually have any keys assigned to it with the Final Cut Pro Command Editor, you'd be presented with an error message. This would sometime confuse users - for example, those using a Speed Editor which has the \"Play Rate\" shortcut keys assigned to the jog wheel - but Final Cut Pro doesn't assign anything to the \"Play Rate\" shortcuts by default. To improve this, if CommandPost tries to trigger a shortcut key that you haven't set up in Final Cut Pro, we'll now present you with a macOS Notification, which when clicked, takes you to the relevant Command within the Final Cut Pro Command Editor.","CommandPost now disables support for displaying macOS Shortcut app shortcuts within the Search Console by default. To enable this functionality you must now manually enable it within the Shortcuts preferences panel within CommandPost. We have also added a new setup screen for new users, that allows you to enable shortcuts there. This is to prevent the shortcuts permission box from popping up the first time new users opened the Search Console.","When you add a custom application to the Resolve Keyboards, it now automatically selects that application once added. Thanks for reporting Dávid Szentmiklósi!","We've improved how we cache the Jog Wheel mode on the DaVinci Resolve Keyboards.","Improved the load times of the Resolve, Razer and TourBox Control Surface Panels.","The Speed Editor battery status is now displayed in the preferences panel.","Updated the default Resolve Keyboard layouts so that the JOG banks use menubar actions instead of shortcut key actions to improve performance. This will only change for new users, or if you reset your layout to \"factory default\"."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["If you delete an application, device or everything on the Resolve Keyboard panel, it now resets the \"last application\" if that custom application no longer exists in the preferences file.","CommandPost now correctly determines the Final Cut Pro language when you change it via System Preferences within the Language & Region > Apps section. Thanks for reporting Sam Pluemacher - we had no idea this feature was added to macOS!","System Preferences no longer quits when CommandPost starts up.","CommandPost can now better detect when the Command Set is changed within Final Cut Pro.","Fixed a bug which prevented the Search Console from pre-populating the last action title in the Resolve Keyboard panel."]},{"i":"commandpost-1311","l":"CommandPost 1.3.11"},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug where Effects that contained special symbols in English would not be listed correctly in the Search Console when Final Cut Pro was not in English (i.e. the \"Black & White\" colour effect for Spanish users). Thanks for reporting Javier Beldamu!","Fixed a bug where CommandPost would fail to select the Effects Category when Final Cut Pro was in Spanish, so that when you tried to insert an Effect from the Search Console, it would always use the \"All Video & Audio\" category, making it slightly slower.","Fixed a bug where actions saved in English (i.e. all the default control surface layouts) would fail to trigger when Final Cut Pro was not in English. Thanks for reporting Peter Schroeder!","Fixed a bug where the Search Console would fail to populate properly if Final Cut Pro was in Korean."]},{"i":"commandpost-1310","l":"CommandPost 1.3.10"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["CommandPost now has the ability to read Final Cut Pro's Main Menu Structure directly (i.e. we can read the MainMenu.nib). MASSIVE THANK YOU to my partner-in-crime behind CommandPost, the incredible David Peterson. Whilst this won't really change anything for end users, it means that next time Apple pushes out an update - CommandPost will automatically read the new menubar structure without us having to push out an update. It also means \"Show Duplicate Ranges\" now appears in the \"Menu Items\" action group, not just the \"Menu Items (Scanned)\" action group.","The Search HUD now shows options for \"Original Codecs\" and \"Proxy Codecs\"."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["We can now detect whether or not the timeline is in focus again - fixing various actions, such as \"Set Spatial Conform Type\".","The \"Set Spatial Conform Type\" actions now work correctly when triggered from the Search Console.","The \"Show Horizon\" action now works correctly when Final Cut Pro is in Korean.","We've removed the Touch Bar debugging messages from the Debug Console."]},{"i":"commandpost-139","l":"CommandPost 1.3.9"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["In Final Cut Pro 10.6.2, Apple has changed the file format where they store the main menu structure for Final Cut Pro (from a binary property list to a NIBArchive), and we're currently trying to work out how to read the new format - as it's undocumented, we're not sure how long it'll take us to solve. In the meantime, we've added a temporary workaround where we use the menu main structure from 10.6.1, so that you can continue to use CommandPost with this new release. New menu items (such as \"Show Duplicate Ranges\") will still be available in the Search Console as Command Editor Shortcuts and scanned menu items."]},{"i":"known-issues","l":"\uD83D\uDE2D Known Issues","p":["Currently we can't detect whether or not the Timeline is focussed in Final Cut Pro 10.6.2. This breaks some features such as \"Set Spatial Conform Type\", because we need to determine if you're selecting clips in the Browser or the Timeline - so CommandPost currently just assumes you're working in the browser. We'll investigate a workaround ASAP. If you spot any other Final Cut Pro 10.6.2 issues or bugs, please let us know!"]},{"i":"commandpost-138","l":"CommandPost 1.3.8"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed a regression where CommandPost would error on startup if Final Cut Pro wasn't installed. Apologies to all our users that aren't using Final Cut Pro! Thanks for reporting Matt Dial!"]},{"i":"commandpost-137","l":"CommandPost 1.3.7"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["We now scan the \"additional\" commands in Final Cut Pro. This means there are now keyboard command set actions for \"Next Focus Point\", \"Previous Focus Point\", \"Cinematic Tool\" and \"Cinematic Editor\" (and any future \"additional\" commands Apple adds in the future)."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a rare bug where sometimes CommandPost shortcuts for Final Cut Pro would not activate if you started CommandPost with Final Cut Pro already running.","The \"Insert Action\" button in the Snippets Editor now correctly formats code with non-standard characters, like the command icon you see on your keyboard. Previously inserted actions still work - they just look a bit weird. Thanks for reporting Marc Bach!","You can now use the full range of LED colours on the Razer Tartarus V2 when using custom colours. Thanks for reporting Leonardo Franke!","Fixed a bug which prevented CommandPost from detecting when Final Cut Pro was playing or stopped. We're hopeful this might fix the Scrolling Timeline Feature for some users. Thanks for reporting Martin Lohmann, Wizi Roy Shmueli and Javier Olvedo!"]},{"i":"commandpost-136","l":"CommandPost 1.3.6"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["If you add a Custom Application in the Blackmagic Resolve Speed Editor or Editor Keyboard panel, the Custom Applications menubar items will now correctly appear in the Search Console. For example, if you add Hedge as a custom application, all of its menubar items will now appear in the CommandPost Search Console (assuming Hedge is running), so that you can trigger them from the Speed Editor or Editor Keyboard. Thanks for reporting Scott Simmons!"]},{"i":"commandpost-135","l":"CommandPost 1.3.5"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed a bug where the \"Insert Action\" button in the Snippets Preferences panel could fail if the action code contained certain characters. Thanks for reporting Marc Bach!"]},{"i":"commandpost-134","l":"CommandPost 1.3.4"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["The \"Long Press\" action on the Blackmagic Keyboards now happens after X number of seconds, rather than on the release of the button. Thanks for suggesting Marc Bach!","If you do a \"Long Press\" action on the Blackmagic Keyboards, a seperate release action can now trigger when you release the button.","You can now customise the \"Long Press\" duration for the Blackmagic Keyboards. It defaults to 0.4 seconds.","We've added a new preference to the Blackmagic Keyboards panel called \"Change Bank on Hardware When Changing Here\". When enabled, if you change the bank in the preferences dropdown, it will change on the hardware too, so you can preview LED changes.","The \"Last Bank\" action now takes into account any bank changes causes by changing the bank via the Preferences dropbox (assuming \"Change Bank on Hardware When Changing Here\" is enabled).","Added a new preference to Blackmagic Keyboards panel called \"Display Message When Changing Banks\" to turn off the overlay that's displayed when changing banks."]},{"i":"commandpost-133","l":"CommandPost 1.3.3"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added support for the DaVinci Resolve Editor Keyboard.","Added \"absolute\" Jog Wheel support to the DaVinci Resolve Speed Editor.","Added \"long press\" actions to the DaVinci Resolve Speed Editor.","Added actions to scroll the Final Cut Pro timeline contents horizontally.","Added actions to \"Jump to Next/Previous Frame\", which also takes into account a SHIFT key modifier to jump 10 frames instead of 1.","Add actions to trigger Search Console specifically for Final Cut Pro Effects, Titles, Transitions and Generators. Thanks for suggesting Marc Bach!","Added an action to go back to the \"last\" DaVinci Resolve Keyboard bank."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["We've updated the DaVinci Resolve Speed Editor layout to better demonstrate CommandPost's functionality. If you're already using CommandPost, you'll need to reset your layout to see these changes.","Improved the reliability of virtual keyboard presses on macOS Monterey & Final Cut Pro 10.6.1.","Improved the image quality of the Speed Editor image in the interface. Thanks for reporting Archetyped!","Improved how we handle LEDs on the Speed Editor. LEDs are now all turned off when your computer is put to sleep, Speed Editor support is disabled, or you quit CommandPost.","CommandPost now ignores button presses and jog wheel movements if DaVinci Resolve is running. DaVinci Resolve is now greyed out in the Speed Editor & Editor Keyboard drop-downs.","Increased Tangent Favourites from 50 to 200. Thanks for suggesting Marc Bach!","Added a Search Console toolbar icon for DaVinci Resolve keyboard banks.","Added ability to reset to either completely empty or factory default for all the reset buttons on the DaVinci Resolve Keyboard panel.","The \"Insert Action\" button in the Snippets Preferences now inserts more simplified code, and handles slashes better. Thanks for reporting Marc Bach!","We added a new global Lua function to more easily trigger actions: cp.triggerAction(handler, action)."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug in the DaVinci Resolve Keyboard panel where resetting an action would reset the entire button. Thanks for reporting Marc Bach!","Changing Speed Editor banks now correctly shows any custom bank labels on the on-screen message.","Fixed a bug where Final Cut Pro commands didn't show an icon in the Search Console.","Fixed bugs in Distort Y actions. Thanks for reporting Flavio Saramin!","Fixed a bug where the Snippets window never remembered the last Snippet."]},{"i":"commandpost-132","l":"CommandPost 1.3.2"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["\"Automatically Switch Applications\" for the Blackmagic Control Surfaces is now enabled by default on fresh installs.","We've changed the default Speed Editor layout to turn all the LEDs on in the \"Unlisted & Ignored Applications\" layout so you can more easily see it's working. The Jog Wheel now acts as a mouse scroll wheel in this layout by default too.","We've changed the wording on the DaVinci Resolve Control Surface panel to make it clear that \"DaVinci Resolve will override CommandPost when running\" and \"we recommend using a wired connection\"."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug where the Speed Editor, Razer and TourBox preferences pages could appear incorrect if certain Safari Extensions are installed. Thanks for reporting!","You can now change the LEDs for the CAM buttons on the Speed Editor."]},{"i":"commandpost-131","l":"CommandPost 1.3.1"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Another attempt to fix an uncommon Touch Bar related crash that affects a very small number of users."]},{"i":"commandpost-130","l":"CommandPost 1.3.0"},{"i":"important-changes","l":"⚠️ Important Changes","p":["CommandPost has dropped Mojave support in this release. We now only support macOS Catalina, Big Sur & Monterey. If you're stuck on Mojave you can still use ### CommandPost 1.2.16."]},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added support for the Blackmagic Resolve Speed Editor. This wouldn't be possible without the genius work from Sylvain Munaut. Special thanks to Morten Bentsen, Håvard Njåstad and Sondre Tungesvik Njåstad.","Added actions to Prevent Mac from Sleeping (this was previously only available via the menubar). Thanks for suggesting Undertaker01!","Added option to invert the timeline mouse zoom feature in Final Cut Pro, as well as adjust the sensitivity. Thanks for suggesting dutchct!","Added actions to control the volume slider in the Final Cut Pro Inspector. Thanks for suggesting Olm Ek!","Added Timeline Scroll presets to Monogram Creator."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["The Stream Deck preferences panel has been completely re-designed to more closely match our Loupedeck panels - allowing for better Drag & Drop support, and right-click contextual menus. You can now programatically generate icons. Thanks for suggesting James Peach!","The Preferences and Control Surfaces toolbars now look much better on macOS Monterey.","You can now assign shortcut keys without a modifier key. This is useful is you want to assign an action to the F1 key for example. Thanks for suggesting Florian Duffe!","You can now assign any CommandPost action within the \"All Applications\" Keyboard section.","The various Loupedeck Control Surfaces panels are now accessible from a single Loupedeck icon, which triggers a popup menu.","We've added an option to the Loupedeck CT and Live to \"Preview Selected Application & Bank on Hardware\", so that you can visually check how a layout looks without leaving the CommandPost interface.","Loupedeck devices running the older firmware, now more reliably wake form sleep. Thanks for reporting Knut Hake!","Added Catalan translation. Thanks for suggesting Lluís Bartra!"]},{"i":"removed","l":"❌ Removed","p":["The Compressor Watch Folders feature has been removed, as this can now be achieved natively in Compressor."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["\"Enable Loupedeck Support\" now appears correctly in the Search Console.","Allow copying to \"Unlisted & Ignored Applications\" in Control Surfaces panels. Thanks for reporting danielsti!","Fixed a bug related to the Final Cut Pro Libraries List View that prevented the HUD Batch Rename tool from working. Thanks for reporting Florian Duffe!","Fixed a bug that broken any actions that used Final Cut Pro Audio Components. Thanks for reporting Daniel Stiefelhagen!","Fixed a bug where Timeline Batch Export would fail to close the \"Go to the folder\" prompt on macOS Monterey. Thanks for reporting Kevin Luk!","Fixed a bug which prevented CommandPost from detecting the correct Timeline Title in 10.5.4 and above.","Fixed a potential Lua error in our Snapshot code.","Fixed a potential Lua error in the \"Ignore Card\" feature. Thanks for reporting Jack Ohrman!","If you added a custom application to the Loupedeck Preferences (i.e. Logic Pro X) and turned off \"Automatically Switch Applications\", there was no actions for switching to Logic Pro X. This has now been fixed. Thanks for reporting Eric Badura!","Skimming is now disabled when doing a Timeline Batch Export to improve reliability. Thanks for reporting Kevin Luk!","The \"Report Final Cut Pro Bug to Apple\" feature now works on Apple Silicon.","The Vimeo Toolbox now correctly handles both the \"Username\" and \"Name\" headers in the CSV. Thanks for reporting Ché Baker!","TourBox Devices now work correctly on macOS Big Sur & Monterey. Thanks for reporting Brett Sherman!","We now check that the default Timeline Batch Export destination exists in the menubar before commencing. This fixes a bug where the Default Destination name changed between Final Cut Pro versions.","We've added a bandaid solution to HOPEFULLY solve crashes related to the Touch Bar.","You can now right-click on text boxes in the CommandPost Preferences panels, Control Surface panels and Final Cut Pro HUD."]},{"i":"commandpost-1216","l":"CommandPost 1.2.16"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added action to \"Edit New Title\" and \"Edit New Lower Thirds\" which adds a new title in Final Cut Pro, and highlights the text field so that you can instantly start typing. Thanks for suggesting Hugh Nagle!","Added a Contrast control for the Color Wheels in Final Cut Pro for Monogram users. Thanks for suggesting Rob Mervin!","Added Timeline Zoom in Final Cut Pro for Monogram users. Thanks for suggesting Sven Pape!","Added clip Volume control in Final Cut Pro for Monogram Users. Thanks for suggesting Drew Boyd!","Added Timeline Clip Height in Final Cut Pro for Monogram users.","Added actions to change Razer Backlight Mode & Brightness, so you can trigger these from any control surface, HUD or Search Console.","Added action to \"Send Vimeo CSV to Final Cut Pro\", so you can trigger this from any control surface, HUD or Search Console.","macOS Shortcuts are now available on the Search Console for macOS Monterey users."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["The Chinese (Simplified) translations have been improved. Thanks Charles Liu!"]},{"i":"commandpost-1215","l":"CommandPost 1.2.15"},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["The Vimeo Toolbox can now handle CSV files where notes span over multiple lines. We also now ignore any lines in the CSV that don't have any notes. The error messages have also been improved. Thanks for reporting Scott Simmons!","Fixed a bug which prevented backlight effects from working on a Razer device. Thanks for reporting Marwan Bakr!","Fixed a bug which could cause the mouse scroll wheel or Trackpad to stop working after using the scroll wheel on a Razer device. Thanks for reporting Marwan Bakr!","Fixed bug in the FCPXML Titles Toolbox and Frame.io to Markers action where CSV files would fail to load.","Fixed bug where CommandPost would incorrectly expect all FCPXML files to be the latest v1.10 format."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["CommandPost now loads slightly faster when a Monogram device is connected."]},{"i":"commandpost-1214","l":"CommandPost 1.2.14"},{"i":"new-feature","l":"\uD83C\uDF89 New Feature","p":["Added a new Toolbox which converts Vimeo Review CSV files into markers in Final Cut Pro X. Thanks for suggesting Gary Roll, Adam Olivero & Scott Simmons!"]},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Prevented an error that could occur if you open the Tangent Control Surfaces panel without Tangent Hub/Mapper installed."]},{"i":"commandpost-1213","l":"CommandPost 1.2.13"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed a bug which prevented the Search Console from showing on macOS Monterey 12.0.1. Thanks for reporting Mikhael Pacheco!"]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Added support for FCPXML v1.10 and FCPXML Bundles."]},{"i":"commandpost-1212","l":"CommandPost 1.2.12"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["The user interfaces in CommandPost (Preferences, Control Surfaces, Watch Folders & Toolbox) now show vertical scrollbars to allow you to scroll the panels, if your screen resolution is too small for the panel, such as on the Apple Silicon 13-inch MacBook Pro. Thanks for reporting Jocke Selin!"]},{"i":"commandpost-1211","l":"CommandPost 1.2.11"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added support for the Razer Tartarus V2. You have full control over the LED backlights, and can assign the buttons and scroll wheels to any CommandPost actions. This all happens in the user space - no need for administrator privileges or kernel extensions.","Added action to \"Mark All Clips\" in Final Cut Pro. Adds a marker to all selected clips under the playhead, or all clips if only one clip is selected.","Added action to \"Select All Even/Odd Clips In Timeline\" in Final Cut Pro. Thanks for suggesting Rafael Gamboa!","Added action to \"Copy Selected Clip Duration to Pasteboard\" in Final Cut Pro. Thanks for suggesting Vigneswaran Rajkumar & Rizvi Haider Rabby!"]},{"i":"improvement","l":"\uD83D\uDD28 Improvement","p":["You can now access all the individual Preference, Control Surface, Toolbox & Watch Folder panels directly from the menubar. This is a workaround for Big Sur users, where all the Control Surfaces don't fit on the toolbar, and sometimes the toolbar doesn't display a \"more\" button."]},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["The \"Select\" button for \"Use Snippet to Set LED Color\" in the Loupedeck CT and Live Preferences panel now opens a Search Console which only displays Snippets."]},{"i":"commandpost-1210","l":"CommandPost 1.2.10"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed a bug which caused Transitions actions within Final Cut Pro to fail to apply if they didn't have a theme name. Thanks for reporting Dimitar Maratilov!"]},{"i":"commandpost-129","l":"CommandPost 1.2.9"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["The \"Shot Data\" Toolbox has been improved. The duration is now always in the hh:mm:ss format. Fixed a bug where the CSV output would be broken if a field is blank/empty in the Motion Template. Added a column in the CSV for \"Shot ID\" and \"Image Filename\". Images are now converted to PNG files for consistency. Thanks for your feedback Vigneswaran Rajkumar!","\"Rendering During Playback\" is now disabled when performing Batch Export to improve performance and reliability. Thanks for the suggestion Mitchell!","Updated translations. Thanks to everyone who submitted fixes!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug when applying transitions in cases where there's multiple transitions with the same name. We now properly take into account the theme name as well. Thanks for reporting Selina Tannenberg!","Fixed a bug in the Loupedeck Manager, which could prevent changes to Loupedeck layouts from saving correctly. Thanks for reporting Knut Hake & Kuba Rok!","Fixed a bug that would cause CommandPost to fail to load if you were running an application that had no application bundle identifier. Thanks for reporting Helder S Ribeiro!","Fixed a bug that would cause actions that changed the speed of clips in Final Cut Pro (such as \"Speed to -50%\") to fail. Thanks for reporting Prawit Sarathamwuthikul!","Fixed some potential errors with MIDI banks. Thanks for reporting Marco Malaca!"]},{"i":"commandpost-128","l":"CommandPost 1.2.8"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed a bug where CommandPost might not list the correct Share Destinations in the Timeline Batch Export tool if running Final Cut Pro 10.5 or later. Thanks for reporting Chris Walton & David Kuckhermann!"]},{"i":"commandpost-127","l":"CommandPost 1.2.7"},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug where CommandPost Overlays in Final Cut Pro wouldn't work correctly in some specific dual screen custom Workspace layouts. Thanks for your awesome assistance tracking this down Joseph Linaschke!","Fixed a bug in the CommandPost download DMG, where the \"Applications\" alias was pointing specifically to \"/Macintosh HD/Applications\" instead of \"/Applications\". Thanks for reporting Iain Anderson!"]},{"i":"commandpost-126","l":"CommandPost 1.2.6"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added actions to trigger virtual mouse wheel actions. Thanks for suggesting Mikhael Pacheco!","Added actions to trigger virtual Trackpad gestures."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["The feedback form will now always appear on top of other windows, even if the Debug Console has \"Always On Top\" enabled. Thanks for suggesting William Dalrymple!","Added a new Touch Bar icon for Audio Fade In & Out. Thank Dani Ditu!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug which prevented the Colour Temperature controls from working on Tangent Panels. Thanks for reporting 천동주!"]},{"i":"commandpost-125","l":"CommandPost 1.2.5"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added option to \"Ignore Every Second P1 to P8 Wheel Command\" and \"Ignore Every Second Control Dial Command\" in the Loupedeck+ Preferences panel. This is because on some models of the Loupedeck+ the P1-P8 wheels and/or the Control Dial will trigger two actions for every hardware \"click\". Thanks for reporting Davvi!","Added a search bar to allow you to filter plugin in the Plugins Preferences panel. Thanks for suggesting Shahin Shokoui! We've also added the ability to open each plugin in your preferred Text Editor, and have added an explanations of how plugins work at the top of the panel."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["The Jog & Nudge actions for Final Cut Pro in Monogram Creator now make sure the timeline is in focus prior to moving the playhead. Thanks for suggesting Andy Hayes!","The ability to attach a screenshot when sending feedback is now disabled by default for your privacy protection. Thanks for suggesting William Dalrymple!","The feedback form no longer tries to populate your full name and email from the Contacts app, to avoid any privacy concerns. Thanks for suggesting Joseph Linaschke!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed potential bug when using a secondary monitor in Final Cut Pro. Thanks for reporting Dale Ryan Leckie!","Fixed potential bug when CommandPost is trying to detect the timeline in Final Cut Pro.","Fixed potential bug when triggering certain menu items in Final Cut Pro. Thanks for reporting Milos Jokic!"]},{"i":"commandpost-124","l":"CommandPost 1.2.4"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added a preference to disable User Interface Animations within Final Cut Pro. This will allow you to disable, for example, the animated fade effect of the \"Custom Speed\" window and the timeline Appearance popup when they open and close.","Added an action to copy the Final Cut Pro Viewer contents to the Pasteboard. Thanks for suggesting Alex Gollner!","Added an action to \"commit multicam\" within Final Cut Pro using automation. It’s a bit clunky, but it works. We essential “Reveal in Angle Editor”, then “Reveal in Browser”, mark an in-point, then connect that clip back on top of the timeline. Essentially a macro, like Timeline Batch Export. One day I hope to use the Pasteboard instead to make it a one click thing. Thanks for suggesting Knut Hake & Sam Pluemacher!","Added actions to control the Anchor controls within the Final Cut Pro Video Inspector.","Added actions to reset Compositing, Crop, Distort and Transform within the Final Cut Pro Video Inspector. Thanks for suggesting Nariman Gafurov!","Added a \"Retime to Duration\" action for Final Cut Pro. This will trigger a \"Custom Speed\" action and select the \"Duration\" radio button, so that you can then just type in the new duration, rather than having to click it manually with the mouse."]},{"i":"changes","l":"\uD83D\uDCAA Changes","p":["The wording on Monogram Preferences panel has been changed. You can now use the public version of Monogram Creator 4.1.11 or later, as opposed to just the beta and alpha releases.","We now disable certain user interface animations within Final Cut Pro when triggering CommandPost actions, so that the actions are more responsive."]},{"i":"commandpost-123","l":"CommandPost 1.2.3"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added support for the Loupedeck CT and Loupedeck Live beta firmware, which changes the connection method from a virtual ethernet port to a virtual serial port.","Added support for multiple Loupedeck CT and multiple Loupedeck Live devices at the same time. Each device can now have its own unique layout.","Added actions for triggering virtual mouse clicks. Thanks for suggesting Chase Guidroz!"]},{"i":"changes","l":"\uD83D\uDCAA Changes","p":["The setup screen no longer refers to the \"satellite icon\". Thanks for reporting Shahin Shokoui!"]},{"i":"commandpost-122","l":"CommandPost 1.2.2"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Improved the Search Console so that, for example, if you open it when setting up a layout for Final Cut Pro in the Loupedeck CT preferences, it now shows Final Cut Pro actions by default - but you still have access to all the other application actions by using one of the toolbar icons, or right-clicking on the Search Console to change which Action Groups you want to filter.","Added a preference to the Loupedeck CT/Live Preferences to \"Automatically Apply Icon From Action\". Thanks for suggesting Eric Badura!","We now automatically add a text label based on the action title, when you assign an action in the Loupedeck CT/Live Preferences.","Added an action to \"Reset Color Wheel\" in Final Cut Pro, which resets all the controls for the selected color wheel. Thanks for suggesting Matthew H Green!","Added the ability to delete custom applications from Loupedeck CT/Live preferences. Thanks for reporting Eric Badura!","Improved the reliability of the Final Cut Pro Color Wheel Tint Controls on Tangent Panels. Thanks for reporting David Brown!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug where enabling then disabling a Loupedeck CT/Live vibration control wouldn't actually disable it, requiring you to reset the whole control to get rid of the vibration. Thanks for reporting Eric Badura!","Fixes some mistakes in the German language translation for CommandPost. Thanks for reporting Eric Badura!","Fixed a bug where resetting the Color Wheels on a Tangent Panel would not work correctly. Thanks for reporting Richard Guinand!","Fixed a bug in our Final Cut Pro Angle Editor API. Thanks for reporting Sam Pluemacher!"]},{"i":"commandpost-121","l":"CommandPost 1.2.1"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["When you click an action select button in the Loupedeck CT/Live Preferences panel, if there was previously an action already assigned, this name will now be automatically populated in the Search Console.","When you click an action select button in the Loupedeck CT/Live Preferences panel, the selected action groups will now default to whatever application you currently have selected in the Loupedeck CT/Live Preferences. For example, if you're changing the layout for TextEdit, which you click an action select button, only the actions for TextEdit will appear by default. However, you can still access all the other application actions via the toolbar, or the right-click menu for complete control."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug in the Loupedeck CT/Live manager, where resizing some legacy icons could fail, preventing the Loupedeck screens from updating correctly. Thanks for reporting Eric Badura!","Fixed some user interface issues in the Loupedeck CT/Live Preferences when the interface is in Dutch. Thanks for reporting Jeroen van Amerongen!","The default Loupedeck Live layout incorrectly had actions for the Loupedeck CT, which just made things very confusing. This has now been corrected."]},{"i":"commandpost-120","l":"CommandPost 1.2.0"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["We have a new dock and menubar icon by the incredible Matthew Skiles. Woohoo!","We have also added the option to select 5 new built-in menubar icons, or select any image from your machine to use as a menubar icon. You can also now customise the menubar text label for full control.","We now support the Monogram and Palette control surfaces. CommandPost integrates closely with the Monogram Creator, so once you enable Monogram support in CommandPost, you can jump into Monogram Creator to set up your layout. It also supports Automatic Profile Switching. Monogram support requires the latest beta or alpha builds of Monogram Creator - it won't work on the public release yet. Any ideas, comments, suggestions welcome!","You can now use Lua Snippets to programatically generate Loupedeck CT/Live icons, and also define the LED color. With some simple lines of code, you can now make your Loupedeck device appear exactly how you want it. There's a new option in the preferences to adjust the refresh frequency (defaults to 1 second).","Added option to \"Resize Images on Import\" and set a custom \"Image Background Colour on Import\" in the Loupedeck CT/Live Preferences panel.","Added ability to customise the font, font size and colour of text labels in the Loupedeck CT/Live Preferences panel.","Added the ability to consolidate images when using the Shot Data Toolbox. This means if you have any images \"connected\" to the Shot Data Motion Template in your timeline, they'll be copied to the same location as the CSV export. Thanks for the suggestion Vigneswaran Rajkumar!","Added actions to control the individual red, green and blue parameters for the Color Wheels in Final Cut Pro. Thanks for suggesting Eric Badura!"]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["We've renamed \"All Applications\" to \"Unlisted & Ignored Applications\" in the Control Surfaces panels to better describe what this option does.","We've improved how the Search Console searches and orders the results.","Updated all the translations, and improved the Lua documentation.","Various user interface improvements in the Preferences and Control Surfaces windows."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug in both the Shot Data Toolbox, Save Browser Contents to CSV and Save Timeline Index to CSV. Thanks for reporting Aaron Villa!","Various improvements and bug fixes in the Loupedeck CT/Live Preferences panels - especially in regards to dragging and dropping icons. Thanks to Eric Badura for all your testing and ideas!"]},{"i":"commandpost-115","l":"CommandPost 1.1.5"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["If you assign an action to a Loupedeck CT/Live Touchscreen button that has an image in the Search Console, that image will now be automatically applied to the button. For example, if you apply the action to launch Disk Utility to a Loupedeck CT/Live Touchscreen Button, the Disk Utility icon will be automatically applied. Thanks for suggesting Eric Badura!","You can now select Applications (in addition to image files) when you click the Image Drop Zone in the Loupedeck CT/Live Control Surfaces panel."]},{"i":"commandpost-114","l":"CommandPost 1.1.4"},{"i":"changes","l":"\uD83D\uDCAA Changes","p":["On a fresh installation, CommandPost will no longer ask you if you want to copy the CommandPost application to your application folder. Instead, you should manually copy CommandPost to the application folder via the Applications shortcut in the DMG package. This has been changed to get around issues where people want to install CommandPost in their user-specific application folder, or when there's permission issues trying to copy CommandPost across, which can happen on some Big Sur installations."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed the \"Zoom to selection\" action in Final Cut Pro. Thanks for reporting Jeffrey Linneman!","Fixed the \"Save Current Frame\" option in the Final Cut Pro Viewer Overlay popup. Thanks for reporting David Brown!"]},{"i":"commandpost-113","l":"CommandPost 1.1.3"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added actions that adjust the Position controls in Final Cut Pro's inspector in reverse using MIDI. Thanks Joe Dull!","Added an action to \"Toggle Opacity Fade Handles in Video Animation Popup on Selected Clips\". Thanks for the suggestion Ripple Training! Unfortunately, due to a bug in Final Cut Pro's Accessibility API this doesn't work for clips within a secondary storyline container.","Added preferences to change the Search Console width and height. This can be found when you right click on the Search Console. Each individual Search Console has its own unique width and height (i.e. the Search Console in Final Cut Pro can be different than in After Effects)."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["DaVinci Resolve & After Effects Tangent support is now disabled by default on a fresh install.","Updated the Shot Data Motion Template, so that it works with all common aspect ratios. Thanks Iain Anderson!","We've removed the EULA from the CommandPost DMG, and updated the tag-line to match the website.","We've adjusted the window sizes on Big Sur so there's not as much wasted space at the bottom of the windows.","The Shared Pasteboard will no longer prompt you on CommandPost's startup if the shared folder is not accessible. This means that if you're using something like PostLab Drive, the Shared Pasteboard will now work when the drive is connected, and you won't get notified if the drive becomes disconnected. Thanks for reporting Dale Ryan Leckie!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug where the menu bar actions had the wrong menu path in the Search Console subtext.","Fixed a bug where you will be asked for Accessibility Permissions straight away on a fresh install. Thanks for reporting Iain Anderson!"]},{"i":"commandpost-112","l":"CommandPost 1.1.2"},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug that could cause the hue control in the Final Cut Pro Colour Wheels to change its value to 90 degrees when CommandPost first loads, if the Colour Wheel is active on a clip. Thanks for reporting Valerio D'Andrassi."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["The Shot Data Motion Template has been updated. Thanks Vigneswaran Rajkumar!"]},{"i":"commandpost-111","l":"CommandPost 1.1.1"},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["We've added some caching to dramatically increase the responsiveness of control surfaces, such as the Loupedeck CT. This has massive improvements for controlling the Color Wheels with the Loupedeck CT Touch Screen, for example."]},{"i":"new-actions","l":"\uD83C\uDD95 New Actions","p":["We've added new actions to control the Final Cut Pro Color Board, by increments of 1, 2, 3, 4, 5 and 10. They are all contained within their own Action Group called \"Color Board\" on the Search Console. Thanks for suggesting Eric Badura!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed the Hue controls on Tangent Panels. Thanks for reporting Robert J. Bradshaw!","Fixed an error that could occur randomly when refreshing Loupedeck devices. Thanks for reporting Eric Badura!","Some actions that used popup menus (such as \"Show Horizon\") weren't working correctly. This is now fixed. Thanks for reporting Adam Terlanda!","Some fields weren't being correctly exported in the Shot Data Toolbox Utility. This is now fixed. Thanks for reporting Vigneswaran Rajkumar!","Fixed a bug which cause a MIDI error when launching ### CommandPost 1.1 or later for the first time. Thanks for reporting Scott Dodson!","Fixed a bug where Stream Deck settings weren't migrated from ### CommandPost 1.0.6 (or earlier) to 1.1 (or later). The Final Cut Pro and All Applications settings are now automatically migrated to the Stream Deck Unit 1."]},{"i":"commandpost-110","l":"CommandPost 1.1.0"},{"i":"-control-surfaces-support","l":"\uD83C\uDF9B Control Surfaces Support","p":["Control Surfaces have been moved out of Preferences into their own window.","Added Loupedeck (original), Loupedeck CT and Loupedeck Live support.","Added Stream Deak XL and Stream Deck Mini support.","Added TourBox support.","Added placeholder Control Surface panels for Monogram and Gamepad, with an explanation of how to use these control surfaces with CommandPost until we add built-in support.","MIDI, Loupedeck & Stream Deck Preferences panels now support Custom Applications.","AudioSwift now correctly works with CommandPost's MIDI functionality. Thanks for reporting Nigel Rios!","Added Skype, Microsoft Teams, Zoom, Disk Utility, System Preferences and TextEdit to the default Control Surfaces application drop-down lists. However, currently there is only basic keyboard shortcut actions for Skype.","Tangent panel support has been re-engineered to support multiple CommandPost applications within Tangent Mapper (i.e. you can now have a completely seperate Tangent Mapper layout for Final Cut Pro and DaVinci Resolve). Better support for DaVinci Resolve will come in a future beta - this release it just laying the foundations."]},{"i":"toolbox-utilities","l":"\uD83E\uDDF0 Toolbox Utilities","p":["The FCPXML Titles Processor allows you update the titles within a FCPXML, based on new data from a CSV file. This utility was commissioned by Connor Eberhart.","Shot Data is new specialised Toolbox utility that allows you to import a FCPXML which contains one or more Shot Data Titles in a timeline, and converts the data from these Motion Templates into a single CSV file for use in other applications. This feature has been commissioned by Vigneswaran Rajkumar for his upcoming feature film."]},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added non-keyboard shortcut actions for Final Cut Pro Browser Clip Height & Browser Duration.","Added speed rate actions for 40, 50, and 200.","Added actions to increase and decrease display brightness.","Added actions for adjusting opacity in Final Cut Pro.","Added actions for Filmstrip & List Mode in the Final Cut Pro Browser.","Added a Contrast action for Final Cut Pro which adjusts shadows & highlights brightness at the same time.","Added actions for Timeline Zoom (using the Appearance Popup). Thanks for suggesting Prescott Van Leer!","All your Keyboard Maestro Macros are now available in the Search Console as actions.","Added initial support for Adobe After Effects. There are now actions for each individual effect in After Effects, as well as actions for all the shortcut keys and menubar items.","Added actions for Zoom keyboard shortcuts. Thanks for your assistance Jonathan Zuck!","CommandPost can now generate menu bar actions for all Custom Applications.","Added an option to create Captions when using the Text To Speech feature in Final Cut Pro. Thanks for the suggestion Vigneswaran Rajkumar!","Added actions that allow you to \"emulate\" a Tangent Element panel in DaVinci Resolve. This feature requires Tangent support to be enabled, and at least one physical Tangent device to be connected to your machine (i.e. a Tangent Ripple). This means you can now use Tangent Mapper to customise your DaVinci Resolve layout for any Tangent panel, as well as trigger Tangent actions from any other control surface or shortcut key (i.e. you can control a colour wheel from a Loupedeck CT or TourBox). It also means you can control DaVinci Resolve from a Tangent Arc or CP200.","Added a Contrast Color Wheel control to Tangent Mapper. Thanks for suggesting Von Jackson!"]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["\"Sections\" in the Search Console has been renamed to \"Show Action Groups\", and is now grouped by application.","\"Select Clips Forward/Backwards\" actions now selects clips with speed handles.","Actions that trigger virtual keyboard presses now take into account any modifier keys triggered by the \"Press and hold Modifier Key\" actions. Thanks for reporting Flavio Saramin!","Added more Touch Bar icons. Thanks Daniele Di Tuccio!","Added option to enable/disable all draggable guides in Final Cut Pro Viewer Overlay.","Added relative MIDI actions for controlling the Final Cut Pro Colour Board. Thanks Nigel Rios!","Browser Playhead Highlight now follows playhead when visible.","Changed the way we trigger shortcut keys for better performance.","CommandPost now uses Lua 5.4.","HUD now watches for Viewer resizing.","Improved the \"Relative A\" MIDI Controls for the Color Board & Color Wheels, for use with AudioSwift (and other MIDI devices).","Improved the method we detect \"Screen Recording\" permissions on macOS Catalina & Big Sur.","Improved the MIDI Controls for Colour Wheels, so that you can use both the horizontal and vertical actions at the same time. This allows you to use the controls smoothly in AudioSwift using X/Y mode. Thanks for reporting Nigel Rios!","Improved the performance of the Video Inspector actions.","Recompiled CommandPost to natively support Apple Silicon.","Removed unnecessary \"Failed to cache User Effects Presets” debug message in Plugin Scanner.","The \"Text to Speech\" feature has been re-designed and improved.","The Search Console now loads faster, and displays a \"loading\" message when the contents of the Search Console is still populating. We've also adjusted the way the Search Console orders its results to improve usability.","Timeline Batch Export now correctly handles clips with speed handles visible.","We now just play an error sound instead of showing a dialog box when a menubar action cannot be triggered. Thanks Knut Hake!","We now use Sentry instead of Firebase Crashlytics for tracking crashes.","We've made lots of changes and improvements to our underlying Final Cut Pro X API. These changes should make writing your own Lua Snippets a lot more simple and easy to understand.","You can now use a velocity value for the \"Note Off\" and \"Note On\" MIDI commands. The velocity is also now detected and filled out in the MIDI Preferences panel when you use the \"Learn\" button. Thanks Nigel Rios!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug in MIDI Timeline Scroll action.","Fixed a bug in the \"Press and hold\" modifier actions for CONTROL, OPTION and COMMAND. Thanks for reporting Knut Hake!","Fixed a bug in the Text to Speech function and Media Watch Folders where certain non-alphanumeric characters in filenames could cause the functions to fail. Thanks for reporting Vigneswaran Rajkumar!","Fixed a bug in the Timeline Batch Export tool, where sometimes CommandPost could fail to change the destination directory.","Fixed a bug that could cause certain items to not appear in the Search Console, due to a \"Share Destinations\" folder not existing on some machines. Thanks for reporting Peter Moss!","Fixed a bug that would cause an error if you tried to Restore a Browser Layout that wasn't previously saved. Thanks for reporting Gábor Kertai!","Fixed a bug where a deleted Media Watch Folder would reappear when you restarted CommandPost. Thanks for reporting Erik Lathouwers, Matt Steeves & Jiří Fiala!","Fixed a bug where Colour Wheel actions wouldn't not automatically change to the Colour Wheel Inspector if you were on the Colour Curves. Thanks for reporting Prescott Van Leer!","Fixed a bug where the \"Leave Files in Place\" menubar item tick was incorrectly reversed. Thanks for reporting Mark Westcott!","Fixed a bug where the \"Make Pasteboard Text Uppercase/Lowercase/Camelcase\" actions would not affect certain characters such as \"å\". Thanks for reporting Eivind Lie Nitter!","Fixed a bug where the Search Console was incorrectly case sensitive.","Fixed a bug which prevented Color Board controls from working in some newer versions of Final Cut Pro when the interface was in German. Thanks for reporting Eric Badura!","Fixed a bug which prevented Color Wheels from opening correctly in the Final Cut Pro Inspector when you moved a Tangent wheel or knob.","Fixed a bug which prevented MIDI commands from applying correctly if you manually entered them in the MIDI Preferences panel (as opposed to using the \"Learn\" button). Thanks Nigel Rios!","Fixed a bug which prevented the individual \"Play\" and \"Pause\" actions from functioning. A better description for these actions has also been added to the Search Console, so that it's clearer to understand their purpose (i.e. the play button only plays - it won't stop playback). Thanks for reporting Prescott Van Leer!","Fixed a bug with the Jog/Shuttle control for Tangent Panels in Final Cut Pro. Thanks for reporting Vigneswaran Rajkumar!","Fixed bug in Final Cut Pro Crop Bottom Action.","Fixed bug in Notes HUD panel.","Fixed bug in Search Console where toggling “Search Subtext” wouldn’t take affect until the Search Console was closed and re-opened.","Fixed bug where double quotation marks in Snippet names prevented the Snippets from being editable.","Fixed bug where the Effects & Transitions search box contents would not be restored correctly after applying an effect or transition via an action.","Fixed bug which prevented the \"Clear\" buttons in the Loupedeck+ preferences panel from working.","Fixed Touch Bar support on 16-inch MacBook Pro."]},{"i":"commandpost-106","l":"CommandPost 1.0.6","p":["\uD83C\uDF89 New Feature","Improved the Batch Rename HUD. You can now add sequential numbers to clip names. Thanks for the suggestion Vigneswaran Rajkumar! You can also process clip names with custom Lua code, giving you the ultimate renaming freedom."]},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixed bug in \"Color Wheel - Midtones - Brightness - Down\" actions. Thanks for reporting Valerio D'Andrassi!"]},{"i":"commandpost-105","l":"CommandPost 1.0.5"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["Added additional Colour Wheel actions for different increments. For example, you can now increase or decrease the Tint by 0.1, 0.2, 0.3, 0.4, 0.5, 1, 5 or 10. This applies to Saturation, Brightness, Tint, & Temperature. Thanks for suggesting Rafa Alejandro!","Added actions to trigger custom keyboard shortcuts (for example COMMAND+C)."]},{"i":"changes","l":"\uD83D\uDCAA Changes","p":["CommandPost will now prompt for Screen Recording permissions on macOS Catalina, and will not start until those permissions are granted. CommandPost requires Screen Recording permission on macOS Catalina to detect the state of various user interface elements - for example, to detect when Final Cut Pro is playing or stopped. We also allow users to optionally share screenshots when submitting feedback.","The CommandPost Dock Item is now disabled by default. You can change this in CommandPost's General Preferences panel if required.","The contextual menu that appears when you right-click on the top of the Final Cut Pro Viewer is now disabled by default. You now have to click \"Enable Viewer Contextual Menu\" from the CommandPost menubar to enable it.","The Uninstall tool now removes all of CommandPost's permissions in macOS Catalina."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug that prevented Timeline Batch Export from working correctly in macOS Catalina. Thanks for reporting Chris Walton!","Fixed a bug that prevented the Batch Name Tool in the HUD from permanently renaming items in the browser. Thanks for reporting Vigneswaran Rajkumar!","Fixed bug in Timeline Batch Export. Thanks for reporting Rima H. Bassil!","Fixed a bug which prevented the \"Reveal Multicam Clip in Browser\" action from working correctly."]},{"l":"翻訳 Translations","p":["Added Danish Translation. Thanks for adding Patrick Fust!"]},{"i":"commandpost-104","l":"CommandPost 1.0.4"},{"i":"bug-fix","l":"\uD83D\uDC1E Bug Fix","p":["Fixes a bug introduced in 1.0.3 that can prevent Effects & Generators from being applied correctly. Thanks for reporting Anton Lopez & Wayne Kopping!"]},{"i":"commandpost-103","l":"CommandPost 1.0.3"},{"i":"new-feature","l":"\uD83C\uDF89 New Feature","p":["Added option to \"Use Better Quality in Angles Viewer\" in the Advanced Final Cut Pro Preferences."]},{"i":"improvements","l":"\uD83D\uDD28 Improvements","p":["Added a preference to enable or disable the Text Pasteboard History, and also set a History Size in the Finder Preferences panel. The Text Pasteboard History is now off by default.","CommandPost now disconnects from Tangent Hub when the Color Finale 2 window is open, allowing you to control Color Finale 2 with Tangent Panels. When you close the Color Finale 2 window, CommandPost reconnects to Tangent Hub."]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["The \"Select Active/Topmost Library in Browser\" actions now put focus on the Browser Sidebar when triggered so that the Library becomes active in the Inspector. Thanks for reporting Mads Larsen Nielsen!","Fixed a bug where Final Cut Pro could freeze temporarily when importing clips from a Media Watch Folder notification. Thanks for reporting Corky Ballas!"]},{"i":"commandpost-102","l":"CommandPost 1.0.2"},{"i":"new-features","l":"\uD83C\uDF89 New Features","p":["You can now apply multiple Compressor presets to the same watch folder.","Added Final Cut Pro X preference for \"Correct Spelling Automatically\". Thanks for the suggestion Afshin Rohani!","Added support for IFTTT Notifications. Thanks JFtechOfficial for implementing!","Added action for \"Select Topmost Library in Browser\" and \"Select Active Library in Browser\". Thanks for the suggestion Mads Larsen Nielsen!"]},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Improved reliability of \"Change Duration\" menu item action. Thanks for reporting Vigneswaran Rajkumar.","Fixed the naming of destinations in Timeline Batch Export if you have a fresh install of Final Cut Pro X without any custom destinations.","Updated the Final Cut Pro, Motion & Compressor Feedback Form assistant.","Fixed bug when disabling the Custom Touch Bar on Mojave."]},{"i":"workarounds","l":"\uD83E\uDDE8 Workarounds","p":["The Touch Bar features are currently not working correctly on the new 16-inch MacBook Pro so we have temporarily disabled Touch Bar support on these machines until we can come up with a proper fix. If anyone has any ideas, please get in touch."]},{"i":"翻訳-translations-1","l":"翻訳 Translations","p":["Added Hungarian Translation. Thanks Gyula Hegedüs!"]},{"i":"commandpost-101","l":"CommandPost 1.0.1"},{"i":"bug-fixes","l":"\uD83D\uDC1E Bug Fixes","p":["Fixed a bug where the Timeline Batch Export feature would not list all the installed Destination Presets. Thanks for reporting Edgar Davis!","Fixed a bug where Snippets assigned as an action (i.e. as a keyboard shortcut) would not trigger the latest Snippet code if the Snippet was updated in the Preferences panel after being assigned. Thanks for reporting Stefan Benz!"]},{"i":"new-additions","l":"\uD83C\uDF89 New Additions","p":["Added Polish Translation. Thanks Robert!"]},{"i":"commandpost-100","l":"CommandPost 1.0.0","p":["Woohoo! \uD83C\uDF89","After ** 78 releases- of FCPX Hacks and **91 beta releases- of CommandPost, we're extremely excited to announce that we're finally removing the beta label from CommandPost."]}],[{"l":"Videos","p":["...and in other languages:","Arthur Moore demoes CommandPost","Arthur Moore demoes CommandPost & Loupedeck+","Batch Export FCPX browser clips using CommandPost","Brad & Donna: Edit 5x Faster with Macros Using Monogram CC","Brad and Donna: 8 Reasons Why FCPX Editors Need CommandPost","Brad and Donna: Supercharge your FCPX Workflow - Monogram Creative Console Review","Chadeveryday: Batch Export Clips in FCPX","Conheça o Command Post !!!","Creative Techniques #12: MIDI Color Correction with CommandPost","FxFactory demoes CommandPost","Hegedüs Gyula demoes CommandPost in Hungarian","Here’s a collection of awesome videos made by members of our community in English:","How to Hack the Touch Bar on the MacBook Pro using CommandPost","Live Demo: Monogram Creative Console + Final Cut Pro","LVUP with Monogram - Final Cut Pro setup via CommandPost","Matthew O'Brien: Edit & Color Grade FASTER with Monogram's Video Console in Final Cut Pro","O MELHOR PLUGIN PARA FCPX - CommandPost + NanoKontrol2 (PT-BR)","Oyibo VFX explains how to speed up your FCPX workflow","Ripple Training: Color Grading in Final Cut with Monogram Creating Console","Serge M demoes CommandPost","Serge M: POWER UP Final Cut Pro with Loupedeck CT & CommandPost","Tangent Ripple for FCPX w/CommandPost","Tutorial de CommandPost para Final Cut Pro X: ¡imprescindible! (parte 1)","YCImaging: THIS Made Me Edit Twice As Fast (Loupedeck CT 2 Years Later)"]}],[{"l":"Debug Console","p":["Because CommandPost is powered by a huge collection of Lua scripts, the Debug Console is one of the most important places in CommandPost to track down bugs and issues.","You can access the Debug Console via the \"Help & Support > CommandPost\" section of the menubar:","There is also an option to \"Open Debug Console on Dock Icon Click\", which is 'on' by default:","Similar to Console.app in macOS, the Debug Console basically displays all of CommandPost's log files for the current session:","In the menu bar, you can:","Force CommandPost to reload it's Lua scripts","Clear the Debug Console","Toggle whether or not the Debug Console should always be on top of other macOS windows","Automatically reload CommandPost when a Lua file is modified externally (i.e. if you modify a file in a text editor with CommandPost running)","Open the Toolbox panel","Open the Control Surfaces panel","Open the Preferences panel","Submit Feedback to the CommandPost Developers","The text box at the bottom of the Debug Console allows you to execute Lua Commands directly. This is really useful when developing CommandPost plugins. For example:","You can learn more about developing for CommandPost in the Developers section of this site."]}],[{"l":"Menubar","p":["The main interface for CommandPost is the menubar, which sits in your system’s menubar at the top right of the screen alongside other items such as the WiFi icon, Volume Control, Battery Information, Date & Time, and Spotlight.","The menubar is contextual, so it will show different things depending on the active application. For example, when Final Cut Pro X is active, you'll see something similar to this:","The menubar is split up into multiple sections, and offers a huge variety of different tools and features.","By default, the menubar is pretty jam-packed with heaps of options and functionality. If you find it too daunting, you can adjust what sections are shown in the menubar via the Menubar Preferences panel.","At the bottom of the menubar is a SETTINGS section, and within that, a Preferences dropdown. Once you click the Menubar option within that, you'll be presented with this:","From this preferences you can pick and choose which menubar items you want to show or hide.","You can also switch between icon options, or to a text of your choice, which by default is \"CP\"."]}],[{"l":"Prevent Mac from Sleeping","p":["Much like the beloved MacOS app Caffeine, CommandPost provides an option to prevent your Mac from automatically going to sleep. This setting overrides your Battery setting in your System Preferences and keeps the display on indefinitely. It's a handy tool if you want to temporarily disable sleep to ensure a download or upload won't be interrupted, and then revert to your usual sleep settings afterwards.","Currently, the only way to access this function is from the menu bar. Click \"Prevent Mac from Sleeping.\" A tick on the left side of the menu option indicates that the Mac will not go to sleep, and an absent tick indicates that the Mac's sleep settings will not be affected by CommandPost.","To preserve energy and extend the life of your display, you may dim the internal display or turn off the external display while rest assured that your Mac will not go to sleep.","Although CommandPost saves the sleep prevention setting, it will not prevent sleep if CommandPost is not running."]}],[{"l":"Search Console","p":["All of the above settings are remembered for this Search Console.","As you see in the above screenshot, it's exactly the same interface as when you activate the Search Console from other applications but with more/different sections.","Each Search Console is also automatically sorted by last item selected, so the most recent item you used will always be at the top (unless you have any favourites, which take priority).","Each Search Console remembers it's own settings (i.e. selected sections, favourites, hides, remember the last query entered, etc.).","Favourite or Hide items in the Search Console.","For example, with CommandPost running after an initial install, and Final Cut Pro open and active, if you press CONTROL + SPACE on your keyboard, this will activate the Search Console as well.","However, this isn't the only instance of the Search Console - we use it right throughout CommandPost.","If you right-click on the Search Console, you'll see the follow menu:","In some ways, it's a blatant rip-off of Andrew Kramer at Video Copilot's incredible free FX Console plugin for After Effects.","Remember the last text query entered.","Search the sub-text field (i.e. the smaller text in the Search Console).","Show Hidden items (useful when you want to restore something you've already hidden).","The Search Console is a name for the interface we use for selection actions in CommandPost. It's very similar to macOS Spotlight.","This allows you to:","This opens a Search Console, allowing you to select an Action for this Touch Bar Item:","Toggle which \"Action Groups\" you want to show.","Triggering the Search Console from the \"All Applications\" option in the Applications dropdown allows you to trigger actions from any application. By default, in the Shortcuts preferences, \"Search Console\" is assigned to CONTROL + OPTION + COMMAND + SPACE.","We also use the Search Console in the Preferences panel for selecting actions. For example, in the Touch Bar Preferences you'll see the \"Select\" button in the Layout Editor:","With a similar interface to Alfred you can then search for any action and trigger it.","With CommandPost running after an initial install, if you press CONTROL + OPTION + COMMAND + SPACE on your keyboard, it will open the Search Console, which looks like this:"]}],[{"l":"Sending Apple Feedback","p":["This feature allows you to access the offical Apple \"Provide Final Cut Pro Feedback\" website, but pre-populates a lot of the text boxes for faster access.","Apple Feedback"]}],[{"l":"General","p":["The General settings pane of CommandPost is a section of the app's settings where you can configure various settings related to the app itself. These settings include options for controlling the app's behavior, appearance, and functionality."]},{"i":"general-1","l":"General","p":["Launch at Startup: This checkbox allows you to enable or disable the app to launch automatically when your computer starts up. By enabling this setting, CommandPost will launch automatically every time you turn on your computer, saving you the time and effort of opening it manually.","Automatically Check for Updates: This checkbox allows you to enable or disable automatic checking for updates to the app. By enabling this setting, CommandPost will automatically check for new updates and notify you when they are available.","Check For Updates Now: This button allows you to manually check for updates to the app at any time. When clicked, CommandPost will immediately check for new updates and notify you if any are available."]},{"l":"Search Console","p":["CommandPost can searches for items of the menubars for the app you are using. Menubar items and commands are searched and indexed so that you can easily invoke them using the Search Console, and also assign them to control surfaces. This section allows you to enable CommandPost post to read the menu items.","Scan Running Application Menubars on Startup: This checkbox allows you to enable or disable the scanning of the menubars of running applications when CommandPost starts up.","Scan the Menubars of the Active Application: This checkbox allows you to enable or disable the scanning of the menubars of the active application."]},{"l":"Privacy","p":["Send Crash Data (requires restart): This checkbox allows you to enable or disable the sending of crash data to CommandPost developers. By enabling this setting, CommandPost will automatically send anonymous crash data to help improve the app.","Open Privacy Policy: This button allows you to view CommandPost's privacy policy."]},{"l":"Language","p":["The Language settings section of CommandPost provides options for controlling the app's language.","Language Dropdown: This dropdown menu allows you to select the language you want CommandPost to use. The available languages will depend on the current version of the app.","Help Translate CommandPost: This button allows you to access the translation project for CommandPost, where you can help contribute to the app's translations."]},{"l":"Dock Icon","p":["Enable Dock Icon: This checkbox allows you to enable or disable the app's Dock Icon. When enabled, CommandPost will display an icon in the Dock when running.","Open Debug Console on Dock Icon Click: This checkbox allows you to enable or disable the opening of the Debug Console when the Dock Icon is clicked.","Drag & Drop Text Action and Drag & Drop File Action This dropdown menu allows you to select an action that will be performed when you drag and drop an FCPXML or a CSV into CommandPost."]}],[{"l":"Finder","p":["The Finder section in CommandPost settings contains options to change the default behavior of the Finder regarding external drives, chimes, and pasteboard. With these settings, users can customize the way external drives behave within the Finder, set a chime sound when external power is connected, and manage the pasteboard history."]},{"l":"Drive Management","p":["Unmount external drives when switching to battery power: This checkbox allows you to enable or disable the automatic unmounting of external drives when your computer switches to battery power. When enabled, CommandPost will automatically unmount any external drives that are connected to your computer when your computer switches to battery power.","Mount external drives when switching to AC power: This checkbox allows you to enable or disable the automatic mounting of external drives when your computer switches to AC power. When enabled, CommandPost will automatically mount any external drives that were previously unmounted when your computer switches back to AC power."]},{"l":"Advanced","p":["Play chime sound when laptop power is connected: This checkbox allows you to enable or disable the chime sound that will play when your laptop's power cable is connected. When enabled, Finder will play a chime sound to alert you that your laptop's power cable is now connected and charging."]},{"l":"Text Pasteboard History","p":["Enable Text Pasteboard History: This checkbox allows you to enable or disable the text pasteboard history feature in CommandPost. When enabled, CommandPost will keep a history of the text that you have copied and pasted, allowing you to quickly access previous copied text.","History Size: This dropdown menu allows you to set the maximum number of items that will be stored in the text pasteboard history. The default value is 5."]}],[{"l":"Menubar","p":["This preferences panel allows you to customise the CommandPost menubar item."]}],[{"l":"Notifications","p":["This preferences panel allows you to set up notifications for when a Final Cut Pro export is complete."]}],[{"l":"Final Cut Pro","p":["This preferences panel allows you to change various Final Cut Pro preferences."]}],[{"l":"After Effects","p":["The After Effects Preferences panel allows you to scan for Effects."]}],[{"l":"Scripting","p":["The Scripting preferences panel allows you to enable/disable Command Line Support & AppleScript support.","You can also create Lua Snippets, which appear in the Search Console and can be triggered by any Control Surface or the Search Console.","You can learn more about scripting Snippets here."]}],[{"l":"Shortcuts","p":["CommandPost can allow you to trigger any shortcuts that you have in the macOS Shortcuts application.","This feature requires CommandPost to have Automation permission for 'Shortcuts Events' in System Preferences.","You can enable and disable this feature in the Shortcuts preferences panel:"]}],[{"l":"Plugins","p":["CommandPost is made up of many Lua-based plugins, all contained within the CommandPost application bundle. Plugins could contain, for example, an individual action (such as the scrolling timeline in Final Cut Pro), or might be a manager for a control surface, such as a Loupedeck+. If you need to, you can disable specific plugins below. However, there are some plugins which are required, and not able to be disabled because they provide core functionality, such as generating the menubar icon. You can also add your own Custom Plugins, allowing you to add new features, or modify existing ones."]}],[{"l":"Settings","p":["In a future release of CommandPost we will have a proper import/export feature for settings.","In the meantime you can manually copy and paste settings between machines via Finder.","You can also setup a sym-link so that the settings folder points to a Dropbox or iCloud Drive folder allowing you to share settings between machines."]}],[{"l":"Keyboard","p":["The most common way of triggering actions in CommandPost is via shortcut keys on your keyboard.","There are two types of shortcuts keys - \"All Applications\" shortcuts, and application specific shortcuts (currently limited to Final Cut Pro).","\"All Applications\" shortcuts work anytime Final Cut Pro isn't active, and Final Cut Pro shortcuts only work when Final Cut Pro is active.","When you first install CommandPost, there are a few built-in shortcuts predefined, for example, the following \"All Applications\" shortcuts are enabled by default:","CONTROL + OPTION + COMMAND + SPACE: Activate Global Console","CONTROL + OPTION + COMMAND + L: Launch Final Cut Pro","There are also built-in shortcuts predefined for Final Cut Pro.","You can customise the shortcuts keys in the Keyboard Preferences panel - which can be accessed by pressing the Control Surfaces dropdown menu near the bottom of the CommandPost menubar:","This is what the Shortcut Preferences panel looks like:","The top drop-down allows you to select between \"All Applications\" Shortcuts or application specific shortcuts (currently limited to Final Cut Pro).","The left column (Label), contains all of the Actions available as shortcuts for the selected group, which can be assigned to a modifier and key. A shortcut requires BOTH a modifier and a key to become active.","There is also a Reset to Default Shortcuts button, which resets all the shortcuts to how they appeared when CommandPost was first installed, and a Set All Shortcuts to None, which sets all shortcuts to None."]}],[{"l":"Touch Bar","p":["There's both a Virtual Touch Bar, which displays a Touch Bar on your computer screen, and the ability to add custom items to both the virtual and physical Touch Bar.","You can enable both options by going to the Touch Bar preferences panel, via clicking the Control Surfaces, then Touch Bar option towards the bottom of the CommandPost menubar.","It looks like this:"]},{"l":"Virtual Touch Bar","p":["The Virtual Touch Bar is fairly straight forward - it draws a Touch Bar on your Mac's screen, and you can use your mouse to control it.","Once enabled via the Preferences, you have two other options:","Visibility: allows you to either only have the Virtual Touch Bar showing when Final Cut Pro is active, or have it active the entire time.","Location: Allows you to make it draggable (by holding down the OPTION key and dragging with your mouse), stick to the Top Centre of the Timeline, or the Centre of the Mouse location (when it's first shown).","You can toggle the Virtual Touch Bar via shortcut keys (the default shortcut key is CONTROL + OPTION + COMMAND + Z within Final Cut Pro), or assign it to a HUD, Touch Bar or Stream Deck button."]},{"l":"Custom Touch Bar","p":["The custom Touch Bar is incredibly powerful and versatile - it allows you to assign ANY action in CommandPost to a custom Touch Bar button.","The first thing you need to do to take use of this functionality is make sure that App Controls is selected and Control Strip is checked within the Touch Bar shows macOS System Preferences Keyboard panel, as shown here:","What this does is enable the CommandPost icon to appear in the Control Strip, allowing you to enable our custom shortcuts.","Once this is enabled, and Enable Customised Touch Bar is ticked, you can then assign Icons, Actions and Labels to buttons within the Preferences Panel, for example:","Much like keyboard shortcuts, there's both a Global Touch Bar, and application specific Touch Bars - currently limited to Final Cut Pro. You can Customize both Touch Bar separately by selecting the corresponding option on the Application dropdown menu. There is also nine Banks of setting available for both Touch Bar, so you can quickly switch between configuration.","You can switch Touch Bar Banks via shortcut keys, Search Console, or assign the toggle to a HUD or any control surfaces.","Pressing the Select button for each column, will pop up a Console allowing you to easily search for \"actions\". If you right click on the Console, you can also define what Sections you want to view, for example:","There's also the option to Favourite or Hide items in the Console, and change your search options.","In the above screenshot, we've just enabled Touch Bar Widgets, which are actually a bit more special than normal buttons. With widgets, the icon and label columns in the Preferences are ignored, and you're given a custom interface.","For example, the Color Board (Grouped) widget looks like this:","This widget allows you to control Final Cut Pro's Color Board using your fingers, which is pretty awesome.","If you don't have a physical Touch Bar, you can also use Duet to view the Color Board Widget on your iPad.","At the bottom of the Touch Bar Preferences screen there's an option to Reset All Touch Bar Items which will set all the Touch Bar Items to None. There's also a Reset Application option and a Reset Bank option that reset only the currently selected Application or Bank repsectively.","You can toggle the Custom Touch Bar via shortcut keys, Search Console, or assign the toggle to a HUD or any control surfaces."]}],[{"l":"Stream Deck","p":["CommandPost currently supports the following Stream Deck devices:","Stream Deck XL","Stream Deck Mini","Stream Deck Plus","If you have a Stream Deck device, you can assign any action within CommandPost to a Stream Deck button via the Preferences screen:"]}],[{"l":"Resolve","p":["CommandPost allows full control over the DaVinci Resolve Speed Editor and DaVinci Resolve Editor Keyboard.","DaVinci Resolve will totally override CommandPost when running, even if DaVinci Resolve is just running in the background.","These features have been tested with Editor Keyboard Firmware v1.4 and Speed Editor Firmware v1.4.1.","Whilst CommandPost does support Bluetooth connections, we strongly recommend using a wired connection."]}],[{"l":"Monogram","p":["CommandPost uses the official Monogram Creator API to allow users to control both legacy Palette modules and the latest Monogram modules, such as Orbiter.","Monogram support requires Monogram Creator 4.1.11 or later.","You can learn more on the official Monogram website."]},{"l":"Videos","p":["Here's a collection of third-party videos:","Ripple Training: Color Grading in Final Cut with Monogram Creating Console","Matthew O'Brien: Edit & Color Grade FASTER with Monogram's Video Console in Final Cut Pro","Brad & Donna: Edit 5x Faster with Macros Using Monogram CC","Brad and Donna: Supercharge your FCPX Workflow - Monogram Creative Console Review","LVUP with Monogram - Final Cut Pro setup via CommandPost","Live Demo: Monogram Creative Console + Final Cut Pro"]}],[{"l":"Tangent","p":["CommandPost offers native support of the entire range of Tangent's panels, including the Arc, Element, Wave & Wave2, Ripple, the Element-Vs iPad & Android app, and any future panels.","element-Vs free (Android) and element-Vs sample (iPad) are the free version which allows you to try every feature of the app. The free version is fully featured so you get to use every aspect of the app, the only limitation being that you can only use it for a total of an hour in any day."]},{"l":"Setup","p":["Another powerful feature is that via the Tangent tab of the CommandPost Preferences is a \"Favourites\" section:","By default CommandPost has four built-in \"modes\":","By default CommandPost will disable the built-in Final Cut Pro control map.","Click \"Open Tangent Mapper\" to open Tangent Mapper.","CommandPost adds a huge amount of Final Cut Pro Parameters into Tangent Mapper which you can allocated to whichever button, knob or wheel you want.","FCP: Board","FCP: Video","FCP: Wheels","Global","If for some strange reason it doesn't, click the \"Select Application\" menu bar and make sure CommandPost is selected, or that \"Auto-select Application\" is selected and CommandPost has a triangle icon next to it.","If you don't already have the Tangent Hub software installed, click the \"Download Tangent Hub\" button to get it.","If you've been using a previous version of CommandPost, and have built your own custom layouts, if you want to restore the default layout select \"File > Manage Control Maps...\":","It will then appear in Tangent Mapper:","Once the latest version of Tangent Hub is installed, you can click \"Enable Tangent Panel Support\".","Once you've selected an action via the Console:","Please refer to the Tangent Mapper User Manual for further information.","Simply click the \"Select\" button for whichever Favourite you want to assign, then use the Console to select the action you want.","Tangent Mapper should automatically load with the CommandPost Default controls.","The Wave has multiple banks for knobs and buttons.","Then click the \"Tangent\" tab:","Then with the CommandPost Application selected in the top section, delete any custom Control Maps for CommandPost in the bottom section:","This feature allows you to assign ANY CommandPost action to a Tangent Favourite, which you can then access from within the Tangent Mapper.","This will connect CommandPost to the Tangent Hub, allowing you to use the Tangent Mapper application to customise your panel layout.","To setup Tangent support, from the CommandPost menubar, click \"Preferences...\" near the bottom:","You can configure each mode by click the mode tab at the top of the interface.","You can customise the Tangent panels however you want, and share your layouts with your friends via the Tangent Mapper.","You can learn more about the Console here.","You can then customise layouts for each type of panel (i.e. Ripple, Element, or Wave)."]}],[{"l":"TourBox","p":["CommandPost has support for the original TourBox.","These features are compatible with the firmware that's bundled with TourBox Console Version 2.1.","The official TourBox application is not compatible with CommandPost and can't be used at the same time."]}],[{"l":"Razer","p":["CommandPost has support for a huge variety of Razer devices:","Razer Stream Controller","Razer Nostromo","Razer Orbweaver","Razer Orbweaver Chroma","Razer Tartarus","Razer Tartarus Chroma","Razer Tartarus Pro","Razer Tartarus V2","You can select between a Razer device and a Razer Stream Controller when you click the Control Surfaces panel icon:"]},{"i":"razer-1","l":"Razer","p":["You have lots of control over Razer devices:"]},{"l":"Razer Stream Controller","p":["The Razer Stream Controller is essentially just a rebranded Loupedeck Live."]}],[{"l":"MIDI","p":["CommandPost can be triggered by any MIDI device."]},{"l":"Videos","p":["Here's a collection of third-party videos:","Creative Techniques #12: MIDI Color Correction with CommandPost"]}],[{"l":"Loupedeck","p":["There are two ways to interact with Loupedeck devices in CommandPost - native/direct support, and via a Loupedeck Plugin.","You can select between the various Loupedeck devices when you click the Control Surfaces menubar item:"]},{"l":"Loupedeck Plugin","p":["CommandPost allows you to install a plugin into the official Loupedeck application so that you can access CommandPost's actions within it.","If you enable the Loupedeck Plugin, CommandPost's native Loupedeck CT and Live support will be disabled.","This features requires Loupedeck Software v5.1 or later.","You can learn more on the official Loupedeck site."]},{"i":"nativedirect-support","l":"Native/Direct Support","p":["You can also avoid the official Loupedeck Plugin all together and let CommandPost talk to the hardware directly.","Using this method gives you a lot more control and flexibility."]},{"l":"Videos","p":["Here's a collection of third-party videos:","Arthur Moore demoes CommandPost & Loupedeck+","YCImaging: THIS Made Me Edit Twice As Fast (Loupedeck CT 2 Years Later)","Serge M: POWER UP Final Cut Pro with Loupedeck CT & CommandPost"]}],[{"l":"AudioSwift","p":["AudioSwift allows you to use your MacBook Pro Trackpad and Magic Trackpad as a control surface.","It has several modes, so you can use it for sliders, buttons and two axis controls (such as for colour wheels).","You can setup AudioSwift in the MIDI Preferences Panel using the 'Learn' feature.","You can learn more about AudioSwift here."]}],[{"l":"Gamepad","p":["We are planning to add built-in Gamepad support in a future release.","In the meantime, you can use the free Enjoyable or Controlly apps to assign virtual keyboard presses to Gamepad controllers."]}],[{"l":"Intro","p":["The toolbox is an evolving collection of handy utilities commissioned by members of the CommandPost community to do very specific tasks, generally related to XML processing.","If there's something you or your company would like to automate, then you can contact the CommandPost team for advice and a quote."]}],[{"l":"Notion","p":["This tool allows you to get metadata from Final Cut Pro and upload it straight to Notion. Powered by Vladilen Zhdanov's csv2notion."]}],[{"l":"Titles","p":["This utility allows you update the titles within a FCPXML, based on new data from a CSV file. You can also Batch Process an entire folder. To do this, the FCPXML and CSV filenames need to be identical.","This utility was commissioned by Connor Eberhart.","Screenshot"]}],[{"l":"Shot Data"},{"l":"Background","p":["Before I explain the workflow behind Shot Data, let me explain the concept of “Sound Lock”. We all know what “Picture Lock” is.","Picture lock is a stage in editing a film or editing a television production. It is the stage prior to online editing when all changes to the film or television program cut have been done and approved. It is then sent to subsequent stages in the process, such as online editing and audio mixing. Any last-minute changes can force portions of subsequent work to be redone.","Source: Wikipedia","In an analogous fashion, Sound Lock is a stage in a film or editing a television production where a sequence is edited before the production starts principal photography. In other words, before the project is being shot, in the pre-production or development stage. You could call it “Pre-Editing” as well. The filmmaker would use a series of concept images to construct a timeline."]},{"i":"what-is-sound-locking","l":"What is Sound Locking?","p":["Now, you might ask, where does the Sound component come in? In projects like Music Video, music follows higher precedence over visuals. Not that the visuals are not important, but in 99% of all Music Videos, the music will always be composed and recorded first. Thus, with that piece of the Music, it becomes the “Locked” component. It will never change. The filmmaker now uses that music track as an anchor point to construct the matching visual or rather envisioned visuals against that music right within the NLE. These envisioned visuals could come as a set of reference images, hand-drawn sketches or even 3D generated shots. It mostly revolves around the filmmaker’s workflow.","Sound Locking is not an entirely a new concept. Filmmakers, Music Video Directors and the animation industry have utilised this technique for a long time. The biggest hurdle from the above mentioned workflow is, there is no path to bring shot and scene information out from NLE to on-set usage meaningfully. Even if you have edited and prepared the sequence, the only method within the NLE is to export that sequence out as a rendered video file. It is not entirely useful, and shot information is not entirely homogenous. You are also required to do a Shot List manually based on the envisioned visuals. Which would precipitate tons of physical print out for various departments in productions, which yields a non eco-friendly work practice.","However, there are applications on the market like Shot Lister, Studio Binder or Celtx that allow you to develop industry standard Shot Lists. But all seems to tackle the Shot List construction from a script level. There is undoubtedly nothing wrong with this approach. The script is the anchor point, as screenplay is the foundation of every production.","For Music Videos and music driven narratives, sound or music invariably takes higher precedence. You can’t visualise music on a sheet of paper except on a musical score sheet and you can’t conceivably construct a Shot List from a score sheet."]},{"l":"The Most Resilient Parasite","p":["What is the most resilient parasite? Bacteria? A virus? An intestinal worm? An idea. Resilient... highly contagious. Once an idea has taken hold of the brain it's almost impossible to eradicate. An idea that is fully formed - fully understood - that sticks; right in there somewhere. - Cobb","The thought of Shot Data workflow sparked in my mind some 7 years ago when working on various commercial projects. But no proper streamlined workflow or application was available at that period in time.","Furthermore, most database applications were not exclusively mainstream. You had your usual suspects like Microsoft Access and FileMaker Pro. You would certainly need to engage a consultant to develop your custom database application, which is complicated and costly.","In recent times, there is an emergence of cloud based database applications, like Notion and Airtable. With Data being the centre-point of our lives, such applications provide new intuitive features in a cost effective manner.","Starting with Shot Data, I aim to streamline and optimise the process for Shot List generation from within Final Cut Pro."]},{"l":"Enter Shot Data"},{"i":"why-final-cut-pro","l":"Why Final Cut Pro?","p":["Final Cut Pro is a radical and controversial NLE. There are users who loathe it and there are users who espouse the application. I am the latter. Apart from speed, Final Cut Pro is extremely powerful when it comes to handling Metadata. In particular, it’s FCPXML file. The *.fcpxml file contains most of the timeline’s information, including Metadata from custom Motion Titles.","Utilising the Sound Locking principles, Shot Data is a 2-part workflow and a tool that allows you to generate Storyboard or Shot-List from within Final Cut Pro to Notion. It utilises a custom Motion Template as a basis for Shot’s Data tabulation. Hence the name Shot Data."]},{"i":"why-notion","l":"Why Notion?","p":["Notion is a single space where you can think, write, and plan. Capture thoughts, manage projects, or even run an entire company — and do it exactly the way you want. Notion provides the building blocks and you can create your own layouts and toolkit to get work done at an affordable cost.","Notion’s workspace allows you to write in a beautiful clean space, build your own personal wiki (with endless layers of content), plan using a kanban view, a calendar or a simple list view and last, but not least, to capture your workflows and record everything by creating databases.","If you are familiar with Final Cut Pro’s Smart Collections, you will feel right at home with Notion’s database. Notion’s database allows you to create custom views with specific filters and sort criteria."]},{"i":"introduction-to-notions-databases","l":"Introduction to Notion’s databases","p":["One feature that sets Notion apart from other database (i.e Airtable) is every entry or record is its own editable page. The record you enter into your database can be opened as its own Notion page, where you can layer or add in any information or blocks you want."]},{"i":"basic-usage---shot-data","l":"Basic Usage - Shot Data"},{"l":"Part 0 - Download CommandPost","p":["Download and Install the latest version of CommandPost from GitHub."]},{"i":"part-1-sound-locking-pre-editing","l":"Part 1 - Sound Locking (Pre-Editing)","p":["Append a Custom Solid to the Timeline.","At this point, you can enter as much of Shot Data information pertaining each shot. Example: Scene Description, Wardrobe Notes and etc.","Back in your timeline, perform an Extend Edit Shift+ X on Shot Data Template.","Back in your timeline, press CMD+ G to create a secondary storyline for the Shot Data Template. Using the Blade Tool, cut the Shot Data Template base on existing edit points. If you have Snapping enabled, all of the edit points should be identical across all 3 connected storyline.","But if they are going to be the same for continuing shots, leave them as blank. You can copy & paste them easily later in Notion.","Click Install Motion Template from the Shot Data’s Toolbox","Connect your desired Music or Score Track to the first clip.","Create a new Library of your choosing.","Create a new Project with your desired Resolution and Frame Rate.","Custom Solid is used for this example. You can use any other available Solids from the Generators.","For the purpose of sorting, use a 2 digit numbering with padding for the Shot Number field. You can also use 3 digit numbering with padding if you desire. It is unlikely that you would require more than 100 shots within a single Scene.","Go back to the Published Parameters of the Shot Data Template, enter your desired shot information pertaining the timeline and scene. If your entire timeline is meant only for scene 10, enter in 10 in the Scene Number field. Enter 01 under Shot Number.","In order for CommandPost to the process Shot Data Template with the connected images, the storyline needs to be reordered. Both of the connected storylines need to be broken apart using Shift+ CMD+ G. To bring the visibility of the Shot Data Template’s Text on screen, you can reduce the opacity of the Images and Custom Solids to your desired value.","In Titles and Generators sidebar, you will now see the Shot Data Template under CommandPost category.","Launch Final Cut Pro.","Make sure you have entered and selected all the values within each Shot Data Template instance. You are required to enter a unique Shot Number 01, 02, 03, 04 and so on for each Shot Data Template instance. If you have 19 cuts in your timeline, you should have 19 instances of Shot Data Template.","Now, Connect Shot Data Template to the timeline.","Once you have completed editing the timeline with Custom Solids, you can now proceed to connect your reference images.","S1.11.gif","Select Shot Data from the CommandPost’s Toolbox Menu.","Shot Data Template is design for 4K UHD, DCI & CinemaScope Resolutions.","Take a look at the Published Parameters of the Shot Data Template. Don’t get overwhelmed with the number of fields. \uD83D\uDE33","There is an apparent bug in Final Cut Pro where Custom Generators with complex rigging and layers does not preview the background colour in the timeline. Hence, we have to use default Custom Solid Generator for visual indication within the timeline.","These reference images, could be hand-drawn sketches, movie stills, photographs or even 3D rendered images.","Upon connecting the images to the timeline, select all the images. press CMD+ G to create a secondary storyline. With secondary storyline, you can easily snap the images to each edit point.","We are finally done with Part 1! Here comes the fun Part. \uD83E\uDD73","With the Custom Solid Generator, you can start editing using the music’s structure and rhythm.","You can completely use Shot Data without a Music Track. It all depends on your project’s workflow and requirements.","You could change the colour of each Custom Solid to provide you a visual indication. For quicker reusability, create a set of Custom Solids with different colours. And you could also create a separate Role for all the Custom Solids and tag with a different colour.","You need not have to tabulate data in every field. They are published for greater versatility and flexibility when generating the *.csv."]},{"l":"Part 2 - Sending to Notion","p":["Duplicate my Shot Data Template into your Notion Workspace. You can rename the template to your desire.","Select Shot Data from the CommandPost’s Toolbox Menu.","Paste your Notion v2 Token in the Notion Token field. Make sure both Automatically Upload Converted FCPXMLs and Merge with Existing Database are Checked.","Please take note that your Notion v2 Token may expire after some period of time. You would have to obtain it again.","From your duplicated Shot Data Template, Copy Link to View and paste the URL into the Notion Database URL field.","Select your preferred Export Destination by pressing on Change Export Destination.","Drag & Drop your your Project into Shot Data’s Toolbox XML Drop Zone.","Watch as the magic happens!","The upload speed is dependent on your internet connection and Notion’s servers.","If you have 19 shots within your Project’s Timeline, you should technically have 19 records automatically created within your Notion’s database.","This is the very essence of Shot Data Workflow. Repeat the process for the rest of your Scenes in Final Cut Pro. Your Notion’s database will grow overtime."]},{"i":"advance-usage---shot-data","l":"Advance Usage - Shot Data"},{"i":"using-notion-s-mobile-app","l":"Using Notion’s Mobile App","p":["Download the Mobile version of Notion.","Add widget on your home screen.","You could mount your iPhone or iPad to your Camera Rig and to your Director's Monitor Cage."]},{"l":"Setting up database relationships","p":["Make sure you have read and understand Notion’s documentation on Relations & Rollups.","You can create separate databases for Scene Characters, Scenes, Sets, Locations, Wardrobe and so on.","Once you have created individual databases for each Property.","In the property menu, Choose Relation from the Type menu.","You'll be asked to find the database you want to create the relation with. You can use the input at the top to search for this database.","In Shot Data Template of each instance, back in Final Cut Pro, you can enter the Exact name of that record from your Characters database.","If you have added Luke and Yoda in your Characters database, enter Luke,Yoda. It is case-sensitive. And if you have more than 1 item for the field, have to separate them with ,.","Now when you Drag & Drop your your Project into Shot Data’s Toolbox XML Drop Zone, Shot Data will automatically match and link the record with the associated relation in Notion during the upload.","As mention, you can create separate database for Scene Characters, Scenes, Sets, Locations, Wardrobe and so on.","Set up all relevant and vital databases in Notion before you commence your work in Final Cut Pro with Shot Data Template."]},{"i":"updating-existing-shot-list-in-notion-s-database","l":"Updating existing Shot List in Notion’s database","p":["In a scenario where your Images are updated in Final Cut Pro, you can batch update your existing Shot List database in Notion using Ignore Selected Column feature.","In order to batch update your records, couple of conditions have to be met. The Shot Number and Scene Number have to be matched and identical. And the number of edits have to be identical.","Select all the Columns except Scene Description and Image Filename. The Scene Description will always be used as the Image’s Caption within Notion.","Now when you Drag & Drop your your Project into Shot Data’s Toolbox XML Drop Zone, Shot Data will only upload and update the images that are embedded within each record.","You can also update other Columns if required.","If your entire scene in Final Cut Pro is updated with a different set of cuts, the best course of action is to delete that affected range of Scene or Shot records in Notion. And perform a fresh set of upload in Shot Data’s Toolbox."]},{"i":"emojis","l":"Emojis \uD83D\uDE00","p":["In Notion, you can customise your pages with Icons.","The default icon for all the records is. \uD83C\uDFAC.","You can click on the Emoji Picker button to change to a different Emoji.","You can get creative with emojis. You can assign ☀️ sun emoji for day scenes and \uD83C\uDF11 moon emoji for night scenes."]},{"l":"Saving and Loading Settings","p":["As you get comfortable with Shot Data workflow and Notion, you would have multiple Shot List database within Notion for different projects. You might also hold multiple Notion accounts, Personal and Teams.","You are able to Save Settings for multiple configuration.","You can recall different configuration by pressing Load Settings."]},{"i":"drag-drop-final-cut-pro-s-project-to-dock-icon","l":"Drag & Drop Final Cut Pro’s Project to Dock Icon","p":["Check CommandPost’s Dock Icon, under Preferences, General.","CommandPost’s Dock Icon will appear in your Dock.","Check Enable Dropping Final Cut Pro Project to Dock Icon.","You can now Drag & Drop Project’s Shot Data Sequences into CommandPost’s Dock Icon easily without opening Shot Data’s Toolbox.","Please make sure you have pre-configured all your settings within Shot Data’s Toolbox."]},{"l":"FAQ"},{"i":"can-shot-data-be-used-with-other-applications","l":"Can Shot Data be used with other applications?","p":["Yes. You can uncheck Automatically Upload Converted FCPXMLs in Shot Data’s Toolbox.","All Shot Data files are stored in Export Destination folder. Press Reveal Export Destination to open the folder.","In each sub folders, you will find the *.csv file with the accompanying images auto renamed.","You can import the *.csv to any application that accepts it."]},{"i":"can-shot-data-be-used-with-airtable","l":"Can Shot Data be used with Airtable?","p":["Interestingly, I initially experimented Shot Data with Airtable. Airtable offers a superior database system compared to Notion. However, Notion offers greater affordability, superior embeds, note-taking features within each page, comparatively.","If you are an Airtable user and would like to use the Shot Data files in your Airtable’s database, get in touch with me."]},{"l":"Afterthoughts","p":["This workflow would be particularly advantageous if you are the Writer, Director and Editor; or at least collaborating with an Editor in the early development phase. You could pursue through your vision from storyboard, pre-cut to actual principal photography and back to editorial in Final Cut Pro. Be it short-form or feature form, this workflow should be applicable across.","Last Edited : 8th June 2023","Workflow Created by Vigneswaran Rajkumar","Shot Data’s Toolbox Programming was made possible by Chris Hocking","Notion’s Import Tool by Vladilen Zhdanov","Initial Motion Template rigging was assisted by Peter Wiggins","Empire Strikes Back storyboard illustrations by Joe Johnston and Nilo Rodis-Jamero"]}],[{"l":"Auto Sequence","p":["When you drag a Final Cut Pro Project to this Toolbox, we'll send a new Project back to Final Cut Pro with the clips sorted by timecode.","This Toolbox was thrown together for Knut Hake & Sam Pluemacher.","Option for this toolbox is:","Remove Gaps"]}],[{"l":"Titles to Keywords","p":["This toolbox is a combination of two handy tools:","Create Title from Text"]},{"i":"titles-to-keywords-1","l":"Titles to Keywords","p":["When you drag a Final Cut Pro Event to this Toolbox (which must only contain a single Project), we will look through all the Titles connected to the clips in the Primary Storyline, read the name of those clips (as they appear in the Timeline Index), then create new Keyword Ranges for each of those Titles, including any connected clips. We then send that data back into Final Cut Pro as a new Event with a ✅ prefix. This will happen automatically if you only have one library open, otherwise you'll be prompted to select a library to import it into.","This Toolbox was thrown together for Knut Hake & Sam Pluemacher.","Options include:","Remove Project From Event","Merge with Existing Event","Use Title Contents Instead of Title Name","Replace Commas with Alternative Commas","Treat FAVORITE and REJECT as Ratings instead of Keywords"]},{"l":"Create Titles from Text","p":["This is a helpful tool that allows you to create a new Final Cut Pro Project which contains a new Title for every line in the below two text boxes.","Options include:","Prefix:","Suffix","Sequence","Start/End","Add Space After Sequence","Start with","Step value","Padding","Duration:"]}],[{"l":"Sony Timecode Repair","p":["Final Cut Pro currently doesn't correctly interpret timecode from certain Sony Cameras that are recording into an MP4 wrapper.","This Toolbox will update a Project's FCPXML to use the correct timecode values from the XML sidecar file (or the MP4 itself if no sidecar file exists), so that you can more easily send timelines from Final Cut Pro to DaVinci Resolve, Baselight or Adobe Premiere (with XtoCC).","This Toolbox supports both Drop Frame (29.97fps, 59.94fps, 119.88fps) and Non-Drop Frame Timecode (i.e 24fps, 25fps, 120fps, etc).","This Toolbox was thrown together for Alister Robbie. Thanks George Elias, Jamie LeJeune & Valerio D'Andrassi."]}],[{"l":"FCPXML Watch Folder","p":["This feature allows you to recieve macOS notfications whenever a FCPXML file is added into any of the below watch folders.","From the notification you can then Import these files directly to your current Final Cut Pro timeline.","If you hold down SHIFT when pressing Import, it will import all the outstanding files."]}],[{"l":"Media Watch Folder","p":["This feature allows you to recieve macOS notfications whenever supported files are added into any of the below watch folders.","From the notification you can then Import these files directly to your current Final Cut Pro timeline.","If you hold down SHIFT when pressing Import, it will import all the outstanding files."]}],[{"l":"Batch Export Active Timeline","p":["Batch Export Active Timeline is designed to work similar to exporting individual clips in Resolve for handing over graded clips for online editing. In Final Cut Pro, you can always select multiple items on your Browser and batch export, however, batch exporting from timeline allows you to quickly apply the same treatment, either with Select All or with an adjustment layer, to any number of clips on your timeline while they can still be exported individually. This is especially useful for situations like applying a new watermark or an audio filter to hundreds of videos at once.","Change Custom Filename to define a name used for the exports. This setting will not have any effect unless Use Custom Filename is checked. CommandPost add a sequential number after the name to avoid overwriting, regardless of your Replace Existing Files setting.","Change Destination Folder to a folder of your choice.","Change Destination Preset from a list of Destination you have in Final Cut Pro.","Ignore Background Tasks Warning to bypass warnings related to stabilization in process, etc.","Ignore Invalid Captions Warning for CommandPost to bypass caption related warnings.","Ignore Missing & Offline Files Warning to keep the batch export working even if there is some missing clips among your selection.","Ignore Proxies Warning to batch export with proxies.","Note that the way CommandPost achieves the batch export is by taking control of your computer's control, as you will be warned after triggering the batch export. Other than not being able to use your machine while batch exporting, you should note that CommandPost batch export clips by marking in and out points on your timeline for each clip you have selected. Which means that any adjustment layers, titles, secondary timeline clips will all have its own exported files, BUT as in a normal export, the layers will be mixed down and if the clip is below another opaque clip, the export will not show the clip underneath. Therefore it is suggested that you only select clips with edit points that reflects how you wanted your timeline to split, and any layers above it will still be mixed down even when they are not selected.","Pressing Perform Batch Export will present you with a final warning before you must let CommandPost take over your computer.","Replace Existing Files to replace previously exported files.","This is where you can configure the behaviour of the batch export to:","To use Batch Export Active Timeline, first open your timeline and select the clips. Then access the Batch export Active Timeline from the CommandPost Menubar while Final Cut Pro is in focused.","Use Custom Filename to enable the Custom Filename settings.","You can still, however, resist CommandPost's control by hiding Final Cut Pro and it will present you with a warning about CommandPost aborting the batch export.","You should be presented with the completion message when all the clips in your selection has been added to the export queue, and you can then resume to use your computer.","You will be presented with the Batch Export Active Timeline Settings."]}],[{"l":"HUD","p":["The HUD stands for Heads Up Display and provides a whole range of handy tools within Final Cut Pro.","The default shortcut to activate it is CONTROL+OPTION+COMMAND+A.","You can also enable it via the menubar when Final Cut Pro is active, or assign it to a Tangent, MIDI or Touch Bar button.","It has a customisable toolbar, which allows you to access various panels."]},{"l":"Minimise","p":["This is basically just an empty panel, making the HUD footprint very small, yet still easily accessible."]},{"l":"Batch Rename","p":["This panel lets you batch process names of clips and projects in Final Cut's browser. Apart from search and replace, you can add prefix, suffix, and a sequential number. Disabling Keep Original Value will remove the original name, and Enable Lua Code Processing will let you define your own proccessing logic written in Lua, for example, adding today's date."]},{"l":"Info","p":["This panel allows you to very easily see your media, quality and background render settings.","If there's additional information you'd like to see on this panel, please let us know."]},{"l":"Browser Search","p":["This is an incredibly powerful search tool that allows you to easily search all the Browser columns."]},{"l":"Buttons","p":["We have three different sized button panels. You can assign an action to each button, and also provide a custom name to the buttons by right clicking on them."]},{"l":"Notes","p":["We also have a basic text editor which allows you to save notes both at the system level, but also the individual library level, so that your notes can travel around with your library between machines."]},{"l":"FCPXML Editor","p":["We have a basic FCPXML editor, which allows you to drag any items from the Final Cut Pro browser to the HUD drop zone, modify the text in the editor, then send back to Final Cut Pro."]},{"l":"Pasteboard Editor","p":["Similar to the FCPXML Editor, this panel allows you to easily manipulate the contents of the Final Cut Pro Pasteboard."]}],[{"l":"Local Pasteboard History","p":["This feature is accessible from the CommandPost Menubar when Final Cut Pro is active:","When enabled, anything you copy in Final Cut Pro will be saved to the Pasteboard History, and recalled later.","You can clear the history from the menubar."]}],[{"l":"Save Browser Contents to CSV","p":["This feature allows you to save the entire text contents of your Final Cut Pro Browser to a CSV file.","You can access the Save Browser Contents to CSV function from the CommandPost Menubar:","You can also access it from the Search Console:","When you trigger the action, it will ask you for a folder to save the CSV to.","You can then open the CSV in something like Apple's Numbers:"]}],[{"l":"Save Timeline Index to CSV","p":["This feature allows you to save the entire text contents of your Timeline Index to a CSV file.","You can access the Save Timeline Index to CSV function from the CommandPost Menubar:","You can also access it from the Search Console:","When you trigger the action, it will ask you for a folder to save the CSV to.","You can then open the CSV in something like Apple's Numbers:"]}],[{"l":"Scrolling Timeline","p":["Default Shortcut: CONTROL+OPTION+COMMAND+W","As its been the number one request on Richard Taylor’s Final Cut Pro X Top Requests Master List since day one, we’ve finally added a Scrolling Timeline option to Final Cut Pro.","To activate and deactivate Scrolling Timeline Mode, by default you press CONTROL+OPTION+COMMAND+W, or select \"Enable Scrolling Timeline\" from the CommandPost menu.","Enable Scrolling Timeline","Once activated, you will see a little notification on your screen saying “Scrolling Timeline Activated”.","Now, if you have activated the scrolling timeline, and you press shift while its playing – the timeline will playback as normal, allowing you to temporarily disable the scrolling timeline.","You can also deactivate the scrolling timeline during playback by pressing the Scrolling Timeline Mode shortcut key again ( CONTROL+OPTION+COMMAND+W).","Of course, this shortcut key can always be customised and changed via the Shortcut Preferences panel.","If your playhead is not visible when you press play, CommandPost will automatically move your timeline to show the playhead, and the timeline will scroll along while playing.","You can continue to use all your usual shortcuts (i.e. ‘Add Marker’ and ‘Blade’) whilst playing back and the playhead will remain static."]}],[{"l":"Shared Pasteboard","p":["Shared Pasteboard is another tools that is only available when used with Final Cut Pro.","It allows you to share reference to anything that you can natively copy and paste in Final Cut.","This includes clips, generators, titles, etc. Multiple clips can be copied at once, and any effects and settings applied will also be copied along.","For this to work properly, the other machines should have the media assets already in the library, otherwise a placeholder with the names and attributes will be pasted instead.","This feature is off by default and must be activated by going to the Shared Pasteboard History dropdown menu from the CommandPost menu when Final Cut Pro is active, and clicking Enable Shared Pasteboard.","When you click Enable Shared Pasteboard you will be prompted to select a folder in which you’ll save your shared pasteboard.","This should be a network drive, or cloud storage such as iCloud or Dropbox, so multiple editors can access the shared pasteboard at the same time.","Once enabled, when you copy clips in the Browser or Timeline within Final Cut Pro, it will automatically appear on the Shared Pasteboard History drop down from the CommandPost menu on all of your machines that are running CommandPost and pointing to the same Shared Clipboard folder.","Clicking the option representing the copied clips will paste the clip on your opened timeline.","This makes sharing edit versions between machines as easy as copying and pasting!"]}],[{"l":"Viewer Overlay","p":["The Viewer Overlay feature allows you to add overlays on top of Final Cut Pro's Viewer.","You can access the controls from the CommandPost menubar item when Final Cut Pro is active:","If you click Enable Viewer Contextual Menu you can also access it by right-clicking on the Final Cut Pro Viewer toolbox:","There's also the option to Toggle Overlay's with Caps Lock.","It's extremely customisable and flexible, and a good compliment to Final Cut Pro's own Custom Overlay features."]}],[{"l":"Workflow Extension","p":["The CommandPost Workflow Extension allows CommandPost to control the Final Cut Pro playhead via the Workflow Extensions API.","CommandPost will automatically attempt to launch the Workflow Extension if you trigger an action that uses it.","Currently the Workflow Extension is basically just a helper tool - it has no useable user interface.","Because of this, you can resize the window to make it as small as possible, and drag it off-screen.","We don't currently have any plans to add any features to the Workflow Extension as we already have the CommandPost HUD, which offers similar functionality in a more streamlined user interface.","If you have any ideas or suggestions on how we could enhance the Workflow Extension, let us know."]}],[{"l":"AppleScript","p":["CommandPost allows you to trigger any arbitrary Lua code via CommandPost's AppleScript interface.","So, for example, rather than using complex GUI scripting, if you want your AppleScript code to select the second clip on a Final Cut Pro, you could use:","This allows you to have all the power of CommandPost & it's Lua Scripting Engine, directly within AppleScript.","This also means that you can use AppleScript Commands within Apple Automator to put together complex workflows for controlling Final Cut Pro.","CommandPost supports the following AppleScript commands:","execute lua code text : The string to execute -> Returns the Lua Code Execution Result","quit: Quits CommandPost","application name(text, r/o) : The name of the application.","application frontmost(boolean, r/o) : Is this the active application?","version(text, r/o) : The version number of the application.","The ability to mix and match AppleScript & Lua allows for all kinds of interesting possibilities!"]}],[{"l":"Command Line Tool","p":["CommandPost offers an optional Command Line Tool, that allows you to trigger any arbitrary Lua code via Apple's Terminal.","The Command Line Tool uses hs.ipc.","To install the Command Line Tool, click the CommandPost menubar icon, then Preferences..., click the Advanced tab then the Install button.","After installing the Command Line Tool you can also trigger Lua via code the command line. For example:","This allows you to have all the power of CommandPost & it's Lua Scripting Engine, directly from the command line.","The man page of the command line tool is provided here:"]}],[{"l":"Snippets","p":["CommandPost allows you to create Lua code snippets, which appear as actions in CommandPost's Search Console.","This means you can trigger a Snippet via a shortcut key or control surface button.","For example, to launch Final Cut Pro, you can use this simple Lua code:","cp.apple.finalcutpro:launch()","CommandPost is also compatible with Hammerspoon, so you can also use any of the examples on the Hammerspoon website.","You can learn more about Lua here","You can find the Hammerspoon API reference here.","Here's some direct links to some useful Hammerspoon functions:","hs.timer.usleep(microsecs)- Add a delay","hs.eventtap.keyStroke(modifiers, character[, delay, application])- Trigger a virtual key stroke","hs.application:selectMenuItem(menuitem[, isRegex])- Trigger an application menu item","Here's some direct links to some useful CommandPost functions:","cp.tools"]},{"l":"Examples"},{"i":"press-cmdc","l":"Press \"CMD+C\""},{"i":"type-test","l":"Type \"test\""},{"i":"trigger-shortcuts-with-delays-in-between","l":"Trigger Shortcuts with Delay's in-between"},{"l":"Forcefully restart an application by its bundle identifier"},{"l":"Select all even clips in a timeline"},{"l":"Go back 500 frames and play"},{"i":"audio-cross-dissolve-backward-j-cut","l":"Audio Cross Dissolve Backward (J-Cut)"},{"l":"Audio Cross Dissolve Centre"},{"i":"audio-cross-dissolve-forward-l-cut","l":"Audio Cross Dissolve Forward (L-Cut)"}],[{"l":"Snippets for Icons","p":["Both the CommandPost API and Hammerspoon API are insanely powerful and flexible, so you can basically do anything and everything.","CommandPost is also compatible with Hammerspoon, so you can also use helpful extensions such as hs.canvas.","Essentially all you need to do in your Snippet is return a hs.image object.","hs.image.iconForFile()","hs.image.iconForFileType()","hs.image.imageFromAppBundle()","hs.image.imageFromASCII()","hs.image.imageFromMediaFile()","hs.image.imageFromName()","hs.image.imageFromPath()","hs.image.imageFromURL()","Some useful functions to generate a hs.image include:","The Loupedeck CT and Loupedeck Live Preferences panels now have the ability to use Lua Snippets to programatically generate icons for the Loupedeck CT and Loupedeck Live panels.","There's some more complex hs.canvas examples here.","This gives you incredible freedom, to programatically make the icons appear however you want.","You can also use hs.canvas to programatically draw things.","You can learn more about Lua here."]},{"i":"examples","l":"Examples:"},{"l":"Display a built-in system icon"},{"l":"Display the first Final Cut Pro Keyword Shortcut Value"},{"l":"Display the current Spotify Track"},{"l":"Display the current System Volume"}],[{"l":"Snippets for LED Colors","p":["The Loupedeck CT and Loupedeck Live Preferences panels now have the ability to use Lua Snippets to set what color you want an LED button to use.","The Snippet should return a hs.drawing.color object.","You can learn more about Lua here."]},{"l":"Examples"},{"l":"Set LED to Red"},{"l":"Set LED to random color"}],[{"l":"Snippets for LED Status","p":["The DaVinci Resolve Control Surface panel have the ability to use Lua Snippets to set whether or not an LED is active.","The Snippet should return a true or a false.","You can learn more about Lua here."]},{"l":"Examples"},{"l":"Set LED to On"},{"l":"Set LED to Off"}],[{"l":"URL Handler","p":["CommandPost has a URL Handler which allows you to trigger CommandPost Commands & Actions via a simple URL address.","For example, you can type any of the below into a browser to trigger a specific action:","To get a list of the Handler IDs that are recognised by the URL Handler (i.e. \"fcpx_cmds\"), type the below Lua code into the Error Log:","To get a list of choices available for a specific Hander ID, type the below (replacing \"fcpx_shortcuts\" with the Handler ID you want to review) into the Error Log:","For example, if the Error Log displays something like:","Then the URL will be:","commandpost://fcpx_cmds?id=cpColorPuckFourLeft","Basically you use the params table as your guide. Table items can be separated with ||.","The following Handler IDs should not be used with the URL Handler:","fcpx_midicontrols","fcpx_widgets","global_widgets"]}],[{"l":"Introduction"},{"i":"what-is-commandpost","l":"What is CommandPost?","p":["CommandPost is a free and open source Mac application that adds a mountain-load of new features to Apple’s Final Cut Pro. It originally started off as a little proof of concept project to make finding the browser playhead easier for Scott Simmons.","You can read the origin story here.","It has since grown into a huge collection of handy professional workflow tools and automation features to make editing within Final Cut Pro faster, easier and much more powerful.","The aim of CommandPost is to build an open platform where editors worldwide can easily create and share useful tools to make their editing lives easier - allowing them to spend less time worrying about keystrokes, and more time doing creative things. We want to remove boring workflow obstacles so that everyone can get home earlier and spend less time in front of a computer. CommandPost is not limited to Final Cut Pro - the plan is to eventually add useful functionality for a range of other professional applications, such as Adobe After Effects and mocha Pro."]},{"l":"Developing with CommandPost","p":["CommandPost has been built from the ground-up to be incredibly flexible, extensible, and quick and easy to modify and improve features.","Depending on what you're wanting to do and your skillset, there's lot of way you can develop with CommandPost:"]},{"l":"Developing Plugins","p":["CommandPost has a powerful plugin architecture allowing you to easily build and distribute your own plugins that can be shared with the world.","Plugins can either be pure Lua or a mixture of Lua and Objective-C (although since they are just dynamically loaded libraries, they could ultimately be compiled in almost any language).","You can learn more about developing plugins in the Plugins section of this site."]},{"l":"AppleScript","p":["You can trigger Lua code via CommandPost's AppleScript interface. So, for example, rather than using complex GUI scripting, if you want your AppleScript code to select the second clip on a Final Cut Pro, you could use:","This allows you to have all the power of CommandPost & it's Lua Scripting Engine, directly within AppleScript (and Automator).","You can learn more about the AppleScript Interface here."]},{"l":"Command Line Interface","p":["After installing the Command Line Tool from the Advanced panel of the CommandPost Preferences, you can also trigger Lua via code the command line. For example:","This allows you to have all the power of CommandPost & it's Lua Scripting Engine, directly from the command line.","You can learn more about the Command Line Interface here."]},{"l":"URL Handler","p":["CommandPost also has a URL Handler which allows you to trigger CommandPost Commands & Actions via a URL address.","For example:","commandpost://command?group=fcpxid=cpSelectClipAtLaneOne","You can learn more about the URL Handler here."]},{"i":"how-has-commandpost-been-built","l":"How has CommandPost been built?","p":["CommandPost is made up of two seperate components:","CommandPost-App is a fork of Hammerspoon. This is the main Objective-C based Xcode project.","CommandPost is a repository that contains all of the CommandPost Lua scripts, which actually make up the CommandPost user interface and feature set.","Essentially, we're using Hammerspoon as an \"engine\" to drive our Lua-based application."]},{"i":"what-is-hammerspoon","l":"What is Hammerspoon?","p":["Hammerspoon is a tool for powerful automation of macOS. At its core, Hammerspoon is just a bridge between the operating system and a Lua scripting engine. What gives Hammerspoon its power is a set of extensions that expose specific pieces of system functionality, to the user.","With Hammerspoon, you can write Lua code that interacts with macOS APIs for applications, windows, mouse pointers, filesystem objects, audio devices, batteries, screens, low-level keyboard/mouse events, clipboards, location services, wifi, and more.","Hammerspoon Extensions can either be pure Lua or a mixture of Lua and Objective-C (although since they are just dynamically loaded libraries, they could ultimately be compiled in almost any language such as Swift.","It's extremely powerful, and is very much in active development. We're MASSIVE fans.","Because behind-the-scenes CommandPost is pretty much exactly the same code as Hammerspoon - all Hammerspoon extensions are completely compatible with CommandPost."]},{"i":"how-has-hammerspoon-been-built","l":"How has Hammerspoon been built?","p":["Hammerspoon is actually a fork of Mjolnir by Steven Degutis. Unlike Hammerspoon, Mjolnir aims to be a very minimal application, with its extensions hosted externally and managed using a Lua package manager. Hammerspoon wanted to provide a more integrated experience.","Hammerspoon is composed of three separate logical areas - a Lua runtime wrapper framework called LuaSkin, the core Hammerspoon app which houses the LuaSkin/Lua runtime and provides the ability to load extensions, and various extension modules that expose system APIs to the user's Lua code."]},{"i":"what-is-lua","l":"What is Lua?","p":["What do Adobe Photoshop Lightroom, Angry Birds, Apache HTTP Server, Apache Traffic Server, the Firefox web browser, MediaWiki, and World of Warcraft all have in common? They are all extensible using the cross-platform Lua programming language!","Lua is a powerful and fast programming language that is easy to learn and use and to embed into your application.","Lua is designed to be a lightweight embeddable scripting language and is used for all sorts of applications from games to web applications and image processing.","Lua is freely available for any purpose, including commercial purposes, at absolutely no cost, and using it requires no paperwork. Read the details in the license page."]},{"i":"why-lua--hammerspoon","l":"Why Lua & Hammerspoon?","p":["Building software can be extremely complex and time consuming. There's a big jump in knowledge and experience needed between building a simple HTML page, and a fully-fledged Objective-C application.","We're impatient and lazy (or just busy?). We don't have the time to learn Objective-C or the extremely comprehensive macOS frameworks.","That's why we really love Hammerspoon. Because smart and incredibly generous people have put together some incredible Hammerspoon extensions, we can quickly and easily throw together complex scripts using very simple Lua code.","For example, lots of Mac utilities place a small icon in the system menubar to display their status and let you interact with them. We’re going to use two of Hammerspoon’s extensions to whip up a very simple replacement for the popular utility Caffeine.","This code snippet will create a menubar item that displays either the text SLEEPY if your machine is allowed to go to sleep when you’re not using it, or AWAKE if it will refuse to sleep. The hs.caffeine extension provides the ability to prevent the display from sleeping, but hs.menubar is providing the menubar item.","In this case we create the menubar item and connect a callback (in this case caffeineClicked()) to click events on the menubar item. You can also use icons instead of text, using the :setIcon() method on your menubar object.","As you can see, with very few lines of code, we can do incredibly powerful things.","What we've done with CommandPost is basically take all the power of Hammerspoon, and it's extensive Hammerspoon Extensions, and then built our own set of extensions, such as cp.finalcutpro- which allows use to control Final Cut Pro."]}],[{"i":"installation--setup","l":"Installation & Setup"},{"l":"Introduction","p":["If you're interested in modifying CommandPost-App (the Objective-C based \"engine\" that drives CommandPost), you can follow the instructions below to get setup.","However, if you're less technical, and just want to play around with the Lua side of things, then there's no need to \"build\" CommandPost from scratch using Xcode - you can simply start writing your own Lua plugins, or modifying CommandPost's own Lua files. Skip to the \"Developing CommandPost\" section below to learn more."]},{"l":"Prerequisites"},{"l":"Xcode","p":["Xcode can be downloaded for free from the Mac App Store.","You will need to launch it, and accept the Terms & Conditions before attempting to build CommandPost."]},{"l":"Homebrew","p":["Homebrew can be easily installed by executing the following command into Terminal:","/usr/bin/ruby -e $(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"]},{"l":"greadlink","p":["Once brew is installed, greadlink can be installed by executing the following command into Terminal:","brew install coreutils"]},{"l":"jq","p":["Once brew is installed, jq can be installed by executing the following command into Terminal:","brew install jq"]},{"l":"pip","p":["pip can be installed by downloading get-pip.py to your desktop, then executing the following command in Terminal:","sudo python ~/Desktop/get-pip.py"]},{"l":"DMG Canvas","p":["If you wanting to build a DMG package as part of the CommandPost release, you'll need to buy and install DMG Canvas."]},{"l":"Building CommandPost","p":["CommandPost","CommandPost contains all the Lua scripts that drive the interface and feature set.","CommandPost is made up of two seperate components:","CommandPost-App","CommandPost-App contains the Hammerspoon fork which makes up the main application.","Create a self-signed Code Signing certificate named Internal Code Signing as explained here- however, please make sure you label the certificate \"Internal Code Signing\" and not \"Self-signed Applications\".","Execute ./scripts/build_commandpost_testing.sh","Execute sudo pip install -r requirements.txt","Navigate to the CommandPost project root directory.","Navigate to the CommandPost-App project root directory.","Once complete, navigate to the CommandPost-App project root directory, and the application should be contained within the build folder.","Once downloaded, these two repositories should be contained in the same folder, because when you build CommandPost-App, it will copy the Lua Scripts from the CommandPost folder.","Open a Terminal window.","To build CommandPost-App:","To build your own version of CommandPost, you need to download both these repositories from here:","We use GitHub Desktop, for keeping everything in sync."]},{"l":"Developing CommandPost","p":["By default CommandPost-App will look for the CommandPost Lua scripts inside it's application bundle (i.e. CommandPost.app/Contents/Resources/extensions/), however, if something with the same name exists in ~/Library/Application Support/CommandPost/Extensions/ it will use those files instead.","To speed up development, you can tell CommandPost-App to look for the CommandPost Lua scripts in another location, such as your CommandPost folder (as downloaded from GitHub). This means that you can modify the Lua files within the CommandPost folder whilst CommandPost-App is running, and each time you \"save\" a file, CommandPost will reload, so that you can test things out instantly.","To tell CommandPost-App to use your development folder:","Navigate to the CommandPost project root directory.","Execute ./scripts/load_lua_scripts_from_developer_source.sh","If you want to undo this process, you can:","Execute ./scripts/load_lua_scripts_from_app_bundle.sh"]},{"l":"Building Documentation","p":["To build the documentation you see in this Developers Guide:","Navigate to the CommandPost project root directory.","Execute ./scripts/build_commandpost_docs.sh"]},{"l":"Trashing CommandPost Preferences","p":["The CommandPost preferences are located at: ~/Library/Preferences/org.latenitefilms.CommandPost.plist","To trash this file:","Navigate to the CommandPost project root directory.","Execute ./scripts/trash_commandpost_preferences.sh"]}],[{"l":"Naming Conventions","p":["Both Lua and Objective-C portions of an extension/plugin should contain in-line documention of all of the functions they expose to users of the extension/plugin.","The format for docstrings should follow the standard described below."]},{"l":"Documentation Rules","p":["Any comment that starts with --- or /// is a doc-string (i.e. 3 comment-characters in a row)","Doc-strings continue on until a non-docstring line","Doc-strings for modules contain === my.modulename ===, then any number of lines describing it","Doc-strings for items (functions, variables, etc.) go like this:","The first line starts with my.modulename.item or my.modulename:item-- this is the item name","Any non-alphanumeric character ends the item name and is ignored, i.e. parentheses or spaces:","my.modulename:foo()","my.modulename:foo(bar) - string","my.modulename.foo(bar, fn(int) - int)","my.modulename.foo = {}","The second line is a single capitalized word, like \"Variable\" or \"Function\" or \"Method\" or \"Constant\" or \"Field\"","The remaining lines describe the item","Any comment that starts with 4 comment-characters is ignored","Only files ending in .lua or .m are scanned"]},{"l":"Constants"},{"l":"Variables"},{"l":"Fields","p":["For example:"]},{"l":"Functions","p":["Note that a function is any API function provided by an extension, which doesn't relate to an object created by the extension.","The Parameters and Returns sections should always be present. If there is nothing to describe there, simply list * None. The Notes section is optional and should only be present if there are useful notes."]},{"l":"Methods","p":["Note that a method is any function provided by an extension which relates to an object created by that extension. They are still technically functions, but the signature is differentiated by the presence of a :","The Parameters and Returns sections should always be present. If there is nothing to describe there, simply list * None. The Notes section is optional and should only be present if there are useful notes."]},{"l":"Example Plugin","p":["Here is an example of how plugins should be structured:"]}],[{"l":"Memory Management","p":["Here's some useful links about Lua Memory Management:","Lua Performance Tips","Fixing memory issues in Lua","strict.lua- Checks uses of undeclared global variables.","luamemprofiler- A Memory Profiler for the Lua language.","Vessel- Lua Optimization and Memory Usage"]}],[{"l":"Lua Overview"},{"i":"what-is-lua","l":"What is Lua?","p":["What do DaVinci Resolve, Adobe Photoshop Lightroom, Angry Birds, Apache HTTP Server, Apache Traffic Server, the Firefox web browser, MediaWiki, and World of Warcraft all have in common?","They are all extensible using the cross-platform Lua programming language!","\"Lua\" (pronounced LOO-ah) means \"Moon\" in Portuguese.","Lua is a powerful and fast programming language that is easy to learn and use and to embed into your application.","Lua is designed to be a lightweight embeddable scripting language and is used for all sorts of applications from games to web applications and image processing.","Lua is freely available for any purpose, including commercial purposes, at absolutely no cost, and using it requires no paperwork. Read the details in the license page.","For complete information, visit Lua's web site."]},{"l":"Tutorials","p":["Here's some links to useful tutorials..."]},{"i":"beginners","l":"Beginners:","p":["Lua Tutorial (Video)& Cheatsheet","Intro to Programming in Lua (Video)","Learn Lua in 15 Minutes","Learn Lua the Hard Way"]},{"i":"programmers","l":"Programmers:","p":["Lua for Programmers Part 1: Language Essentials","Learning Lua from JavaScript","Lua for Python Programmers","A Quick Start Guide On Lua For C/C++ Programmers"]},{"i":"advanced","l":"Advanced:","p":["Lua Performance Tips"]},{"i":"the-manual","l":"The Manual:","p":["Programming in Lua (first edition)"]},{"l":"Crash Course"},{"l":"Introduction","p":["Like JavaScript, Lua is a case sensitive language - \"and\", \"And\" or \"AND\" are not the same.","The following are Lua keywords:","The following strings denote other tokens:","Literal strings can be delimited by matching single or double quotes (e.g. 'hello' or \"hello\")","A comment starts with a double hyphen (--) anywhere outside of a string. e.g.:"]},{"i":"values--types","l":"Values & Types","p":["Lua is a dynamically typed language which means that variables do not have types; only values do.","There are 8 basic types in Lua:","nil- type of the value nil whose main property is to be different from any other value. It usually represents the absence of a useful value.","boolean- values false and true (both nil and false make a condition false; any other value makes it true)","number- real numbers","string- arrays of characters (strings may contain any 8-bit character, including embedded zeros)","function- Lua functions","userdata- can hold arbitrary C data (corresponds to a block of raw memory)","thread- independent threads of execution used to implement coroutines","table- arrays that can hold values of any type except nil"]},{"l":"Variables","p":["There are 3 kinds of variables:","Global Variables","Local Variables","Table Fields","Any variable is assumed to be global unless explicitely declared as local.","Asmagill explains Global Variables.","Before the first assignment to a variable, its value is nil.","Square brackets are used to index a table (e.g. value=table[x]). The first value in a table is at position 1 (and not 0 as for C arrays)."]},{"l":"Statements","p":["Lua allows multiple assignments. The syntax for assignments defines a list of variables on the left side and a list of expressions on the right side. The elements in both lists are separated by commas:","Relational operators (always result in false or true):","If control structure (by example):","For control structure (by example):","While control structure (by example):","Repeat control structure (by example):","Table operations (by example):","Concatenation (by example):","Length operator #:"]}],[{"l":"CommandPost-App","p":["CommandPost is made up of two seperate components:","CommandPost-App contains the Hammerspoon fork which makes up the main application.","CommandPost contains all the Lua scripts that drive the interface and feature set.","The goal of CommandPost-App is to always stay compatible with Hammerspoon, to allow us to always be able to bring across bug fixes and new features from the Hammerspoon repository to the ComamndPost-App fork.","We also don't touch the Hammerspoon/setup.lua or extensions/_coresetup/init.lua files within the CommandPost-App repository - this is all done in the CommandPost fork.","In most cases, you should never really need to make changes to CommandPost-App, as all the user interfaces and features are built with Lua scripts.","However, if there is something missing from CommandPost-App that you want to add to the application (for example we added the \"Drag & Drop to Dock\" callbacks), ideally you would commit this to the main Hammerspoon repository first (so that the Hammerspoon community can also benefit from it), and then update CommandPost-App from Hammerspoon/master.","For more information on contributing to Hammerspoon, refer to their Contribution Guide.","There's also a fantastic Hammerspoon Module Walkthrough here, which includes examples of how to make Objective-C extensions.","If you have any questions about this, feel free to submit an issue."]}],[{"l":"CommandPost","p":["CommandPost is made up of two seperate components:","CommandPost-App contains the Hammerspoon fork which makes up the main application.","CommandPost contains all the Lua scripts that drive the interface and feature set.","Essentially, we're using Hammerspoon as an \"engine\" to drive our Lua-based application - which is contained with the CommandPost repository.","The CommandPost src directory contains three folders:","extensions contains all the third party extensions used by CommandPost (such as i18n and resty), and well as the main cp code.","plugins contains all the bundled plugins that drive the CommandPost menubar and shortcut manager, as well as all the core and Final Cut Pro features","setup is used by CommandPost-App. When building CommandPost-App the setup.lua file in the CommandPost repository replaces the Hammerspoon/setup.lua file in CommandPost-App.","If there's a 3rd party extension that you need for development, you can add it to the extensions folder.","If you want to make new features for CommandPost, you can build them as a plugin and store them in the plugins folder.","If you have any questions about this, feel free to submit an issue."]}],[{"l":"Plugin Overview","p":["CommandPost has a very easy to use and powerful plugins functionality, and because Lua is quite a simple language to use, it's really easy to throw together your own CommandPost Plugins!"]},{"l":"Plugins Location","p":["CommandPost will load any 3rd Party Plugins located in:","~/Application Support/CommandPost/Plugins","Internally, all the user interface and features for CommandPost are also plugins. They are automatically loaded from:","CommandPost.app/Contents/Resources/plugins/","This means if you build a plugin that's really awesome, it's very easily to add it to the main CommandPost Application when it's ready."]},{"l":"Plugins Structure","p":["A CommandPost Plugin is simply a macOS bundle which contains Lua scripts (and any other resources you want to throw in it).","When you first run CommandPost it will register the .cpPlugin extension in macOS, which means if you create a folder called SOMETHING.cpPlugin it will prompt you with:","CommandPost Plugin","If you click Add it will turn that newly created folder into a CommandPost Plugin Bundle.","You view the contents of the bundle, simply right click and select Show Package Contents.","Show Package Contents","At a very minimum, the plugin should contain a single .lua file, which will be the Lua code that's executed.","CommandPost Plugins can either be pure Lua or a mixture of Lua and Objective-C (although since they are just dynamically loaded libraries, they could ultimately be compiled in almost any language such as Swift."]},{"l":"Simple Example Plugin","p":["Below is a simple Plugin example that adds a button to the very bottom of the CommandPost menubar, and when click it displays the CommandPost version in a dialog box.","To make things easy for others to understand, and to help with automatic documentation generation, we recommend you use these naming conventions when building your own plugins.","You can learn more about the plugins API here.","You can learn more about cp.config here."]},{"l":"Advanced Example Plugin","p":["Here's a more advanced example plugin for adding CINEMA 4D support to CommandPost:"]}],[{"l":"Translation","p":["CommandPost has been designed with internationalisation in mind.","To translate CommandPost to another language visit POeditor.","We use i18n.lua to handle translations.","We currently have a single translation file for each language, which covers both the Extensions & Plugins within CommandPost-App.","If you're developing a plugin, we recommend still using i18n, and doing your own translations within the plugin."]}],[{"l":"CommandPost"},{"l":"API Documentation","p":["A \"double-ended queue\" implementation. This allows pushing and popping","A [Statement.Modifier] of If that sets the values to match.","A base class for Inspector panels","A base class for the different panels in the Inspector.","A Builder for GridElement s.","A collection of functions for working with values.","A collection of functions that are useful for working with functions.","A collection of handy Dialog tools for CommandPost.","A collection of handy JSON tools.","A collection of handy miscellaneous tools for Lua development.","A collection of tools for handling FCPXML Documents.","A collection of useful functions for working with AX.","A ColorCurve Element.","A Definition is a superclass for a \"runnable\" specification.","A Definition which describes a specific scenario.","A handle representing the link between an Observer and an Observable, as well as any","A HueSaturationCurve Element.","A LazyList is a list that is lazily evaluated. It will dynamically create items on demand,","A list of commands available in the CommandEditor.","A metatype for unarchived NSString objects.","A module of free-standing functions for working with cp.prop values.","A Outline UI element. It extends GridElement, so will inherit all of its properties and methods.","A partial implementation of the websocket API communicating","A pure-LUA implementation of UTF-16 decoding","A pure-LUA implementation of UTF-16 decoding with big-endian ordering.","A pure-LUA implementation of UTF-16 decoding with little-endian ordering.","A RadioGroup that contains buttons to show or hide the Effects and Transitions Browsers.","A registry of supported object types for unarchived values.","A scheduler that uses the hs.timer library to schedule events on an event loop.","A ScrollArea represents an AXScrollArea. They primarily function as a \"portal\"","A set of handy developer tools for CommandPost.","A simple class that lets you test if a value is a particular type.","A Specification is a list of definitions which","A Statement is defined before being executable.","A Statement is defined to enable processing of asynchronous resolvable values such","A Statement that will check if a resolvable matches a predicate, then executes other resolvables.","A Statement that will complete after the only the last result resolves.","A Statement that will complete without sending any values.","A Statement that will execute the provided resolvable values.","A Statement that will require that the resolvable value matches a predicate,","A Statement that will throw the provided message.","A Statement that will update a cp.prop value, then optionally execute other resolvables, and optionally reset the cp.prop to its previous value.","A Statement that will wait for the first value from a resolveable that matches the predicate.","A Statement.Modifier for If that sets a predicate check values against.","A Statement.Modifier for If that sets a specific value to match.","A Statement.Modifier for If that sets a specific value to not match.","A Statement.Modifier for If that sets the values to not match.","A Statement.Modifier is an extension to a Statement that provides additional configuration details.","A Statement.Modifier is defined before being executable.","A Statement.Modifier of Do","A Statement.Modifier of Given","A Statement.Modifier of If, which should be created via If:Then(...):Otherwise(...).","A Statement.Modifier that defines what happens when after SetProp.To is executed.","A Statement.Modifier that defines what happens when an If matches.","A Statement.Modifier that defines what value to set a cp.prop to.","A Statement.Modifier that specifies that the cp.prop is reset to its original value once execution completes.","A Statement.Modifier that specifies the list should be sorted by its 'natural' order - that is a b.","A Statement.Modifier that specifies the list should be sorted by the specified function.","A Subject that provides new Observers with some or all of the most recently","A Subject that tracks its current value. Provides an accessor to retrieve the most","A support class for hs.axuielement management.","A table of statuses used by both cp.websocket.serial and cp.websocket.http to describe the connection status.","A Table UI element. It extends GridElement, so will inherit all of its properties and methods.","A TextField with a subrole of AXSearchField.","A token passed to test functions to allow them to indicate if a test run","A utility class, which provides support for allowing creation of Element instances in a \"builder\" style.","A Window UI element.","Abstract base class for AX elements which form a grid, such as GridElement and Outline.","Adapted from 'utf8.lua' ( https://github.com/Stepets/utf8.lua)","Adobe After Effects Extension","Alert UI Module.","Allows managing values/IDs which can vary between versions.","Allows you to convert time string values found in a FCPXML document into Lua objects,","An abstract base class for sections inside the Index.","An implementation of a logical set, which contains a single unique","An individual run of a test Definition or Specification.","An synchronous/asynchronous test library for Lua.","As per Apple's documentation,","AsyncSubjects are subjects that produce either no values or a single value. If","Audio Inspector Module.","Benchmarking Tool.","Block.","Browser Marker Popup.","Browser Module.","Builder class for ScrollArea.","Callback which triggers when the CommandPost Dock Icon is clicked","Check Box UI Module.","Choices Builder Module.","Choices Module.","Clip Appearance & Filtering Menu Popover","Color Board Module.","Color ColorPuck Module.","Color Curves Module.","Color Inspector Module.","Color Module.","Color Wheels Module.","Combo Box Module.","Command Editor Module.","CommandPost Plugin.","CommandPost Test Scripts.","CommandPost's Internationalisation & Localisation Manger.","Commands Module.","Commands Row.","Console History Manager.","Contains common hs.axuielement matching functions.","Contains functions for comparing axuielement s.","Contains pattern matching utility functions.","Core CommandPost functionality.","cp","cp.18n","cp.adobe.aftereffects","cp.adobe.aftereffects.app","cp.adobe.aftereffects.shortcuts","cp.app","cp.app.menu","cp.app.prefs","cp.apple.commandeditor","cp.apple.compressor","cp.apple.compressor.app","cp.apple.fcpxml","cp.apple.fcpxml.time","cp.apple.fcpxml.timecode","cp.apple.finalcutpro","cp.apple.finalcutpro.app","cp.apple.finalcutpro.browser.AppearanceAndFiltering","cp.apple.finalcutpro.browser.Columns","cp.apple.finalcutpro.cmd.CommandDetail","cp.apple.finalcutpro.cmd.CommandEditor","cp.apple.finalcutpro.cmd.CommandGroups","cp.apple.finalcutpro.cmd.CommandList","cp.apple.finalcutpro.cmd.Commands","cp.apple.finalcutpro.cmd.Commands.Header","cp.apple.finalcutpro.cmd.Commands.Row","cp.apple.finalcutpro.cmd.KeyDetail","cp.apple.finalcutpro.content.Clip","cp.apple.finalcutpro.export.destinations","cp.apple.finalcutpro.export.ExportDialog","cp.apple.finalcutpro.export.GoToPrompt","cp.apple.finalcutpro.export.ReplaceAlert","cp.apple.finalcutpro.export.SaveSheet","cp.apple.finalcutpro.import.MediaImport","cp.apple.finalcutpro.inspector.audio.AudioComponent","cp.apple.finalcutpro.inspector.audio.AudioConfiguration","cp.apple.finalcutpro.inspector.audio.AudioInspector","cp.apple.finalcutpro.inspector.audio.MainProperties","cp.apple.finalcutpro.inspector.audio.TopProperties","cp.apple.finalcutpro.inspector.BaseMotionPanel","cp.apple.finalcutpro.inspector.BasePanel","cp.apple.finalcutpro.inspector.color.ColorBoard","cp.apple.finalcutpro.inspector.color.ColorBoardAspect","cp.apple.finalcutpro.inspector.color.ColorCurve","cp.apple.finalcutpro.inspector.color.ColorCurves","cp.apple.finalcutpro.inspector.color.ColorInspector","cp.apple.finalcutpro.inspector.color.ColorPuck","cp.apple.finalcutpro.inspector.color.ColorWell","cp.apple.finalcutpro.inspector.color.ColorWheel","cp.apple.finalcutpro.inspector.color.ColorWheels","cp.apple.finalcutpro.inspector.color.CorrectionsBar","cp.apple.finalcutpro.inspector.color.HueSaturationCurve","cp.apple.finalcutpro.inspector.color.HueSaturationCurves","cp.apple.finalcutpro.inspector.color.ValueIndicator","cp.apple.finalcutpro.inspector.generator.GeneratorInspector","cp.apple.finalcutpro.inspector.info.InfoInspector","cp.apple.finalcutpro.inspector.info.InfoProjectInspector","cp.apple.finalcutpro.inspector.Inspector","cp.apple.finalcutpro.inspector.InspectorProperty","cp.apple.finalcutpro.inspector.share.ShareInspector","cp.apple.finalcutpro.inspector.text.TextInspector","cp.apple.finalcutpro.inspector.title.TitleInspector","cp.apple.finalcutpro.inspector.transition.TransitionInspector","cp.apple.finalcutpro.inspector.video.VideoInspector","cp.apple.finalcutpro.main.BackgroundTasksDialog","cp.apple.finalcutpro.main.Browser","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover","cp.apple.finalcutpro.main.EffectsBrowser","cp.apple.finalcutpro.main.FindAndReplaceTitleText","cp.apple.finalcutpro.main.FullScreenPlayer","cp.apple.finalcutpro.main.GeneratorsBrowser","cp.apple.finalcutpro.main.KeywordEditor","cp.apple.finalcutpro.main.KeywordField","cp.apple.finalcutpro.main.LibrariesBrowser","cp.apple.finalcutpro.main.LibrariesFilmstrip","cp.apple.finalcutpro.main.LibrariesList","cp.apple.finalcutpro.main.LibrariesSidebar","cp.apple.finalcutpro.main.MediaBrowser","cp.apple.finalcutpro.main.Playhead","cp.apple.finalcutpro.main.PrimaryToolbar","cp.apple.finalcutpro.main.PrimaryWindow","cp.apple.finalcutpro.main.SecondaryWindow","cp.apple.finalcutpro.main.TranscodeMedia","cp.apple.finalcutpro.menu","cp.apple.finalcutpro.plugins","cp.apple.finalcutpro.plugins.guiscan","cp.apple.finalcutpro.prefs.EditingPanel","cp.apple.finalcutpro.prefs.GeneralPanel","cp.apple.finalcutpro.prefs.ImportPanel","cp.apple.finalcutpro.prefs.Panel","cp.apple.finalcutpro.prefs.PlaybackPanel","cp.apple.finalcutpro.prefs.PreferencesWindow","cp.apple.finalcutpro.strings","cp.apple.finalcutpro.timeline.Appearance","cp.apple.finalcutpro.timeline.AudioRole","cp.apple.finalcutpro.timeline.AudioSubrole","cp.apple.finalcutpro.timeline.CaptionsRole","cp.apple.finalcutpro.timeline.CaptionsSubrole","cp.apple.finalcutpro.timeline.Contents","cp.apple.finalcutpro.timeline.Index","cp.apple.finalcutpro.timeline.IndexCaptions","cp.apple.finalcutpro.timeline.IndexClips","cp.apple.finalcutpro.timeline.IndexClips.Type","cp.apple.finalcutpro.timeline.IndexMode","cp.apple.finalcutpro.timeline.IndexRoles","cp.apple.finalcutpro.timeline.IndexRolesArea","cp.apple.finalcutpro.timeline.IndexRolesList","cp.apple.finalcutpro.timeline.IndexSection","cp.apple.finalcutpro.timeline.IndexTags","cp.apple.finalcutpro.timeline.IndexTags.Type","cp.apple.finalcutpro.timeline.Role","cp.apple.finalcutpro.timeline.SpeedPopover","cp.apple.finalcutpro.timeline.Timeline","cp.apple.finalcutpro.timeline.Toolbar","cp.apple.finalcutpro.timeline.Toolbar.Browser","cp.apple.finalcutpro.timeline.Toolbar.Clip","cp.apple.finalcutpro.timeline.ToolPalette","cp.apple.finalcutpro.timeline.VideoRole","cp.apple.finalcutpro.timeline.VideoSubrole","cp.apple.finalcutpro.viewer.ControlBar","cp.apple.finalcutpro.viewer.InfoBar","cp.apple.finalcutpro.viewer.Viewer","cp.apple.finalcutpro.workflowextensions.CommandPostWindow","cp.apple.motion","cp.apple.motion.app","cp.battery","cp.bench","cp.blackmagic.resolve","cp.blackmagic.resolve.app","cp.blackmagic.resolve.color.Color","cp.blackmagic.resolve.color.Tracker","cp.blackmagic.resolve.main.PrimaryWindow","cp.buffer","cp.choices","cp.choices.builder","cp.collect.LazyList","cp.collect.List","cp.collect.Queue","cp.collect.Set","cp.commands","cp.commands.command","cp.commands.englishKeyCodes","cp.commands.shortcut","cp.commands.shortcut.builder","cp.config","cp.config.dockIconClickCallback","cp.config.fileDroppedToDockIconCallback","cp.config.shutdownCallback","cp.config.textDroppedToDockIconCallback","cp.console.history","cp.deferred","cp.delegator","cp.delegator is a middleclass\"mix-in\" that allows for","cp.dev","cp.dialog","cp.disk","cp.docs","cp.feedback","cp.fn","cp.fn.args","cp.fn.ax","cp.fn.prop","cp.fn.string","cp.fn.table","cp.fn.value","cp.highland2","cp.highland2.app","cp.highland2.Document","cp.highland2.Sidebar","cp.i18n.language","cp.i18n.languageID","cp.i18n.localeID","cp.i18n.region","cp.i18n.script","cp.idle","cp.ids","cp.interpolate","cp.is","cp.json","cp.just","cp.lazy","cp.lazy is a middleclass\"mix-in\" that allows for","cp.localized","cp.nib","cp.nib.archiver","cp.nib.type.NSString","cp.nib.types","cp.pattern","cp.plist","cp.plist.archiver","cp.plist.plistParser","cp.plugins","cp.plugins.env","cp.plugins.plugin","cp.prop","cp.protect","cp.result","cp.rx","cp.rx.AsyncSubject","cp.rx.BehaviorSubject","cp.rx.CooperativeScheduler","cp.rx.go","cp.rx.go.Do","cp.rx.go.Do.Then","cp.rx.go.Done","cp.rx.go.First","cp.rx.go.Given","cp.rx.go.Given.Then","cp.rx.go.If","cp.rx.go.If.Are","cp.rx.go.If.AreNot","cp.rx.go.If.Is","cp.rx.go.If.IsNot","cp.rx.go.If.Matches","cp.rx.go.If.Then","cp.rx.go.If.Then.Otherwise","cp.rx.go.If.Then.Otherwise.Then","cp.rx.go.Last","cp.rx.go.List","cp.rx.go.List.Sorted","cp.rx.go.List.SortedBy","cp.rx.go.Require","cp.rx.go.Require.Are","cp.rx.go.Require.AreNot","cp.rx.go.Require.Is","cp.rx.go.Require.IsNot","cp.rx.go.Require.Matches","cp.rx.go.Retry","cp.rx.go.SetProp","cp.rx.go.SetProp.To","cp.rx.go.SetProp.To.Then","cp.rx.go.SetProp.To.Then.ThenReset","cp.rx.go.Statement","cp.rx.go.Statement.Definition","cp.rx.go.Statement.Modifier","cp.rx.go.Statement.Modifier.Definition","cp.rx.go.Throw","cp.rx.go.WaitUntil","cp.rx.ImmediateScheduler","cp.rx.Observable","cp.rx.Observer","cp.rx.Reference","cp.rx.RelaySubject","cp.rx.Subject","cp.rx.TimeoutScheduler","cp.sourcewatcher","cp.spec","cp.spec.DefaultHandler","cp.spec.Definition","cp.spec.Error","cp.spec.expect","cp.spec.Handled","cp.spec.Handler","cp.spec.Message","cp.spec.Report","cp.spec.Run","cp.spec.Run.This","cp.spec.Scenario","cp.spec.Specification","cp.spec.TestCase","cp.spec.TestSuite","cp.spec.Where","cp.strings","cp.strings.source.plist","cp.strings.source.table","cp.test","cp.text","cp.text.matcher","cp.time.flicks","cp.tools","cp.ui.Alert","cp.ui.axutils","cp.ui.axutils.compare","cp.ui.axutils.match","cp.ui.Builder","cp.ui.Button","cp.ui.Cell","cp.ui.CheckBox","cp.ui.ColorWell","cp.ui.Column","cp.ui.ComboBox","cp.ui.Dialog","cp.ui.DisclosureTriangle","cp.ui.Element","cp.ui.ElementCache","cp.ui.GridElement","cp.ui.GridElement.Builder","cp.ui.GridElement.OfRows","cp.ui.Group","cp.ui.Group.Builder","cp.ui.Image","cp.ui.List","cp.ui.Menu","cp.ui.MenuButton","cp.ui.notifier","cp.ui.OldOutline","cp.ui.OldRow","cp.ui.OldTable","cp.ui.Outline","cp.ui.Popover","cp.ui.PopUpButton","cp.ui.PropertyRow","cp.ui.RadioButton","cp.ui.RadioGroup","cp.ui.Row","cp.ui.Row.Builder","cp.ui.ScrollArea","cp.ui.ScrollArea.Builder","cp.ui.ScrollBar","cp.ui.SearchField","cp.ui.Sheet","cp.ui.Slider","cp.ui.SplitGroup","cp.ui.Splitter","cp.ui.StaticText","cp.ui.Table","cp.ui.TextArea","cp.ui.TextField","cp.ui.TextField.Builder","cp.ui.Toolbar","cp.ui.Window","cp.utf16","cp.utf16.be","cp.utf16.le","cp.watcher","cp.web.block","cp.web.generate","cp.web.html","cp.web.text","cp.web.ui","cp.web.xml","cp.websocket.event","cp.websocket.frame","cp.websocket.http","cp.websocket.serial","cp.websocket.status","Created via Scenario:where(...).","Default implementation of Handler, which","Defines a Group builder.","Defines a Row builder.","Defines a TextField Builder.","Defines Statements to make processing of","Description","Disclosure Triangle UI Module.","Documentation Tools.","Each Otherwise can have a subsequent Then which will be executed after the previous one resolves.","Editing Panel Module.","Effects Browser Module.","Export Dialog Module.","Extends IndexSection","Extends Role","Extends Row","Extends Timeline","Extends: Statement","Feedback Form.","File Dropped to Dock Icon Callback","Final Cut Pro Browser List View Columns","Final Cut Pro GUI Plugin Scanner.","Final Cut Pro Menu Helper Functions.","Full Screen Window Player.","Functions for Generating HTML markup.","Functions for Generating HTML UI Items","Functions for Generating XML markup.","Functions for managing text on the web.","Functions for working with function arguments.","Functions for working with timecode in Final Cut Pro XML. Note that","Functions to control and manage Apple's Command Editor - used in Final Cut Pro,","General Panel Module.","Generator Inspector Module. This appears for both Generators and Titles.","Generators Browser Module.","Go To Prompt.","Helps look up localized names for folders.","Highland 2 Document Window extension.","Highland 2 support.","Implementation of RFC-6455, Section 5","Import Panel Module.","Info Inspector Module when a Project is selected.","Inspector","InspectorProperty contains helper functions for handling common property","Internal byte buffer type. Allows additional chunks of bytes","Keyword Editor Module.","Keyword Text Field Module.","Libraries Browser Module.","Libraries Filmstrip Module.","Libraries List Module.","Libraries Sidebar Browser Module.","Lists are similar tables which can contain nil items without shortening the length.","Loads strings from a plist with allowing for a given language variation. Eg:","Loads strings from provided tables, allowing for a given language variation. Eg:","Manage CommandPost's constants and settings.","Manages Observables using coroutines and a virtual clock that must be updated","Media Browser Module.","Media Import","Menu Button Module.","Module","Observables push values to Observers.","Observers are simple objects that receive values from Observables.","Playback Panel Module.","Playhead Module.","plistParser ( https://codea.io/talk/discussion/1269/code-plist-parser)","Pop Up Button Module.","Preferences Panel.","Preferences Window Module.","Primary Window Module.","Processes the contents of the GridElement as a list of rows.","Provides a full HTTP-based websocket implementation.","Provides a function that will interpolate values into a string.","Provides a way of checking values match expected results. At it's core, it uses assert to make the check.","Provides access to application preferences, typically stored via NSUserDefaults or CFProperties.","Provides access to AXScrollBar axuielement values.","Provides access to clip options such as skimming, audio skimming, soloing and snap.","Provides access to resources in the plugin environment. In generally, this will be files stored in a Complex Plugin's folder.","Provides access to the 'Captions' section of the Timeline Index","Provides access to the 'Roles' section of the Timeline Index","Provides access to the 'Tags' section of the Timeline Index","Provides access to the list of Share Destinations configured for the user.","Provides access to various properties of the battery. Each of these properties","Provides an Error message, which can be thrown via the error function.","Provides an Message message, which can be thrown via the error function.","Provides caching for Element subclasses that want to cache children.","Provides provides details about disk devices attached to the system.","Provides strings from (potentially) multiple sources, with support for loading from multiple languages.","Provides support for loading NIB files stored in the NIBArchive format.","Provides support for measuring time in flicks, a base unit of time useful for","Provides support for NIB files.","Provides the set of ISO 15924 language scripts.","Provides the set of ISO 3166-1 region codes and names.","Provides the set of ISO 693-1/2/3 language codes and names.","Radio Button Module.","Reactive Extensions for Lua.","Reads & Writes plist data.","Replace Alert","Represents a \"Find and Replace Title Text\" dialogue box.","Represents a clip of media inside FCP.","Represents a Column in a Table.","Represents a particular aspect of the color board (Color/Saturation/Exposure).","Represents a single Color Well in the Color Wheels Inspector.","Represents a single property row, typically in a Property Inspector.","Represents a Window which has a AXSubrole of AXDialog.","Represents an app's menu bar, providing multi-lingual access to find and","Represents an AXCell axuielement. This can be used directly, or can be subclassed to provide more specific access to the cell contents.","Represents an AXImage axuielement value.","Represents an AXList axuielement value.","Represents an AXOutline axuielement.","Represents an AXRadioGroup, providing utility methods.","Represents an AXRow axuielement.","Represents an AXSplitter.","Represents an AXTable in the Apple Accessibility UX API.","Represents the Background Tasks warning dialog.","Represents the bar of information about the Viewer(format, title, viewing options).","Represents the bottom \"control\" bar on a Viewer","Represents the Compressor application, providing functions that allow different tasks to be accomplished.","Represents the Final Cut Pro application, providing functions that allow different tasks to be accomplished.","Represents the list of Command Groups in the CommandList.","Represents the list of Roles in the IndexRoles.","Represents the Motion application, providing functions that allow different tasks to be accomplished.","Represents the result of an operation which may end in success or failure.","Represents the sidebar for a document opened in Highland.","Represents the Tool Palette Menu Button in the Timeline.","Represents the Transcode Media sheet.","Returns a table of all the English Key Codes.","Save Sheet","Scans an entire system for Final Cut Pro Effects, Generators, Titles & Transitions.","Schedules Observables by running all operations immediately.","Secondary Window Module.","Share Inspector Module.","Sheet UI Module.","Shortcut Commands","Shortcut Commands Builder Module.","Shutdown Callback Module.","Slider Module.","Specifies that the Require d value Is a specific value.","Specifies that the Require d value IsNot a specific value.","Specifies that the Require d value Matches a function predicate.","Specifies that the Require d values Are a specific value.","Specifies that the Require d values AreNot a specific value.","Split Group UI. A SplitGroup is a container that can be split into multiple sections.","Static Text Module.","String-related functional programming helpers.","Subclasses of this can customise how reports are handled.","Subjects function both as an Observer and as an Observable. Subjects inherit all","Supports 'defrosting' a table which is made up from an 'NSKeyArchiver' record.","Supports long-lived 'AX' notifiers. Configure the application to watch, the","Table-related functions.","Test Suite.","Text Dropped to Dock Icon Callback","Text Field Module.","Text Inspector Module.","The Audio Configuration section of the Audio Inspector.","The Blackmagic DaVinci Resolve Extension.","The Button type extends Element and includes all its","The collection of RadioButtons that allow filtering by Video/Audio/Title.","The CommandPost Workflow Extension Window.","The Correction selection/management bar at the top of the ColorInspector","The cp.app for Adobe After Effects.","The cp.app for Apple's Compressor.","The cp.app for Apple's Motion.","The cp.app for Blackmagic DaVinci Resolve.","The cp.app for Final Cut Pro. Will automatically determine","The cp.app for Highland 2.","The cp.strings for I18N lookups related to Final Cut Pro.","The header of the Commands.","The list of available commands (depending on search and/or CommandGroup","The MainProperties UI for the AudioInspector.","The results of a test run.","The set of event types received from websocket connections.","The TopProperties class is used to represent the top properties group of the Audio Inspector.","This class assists with working with macOS apps. It provides functions for","This class provides a UI for displaying the details of a command when it is selected on the CommandList.","This class provides a UI for displaying the details of a key when it is selected on the keyboard layout.","This extension contains functions which simplify the creation of standard UI events","This extension makes it simple to defer multiple actions after a delay from the initial execution.","This extension provides support for setting up 'event watchers'.","This is a simple plugin manager.","This is a utility library for helping keep track of single-value property states. Each property provides access to a single value. Must be readable, but may be read-only. It works by creating a table which has a get and (optionally) a set function which are called when changing the state.","This library allows tasks to be queue for execution when the computer has","This module provides functions to help with performing tasks which may be","This module provides support for loading, manipulating, and comparing unicode text data.","Timeline Appearance Popup module.","Timeline Contents Module.","Timeline Index Mode Radio Group Module.","Timeline Index Module.","Timeline Index Roles List.","Timeline Module.","Timeline Toolbar","Timeline Toolbar.","Title Inspector Module.","Toolbar Module.","Tracker","Transition Inspector Module.","Translations between After Effects shortcuts and Hammerspoon-friendly shortcuts.","UI ColorWell.","UI for AXMenus.","UI Group.","UI Text Area.","Utility function for protecting a table from being modified.","Utility functions to support hs.axuielement.","ValueIndicator Module.","Video Inspector Module.","Viewer Module.","Watches folders for specific file extensions and reloads the app if they change.","Wraps cp.test into a subclass of Scenario."]}],[{"l":"cp","p":["Core CommandPost functionality."]},{"l":"Submodules","p":["cp.18n","cp.adobe","cp.app","cp.apple","cp.battery","cp.bench","cp.blackmagic","cp.buffer","cp.choices","cp.collect","cp.commands","cp.config","cp.console","cp.deferred","cp.delegator","cp.dev","cp.dialog","cp.disk","cp.docs","cp.feedback","cp.fn","cp.highland2","cp.i18n","cp.idle","cp.ids","cp.interpolate","cp.is","cp.json","cp.just","cp.lazy","cp.localized","cp.nib","cp.pattern","cp.plist","cp.plugins","cp.prop","cp.protect","cp.result","cp.rx","cp.sourcewatcher","cp.spec","cp.strings","cp.test","cp.text","cp.time","cp.tools","cp.ui","cp.utf16","cp.watcher","cp.web","cp.websocket"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","imageBase64","init","Fields- Variables which can only be accessed from an object returned by a constructor","connectClip"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"imageBase64","p":["Signature","cp.web.imageBase64(pathToImage) - string","Type","Function","Description","Creates a base65 image string.","Parameters","pathToImage - path to the image","Returns","A string","Notes"]},{"l":"init","p":["Signature","cp.init()","Type","Function","Description","Initialise CommandPost","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"connectClip","p":["Signature","cp.cp.apple.finalcutpro.timeline.Timeline.connectClip cp.ui.Button","Type","Field","Description","The Button which connects a clip from the Browser to the Primary Storyline in the Timeline."]}],[{"i":"cp18n","l":"cp.18n","p":["CommandPost's Internationalisation & Localisation Manger."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","cp.18n.init() - none","Type","Function","Description","Initialise the module.","Parameters","None","Returns","Notes"]}],[{"i":"cpadobeaftereffects","l":"cp.adobe.aftereffects","p":["Adobe After Effects Extension"]},{"l":"Submodules","p":["cp.adobe.aftereffects.app","cp.adobe.aftereffects.shortcuts"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","preferences","Functions- API calls offered directly by the extension","allowScriptsToWriteFilesAndAccessNetwork","preferencesFilePath","preferencesPath","refreshPreferences","shortcutsPreferences","shortcutsPreferencesPath"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"preferences","p":["Signature","cp.adobe.aftereffects.preferences cp.app.prefs","Type","Constant","Description","The cp.app.prefs for After Effects."]},{"l":"Functions"},{"l":"allowScriptsToWriteFilesAndAccessNetwork","p":["Signature","cp.adobe.aftereffects:allowScriptsToWriteFilesAndAccessNetwork() - boolean","Type","Function","Description","Is \"Allow Scripts to Write Files and Access Network\" enabled in After Effects Preferences?","Parameters","None","Returns","A boolean","Notes"]},{"l":"preferencesFilePath","p":["Signature","cp.adobe.aftereffects:preferencesFilePath() - string","Type","Function","Description","The path to the main Preferences file.","Parameters","None","Returns","A string","Notes"]},{"l":"preferencesPath","p":["Signature","cp.adobe.aftereffects:preferencesPath() - string | nil","Type","Function","Description","The path to After Effects Preferences folder.","Parameters","None","Returns","A string or nil if no path can be found.","Notes"]},{"l":"refreshPreferences","p":["Signature","cp.adobe.aftereffects:refreshPreferences() - none","Type","Function","Description","If After Effects is running, this forces the preferences file to be saved to disk.","Parameters","None","Returns","Notes"]},{"l":"shortcutsPreferences","p":["Signature","cp.adobe.aftereffects:shortcutsPreferences() - table","Type","Function","Description","Gets a table of all the active After Effects keyboard shortcuts.","Parameters","None","Returns","A table","Notes"]},{"l":"shortcutsPreferencesPath","p":["Signature","cp.adobe.aftereffects:shortcutsPreferencesPath() - string","Type","Function","Description","Gets the active shortcut key preferences file path.","Parameters","None","Returns","A string","Notes"]}],[{"i":"cpadobeaftereffectsapp","l":"cp.adobe.aftereffects.app","p":["The cp.app for Adobe After Effects."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","app"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"app","p":["Signature","cp.adobe.aftereffects.app cp.app","Type","Constant","Description","The cp.app for After Effects."]}],[{"i":"cpadobeaftereffectsshortcuts","l":"cp.adobe.aftereffects.shortcuts","p":["Translations between After Effects shortcuts and Hammerspoon-friendly shortcuts."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","keys","labels","modifiers"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"keys","p":["Signature","cp.adobe.aftereffects.shortcuts.keys - table","Type","Constant","Description","Table containing key translations."]},{"l":"labels","p":["Signature","cp.adobe.aftereffects.shortcuts.labels - table","Type","Constant","Description","Table containing label translations."]},{"l":"modifiers","p":["Signature","cp.adobe.aftereffects.shortcuts.modifiers - table","Type","Constant","Description","Table containing modifier translations."]}],[{"i":"cpapp","l":"cp.app","p":["This class assists with working with macOS apps. It provides functions for finding, checking the running status, version number, path, and many other values related to an application. It also provides support for launching, quitting, and other activities related to applications.","This extension differs from the hs.application extension in several ways:","cp.app instances are long-lived. You request it once and it will stay up-to-date even if the app quits.","It makes extensive use of cp.prop, so you can watch many most properties of the app and get live notifications when they change."]},{"l":"Submodules","p":["cp.app.menu","cp.app.prefs"]},{"l":"API Overview","p":["apps","baseLocale","baseResourcesPath","bestSupportedLocale","bundleID","bundleIDs","Constructors- API calls which return an object, typically one that offers API methods","currentLocale","description","displayName","doHide","doLaunch","doQuit","doRestart","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","focusedWindow","focusedWindowUI","forBundleID","frontmost","frontmostApp","Functions- API calls offered directly by the extension","hide","hsApplication","icon","info","installed","is","isSupportedLocale","isWindowAnimationEnabled","keyStroke","launch","localeResourcesPath","mainWindowUI","Methods- API calls which can only be made on an object returned by a constructor","modalDialogOpen","notifier","path","pid","preferences","quit","registerWindowType","resourcesPath","running","searchResources","show","showing","supportedLocales","UI","update","Variables- Configurable values","version","versionString","windows","windowsUI"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"frontmostApp","p":["Signature","cp.app.frontmostApp cp.prop: cp.app; read-only; live","Type","Variable","Description","Returns the most recent 'registered' app that was active, other than CommandPost itself."]},{"l":"Functions"},{"l":"apps","p":["Signature","cp.app.apps() - table","Type","Function","Description","Returns a list of all apps that have been requested via forBundleID, in no particular order.","Parameters","None","Returns","A list of cp.app instances.","Notes"]},{"l":"bundleIDs","p":["Signature","cp.app.bundleIDs() - table","Type","Function","Description","Returns a list of Bundle IDs which have been requested via forBundleID.","Parameters","None","Returns","A list of Bundle IDs.","Notes"]},{"l":"is","p":["Signature","cp.app.is(thing) - boolean","Type","Function","Description","Checks if the provided thing is a cp.app instance.","Parameters","thing - The thing to check.","Returns","true if it is a cp.app instance, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"forBundleID","p":["Signature","cp.app.forBundleID(bundleID)","Type","Constructor","Description","Returns the cp.app for the specified Bundle ID. If the app has already been created, the same instance of cp.app will be returned on subsequent calls.","Parameters","bundleID - The application bundle ID to find the app for.","Returns","The cp.app for the bundle.","Notes"]},{"l":"Fields"},{"l":"baseLocale","p":["Signature","cp.app.baseLocale cp.prop: cp.i18n.localeID; read-only","Type","Field","Description","Returns the localeID of the development region. This is the 'Base' locale for I18N."]},{"l":"baseResourcesPath","p":["Signature","cp.app.baseResourcesPath cp.prop: string; read-only; live","Type","Field","Description","A prop for the file path to the Content/Resources/Base.lproj folder"]},{"l":"currentLocale","p":["Signature","cp.app.currentLocale cp.prop: cp.i18n.localeID; live","Type","Field","Description","Gets and sets the current locale for the application."]},{"l":"description","p":["Signature","cp.app.description - string","Type","Field","Returns the short description of the class as \"cp.app: \""]},{"l":"displayName","p":["Signature","cp.app.displayName cp.prop: string; read-only; live","Type","Field","Description","The application display name as a string."]},{"l":"focusedWindow","p":["Signature","cp.app.focusedWindow cp.prop: cp.ui.Window; read-only; live","Type","Field","Description","The currently-focused Window. This may be a subclass of Window if"]},{"l":"focusedWindowUI","p":["Signature","cp.app.focusedWindowUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the UI containing the currently-focused window for the app."]},{"l":"frontmost","p":["Signature","cp.app.frontmost cp.prop: boolean; read-only; live","Type","Field","Description","Is the application currently frontmost?"]},{"l":"hsApplication","p":["Signature","cp.app.hsApplication cp.prop: hs.application; read-only; live","Type","Field","Description","Returns the running hs.application for the application, or nil if it's not running."]},{"l":"info","p":["Signature","cp.app.info cp.prop: table; read-only; live","Type","Field","Description","The info table for the application, if available."]},{"l":"installed","p":["Signature","cp.app.installed cp.prop: boolean; read-only","Type","Field","Description","Checks if the application currently installed."]},{"l":"isWindowAnimationEnabled","p":["Signature","cp.app.isWindowAnimationEnabled cp.prop: bool; live","Type","Field","Description","A prop that determines if window animations (eg. popups, etc.) are enabled for the"]},{"l":"localeResourcesPath","p":["Signature","cp.app.localeResourcesPath cp.prop: string; read-only; live","Type","Field","Description","A prop for the file path to the locale-specific resources"]},{"l":"mainWindowUI","p":["Signature","cp.app.mainWindowUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the UI containing the currently-focused window for the app."]},{"l":"modalDialogOpen","p":["Signature","cp.app.modalDialogOpen cp.prop: boolean; read-only","Type","Field","Description","Checks if a modal dialog window is currently opon."]},{"l":"path","p":["Signature","cp.app.path cp.prop: string; read-only; live","Type","Field","Description","Path to the application, or nil if not found."]},{"l":"pid","p":["Signature","cp.app.pid cp.prop: number; read-only; live","Type","Field","Description","Returns the PID for the currently-running application, or nil if it's not running."]},{"l":"preferences","p":["Signature","cp.app.preferences cp.app.prefs","Type","Field","Description","The current preferences for the application."]},{"l":"resourcesPath","p":["Signature","cp.app.resourcesPath cp.prop: string; read-only; live","Type","Field","Description","A prop for the file path to the Contents/Resources folder inside the app."]},{"l":"running","p":["Signature","cp.app.running cp.prop: boolean; read-only; live","Type","Field","Description","Checks if the application currently is running."]},{"l":"showing","p":["Signature","cp.app.showing cp.prop: boolean; read-only; live","Type","Field","Description","Is the app visible on screen?"]},{"l":"supportedLocales","p":["Signature","cp.app.supportedLocales cp.prop: table of cp.i18n.localeID; read-only; live","Type","Field","Description","Returns a list of cp.i18n.localeID values for locales that are supported by this app."]},{"l":"UI","p":["Signature","cp.app.UI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the application's axuielement, if available."]},{"l":"version","p":["Signature","cp.app.version cp.prop: semver; read-only; live","Type","Field","Description","The application version as a semver.","Notes","If the application is running it will get the version of the active application as a string, otherwise, it will use hs.application.infoForBundleID() to find the version."]},{"l":"versionString","p":["Signature","cp.app.versionString cp.prop: string; read-only; live","Type","Field","Description","The application version as a string.","Notes","If the application is running it will get the version of the active application as a string, otherwise, it will use hs.application.infoForBundleID() to find the version."]},{"l":"windows","p":["Signature","cp.app.windows cp.prop: table of cp.ui.Window; read-only; live","Type","Field","Description","Returns a list containing the Window instances currently available."]},{"l":"windowsUI","p":["Signature","cp.app.windowsUI cp.prop: table of hs.axuielement; read-only; live","Type","Field","Description","Returns the UI containing the list of windows in the app."]},{"l":"Methods"},{"l":"bestSupportedLocale","p":["Signature","cp.app:bestSupportedLocale(locale) - cp.i18n.localeID or nil","Type","Method","Description","Finds the closest match for the specified locale. The returned locale will be in the same language as the provided locale, and as close a match as possible with the region and script.","Parameters","locale - The local to match","Returns","The closest supported locale or nil if none are available in the language.","Notes"]},{"l":"bundleID","p":["Signature","cp.app:bundleID() - string","Type","Method","Description","Returns the Bundle ID for the app.","Parameters","None","Returns","The Bundle ID.","Notes"]},{"l":"doHide","p":["Signature","cp.app:doHide() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement which will hide the app if it's currently running.","Parameters","None","Returns","A Statement, resolving to true if the app is running and was successfully hidden, or false otherwise.","Notes"]},{"l":"doLaunch","p":["Signature","cp.app:doLaunch([waitSeconds[, path]]) - cp.rx.Statement boolean","Type","Method","Description","Returns a Statement that can be run to launch or focus the current app. It will resolve to true when the app was launched.","Parameters","waitSeconds - (optional) The number of seconds to wait for it to load. Defaults to 30 seconds. path - (optional) The alternate path of the app to launch.","Returns","The Statement, resolving to true after the app is frontmost.","Notes","By default the Statement will time out after 30 seconds, sending an error signal."]},{"l":"doQuit","p":["Signature","cp.app:doQuit() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement that will attempt to quit the app when executed.","Parameters","None.","Returns","The Statement, resolving to true if the app was running and was quit successfully, otherwise false.","Notes","The Statement will time out after 60 seconds by default. This can be changed by calling the TimeoutAfter method on the Statement before executing."]},{"l":"doRestart","p":["Signature","cp.app:doRestart() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement which will attempt to restart the app. If the app was not running at the time, no action is taken and false is returned. If it was running then the app will be attempted to quit then restarted.","Parameters","None.","Returns","The Statement, resolving to true if the app was running and was quit and restarted successfully, otherwise false.","Notes","The Statement will time out after 60 seconds by default. This can be changed by calling the TimeoutAfter method on the Statement before executing. If you have multiple versions of the same app on your system, this will restart with the same version that was running when the restart was requested."]},{"l":"doShow","p":["Signature","cp.app:doShow() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement which will show the app if it's currently running.","Parameters","None","Returns","A Statement, resolving to true if the app is running and was successfully shown, or false otherwise.","Notes"]},{"l":"hide","p":["Signature","cp.app:hide() - self","Type","Method","Description","Hides the application, if it's currently running.","Parameters","None","Returns","The cp.app instance.","Notes"]},{"l":"icon","p":["Signature","cp.app:icon() - image","Type","Method","Description","Returns the application icon as a hs.image","Parameters","None","Returns","The icon as a hs.image object","Notes"]},{"l":"isSupportedLocale","p":["Signature","cp.app:isSupportedLocale(locale) - boolean","Type","Method","Description","Checks if the specified locale is supported. The locale can be either a string with the locale code (eg. \"en_AU\") or a cp.i18n.localeID.","Parameters","locale - The locale code string or localeID to check.","Returns","true if it is supported, otherwise false.","Notes"]},{"l":"keyStroke","p":["Signature","cp.app:keyStroke(modifiers, character) - none","Type","Method","Description","Generates and emits a single keystroke event pair for the supplied keyboard modifiers and character to the application.","Parameters","modifiers - A table containing the keyboard modifiers to apply (\"fn\", \"ctrl\", \"alt\", \"cmd\" or \"shift\") character - A string containing a character to be emitted","Returns","None","Notes"]},{"l":"launch","p":["Signature","cp.app:launch([waitSeconds], [path]) - self","Type","Method","Description","Launches the application, or brings it to the front if it was already running.","Parameters","waitSeconds- If provided, the number of seconds to wait until the launch completes. If nil, it will return immediately. path- An optional full path to an application without an extension (i.e /Applications/Final Cut Pro 10.3.4). This allows you to load previous versions of the application.","Returns","The cp.app instance.","Notes"]},{"l":"notifier","p":["Signature","cp.app:notifier() - cp.ui.notifier","Type","Method","Description","Returns a notifier that is tracking the application UI element. It has already been started.","Parameters","None","Returns","The notifier.","Notes"]},{"l":"quit","p":["Signature","cp.app:quit(waitSeconds) - self","Type","Method","Description","Asks the application to quit, if it's running. The app may not have actually quit after this function runs, even if true is returned. The application may take some time, or may be prompting the user for input, etc.","Parameters","waitSeconds- If povided, the number of seconds to wait until the quit completes. If nil, it will return immediately.","Returns","The cp.app instance.","Notes"]},{"l":"registerWindowType","p":["Signature","cp.app:registerWindowType(windowClass[, options]) - cp.app","Type","Method","Description","Registers the specified class as one which will be used when accessing a specific AXWindow instance.","Parameters","windowClass - The class that will be used to create the window. It should be a subclass of Window options - (optional) if provided, it will be passed the hs.asm.axuielement being wrapped, and should return true or false.","Returns","the same instance of the cp.app for further configuration.","Notes","Options: matches: a function that will receive the AXWindow instance and should return true or false. persistent: if set to true, the Window instance will be cached and checked when windows appear and disappear. By default, it will use the matches function on the class itself to check. An alternate function can be provided by putting it in the {matches = function} property of the options table. By default, Windows instances are assumed to be short-lived, and will not persist beyond the window opening or closing. To indicate that it should stick around, add persistent = true to the options table. If the new AXWindow matches, this class will be used when requesting the set of windows via the [#windows] method or the [#focusedWindow] or [#mainWindow] props. Classes registered later will supersede those registered earlier, so ensure that matchers are specific enough to not recognise more window UIs than they should."]},{"l":"searchResources","p":["Signature","cp.app:searchResources(value) - hs.task","Type","Method","Description","Creates a hs.task which will search for the specified string value in the resources of the current app.","Parameters","value - The string value to search for.","Returns","hs.task which is already running, searching for the value. Results will be output in the Error Log.","Notes","This may take some time to complete, depending on how many resources the app contains."]},{"l":"show","p":["Signature","cp.app:show() - self","Type","Method","Description","Ensure the app is onscreen if it is currently running.","Parameters","None","Returns","The cp.app instance.","Notes"]},{"l":"update","p":["Signature","cp.app:update() - self","Type","Method","Description","Updates the app, triggering any watchers if values have changed.","Parameters","None","Returns","The cp.app instance.","Notes"]}],[{"i":"cpappmenu","l":"cp.app.menu","p":["Represents an app's menu bar, providing multi-lingual access to find and trigger menu items."]},{"l":"API Overview","p":["addMenuFinder","app","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","doFindMenuUI","doIsEnabled","doSelectMenu","Fields- Variables which can only be accessed from an object returned by a constructor","findMenuUI","getMenuTitles","isChecked","isEnabled","menu","Methods- API calls which can only be made on an object returned by a constructor","NIB_FILE","ROLE","selectMenu","showing","STORYBOARD_NAME","UI","visitMenuItems"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"NIB_FILE","p":["Signature","cp.app.menu.NIB_FILE - string","Type","Constant","Description","Main NIB File."]},{"l":"ROLE","p":["Signature","cp.app.menu.ROLE - string","Type","Constant","Description","The menu role"]},{"l":"STORYBOARD_NAME","p":["Signature","cp.app.menu.STORYBOARD_NAME - string","Type","Constant","Description","Main Storyboard name."]},{"l":"Constructors"},{"l":"menu","p":["Signature","cp.app.menu(app) - menu","Type","Constructor","Description","Constructs a new menu for the specified App.","Parameters","app - The cp.app instance the menu belongs to.","Returns","a new menu instance","Notes"]},{"l":"Fields"},{"l":"showing","p":["Signature","cp.app.menu.showing cp.prop: boolean; read-only; live","Type","Field","Description","Tells you if the app's Menu Bar is visible."]},{"l":"UI","p":["Signature","cp.app.menu.UI cp.prop:hs.axuielement; read-only; live","Type","Field","Description","Returns the axuielement representing the menu."]},{"l":"Methods"},{"l":"addMenuFinder","p":["Signature","cp.app.menu:addMenuFinder(finder) - nothing","Type","Method","Description","Registers an AXMenuItem finder function. The finder's job is to take an individual 'find' step and return either the matching child, or nil if it can't be found. It is used by the addMenuFinder function.","Parameters","finder- The finder function","Returns","The AXMenuItem found, or nil.","Notes","The finder should have the following signature: function(parentItem, path, childName, locale) - childItem The elements are: parentItem - The AXMenuItem containing the children. E.g. the Go To menu under Window. path - An array of strings in the specified locale leading to the parent item. E.g. {Window, Go To}. childName - The name of the next child to find, in the specified locale. E.g. Libraries. locale - The cp.i18n.localeID that the menu titles are in. childItem - The AXMenuItem that was found, or nil if not found."]},{"l":"app","p":["Signature","cp.app.menu:app() - cp.app","Type","Method","Description","Returns the cp.app instance this belongs to.","Parameters","None","Returns","The cp.app.","Notes"]},{"l":"doFindMenuUI","p":["Signature","cp.app.menu:doFindMenuUI(path[, options]) - cp.rx.go.Statement hs.axuielement","Type","Method","Description","Returns a Statement that when executed will emit each of the menu items along the path.","Parameters","path - the table of path items. options - (optional) table of additional configuration options.","Returns","The Statement, ready to be executed.","Notes","Each step on the path can be either one of: a string - The exact name of the menu item. a number - The menu item number, starting from 1. a function - Passed one argument - the Menu UI to check - returning true if it matches. The options may contain: locale - The locale that any strings in the path are in. Defaults to \"en\". plain - Whether or not to disable the pattern matching feature. Defaults to false. Examples: myApp:menu():doFindMenuUI({Edit, Copy}):Now(function(item) print(item:title() .. enabled: , item:enabled()) end, error)"]},{"l":"doIsEnabled","p":["Signature","cp.app.menu:doIsEnabled(path, options) - cp.rx.go.Statement","Type","Method","Description","A Statement that returns true if the item at the end of the path is enabled.","Parameters","path - The menu path to check. options - The options.","Returns","A Statement to execute.","Notes"]},{"l":"doSelectMenu","p":["Signature","cp.app.menu:doSelectMenu(path, options) - cp.rx.go.Statement boolean","Type","Method","Description","Selects a Menu Item based on the provided menu path.","Parameters","path - The list of menu items you'd like to activate. options - (optional) The table of options to apply.","Returns","The Statement, ready to execute.","Notes","Each step on the path can be either one of: a string - The exact name of the menu item. a number - The menu item number, starting from 1. a function - Passed one argument - the Menu UI to check - returning true if it matches. The options may include: locale - The localeID or string for the locale that the path values are in. pressAll - If true, all menu items will be pressed on the way to the final destination. plain - Whether or not to disable the pattern matching feature. Defaults to false. Examples: previewApp:menu():doSelectMenu({File, Take Screenshot, From Entire Screen}):Now()"]},{"l":"findMenuUI","p":["Signature","cp.app.menu:findMenuUI(path[, options]) - Menu UI, table","Type","Method","Description","Finds a specific Menu UI element for the provided path.","Parameters","path - The path list to search for. options - (Optional) The table of options.","Returns","The Menu UI, or nil if it could not be found. The full list of Menu UIs for the path in a table.","Notes","E.g. findMenuUI({Edit, Copy}) returns the 'Copy' menu item in the 'Edit' menu. Each step on the path can be either one of: a string - The exact name of the menu item. a number - The menu item number, starting from 1. a function - Passed one argument - the Menu UI to check - returning true if it matches. The options can contain: locale - The localeID or string with the locale code. Defaults to \"en\". plain - Whether or not to disable the pattern matching feature. Defaults to false."]},{"l":"getMenuTitles","p":["Signature","cp.app.menu:getMenuTitles([locales]) - table","Type","Method","Description","Returns a table with the available menus, items and sub-menu, in the specified locales (if available). If no locales are specified, the app's current locale is loaded.","Parameters","locales - An optional single localeID or a list of localeID s to ensure are loaded.","Returns","A table of Menu Bar Values","Notes","This menu may get added to over time if additional locales are loaded - previously loaded locales are not removed from the cache."]},{"l":"isChecked","p":["Signature","cp.app.menu:isChecked(path[, options]) - boolean","Type","Method","Description","Is a menu item checked?","Parameters","path - At table containing the path to the menu bar item. options - The locale the path is in. Defaults to \"en\".","Returns","true if checked otherwise false.","Notes","The options may include: locale - The localeID or string with the locale code. Defaults to \"en\"."]},{"l":"isEnabled","p":["Signature","cp.app.menu:isEnabled(path[, options]) - boolean","Type","Method","Description","Is a menu item enabled?","Parameters","path - At table containing the path to the menu bar item. options - The optional table of options.","Returns","true if enabled otherwise false.","Notes","The options may include: locale - The localeID or string with the locale code. Defaults to \"en\"."]},{"l":"selectMenu","p":["Signature","cp.app.menu:selectMenu(path[, options]) - boolean","Type","Method","Description","Selects a Menu Item based on the list of menu titles in English.","Parameters","path - The list of menu items you'd like to activate. options - (optional) The table of options to apply.","Returns","true if the press was successful.","Notes","Each step on the path can be either one of: a string - The exact name of the menu item. a number - The menu item number, starting from 1. a function - Passed one argument - the Menu UI to check - returning true if it matches. The options may include: locale - The localeID or string for the locale that the path values are in. pressAll - If true, all menu items will be pressed on the way to the final destination. plain - Whether or not to disable the pattern matching feature. Defaults to false. Example usage: require(cp.app).forBundleID(com.apple.FinalCut):menu():selectMenu({View, Browser, Toggle Filmstrip/List View})"]},{"l":"visitMenuItems","p":["Signature","cp.app.menu:visitMenuItems(visitFn[, options]]) - nil","Type","Method","Description","Walks the menu tree, calling the visitFn on all the 'item' values - that is, AXMenuItem s that don't have any sub-menus.","Parameters","visitFn - The function called for each menu item. options - (optional) The table of options.","Returns","Nothing","Notes","The options may include: locale - The localeID or string with the locale code. Defaults to \"en\". startPath - The path to the menu item to start at. The visitFn will be called on each menu item with the following parameters: function(path, menuItem) The menuItem is the AXMenuItem object, and the path is an array with the path to that menu item. For example, if it is the \"Copy\" item in the \"Edit\" menu, the path will be { Edit }."]}],[{"i":"cpappprefs","l":"cp.app.prefs","p":["Provides access to application preferences, typically stored via NSUserDefaults or CFProperties. To access the preferences, simply pass in the Bundle ID (eg. \"com.apple.Preview\") and it will return a table whose keys can be accessed or updated, or iterated via ipairs.","For example:"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","bundleID","get","is","prop","set","Constructors- API calls which return an object, typically one that offers API methods","prefs"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"bundleID","p":["Signature","cp.app.prefs.bundleID(prefs) - string","Type","Function","Description","Retrieves the bundleID associated with the cp.app.prefs instance.","Parameters","prefs - the prefs object to query","Returns","The Bundle ID string, or nil if it's not a cp.app.prefs.","Notes"]},{"l":"get","p":["Signature","cp.app.prefs.get(prefs, key[, defaultValue]) - value","Type","Function","Description","Retrieves the specifed key from the provided prefs. If there is no current value, the defaultValue is returned.","Parameters","prefs - The prefs instance. key - The key to retrieve. defaultValue - The value to return if none is currently set.","Returns","The current value, or defaultValue if not set.","Notes"]},{"l":"is","p":["Signature","cp.app.prefs.is(thing) - boolean","Type","Function","Description","Checks if the thing is a cp.app.prefs instance.","Parameters","thing - The value to check","Returns","true if if's a prefs, otherwise false.","Notes"]},{"l":"prop","p":["Signature","cp.app.prefs.prop(prefs, key[, defaultValue[, deepTable]]) - cp.prop","Type","Function","Description","Retrieves the cp.prop for the specified key. It can be watched for changes. Subsequent calls will return the same cp.prop instance.","Parameters","prefs - The prefs instance. key - The key to get/set. defaultValue - The value if no default values is currently set (defaults to nil). deepTable - Should the prop use deep table (defaults to true).","Returns","The cp.prop for the key.","Notes"]},{"l":"set","p":["Signature","cp.app.prefs.set(prefs, key, value[, defaultValue]) - none","Type","Function","Description","Sets the key/value for the specified prefs instance.","Parameters","prefs - The prefs instance. key - The key to set. value - the new value. defaultValue - The default value.","Returns","Nothing.","Notes","If the value equals the defaultValue, the preference is removed rather than being set."]},{"l":"Constructors"},{"l":"prefs","p":["Signature","cp.app.prefs(bundleID) - cp.app.prefs","Type","Constructor","Description","Creates a new cp.app.prefs instance, pointing at the specified bundleID.","Parameters","bundleID The Bundle ID to access preferences for.","Returns","A new cp.app.prefs with read/write access to the application's preferences.","Notes"]}],[{"i":"cpapplecommandeditor","l":"cp.apple.commandeditor","p":["Functions to control and manage Apple's Command Editor - used in Final Cut Pro, Motion and Compressor."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","padKeys","supportedModifiers","Functions- API calls offered directly by the extension","characterStringToKeyCode","keypadCharacterToKeyCode","modifierMaskToModifiers","modifierMatch","shortcutsFromCommandSet","translateModifiers"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"padKeys","p":["Signature","cp.apple.commandeditor.padKeys - table","Type","Constant","Description","List of number keys on the number pad. Also mapped with the key name set to true for lookup purposes."]},{"l":"supportedModifiers","p":["Signature","cp.apple.commandeditor.supportedModifiers - table","Type","Constant","Description","The list of supported modifiers"]},{"l":"Functions"},{"l":"characterStringToKeyCode","p":["Signature","cp.apple.commandeditor.characterStringToKeyCode() - string","Type","Function","Description","Translate Keyboard Character Strings from Command Set Format into Hammerspoon Format.","Parameters","input - Character String","Returns","Keycode as String or \"\"","Notes"]},{"l":"keypadCharacterToKeyCode","p":["Signature","cp.apple.commandeditor.keypadCharacterToKeyCode() - string","Type","Function","Description","Translate Keyboard Keypad Character Strings from Command Set Format into Hammerspoon Format.","Parameters","input - Character String","Returns","string or nil","Notes"]},{"l":"modifierMaskToModifiers","p":["Signature","cp.apple.commandeditor.modifierMaskToModifiers() - table","Type","Function","Description","Translate Keyboard Modifiers from Apple's Property List Format into Hammerspoon Format.","Parameters","value - Modifiers String","Returns","A table of modifier strings.","Notes"]},{"l":"modifierMatch","p":["Signature","cp.apple.commandeditor.modifierMatch(inputA, inputB) - boolean","Type","Function","Description","Compares two modifier tables.","Parameters","inputA - table of modifiers inputB - table of modifiers","Returns","true if there's a match otherwise false","Notes","This function only takes into account 'ctrl', 'alt', 'cmd', 'shift'."]},{"l":"shortcutsFromCommandSet","p":["Signature","cp.apple.commandeditor.shortcutsFromCommandSet(id, commandSet) - table","Type","Function","Description","Gets a specific command from a specified Command Set and returns a table of Shortcuts.","Parameters","id - The ID of the command you want to get. commandSet - A table containing an entire Command Set.","Returns","A table of shortcuts for a specific command.","Notes"]},{"l":"translateModifiers","p":["Signature","cp.apple.commandeditor.translateModifiers() - table","Type","Function","Description","Translate Keyboard Modifiers from Command Set Format into Hammerspoon Format.","Parameters","input - Modifiers String","Returns","table","Notes"]}],[{"i":"cpapplecompressor","l":"cp.apple.compressor","p":["Represents the Compressor application, providing functions that allow different tasks to be accomplished."]},{"l":"Submodules","p":["cp.apple.compressor.app"]},{"l":"API Overview","p":["ALLOWED_IMPORT_ALL_EXTENSIONS","ALLOWED_IMPORT_AUDIO_EXTENSIONS","ALLOWED_IMPORT_IMAGE_EXTENSIONS","ALLOWED_IMPORT_VIDEO_EXTENSIONS","BUNDLE_ID","bundleID","Constants- Useful values which cannot be changed","doRestart","EARLIEST_SUPPORTED_VERSION","hide","launch","Methods- API calls which can only be made on an object returned by a constructor","notifier","path","quit","show"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"ALLOWED_IMPORT_ALL_EXTENSIONS","p":["Signature","cp.apple.compressor.ALLOWED_IMPORT_ALL_EXTENSIONS","Type","Constant","Description","Table of all file extensions Final Cut Pro can import."]},{"l":"ALLOWED_IMPORT_AUDIO_EXTENSIONS","p":["Signature","cp.apple.compressor.ALLOWED_IMPORT_AUDIO_EXTENSIONS","Type","Constant","Description","Table of audio file extensions Final Cut Pro can import."]},{"l":"ALLOWED_IMPORT_IMAGE_EXTENSIONS","p":["Signature","cp.apple.compressor.ALLOWED_IMPORT_IMAGE_EXTENSIONS","Type","Constant","Description","Table of image file extensions Final Cut Pro can import."]},{"l":"ALLOWED_IMPORT_VIDEO_EXTENSIONS","p":["Signature","cp.apple.compressor.ALLOWED_IMPORT_VIDEO_EXTENSIONS","Type","Constant","Description","Table of video file extensions Final Cut Pro can import."]},{"l":"BUNDLE_ID","p":["Signature","cp.apple.compressor.BUNDLE_ID","Type","Constant","Description","Compressor's Bundle ID"]},{"l":"EARLIEST_SUPPORTED_VERSION","p":["Signature","cp.apple.compressor.EARLIEST_SUPPORTED_VERSION semver","Type","Constant","Description","The earliest version this API supports."]},{"l":"Methods"},{"l":"bundleID","p":["Signature","cp.apple.compressor:bundleID() - string","Type","Method","Description","Returns the Compressor Bundle ID","Parameters","None","Returns","A string of the Compressor Bundle ID","Notes"]},{"l":"doRestart","p":["Signature","cp.apple.compressor:doRestart() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will restart the application.","Parameters","None","Returns","true if the application was running and restarted successfully.","Notes"]},{"l":"hide","p":["Signature","cp.apple.compressor:hide() - self","Type","Method","Description","Hides Compressor","Parameters","None","Returns","The compressor instance.","Notes"]},{"l":"launch","p":["Signature","cp.apple.compressor:launch([waitSeconds]) - self","Type","Method","Description","Launches Compressor, or brings it to the front if it was already running.","Parameters","waitSeconds - if provided, we will wait for up to the specified seconds for the launch to complete.","Returns","true if Compressor was either launched or focused, otherwise false (e.g. if Compressor doesn't exist)","Notes"]},{"l":"notifier","p":["Signature","cp.apple.compressor:notifier() - cp.ui.notifier","Type","Method","Description","Returns a notifier that is tracking the application UI element. It has already been started.","Parameters","None","Returns","The notifier.","Notes"]},{"l":"path","p":["Signature","cp.apple.compressor:path() - string or nil","Type","Method","Description","Path to Compressor Application","Parameters","None","Returns","A string containing Compressor's filesystem path, or nil if the bundle identifier could not be located","Notes"]},{"l":"quit","p":["Signature","cp.apple.compressor:quit([waitSeconds]) - self","Type","Method","Description","Quits Compressor","Parameters","waitSeconds - if provided, we will wait for the specified time for the quit to complete before returning.","Returns","The compressor instance.","Notes"]},{"l":"show","p":["Signature","cp.apple.compressor:show() - self","Type","Method","Description","Activate Compressor","Parameters","None","Returns","The compressor instance.","Notes"]}],[{"i":"cpapplecompressorapp","l":"cp.apple.compressor.app","p":["The cp.app for Apple's Compressor."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpapplefcpxml","l":"cp.apple.fcpxml","p":["A collection of tools for handling FCPXML Documents."]},{"l":"Submodules","p":["cp.apple.fcpxml.time","cp.apple.fcpxml.timecode"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","HAS_OFFSET_ATTRIBUTE","Functions- API calls offered directly by the extension","latestDTDVersion","supportedDTDs","valid"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"HAS_OFFSET_ATTRIBUTE","p":["Signature","cp.apple.fcpxml.HAS_OFFSET_ATTRIBUTE table: string:boolean","Type","Constant","Description","Table of elements that have an offset attribute."]},{"l":"Functions"},{"l":"latestDTDVersion","p":["Signature","cp.apple.fcpxml.latestDTDVersion() - string","Type","Function","Description","Gets the latest supported FCPXML DTD version.","Parameters","None","Returns","The latest DTD version as a string, for example: \"1.8\".","Notes"]},{"l":"supportedDTDs","p":["Signature","cp.apple.fcpxml.supportedDTDs() - table","Type","Function","Description","Returns a table containing the version numbers of all the DTD documents included in this extension.","Parameters","None","Returns","A table of supported DTD versions as strings.","Notes"]},{"l":"valid","p":["Signature","cp.apple.fcpxml:valid(path[, version]) - string|boolean, string","Type","Function","Description","Validates an FCPXML document against a document type definition (DTD).","Parameters","path - The path and path of the FCPXML document you want to validate. version - The optional FCPXML version you want to validate against.","Returns","The FCPXML path or false if not valid. The output from xmllint as a string.","Notes","If a version is not supplied, we will try and read the version from the file itself, and if that's not possible, we'll default to the latest FCPXML version. If a fcpxmld bundle path is supplied, this function will return the path to the Info.fcpxml document if valid."]}],[{"i":"cpapplefcpxmltime","l":"cp.apple.fcpxml.time","p":["Allows you to convert time string values found in a FCPXML document into Lua objects, that do all the operations using rational numbers.","Final Cut Pro expresses time values as a rational number of seconds with a 64-bit numerator and a 32-bit denominator. Frame rates for NTSC-compatible media, for example, use a frame duration of 1001/30000s (29.97 fps) or 1001/60000s (59.94 fps). If a time value is equal to a whole number of seconds, Final Cut Pro may reduce the fraction into whole seconds (for example, 5s)."]},{"l":"API Overview","p":["add","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","div","doesIntersect","eq","Functions- API calls offered directly by the extension","gcd","lt","max","min","mul","new","ONE","sub","tonumber","tostring","unm"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"ONE","p":["Signature","cp.apple.fcpxml.time.ONE - timeObject","Type","Constant","Description","A time object with a value of 0/1s."]},{"l":"Functions"},{"l":"add","p":["Signature","cp.apple.fcpxml.time.add(a, b) - timeObject","Type","Function","Description","Adds one time object to another.","Parameters","a - A time object. b - A time object.","Returns","A new time object","Notes"]},{"l":"div","p":["Signature","cp.apple.fcpxml.time.div(a, b) - timeObject","Type","Function","Description","Divides one time object with another.","Parameters","a - A time object. b - A time object.","Returns","A new time object","Notes"]},{"l":"doesIntersect","p":["Signature","cp.apple.fcpxml.time.doesIntersect(aStart, aDuration, bStart, bDuration) - boolean","Type","Function","Description","Checks to see if two clips intersect.","Parameters","aStart - The start time of clip one as a time object. aDuration - The duration of clip one as a time object. bStart - The start time of clip two as a time object. bDuration - The duration of clip two as a time object.","Returns","A boolean","Notes"]},{"l":"eq","p":["Signature","cp.apple.fcpxml.time.eq(a, b) - boolean","Type","Function","Description","Compares two time objects to ensure they're equal.","Parameters","a - A time object. b - A time object.","Returns","A boolean","Notes"]},{"l":"gcd","p":["Signature","cp.apple.fcpxml.time.gcd(numerator, denominator) - number","Type","Function","Description","Gets the greatest common divisor.","Parameters","numerator - A numerator as a number denominator - A denominator as a number","Returns","A number containing the greatest common divisor.","Notes"]},{"l":"lt","p":["Signature","cp.apple.fcpxml.time.lt(a, b) - boolean","Type","Function","Description","Is time object A less than or equal to time object B?","Parameters","a - A time object. b - A time object.","Returns","A boolean","Notes"]},{"l":"max","p":["Signature","cp.apple.fcpxml.time.max(a, b) - timeObject","Type","Function","Description","Gets the bigger of the two time objects.","Parameters","a - A time object. b - A time object.","Returns","A time object.","Notes"]},{"l":"min","p":["Signature","cp.apple.fcpxml.time.min(a, b) - timeObject","Type","Function","Description","Gets the smaller of the two time objects.","Parameters","a - A time object. b - A time object.","Returns","A time object.","Notes"]},{"l":"mul","p":["Signature","cp.apple.fcpxml.time.mul(object, value) - timeObject","Type","Function","Description","To the power of a time value.","Parameters","object - A time object. value - The power value","Returns","A new time object","Notes"]},{"l":"sub","p":["Signature","cp.apple.fcpxml.time.sub(a, b) - timeObject","Type","Function","Description","Subtract one time object from another.","Parameters","a - A time object. b - A time object.","Returns","A new time object","Notes"]},{"l":"tonumber","p":["Signature","cp.apple.fcpxml.time.tonumber(a) - timeObject","Type","Function","Description","Gets the number value of a time object.","Parameters","a - A time object.","Returns","A number","Notes"]},{"l":"tostring","p":["Signature","cp.apple.fcpxml.time.tostring(a) - timeObject","Type","Function","Description","Gets the string value of a time object.","Parameters","a - A time object.","Returns","A string","Notes"]},{"l":"unm","p":["Signature","cp.apple.fcpxml.time.unm(a) - timeObject","Type","Function","Description","Negates a time object.","Parameters","a - A time object.","Returns","A new time object","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.apple.fcpxml.time.new([numerator], [denominator]) - timeObject","Type","Constructor","Description","Parameters","An optional numerator as a number (i.e. 3400) or a string value (i.e. \"3400/2500s\" or \"2s\"). Defaults to \"0s\". A optional denominator as a number (i.e 2500)","Returns","A new cp.apple.fcpxml.time object.","Notes"]}],[{"i":"cpapplefcpxmltimecode","l":"cp.apple.fcpxml.timecode","p":["Functions for working with timecode in Final Cut Pro XML. Note that a timecode does not have any concept of a frame rate, so it is simple a structure of hours, minutes, seconds and frames.","To calculate the exact number of frames for a timecode, call the timecode:totalFramesWithFPS(fps) method, where fps is a number.","To calculate the exact number of seconds for a timecode, call the timecode:timeWithFrameDuration(frameDuration) method, where frameDuration is the frame duration as a time value.","Note, this currently does not support \"Drop Frame\" timecodes."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","fromFFSSMMHH","fromHH_MM_SS_FF","new","Methods- API calls which can only be made on an object returned by a constructor","__tostring","timeWithFrameDuration","totalFramesWithFPS"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"fromFFSSMMHH","p":["Signature","cp.apple.fcpxml.timecode.fromFFSSMMHH(timecodeString) - timecode","Type","Constructor","Description","Parses a timecode string in the format FFSSMMHH and returns a new timecode object.","Parameters","timecodeString - The timecode string.","Returns","The new timecode object.","Notes"]},{"l":"fromHH_MM_SS_FF","p":["Signature","cp.apple.fcpxml.timecode.fromHH_MM_SS_FF(timecodeString) - timecode","Type","Constructor","Description","Parses a timecode string in the format HH:MM:SS:FF and returns a new timecode object.","Parameters","timecodeString - The timecode string.","Returns","The new timecode object.","Notes"]},{"l":"new","p":["Signature","cp.apple.fcpxml.timecode.new(hours, minutes, seconds, frames)","Type","Constructor","Description","Creates a new timecode object.","Parameters","hours - The number of hours. minutes - The number of minutes. seconds - The number of seconds. frames - The number of frames.","Returns","The new timecode object.","Notes"]},{"l":"Methods"},{"l":"__tostring","p":["Signature","cp.apple.fcpxml.timecode:__tostring() - string","Type","Method","Description","Returns the timecode as a string in the format HH:MM:SS:FF.","Parameters","None","Returns","The timecode string.","Notes"]},{"l":"timeWithFrameDuration","p":["Signature","cp.apple.fcpxml.timecode:timeWithFrameDuration(frameDuration) - time","Type","Method","Description","Calculates the time for the timecode, given the frame duration time value.","Parameters","frameDuration - The frame duration as a time value.","Returns","The time value.","Notes"]},{"l":"totalFramesWithFPS","p":["Signature","cp.apple.fcpxml.timecode:totalFramesWithFPS(fps) - number","Type","Method","Description","Calculates the total number of frames for the timecode, given the specified frame rate.","Parameters","fps - The frame rate as a number.","Returns","The total number of frames as a number.","Notes"]}],[{"i":"cpapplefinalcutpro","l":"cp.apple.finalcutpro","p":["Represents the Final Cut Pro application, providing functions that allow different tasks to be accomplished.","Generally, you will require the cp.apple.finalcutpro module to import it, like so:","Then, there are the UpperCase files, which represent the application itself:","MenuBar- The main menu bar.","prefs/PreferencesWindow- The preferences window.","etc...","The fcp variable is the root application. It has functions which allow you to perform tasks or access parts of the UI. For example, to open the Preferences window, you can do this:","In general, as long as Final Cut Pro is running, actions can be performed directly, and the API will perform the required operations to achieve it. For example, to toggle the 'Create Optimized Media' checkbox in the 'Import' section of the 'Preferences' window, you can simply do this:","The API will automatically open the Preferences window, navigate to the 'Import' panel and toggle the checkbox.","The UpperCase classes also have a variety of UI methods. These will return the axuielement for the relevant GUI element, if it is accessible. If not, it will return nil. These allow direct interaction with the GUI if necessary. It's most useful when adding new functions to UpperCase files for a particular element.","This can also be used to 'wait' for an element to be visible before performing a task. For example, if you need to wait for the Preferences window to finish loading before doing something else, you can do this with the just library:","By using the just library, we can do a loop waiting until the function returns a result that will give up after a certain time period (10 seconds by default).","Of course, we have a specific support function for that already, so you could do this instead:","Delegates to: app, menu","Notes: All values/methods/props from delegates can be accessed directly from the cp.apple.finalcutpro instance. For example:"]},{"l":"Submodules","p":["cp.apple.finalcutpro.app","cp.apple.finalcutpro.browser","cp.apple.finalcutpro.cmd","cp.apple.finalcutpro.content","cp.apple.finalcutpro.export","cp.apple.finalcutpro.import","cp.apple.finalcutpro.inspector","cp.apple.finalcutpro.main","cp.apple.finalcutpro.menu","cp.apple.finalcutpro.plugins","cp.apple.finalcutpro.prefs","cp.apple.finalcutpro.strings","cp.apple.finalcutpro.timeline","cp.apple.finalcutpro.viewer","cp.apple.finalcutpro.workflowextensions"]},{"l":"API Overview","p":["activeCommandSet","activeCommandSetPath","activeLibraryPaths","alert","ALLOWED_IMPORT_AUDIO_EXTENSIONS","ALLOWED_IMPORT_EXTENSIONS","ALLOWED_IMPORT_IMAGE_EXTENSIONS","ALLOWED_IMPORT_VIDEO_EXTENSIONS","audioEnhancements","audioLanes","audioMeters","backgroundTasksDialog","browser","changePosition","closeLibrary","Color","colorBoard","colorCorrection","commandDescriptions","commandEditor","commandNames","commandPostWorkflowExtension","commandSet","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","contentUI","customWorkspaces","defaultCommandSetPath","deselectAll","doShortcut","EARLIEST_SUPPORTED_VERSION","effects","EVENT_DESCRIPTION_PATH","eventViewer","exportDialog","Fields- Variables which can only be accessed from an object returned by a constructor","findAndReplaceTitleText","FLEXO_LANGUAGES","fullScreenPlayer","Functions- API calls offered directly by the extension","generators","getCommandShortcuts","getPath","importXML","inspector","inspectorUnits","isAudioScrubbingEnabled","isFrontmost","isInstalled","isModalDialogOpen","isPlaying","isRunning","isShowing","isSkimmingEnabled","isSupported","isUnsupported","keysWithString","keywordEditor","libraries","matches","media","mediaImport","Methods- API calls which can only be made on an object returned by a constructor","openAndSavePanelDefaultPath","openLibrary","pan","PASTEBOARD_UTI","playButton","playFullScreen","playImage","plugins","preferences","preferencesWindow","preset","primaryWindow","recentLibraryNames","recentLibraryPaths","resetDialogWarnings","scanPlugins","secondaryWindow","selectedWorkspace","selectLibrary","string","textArea","textLayerLeft","textLayerRight","timecodeField","timeDisplay","timeline","toolbar","TranscodeMedia","transitions","UI","userCommandSetPath","userCommandSets","validateAudioUnits","Variables- Configurable values","viewer","volume","workflowExtensionNames","WORKSPACES_PATH"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"ALLOWED_IMPORT_AUDIO_EXTENSIONS","p":["Signature","cp.apple.finalcutpro.ALLOWED_IMPORT_AUDIO_EXTENSIONS - table","Type","Constant","Description","Table of audio file extensions Final Cut Pro can import."]},{"l":"ALLOWED_IMPORT_EXTENSIONS","p":["Signature","cp.apple.finalcutpro.ALLOWED_IMPORT_EXTENSIONS - table","Type","Constant","Description","Table of all file extensions Final Cut Pro can import."]},{"l":"ALLOWED_IMPORT_IMAGE_EXTENSIONS","p":["Signature","cp.apple.finalcutpro.ALLOWED_IMPORT_IMAGE_EXTENSIONS - table","Type","Constant","Description","Table of image file extensions Final Cut Pro can import."]},{"l":"ALLOWED_IMPORT_VIDEO_EXTENSIONS","p":["Signature","cp.apple.finalcutpro.ALLOWED_IMPORT_VIDEO_EXTENSIONS - table","Type","Constant","Description","Table of video file extensions Final Cut Pro can import."]},{"l":"EARLIEST_SUPPORTED_VERSION","p":["Signature","cp.apple.finalcutpro.EARLIEST_SUPPORTED_VERSION - string","Type","Constant","Description","The earliest version of Final Cut Pro supported by this module."]},{"l":"EVENT_DESCRIPTION_PATH","p":["Signature","cp.apple.finalcutpro.EVENT_DESCRIPTION_PATH - string","Type","Constant","Description","The Event Description Path."]},{"l":"FLEXO_LANGUAGES","p":["Signature","cp.apple.finalcutpro.FLEXO_LANGUAGES - table","Type","Constant","Description","Table of Final Cut Pro's supported Languages for the Flexo Framework"]},{"l":"PASTEBOARD_UTI","p":["Signature","cp.apple.finalcutpro.PASTEBOARD_UTI - string","Type","Constant","Description","Final Cut Pro's Pasteboard UTI"]},{"l":"preferences","p":["Signature","cp.apple.finalcutpro.preferences cp.app.prefs","Type","Constant","Description","The cp.app.prefs for Final Cut Pro."]},{"l":"WORKSPACES_PATH","p":["Signature","cp.apple.finalcutpro.WORKSPACES_PATH - string","Type","Constant","Description","The path to the custom workspaces folder."]},{"l":"Variables"},{"l":"activeCommandSet","p":["Signature","cp.apple.finalcutpro.activeCommandSet cp.prop: table; live","Type","Variable","Description","Contins the 'Active Command Set' as a table. The result is cached, but"]},{"l":"customWorkspaces","p":["Signature","cp.apple.finalcutpro:customWorkspaces cp.prop: table; live","Type","Variable","Description","A table containing the display names of all the user created custom workspaces."]},{"l":"openAndSavePanelDefaultPath","p":["Signature","cp.apple.finalcutpro:openAndSavePanelDefaultPath cp.prop: string","Type","Variable","Description","A string containing the default open/save panel path."]},{"l":"selectedWorkspace","p":["Signature","cp.apple.finalcutpro.selectedWorkspace cp.prop: string; live","Type","Variable","Description","The currently selected workspace name. The result is cached, but updated"]},{"l":"Functions"},{"l":"commandSet","p":["Signature","cp.apple.finalcutpro.commandSet(path) - string","Type","Function","Description","Gets the Command Set at the specified path as a table.","Parameters","path- The path to the Command Set.","Returns","The Command Set as a table, or nil if there was a problem.","Notes"]},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.CommandEditor.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"i":"matches-1","l":"matches","p":["Signature","cp.apple.finalcutpro.viewer.TranscodeMedia.matches(element) - boolean","Type","Function","Description","Checks if the element is an TranscodeMedia instance.","Parameters","element - The axuielement to check.","Returns","true if it matches the pattern for a Viewer TranscodeMedia.","Notes"]},{"l":"userCommandSetPath","p":["Signature","cp.apple.finalcutpro.userCommandSetPath() - string or nil","Type","Function","Description","Gets the path where User Command Set files are stored.","Parameters","None","Returns","A path as a string or nil if the folder doesn't exist.","Notes"]},{"l":"workflowExtensionNames","p":["Signature","cp.apple.finalcutpro.workflowExtensionNames() - table","Type","Function","Description","Gets the names of all the installed Workflow Extensions.","Parameters","None","Returns","A table of Workflow Extension names","Notes"]},{"l":"Constructors"},{"l":"Color","p":["Signature","cp.apple.finalcutpro.main.Color(app) - Color","Type","Constructor","Description","Creates a new Color instance.","Parameters","app - The Final Cut Pro app instance.","Returns","The new Color.","Notes"]},{"l":"TranscodeMedia","p":["Signature","cp.apple.finalcutpro.viewer.TranscodeMedia(viewer)","Type","Constructor","Description","Creates a new TranscodeMedia instance.","Parameters","parent - The parent object.","Returns","The new TranscodeMedia.","Notes"]},{"l":"Fields"},{"l":"activeCommandSetPath","p":["Signature","cp.apple.finalcutpro.activeCommandSetPath cp.prop: string","Type","Field","Description","Gets the 'Active Command Set' value from the Final Cut Pro preferences"]},{"l":"alert","p":["Signature","cp.apple.finalcutpro.alert cp.ui.Alert","Type","Field","Description","Provides basic access to any 'alert' dialog windows in the app."]},{"l":"audioEnhancements","p":["Signature","cp.apple.finalcutpro.inspector.color.VideoInspector.audioEnhancements cp.prop: PropertyRow","Type","Field","Description","Audio Enhancements"]},{"l":"audioLanes","p":["Signature","cp.apple.finalcutpro.timeline.audioLanes cp.prop: boolean","Type","Field","Description","Indicates if audio lanes are currently showing. May be set to ensure it is showing or hidden."]},{"l":"audioMeters","p":["Signature","cp.apple.finalcutpro.viewer.audioMeters cp.ui.Button","Type","Field","Description","Audio Meters button."]},{"l":"backgroundTasksDialog","p":["Signature","cp.apple.finalcutpro.backgroundTasksDialog cp.apple.finalcutpro.main.BackgroundTasksDialog","Type","Field","Description","The BackgroundTasksDialog dialog window."]},{"l":"browser","p":["Signature","cp.apple.finalcutpro.browser cp.apple.finalcutpro.main.Browser","Type","Field","Description","The Browser instance, whether it is in the primary or secondary window."]},{"l":"changePosition","p":["Signature","cp.apple.finalcutpro.viewer.changePosition cp.ui.Button","Type","Field","Description","Change Position Button."]},{"i":"color-1","l":"color","p":["Signature","cp.apple.finalcutpro.color ColorInspector","Type","Field","Description","The ColorInspector instance from the primary window"]},{"l":"colorBoard","p":["Signature","cp.apple.finalcutpro.colorBoard ColorBoard","Type","Field","Description","The ColorBoard instance from the primary window"]},{"l":"colorCorrection","p":["Signature","cp.apple.finalcutpro.presfs.GeneralPanel.colorCorrection cp.ui.PopUpButton","Type","Field","Description","The \"Color Correction\" PopUpButton."]},{"l":"commandDescriptions","p":["Signature","cp.apple.finalcutpro.commandDescriptions cp.strings","Type","Field","Description","The table of all available command descriptions, with keys mapped to human-readable descriptions in the current locale."]},{"l":"commandEditor","p":["Signature","cp.apple.finalcutpro.commandEditor CommandEditor","Type","Field","Description","The Final Cut Pro Command Editor"]},{"l":"commandNames","p":["Signature","cp.apple.finalcutpro.commandNames cp.strings","Type","Field","Description","The table of all available command names, with keys mapped to human-readable names in the current locale."]},{"l":"commandPostWorkflowExtension","p":["Signature","cp.apple.finalcutpro.commandPostWorkflowExtension CommandPostWindow","Type","Field","Description","The CommandPost Workflow Extension window."]},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.color.TextInspector.contentUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The axuielement containing the properties rows, if available."]},{"i":"contentui-1","l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.color.ShareInspector.contentUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The axuielement containing the properties rows, if available."]},{"l":"deselectAll","p":["Signature","cp.apple.finalcutpro.inspector.color.TextInspector.deselectAll cp.ui.Button","Type","Field","Description","The left text layer arrow at the bottom of the Inspector."]},{"l":"effects","p":["Signature","cp.apple.finalcutpro.effects cp.apple.finalcutpro.main.EffectsBrowser","Type","Field","Description","The EffectsBrowser instance, whether it is in the primary or secondary window."]},{"i":"effects-1","l":"effects","p":["Signature","cp.apple.finalcutpro.inspector.color.VideoInspector.effects cp.prop: PropertyRow","Type","Field","Description"]},{"l":"eventViewer","p":["Signature","cp.apple.finalcutpro.eventViewer cp.apple.finalcutpro.viewer.Viewer","Type","Field","Description","The Event Viewer instance, whether it is in the primary or secondary window."]},{"l":"exportDialog","p":["Signature","cp.apple.finalcutpro.exportDialog cp.apple.finalcutpro.main.ExportDialog","Type","Field","Description","The Final Cut Pro Export Dialog Box"]},{"l":"findAndReplaceTitleText","p":["Signature","cp.apple.finalcutpro.findAndReplaceTitleText cp.apple.finalcutpro.main.FindAndReplaceTitleText","Type","Field","Description","The FindAndReplaceTitleText dialog window."]},{"l":"fullScreenPlayer","p":["Signature","cp.apple.finalcutpro.fullScreenPlayer FullScreenPlayer","Type","Field","Description","Returns the Final Cut Pro Full Screen Window (usually triggered by Cmd+Shift+F)"]},{"l":"generators","p":["Signature","cp.apple.finalcutpro.generators cp.apple.finalcutpro.main.GeneratorsBrowser","Type","Field","Description","The GeneratorsBrowser instance, whether it is in the primary or secondary window."]},{"l":"inspector","p":["Signature","cp.apple.finalcutpro.inspector cp.apple.finalcutpro.inspector.Inspector","Type","Field","Description","The Inspector instance from the primary window."]},{"l":"inspectorUnits","p":["Signature","cp.apple.finalcutpro.presfs.GeneralPanel.inspectorUnits cp.ui.PopUpButton","Type","Field","Description","The \"Inspector Units\" PopUpButton."]},{"l":"isAudioScrubbingEnabled","p":["Signature","cp.apple.finalcutpro.isAudioScrubbingEnabled bool; live","Type","Field","Description","Returns true if the audio scrubbing is enabled for the application."]},{"l":"isFrontmost","p":["Signature","cp.apple.finalcutpro:isFrontmost cp.prop: boolean; read-only; live","Type","Field","Description","Is Final Cut Pro Frontmost?"]},{"l":"isInstalled","p":["Signature","cp.apple.finalcutpro.isInstalled cp.prop: boolean; read-only","Type","Field","Description","Is any version of Final Cut Pro Installed?"]},{"l":"isModalDialogOpen","p":["Signature","cp.apple.finalcutpro:isModalDialogOpen cp.prop: boolean; read-only","Type","Field","Description","Is a modal dialog currently open?"]},{"l":"isPlaying","p":["Signature","cp.apple.finalcutpro.main.ControlBar.isPlaying cp.prop: boolean","Type","Field","Description","The 'playing' status of the viewer. If true, it is playing, if not it is paused."]},{"i":"isplaying-1","l":"isPlaying","p":["Signature","cp.apple.finalcutpro.main.Viewer.isPlaying cp.prop: boolean","Type","Field","Description","The 'playing' status of the viewer. If true, it is playing, if not it is paused."]},{"l":"isRunning","p":["Signature","cp.apple.finalcutpro.isRunning cp.prop: boolean; read-only","Type","Field","Description","Is Final Cut Pro Running?"]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.isShowing cp.prop: boolean; read-only; live","Type","Field","Description","Is Final Cut visible on screen?"]},{"l":"isSkimmingEnabled","p":["Signature","cp.apple.finalcutpro.isSkimmingEnabled bool; live","Type","Field","Description","Returns true if the skimming playhead is enabled for the application."]},{"l":"isSupported","p":["Signature","cp.apple.finalcutpro.isSupported cp.prop: boolean; read-only; live","Type","Field","Description","Is a supported version of Final Cut Pro installed?","Notes","Supported version refers to any version of Final Cut Pro equal or higher to cp.apple.finalcutpro.EARLIEST_SUPPORTED_VERSION"]},{"l":"isUnsupported","p":["Signature","cp.apple.finalcutpro.isUnsupported cp.prop: boolean; read-only","Type","Field","Description","Is an unsupported version of Final Cut Pro installed?","Notes","Supported version refers to any version of Final Cut Pro equal or higher to cp.apple.finalcutpro.EARLIEST_SUPPORTED_VERSION"]},{"l":"keywordEditor","p":["Signature","cp.apple.finalcutpro.keywordEditor KeywordEditor","Type","Field","Description","The Final Cut Pro Keyword Editor"]},{"l":"libraries","p":["Signature","cp.apple.finalcutpro.libraries cp.apple.finalcutpro.main.LibrariesBrowser","Type","Field","Description","The LibrariesBrowser instance, whether it is in the primary or secondary window."]},{"l":"media","p":["Signature","cp.apple.finalcutpro.media cp.apple.finalcutpro.main.MediaBrowser","Type","Field","Description","The MediaBrowser instance, whether it is in the primary or secondary window."]},{"l":"mediaImport","p":["Signature","cp.apple.finalcutpro.mediaImport MediaImport","Type","Field","Description","The Final Cut Pro Media Import Window"]},{"l":"pan","p":["Signature","cp.apple.finalcutpro.inspector.color.VideoInspector.pan cp.prop: PropertyRow","Type","Field","Description"]},{"l":"playButton","p":["Signature","cp.apple.finalcutpro.viewer.playButton cp.ui.Button","Type","Field","Description","Play Button."]},{"l":"playFullScreen","p":["Signature","cp.apple.finalcutpro.viewer.playFullScreen cp.ui.Button","Type","Field","Description","Play Full Screen Button."]},{"l":"playImage","p":["Signature","cp.apple.finalcutpro.viewer.playImage cp.ui.Image","Type","Field","Description","Play Image."]},{"l":"preferencesWindow","p":["Signature","cp.apple.finalcutpro.preferencesWindow PreferencesWindow","Type","Field","Description","The Final Cut Pro Preferences Window"]},{"l":"preset","p":["Signature","cp.apple.finalcutpro.inspector.color.TextInspector.preset cp.ui.PopUpButton","Type","Field","Description","The preset popup found at the top of the inspector."]},{"l":"primaryWindow","p":["Signature","cp.apple.finalcutpro.primaryWindow cp.apple.finalcutpro.main.PrimaryWindow","Type","Field","Description","The Final Cut Pro Primary Window"]},{"l":"resetDialogWarnings","p":["Signature","cp.apple.finalcutpro.presfs.GeneralPanel.resetDialogWarnings cp.ui.Buton","Type","Field","Description","The \"Reset Dialog warnings\" Button."]},{"l":"secondaryWindow","p":["Signature","cp.apple.finalcutpro.secondaryWindow cp.apple.finalcutpro.main.SecondaryWindow","Type","Field","Description","The Final Cut Pro Preferences Window"]},{"l":"textArea","p":["Signature","cp.apple.finalcutpro.inspector.color.TextInspector.textArea cp.ui.TextArea","Type","Field","Description","The Text Inspector main Text Area."]},{"l":"textLayerLeft","p":["Signature","cp.apple.finalcutpro.inspector.color.TextInspector.textLayerLeft cp.ui.Button","Type","Field","Description","The left text layer arrow at the bottom of the Inspector."]},{"l":"textLayerRight","p":["Signature","cp.apple.finalcutpro.inspector.color.TextInspector.textLayerRight cp.ui.Button","Type","Field","Description","The left text layer arrow at the bottom of the Inspector."]},{"l":"timecodeField","p":["Signature","cp.apple.finalcutpro.viewer.timecodeField cp.ui.StaticText","Type","Field","Description","Timecode Field"]},{"l":"timeDisplay","p":["Signature","cp.apple.finalcutpro.presfs.GeneralPanel.timeDisplay cp.ui.PopUpButton","Type","Field","Description","The \"Time Display\" PopUpButton."]},{"l":"timeline","p":["Signature","cp.apple.finalcutpro.timeline Timeline","Type","Field","Description","The Timeline instance, whether it is in the primary or secondary window."]},{"l":"toolbar","p":["Signature","cp.apple.finalcutpro.toolbar cp.apple.finalcutpro.main.PrimaryToolbar","Type","Field","Description","The Primary Toolbar - the toolbar at the top of the Primary Window."]},{"i":"transcodemedia-1","l":"transcodeMedia","p":["Signature","cp.apple.finalcutpro.transcodeMedia cp.apple.finalcutpro.main.TranscodeMedia","Type","Field","Description","The TranscodeMedia sheet."]},{"l":"transitions","p":["Signature","cp.apple.finalcutpro.transitions cp.apple.finalcutpro.main.EffectsBrowser","Type","Field","Description","The Transitions EffectsBrowser instance, whether it is in the primary or secondary window."]},{"l":"UI","p":["Signature","cp.apple.finalcutpro.UI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The Final Cut Pro axuielement, if available."]},{"l":"validateAudioUnits","p":["Signature","cp.apple.finalcutpro.presfs.GeneralPanel.validateAudioUnits cp.ui.Buton","Type","Field","Description","The \"Validate Audio Units\" Button."]},{"l":"viewer","p":["Signature","cp.apple.finalcutpro.viewer cp.apple.finalcutpro.viewer.Viewer","Type","Field","Description","The Viewer instance, whether it is in the primary or secondary window."]},{"l":"volume","p":["Signature","cp.apple.finalcutpro.inspector.color.VideoInspector.volume cp.prop: PropertyRow","Type","Field","Description"]},{"l":"Methods"},{"l":"activeLibraryPaths","p":["Signature","cp.apple.finalcutpro:activeLibraryPaths() - table","Type","Method","Description","Gets a table of all the active library paths.","Parameters","None","Returns","A table containing any active library paths.","Notes"]},{"l":"closeLibrary","p":["Signature","cp.apple.finalcutpro:closeLibrary(title) - boolean","Type","Method","Description","Attempts to close a library with the specified title.","Parameters","title - The title of the FCP Library to close.","Returns","true if successful, or false if not.","Notes"]},{"l":"defaultCommandSetPath","p":["Signature","cp.apple.finalcutpro:defaultCommandSetPath([locale]) - string","Type","Method","Description","Gets the path to the 'Default' Command Set.","Parameters","locale- The optional locale to use. Defaults to the current locale.","Returns","The 'Default' Command Set path, or nil if an error occurred","Notes"]},{"l":"doShortcut","p":["Signature","cp.apple.finalcutpro:doShortcut(whichShortcut[, suppressPrompt]) - Statement","Type","Method","Description","Perform a Final Cut Pro Keyboard Shortcut","Parameters","whichShortcut - As per the Command Set name suppressPrompt - If true, and no shortcut is found for the specified command, then no prompt will be shown and an error is thrown Defaults to false.","Returns","A Statement that will perform the shortcut when executed.","Notes"]},{"l":"getCommandShortcuts","p":["Signature","cp.apple.finalcutpro.getCommandShortcuts(id) - table of hs.commands.shortcut","Type","Method","Description","Finds a shortcut from the Active Command Set with the specified ID and returns a table of hs.commands.shortcut s for the specified command, or nil if it doesn't exist.","Parameters","id - The unique ID for the command.","Returns","The array of shortcuts, or nil if no command exists with the specified id.","Notes"]},{"l":"getPath","p":["Signature","cp.apple.finalcutpro:getPath() - string or nil","Type","Method","Description","Path to Final Cut Pro Application","Parameters","None","Returns","A string containing Final Cut Pro's filesystem path, or nil if Final Cut Pro's path could not be determined.","Notes"]},{"l":"importXML","p":["Signature","cp.apple.finalcutpro:importXML(path) - boolean","Type","Method","Description","Imports an XML file into Final Cut Pro","Parameters","path = Path to XML File","Returns","A boolean value indicating whether the AppleScript succeeded or not","Notes"]},{"l":"keysWithString","p":["Signature","cp.apple.finalcutpro:keysWithString(string[, locale]) - {string}","Type","Method","Description","Looks up an application string and returns an array of keys that match. It will take into account current locale the app is running in, or use locale if provided.","Parameters","key- The key to look up. locale- The locale (defaults to current FCPX locale).","Returns","The array of keys with a matching string.","Notes","This method may be very inefficient, since it has to search through every possible key/value pair to find matches. It is not recommended that this is used in production."]},{"l":"openLibrary","p":["Signature","cp.apple.finalcutpro:openLibrary(path) - boolean","Type","Method","Description","Attempts to open a file at the specified absolute path.","Parameters","path - The path to the FCP Library to open.","Returns","true if successful, or false if not.","Notes"]},{"l":"plugins","p":["Signature","cp.apple.finalcutpro:plugins() - cp.apple.finalcutpro.plugins","Type","Method","Description","Returns the plugins manager for the app.","Parameters","None","Returns","The plugins manager.","Notes"]},{"l":"recentLibraryNames","p":["Signature","cp.apple.finalcutpro:recentLibraryNames() - table","Type","Method","Description","Gets a table of all the recent library names (that are accessible).","Parameters","None","Returns","A table containing any recent library names.","Notes"]},{"l":"recentLibraryPaths","p":["Signature","cp.apple.finalcutpro:recentLibraryPaths() - table","Type","Method","Description","Gets a table of all the recent library paths (that are accessible).","Parameters","None","Returns","A table containing any recent library paths.","Notes"]},{"l":"scanPlugins","p":["Signature","cp.apple.finalcutpro:scanPlugins() - table","Type","Method","Description","Scan Final Cut Pro Plugins","Parameters","None","Returns","A MenuBar object","Notes"]},{"l":"selectLibrary","p":["Signature","cp.apple.finalcutpro:selectLibrary(title) - axuielement","Type","Method","Description","Attempts to select an open library with the specified title.","Parameters","title - The title of the library to select.","Returns","The library row axuielement.","Notes"]},{"l":"string","p":["Signature","cp.apple.finalcutpro:string(key[, locale[, quiet]]) - string","Type","Method","Description","Looks up an application string with the specified key. If no locale value is provided, the current locale is used.","Parameters","key- The key to look up. locale- The locale code to use. Defaults to the current locale. quiet- Optional boolean, defaults to false. If true, no warnings are logged for missing keys.","Returns","The requested string or nil if the application is not running.","Notes"]},{"l":"userCommandSets","p":["Signature","cp.apple.finalcutpro:userCommandSets() - table","Type","Method","Description","Gets the names of all of the user command sets.","Parameters","None","Returns","A table of user command sets as strings.","Notes"]}],[{"i":"cpapplefinalcutproapp","l":"cp.apple.finalcutpro.app","p":["The cp.app for Final Cut Pro. Will automatically determine if only the trial version of FCPX is installed and use that instead."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","app","Fields- Variables which can only be accessed from an object returned by a constructor","application"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"app","p":["Signature","cp.apple.finalcutpro.app cp.app","Type","Constant","Description","The app for Final Cut Pro.","Notes","All values from app can be accessed directly from the finalcutpro instance."]},{"l":"Fields"},{"l":"application","p":["Signature","cp.apple.finalcutpro.application cp.prop: hs.application; read-only","Type","Field","Description","Returns the running hs.application for Final Cut Pro, or nil if it's not running."]}],[{"i":"cpapplefinalcutprobrowserappearanceandfiltering","l":"cp.apple.finalcutpro.browser.AppearanceAndFiltering","p":["Clip Appearance & Filtering Menu Popover"]},{"l":"API Overview","p":["AppearanceAndFiltering","button","clipHeight","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","continuousPlayback","doShow","DURATION","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","groupBy","matches","Methods- API calls which can only be made on an object returned by a constructor","show","sortBy","waveforms"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DURATION","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering.DURATION - table","Type","Constant","Description","A lookup table of the duration values."]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering.matches(element) - boolean","Type","Function","Description","Checks to see if a GUI element is the \"Clip Appearance & Filtering Menu\" popover or not.","Parameters","element - The element you want to check","Returns","true if the element is the \"Clip Appearance & Filtering Menu\" popover otherwise false","Notes"]},{"l":"Constructors"},{"l":"AppearanceAndFiltering","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering(parent) - AppearanceAndFiltering","Type","Constructor","Description","Constructs a new \"Clip Appearance & Filtering Menu\" popover.","Parameters","parent - The parent object","Returns","The new AppearanceAndFiltering instance.","Notes"]},{"l":"Fields"},{"l":"button","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering.button cp.ui.Button","Type","Field","Description","The \"Clip Appearance & Filtering Menu\" button."]},{"l":"clipHeight","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering.clipHeight cp.ui.Slider","Type","Field","Description","The Clip Height Slider."]},{"l":"continuousPlayback","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering.continuousPlayback cp.ui.CheckBox","Type","Field","Description","The Continuous Playback checkbox."]},{"i":"duration-1","l":"duration","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering.duration cp.ui.Slider","Type","Field","Description","The Duration Slider."]},{"l":"groupBy","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering.groupBy cp.ui.PopUpButton","Type","Field","Description","The \"Group By\" popup button."]},{"l":"sortBy","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering.sortBy cp.ui.PopUpButton","Type","Field","Description","The \"Sort By\" popup button."]},{"l":"waveforms","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering.waveforms cp.ui.CheckBox","Type","Field","Description","The Waveforms checkbox."]},{"l":"Methods"},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the Browser's \"Clip Appearance & Filtering\" popover.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.browser.AppearanceAndFiltering:show() - self","Type","Method","Description","Shows the \"Clip Appearance & Filtering Menu\" Popover","Parameters","None","Returns","Self","Notes"]}],[{"i":"cpapplefinalcutprobrowsercolumns","l":"cp.apple.finalcutpro.browser.Columns","p":["Final Cut Pro Browser List View Columns"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","Columns","Fields- Variables which can only be accessed from an object returned by a constructor","menu","Methods- API calls which can only be made on an object returned by a constructor","isMenuShowing","show"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Columns","p":["Signature","cp.apple.finalcutpro.browser.Columns(parent) - Columns","Type","Constructor","Description","Constructs a new Columns object.","Parameters","parent - The parent object","Returns","The new Columns instance.","Notes"]},{"l":"Fields"},{"l":"menu","p":["Signature","cp.apple.finalcutpro.browser.Columns.menu cp.ui.Menu","Type","Field","Description","The Columns menu object."]},{"l":"Methods"},{"l":"isMenuShowing","p":["Signature","cp.apple.finalcutpro.browser.Columns:isMenuShowing() - boolean","Type","Method","Description","Is the Columns menu popup showing?","Parameters","None","Returns","true if the columns menu popup is showing, otherwise false","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.browser.Columns:show() - self","Type","Method","Description","Shows the Browser List View columns menu popup.","Parameters","None","Returns","Self","Notes"]}],[{"i":"cpapplefinalcutprocmdcommanddetail","l":"cp.apple.finalcutpro.cmd.CommandDetail","p":["This class provides a UI for displaying the details of a command when it is selected on the CommandList."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Fields- Variables which can only be accessed from an object returned by a constructor","contents","detail","label"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.cmd.CommandDetail.matches(element) - boolean","Type","Function","Description","Checks if the element matches the criteria for this class.","Parameters","element - The element to check.","Returns","true if the element matches, false otherwise.","Notes"]},{"l":"Fields"},{"l":"contents","p":["Signature","cp.apple.finalcutpro.cmd.CommandDetail.contents cp.ui.TextArea","Type","Field","Description","The TextArea that displays the content."]},{"l":"detail","p":["Signature","cp.apple.finalcutpro.cmd.CommandDetail.detail cp.ui.ScrollArea","Type","Field","Description","The ScrollArea that displays the contained TextArea."]},{"l":"label","p":["Signature","cp.apple.finalcutpro.cmd.CommandDetail.label cp.ui.StaticText","Type","Field","Description","The StaticText that displays the label."]}],[{"i":"cpapplefinalcutprocmdcommandeditor","l":"cp.apple.finalcutpro.cmd.CommandEditor","p":["Command Editor Module."]},{"l":"API Overview","p":["app","closeButton","command","commandDetail","CommandEditor","commandGroups","commandList","commands","commandSet","Constructors- API calls which return an object, typically one that offers API methods","control","doClose","doFindCommandID","doSave","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","hide","keyboard","keyboardToggle","keyDetail","matches","Methods- API calls which can only be made on an object returned by a constructor","modifiers","option","save","search","shift","show","UI"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"CommandEditor","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor(app) - CommandEditor","Type","Constructor","Description","Creates a new Command Editor object.","Parameters","app - The cp.apple.finalcutpro object.","Returns","A new CommandEditor object.","Notes"]},{"l":"Fields"},{"l":"closeButton","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.closeButton cp.ui.Button","Type","Field","Description","The \"Close\" Button."]},{"l":"command","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.command cp.ui.CheckBox","Type","Field","Description","The \"Command\" CheckBox."]},{"l":"commandDetail","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.commandDetail cp.apple.finalcutpro.cmd.CommandDetail","Type","Field","Description","The CommandDetail section."]},{"l":"commandGroups","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.commandGroups cp.apple.finalcutpro.cmd.CommandGroups","Type","Field","Description","The CommandGroups."]},{"l":"commandList","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.commandList cp.apple.finalcutpro.cmd.CommandList","Type","Field","Description","The CommandList."]},{"l":"commands","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.commands cp.apple.finalcutpro.cmd.Commands","Type","Field","Description","The Commands."]},{"l":"commandSet","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.commandSet cp.ui.PopUpButton","Type","Field","Description","The \"Command Set\" PopUpButton."]},{"l":"control","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.control cp.ui.CheckBox","Type","Field","Description","The \"Control\" CheckBox."]},{"l":"keyboard","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.keyboard cp.ui.Group","Type","Field","Description","The Group containing the keyboard shortcuts. Does not seem to expose the actual key buttons."]},{"l":"keyboardToggle","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.keyboardToggle cp.ui.CheckBox","Type","Field","Description","The \"Keyboard Toggle\" CheckBox(next to the Search field)."]},{"l":"keyDetail","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.keyDetail cp.appple.finalcutpro.cmd.KeyDetail","Type","Field","Description","The KeyDetail section."]},{"l":"modifiers","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.modifiers cp.ui.Group","Type","Field","Description","The Group containing 'modifier' checkboxes (Cmd, Shift, etc)."]},{"l":"option","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.option cp.ui.CheckBox","Type","Field","Description","The \"Option\" CheckBox."]},{"l":"save","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.save cp.ui.Button","Type","Field","Description","The \"Save\" Button."]},{"l":"search","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.search cp.ui.TextField","Type","Field","Description","The \"Search\" TextField."]},{"l":"shift","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.shift cp.ui.CheckBox","Type","Field","Description","The \"Shift\" CheckBox."]},{"l":"UI","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor.UI cp.prop: axuielement; read-only","Type","Field","Description","The axuielement for the window."]},{"l":"Methods"},{"l":"app","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor:app() - App","Type","Method","Description","Returns the app instance representing Final Cut Pro.","Parameters","None","Returns","Notes"]},{"l":"doClose","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor:doClose() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement that triggers the Close button in the Command Editor.","Parameters","None","Returns","The Statement, resolving to true if the button was found and pushed, otherwise false.","Notes"]},{"l":"doFindCommandID","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor:doFindCommandID(commandID, [highlight]) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will find the command with the given ID, revealing it at the top of the commands list.","Parameters","commandID - The locale-neutral ID of the command to find. Eg. \"NextEdit\" (ID), not \"Go To Next Edit\" (English) highlight - (optional) If true, the command will be highlighted in the list.","Returns","The Statement.","Notes"]},{"l":"doSave","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor:doSave() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement that triggers the Save button in the Command Editor.","Parameters","None","Returns","The Statement, resolving to true if the button was found and pushed, otherwise false.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor:doShow() - cp.rx.go.Statement boolean","Type","Method","Description","Creates a Statement that will attempt to hide the Command Editor, if FCPX is running. If the changes have not been saved, they will be lost.","Parameters","None","Returns","The Statement, which will resolve to true if the CommandEditor is not showing or false if not.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor:hide() - cp.apple.finalcutpro.cmd.CommandEditor","Type","Method","Description","Hides the Command Editor.","Parameters","None","Returns","The cp.apple.finalcutpro.cmd.CommandEditor object for method chaining.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.cmd.CommandEditor:show() - cp.apple.finalcutpro.cmd.CommandEditor","Type","Method","Description","Shows the Command Editor.","Parameters","None","Returns","The cp.apple.finalcutpro.cmd.CommandEditor object for method chaining.","Notes"]}],[{"i":"cpapplefinalcutprocmdcommandgroups","l":"cp.apple.finalcutpro.cmd.CommandGroups","p":["Represents the list of Command Groups in the CommandList."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.cmd.CommandGroups.matches(element) - boolean","Type","Function","Description","Checks if the element is a Command Groups element.","Parameters","element - The element to check.","Returns","true if the element matches, false otherwise.","Notes"]}],[{"i":"cpapplefinalcutprocmdcommandlist","l":"cp.apple.finalcutpro.cmd.CommandList","p":["A list of commands available in the CommandEditor."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Fields- Variables which can only be accessed from an object returned by a constructor","commands","groups","label","splitter"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.cmd.CommandList.matches(element) - boolean","Type","Function","Description","Checks if the element matches the CommandList.","Parameters","element - The element to check.","Returns","true if the element matches, false otherwise.","Notes"]},{"l":"Fields"},{"l":"commands","p":["Signature","cp.apple.finalcutpro.cmd.CommandList.commands cp.apple.finalcutpro.cmd.Commands","Type","Field","Description","The Commands for this CommandList."]},{"l":"groups","p":["Signature","cp.apple.finalcutpro.cmd.CommandList.groups cp.apple.finalcutpro.cmd.CommandGroups","Type","Field","Description","The CommandGroups for this CommandList."]},{"l":"label","p":["Signature","cp.apple.finalcutpro.cmd.CommandList.label cp.ui.StaticText","Type","Field","Description","The StaticText that displays the label."]},{"l":"splitter","p":["Signature","cp.apple.finalcutpro.cmd.CommandList.splitter cp.ui.Splitter","Type","Field","Description","The Splitter for this CommandList."]}],[{"i":"cpapplefinalcutprocmdcommands","l":"cp.apple.finalcutpro.cmd.Commands","p":["The list of available commands (depending on search and/or CommandGroup that can be mapped to a keyboard shortcut."]},{"l":"Submodules","p":["cp.apple.finalcutpro.cmd.Commands.Header","cp.apple.finalcutpro.cmd.Commands.Row"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.cmd.Commands.matches(element) - boolean","Type","Function","Description","Checks if the element matches the criteria for this class.","Parameters","element - An axuielementObject to check.","Returns","true if the element matches the criteria for this class.","Notes"]}],[{"i":"cpapplefinalcutprocmdcommandsheader","l":"cp.apple.finalcutpro.cmd.Commands.Header","p":["The header of the Commands."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","command","key","modifiers"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"command","p":["Signature","cp.apple.finalcutpro.cmd.Commands.Header.command cp.ui.Button","Type","Field","Description","The Button that can be pressed to sort by \"Command\". Pressing more than"]},{"l":"key","p":["Signature","cp.apple.finalcutpro.cmd.Commands.Header.key cp.ui.Button","Type","Field","Description","The Button that can be pressed to sort by \"Key\". Pressing more than"]},{"l":"modifiers","p":["Signature","cp.apple.finalcutpro.cmd.Commands.Header.modifiers cp.ui.Button","Type","Field","Description","The Button that can be pressed to sort by \"Modifiers\". Pressing more than"]}],[{"i":"cpapplefinalcutprocmdcommandsrow","l":"cp.apple.finalcutpro.cmd.Commands.Row","p":["Commands Row."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","command","key","modifiers"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"command","p":["Signature","cp.apple.finalcutpro.cmd.Commands.Row.command cp.ui.TextField","Type","Field","Description","The command TextField(read-only)."]},{"l":"key","p":["Signature","cp.apple.finalcutpro.cmd.Commands.Row.key cp.ui.TextField","Type","Field","Description","The key TextField(read-only)."]},{"l":"modifiers","p":["Signature","cp.apple.finalcutpro.cmd.Commands.Row.modifiers cp.ui.TextField","Type","Field","Description","The modifiers TextField(read-only)"]}],[{"i":"cpapplefinalcutprocmdkeydetail","l":"cp.apple.finalcutpro.cmd.KeyDetail","p":["This class provides a UI for displaying the details of a key when it is selected on the keyboard layout."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Fields- Variables which can only be accessed from an object returned by a constructor","contentGroupUI","contents","detail","key","label"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.cmd.KeyDetail.matches(element) - boolean","Type","Function","Description","Checks if the element matches the criteria for this class.","Parameters","element - The element to check.","Returns","true if the element matches, false otherwise.","Notes"]},{"l":"Fields"},{"l":"contentGroupUI","p":["Signature","cp.apple.finalcutpro.cmd.KeyDetail.contentGroupUI cp.prop: axuielement","Type","Field","Description","The axuielement for the content Group."]},{"l":"contents","p":["Signature","cp.apple.finalcutpro.cmd.KeyDetail.contents cp.ui.OldTable","Type","Field","Description","The Table that displays the contents."]},{"l":"detail","p":["Signature","cp.apple.finalcutpro.cmd.KeyDetail.detail cp.ui.ScrollArea","Type","Field","Description","The ScrollArea that displays the detail."]},{"l":"key","p":["Signature","cp.apple.finalcutpro.cmd.KeyDetail.key cp.ui.Image","Type","Field","Description","The Image that displays the key."]},{"l":"label","p":["Signature","cp.apple.finalcutpro.cmd.KeyDetail.label cp.ui.StaticText","Type","Field","Description","The StaticText that displays the label."]}],[{"i":"cpapplefinalcutprocontentclip","l":"cp.apple.finalcutpro.content.Clip","p":["Represents a clip of media inside FCP."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","filmstrip","row","Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","getTitle","getType","setTitle","UI"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"filmstrip","p":["Signature","cp.apple.finalcutpro.content.Clip.type.filmstrip","Type","Constant","Description","A constant for clips which are represented by a filmstrip."]},{"l":"row","p":["Signature","cp.apple.finalcutpro.content.Clip.type.row","Type","Constant","Description","A constant for clips which are represented by a table row."]},{"l":"Functions"},{"l":"is","p":["Signature","cp.apple.finalcutpro.content.Clip.is(thing) - boolean","Type","Function","Description","Checks if the specified thing is a Clip instance.","Parameters","thing- The thing to check.","Returns","true if the thing is a Clip, otherwise returns false.","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.apple.finalcutpro.content.Clip.new(element[, options]) - Clip","Type","Constructor","Description","Creates a new Clip pointing at the specified element, with the specified options.","Parameters","element- The axuielement the clip represents. options- A table containing the options for the clip.","Returns","The new Clip.","Notes","The options may be:** columnIndex- A number which will be used to specify the column number to find the title in, if relevant."]},{"l":"Methods"},{"l":"getTitle","p":["Signature","cp.apple.finalcutpro.content.Clip:getTitle() - String","Type","Method","Description","Returns the title of the clip.","Parameters","None","Returns","The clip title.","Notes"]},{"l":"getType","p":["Signature","cp.apple.finalcutpro.content.Clip:getType() - Clip.type","Type","Method","Description","Returns the type of clip (one of the Clip.type values)","Parameters","None","Returns","The Clip.type value (e.g. Clip.type.row or Clip.type.filmstrip`)","Notes"]},{"l":"setTitle","p":["Signature","cp.apple.finalcutpro.content.Clip:setTitle(title) - none","Type","Method","Description","Sets the title of a clip.","Parameters","None","Returns","Notes"]},{"l":"UI","p":["Signature","cp.apple.finalcutpro.content.Clip:UI() - axuielement","Type","Method","Description","Returns the axuielement for the clip.","Parameters","None","Returns","The axuielement for the clip.","Notes"]}],[{"i":"cpapplefinalcutproexportdestinations","l":"cp.apple.finalcutpro.export.destinations","p":["Provides access to the list of Share Destinations configured for the user."]},{"i":"update-11th-june-2021","l":"UPDATE (11th JUNE 2021):","p":["...doesn't exist, then Final Cut Pro will use:","...file (it must be considered legacy). However, if this file exists:","...followed by any 3rd party applications such as:","/Applications/Final Cut Pro.app/Contents/Resources/DefaultDestinations.plist","~/Application Support/ProApps/Share Destinations/Vimeo (advanced).fcpxdest/Library/Application Support/ProApps/Share Destinations/Xsend Motion.fcpxdest","~/Library/Application Support/ProApps/Share Destinations/Vimeo (advanced).fcpxdest/Library/Application Support/ProApps/Share Destinations/Xsend Motion.fcpxdest","~/Library/Preferences/com.apple.FinalCut.UserDestinations3.plist","~/Preferences/com.apple.FinalCut.UserDestinations.plist","~/Preferences/com.apple.FinalCut.UserDestinations2.plist","~/Preferences/com.apple.FinalCut.UserDestinations3.plist","Also, if, for example, you delete the Xsend Motion destination in the Final Cut Pro user interface, or rename the DVD preset to something else, then it will automatically create a new Preferences file:","Fun fact: even if you delete third party applications such as \"Vimeo (advanced)\", and \"Xsend Motion\" from your Final Cut Pro destinations preferences, they'll come back after you restart FCPX.","However, again, if you close Final Cut Pro, or open and close the destinations preferences window, a new file will be created, migrating the data from UserDestinations2:","However, when you close Final Cut Pro, or if you open and close the destinations preferences window, a new file will be created:","If...","It seems that as of FCPX 10.4.6, Final Cut Pro ignores the:","It seems that as of FCPX 10.5.x, the UserDestinations file can go up to version 5 (i.e. com.apple.FinalCut.UserDestinations5.plist). I've left the original explanation below for future reference, as it goes into more detail as to exactly what's happening.","It will read that file, along with any third party applications such as:","Long story short, in MOST cases, UserDestinations3.plist will be single source of destinations, however, if this file doesn't exist, then UserDestinations2.plist will be used, and if this file doesn't exist, then it will read the default values from DefaultDestinations.plist, along with any third party share destinations."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","indexOf","names"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"indexOf","p":["Signature","cp.apple.finalcutpro.export.destinations.indexOf(name) - number","Type","Function","Description","Returns the index of the Destination with the specified name, or nil if not found.","Parameters","name- The name of the Destination","Returns","The index of the named Destination, or nil.","Notes"]},{"l":"names","p":["Signature","cp.apple.finalcutpro.export.destinations.names() - table | nil, string","Type","Function","Description","Returns an array of the names of destinations, in their current order.","Parameters","None","Returns","The table of Share Destination names, or nil if an error has occurred. An error message as a string.","Notes"]}],[{"i":"cpapplefinalcutproexportexportdialog","l":"cp.apple.finalcutpro.export.ExportDialog","p":["Export Dialog Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","ExportDialogTitleText","Fields- Variables which can only be accessed from an object returned by a constructor","fileExtension","saveSheet","Methods- API calls which can only be made on an object returned by a constructor","hide","pressCancel","pressNext","show"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"ExportDialogTitleText","p":["Signature","cp.apple.finalcutpro.export.ExportDialogTitleText(parent)","Type","Constructor","Description","Creates a new Export Dialog","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"fileExtension","p":["Signature","cp.apple.finalcutpro.export.ExportDialog.fileExtension cp.ui.StaticText","Type","Field","Description","The \"File Extension\" StaticText."]},{"l":"saveSheet","p":["Signature","cp.apple.finalcutpro.export.ExportDialog.saveSheet SaveSheet","Type","Field","Description","The SaveSheet."]},{"l":"Methods"},{"l":"hide","p":["Signature","cp.apple.finalcutpro.export.ExportDialog:hide() - cp.apple.finalcutpro.export.ExportDialog","Type","Method","Description","Hides the Export Dialog","Parameters","None","Returns","The cp.apple.finalcutpro.export.ExportDialog object for method chaining.","Notes"]},{"l":"pressCancel","p":["Signature","cp.apple.finalcutpro.export.ExportDialog:pressCancel() - cp.apple.finalcutpro.export.ExportDialog","Type","Method","Description","Presses the Cancel Button.","Parameters","None","Returns","The cp.apple.finalcutpro.export.ExportDialog object for method chaining.","Notes"]},{"l":"pressNext","p":["Signature","cp.apple.finalcutpro.export.ExportDialog:pressNext() - cp.apple.finalcutpro.export.ExportDialog","Type","Method","Description","Presses the Next Button.","Parameters","None","Returns","The cp.apple.finalcutpro.export.ExportDialog object for method chaining.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.export.ExportDialog:show(destinationSelect, ignoreProxyWarning, ignoreMissingMedia, ignoreInvalidCaptions, quiet) - cp.apple.finalcutpro.export.ExportDialog, string","Type","Method","Description","Shows the Export Dialog with the Destination that matches the destinationSelect.","Parameters","destinationSelect - The name, number or match function of the destination to export with. ignoreProxyWarning - if true, the warning regarding exporting Proxies will be ignored. ignoreMissingMedia - if true, the warning regarding exporting with missing media will be ignored. ignoreInvalidCaptions - if true, the warning regarding exporting with Bad Captions will be ignored. quiet - if true, no dialogs will be shown if there is an error.","Returns","The cp.apple.finalcutpro.export.ExportDialog object for method chaining. If an error occurred, the message is returned as the second value","Notes","If providing a function, it will be passed one item - the name of the destination, and should return true to indicate a match. The name will not contain \" (default)\" if present."]}],[{"i":"cpapplefinalcutproexportgotoprompt","l":"cp.apple.finalcutpro.export.GoToPrompt","p":["Go To Prompt."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","new","Fields- Variables which can only be accessed from an object returned by a constructor","cancel","go","valueCombo","valueText","Methods- API calls which can only be made on an object returned by a constructor","hide","setValue","show","value","valueField"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"new","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt.new(app) - GoToPrompt","Type","Function","Description","Creates a new Go To Prompt object.","Parameters","app - The cp.apple.finalcutpro object.","Returns","A new GoToPrompt object.","Notes"]},{"l":"Fields"},{"l":"cancel","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt.cancel cp.ui.Button","Type","Field","Description","The \"Cancel\" Button."]},{"l":"go","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt.go cp.ui.Button","Type","Field","Description","The \"Go\" Button."]},{"l":"valueCombo","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt.valueCombo cp.ui.ComboBox","Type","Field","Description","The ComboBox containing the folder value, if available."]},{"l":"valueText","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt.valueText cp.ui.TextField","Type","Field","Description","The TextField containing the folder value, if available."]},{"l":"Methods"},{"l":"hide","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt:hide() - cp.apple.finalcutpro.export.GoToPrompt","Type","Method","Description","Hides the Go To Prompt","Parameters","None","Returns","The cp.apple.finalcutpro.export.GoToPrompt object for method chaining.","Notes"]},{"l":"setValue","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt:setValue(value) - cp.apple.finalcutpro.export.GoToPrompt","Type","Method","Description","Sets the value of the text box within the Go To Prompt.","Parameters","value - The value of the text box as a string.","Returns","The cp.apple.finalcutpro.export.GoToPrompt object for method chaining.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt:show() - cp.apple.finalcutpro.export.GoToPrompt","Type","Method","Description","Shows the Go To Prompt","Parameters","None","Returns","The cp.apple.finalcutpro.export.GoToPrompt object for method chaining.","Notes"]},{"l":"value","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt:value([newValue]) - string","Type","Method","Description","Returns the current path value, or nil.","Parameters","newValue - (optional) The new value for the path.","Returns","The current value of the path.","Notes"]},{"l":"valueField","p":["Signature","cp.apple.finalcutpro.export.GoToPrompt:valueField() - TextField | ComboField","Type","Method","Description","Returns either the valueText or valueCombo, depending what is available on-screen.","Parameters","None","Returns","The TextField or ComboField containing the value.","Notes"]}],[{"i":"cpapplefinalcutproexportreplacealert","l":"cp.apple.finalcutpro.export.ReplaceAlert","p":["Replace Alert"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","ReplaceAlert","Methods- API calls which can only be made on an object returned by a constructor","pressReplace"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.export.ReplaceAlert.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"ReplaceAlert","p":["Signature","cp.apple.finalcutpro.export.ReplaceAlert(app) - ReplaceAlert","Type","Constructor","Description","Creates a new Replace Alert object.","Parameters","app - The cp.apple.finalcutpro object.","Returns","A new ReplaceAlert object.","Notes"]},{"l":"Methods"},{"l":"pressReplace","p":["Signature","cp.apple.finalcutpro.export.ReplaceAlert:pressReplace() - cp.apple.finalcutpro.export.ReplaceAlert","Type","Method","Description","Presses the Replace button.","Parameters","None","Returns","The cp.apple.finalcutpro.export.ReplaceAlert object for method chaining.","Notes"]}],[{"i":"cpapplefinalcutproexportsavesheet","l":"cp.apple.finalcutpro.export.SaveSheet","p":["Save Sheet"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","SaveSheet","Fields- Variables which can only be accessed from an object returned by a constructor","cancel","filename","goToPrompt","replaceAlert","save","Methods- API calls which can only be made on an object returned by a constructor","setPath"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.export.SaveSheet.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"SaveSheet","p":["Signature","cp.apple.finalcutpro.export.SaveSheet(app) - SaveSheet","Type","Function","Description","Creates a new SaveSheet object.","Parameters","app - The cp.apple.finalcutpro object.","Returns","A new SaveSheet object.","Notes"]},{"l":"Fields"},{"l":"cancel","p":["Signature","cp.apple.finalcutpro.export.SaveSheet.cancel cp.ui.Button","Type","Field","Description","The \"Cancel\" Button."]},{"l":"filename","p":["Signature","cp.apple.finalcutpro.export.SaveSheet.filename cp.ui.TextField","Type","Field","Description","The Save Sheet Filename Text Field."]},{"l":"goToPrompt","p":["Signature","cp.apple.finalcutpro.export.SaveSheet.goToPrompt GoToPrompt","Type","Field","Description","The Go To Prompt object."]},{"l":"replaceAlert","p":["Signature","cp.apple.finalcutpro.export.SaveSheet.replaceAlert ReplaceAlert","Type","Field","Description","The Replace Alert object."]},{"l":"save","p":["Signature","cp.apple.finalcutpro.export.SaveSheet.save cp.ui.Button","Type","Field","Description","The \"Save\" Button."]},{"l":"Methods"},{"l":"setPath","p":["Signature","cp.apple.finalcutpro.export.SaveSheet:setPath(path) - cp.apple.finalcutpro.export.SaveSheet","Type","Method","Description","Sets the path.","Parameters","path - The path as a string.","Returns","The cp.apple.finalcutpro.export.SaveSheet object for method chaining.","Notes"]}],[{"i":"cpapplefinalcutproimportmediaimport","l":"cp.apple.finalcutpro.import.MediaImport","p":["Media Import"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","MediaImport","Fields- Variables which can only be accessed from an object returned by a constructor","importAll","stopImport","Methods- API calls which can only be made on an object returned by a constructor","hide","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.import.MediaImport.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"MediaImport","p":["Signature","cp.apple.finalcutpro.import.MediaImport(app) - MediaImport","Type","Constructor","Description","Creates a new Media Import object.","Parameters","app - The cp.apple.finalcutpro object.","Returns","A new MediaImport object.","Notes"]},{"l":"Fields"},{"l":"importAll","p":["Signature","cp.apple.finalcutpro.import.MediaImport.importAll cp.ui.Button","Type","Field","Description","The Import All button."]},{"l":"stopImport","p":["Signature","cp.apple.finalcutpro.import.MediaImport.stopImport cp.ui.Button","Type","Field","Description","The \"Stop Import\" button."]},{"l":"Methods"},{"l":"hide","p":["Signature","cp.apple.finalcutpro.import.MediaImport:hide() - cp.apple.finalcutpro.import.MediaImport","Type","Method","Description","Hides the Media Import window.","Parameters","None","Returns","The cp.apple.finalcutpro.import.MediaImport object for method chaining.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.import.MediaImport:show() - cp.apple.finalcutpro.import.MediaImport","Type","Method","Description","Shows the Media Import window.","Parameters","None","Returns","The cp.apple.finalcutpro.import.MediaImport object for method chaining.","Notes"]}],[{"i":"cpapplefinalcutproinspectoraudioaudiocomponent","l":"cp.apple.finalcutpro.inspector.audio.AudioComponent","p":["The Audio Configuration section of the Audio Inspector."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","AudioComponent","matches","Fields- Variables which can only be accessed from an object returned by a constructor","channels","role","showAs","Methods- API calls which can only be made on an object returned by a constructor","doShow","enabled","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"AudioComponent","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioComponent(parent, subcomponent, index) - AudioComponent","Type","Function","Description","Creates a new Audio Component object.","Parameters","parent - The parent object. subcomponent - A boolean that defines whether or not this is a subcomponent. index - The index of the component","Returns","A new AudioComponent object.","Notes"]},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioComponent.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Fields"},{"l":"channels","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioComponent.channels cp.ui.MenuButton","Type","Field","Description","The channels popup menu button for the component. This only present for"]},{"l":"role","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioComponent.role cp.ui.MenuButton","Type","Field","Description","The role popup menu button for the subcomponent. Only present for"]},{"l":"showAs","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioComponent.showAs cp.ui.MenuButton","Type","Field","Description","The subroles popup menu button for the component. Only present for"]},{"l":"Methods"},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioComponent:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to show the bar.","Parameters","None","Returns","The Statement, which will resolve to true if successful, or send an error if not.","Notes"]},{"l":"enabled","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioComponent:enabled() - Button","Type","Method","Description","Gets the enable/disable button for the component.","Parameters","None","Returns","The Button instance.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioComponent:show() - self","Type","Method","Description","Attempts to show the bar.","Parameters","None","Returns","The AudioComponent instance.","Notes"]}],[{"i":"cpapplefinalcutproinspectoraudioaudioconfiguration","l":"cp.apple.finalcutpro.inspector.audio.AudioConfiguration","p":["The Audio Configuration section of the Audio Inspector."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","AudioConfiguration","matches","Methods- API calls which can only be made on an object returned by a constructor","component","doShow","show","subcomponent"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"AudioConfiguration","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioConfiguration(parent) - AudioConfiguration","Type","Function","Description","Creates a new Media Import object.","Parameters","parent - The parent object.","Returns","A new AudioConfiguration object.","Notes"]},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioConfiguration.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Methods"},{"l":"component","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioConfiguration:component() - table","Type","Method","Description","Returns a table of AudioComponent objects for all main audio components.","Parameters","None","Returns","A table containing AudioComponent objects.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioConfiguration:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to show the bar.","Parameters","None","Returns","The Statement, which will resolve to true if successful, or send an error if not.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioConfiguration:show() - self","Type","Method","Description","Attempts to show the bar.","Parameters","None","Returns","The AudioConfiguration instance.","Notes"]},{"l":"subcomponent","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioConfiguration:subcomponent() - table","Type","Method","Description","Returns a table of AudioComponent objects for all audio subcomponents.","Parameters","None","Returns","A table containing AudioComponent objects.","Notes"]}],[{"i":"cpapplefinalcutproinspectoraudioaudioinspector","l":"cp.apple.finalcutpro.inspector.audio.AudioInspector","p":["Audio Inspector Module.","CheckBox Property:","enabled - (cp.ui.CheckBox) Indicates if the section is enabled.","expanded - (cp.prop ) Get/sets whether the section is expanded.","For example:","Header Rows ( compositing, transform, etc.) have the following properties:","Menu Property:","Property Rows depend on the type of property:","reset - (cp.ui.Button) Will reset the contents of the section.","Slider Property:","toggle - (cp.ui.Button) Will toggle the Hide/Show button.","value - (cp.ui.CheckBox) The currently value.","value - (cp.ui.PopUpButton) The current value of the property.","value - (cp.ui.Slider) The current value of the property.","x - (cp.ui.TextField) The current 'X' value.","XY Property:","y - (cp.ui.TextField) The current 'Y' value.","You should also be able to show a specific property and it will be revealed:"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","EQ_MODES","PAN_MODES","Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","AudioInspector","Fields- Variables which can only be accessed from an object returned by a constructor","audioConfiguration"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"EQ_MODES","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioInspector.EQ_MODES - table","Type","Constant","Description","EQ Modes"]},{"l":"PAN_MODES","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioInspector.PAN_MODES - table","Type","Constant","Description","Pan Modes"]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioInspector.matches(element)","Type","Function","Description","Checks if the provided element could be a AudioInspector.","Parameters","element - The element to check","Returns","true if it matches, false if not.","Notes"]},{"l":"Constructors"},{"l":"AudioInspector","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioInspector(parent) - cp.apple.finalcutpro.audio.AudioInspector","Type","Constructor","Description","Creates a new AudioInspector object","Parameters","parent- The parent","Returns","A AudioInspector object","Notes"]},{"l":"Fields"},{"l":"audioConfiguration","p":["Signature","cp.apple.finalcutpro.inspector.audio.AudioInspector.audioConfiguration AudioConfiguration","Type","Field","Description","The AudioConfiguration instance."]}],[{"i":"cpapplefinalcutproinspectoraudiomainproperties","l":"cp.apple.finalcutpro.inspector.audio.MainProperties","p":["The MainProperties UI for the AudioInspector."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","MainProperties","Fields- Variables which can only be accessed from an object returned by a constructor","contentUI"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.audio.MainProperties.matches(element) - boolean","Type","Function","Description","Checks if the element matches the MainProperties.","Parameters","element - The element to check.","Returns","true if the element matches, false otherwise.","Notes"]},{"l":"Constructors"},{"l":"MainProperties","p":["Signature","cp.apple.finalcutpro.inspector.audio.MainProperties(parent, uiFinder) - MainProperties","Type","Constructor","Description","Creates a new MainProperties.","Parameters","parent - The parent object. uiFinder - The axuielement object that represents this element.","Returns","Notes"]},{"l":"Fields"},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.audio.MainProperties.contentUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The axuielement object that represents the content of the MainProperties group."]}],[{"i":"cpapplefinalcutproinspectoraudiotopproperties","l":"cp.apple.finalcutpro.inspector.audio.TopProperties","p":["The TopProperties class is used to represent the top properties group of the Audio Inspector."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","TopProperties","Fields- Variables which can only be accessed from an object returned by a constructor","contentUI"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.audio.TopProperties.matches(element) - boolean","Type","Function","Description","Checks if the element matches the TopProperties.","Parameters","element - The element to check.","Returns","true if the element matches, false otherwise.","Notes"]},{"l":"Constructors"},{"l":"TopProperties","p":["Signature","cp.apple.finalcutpro.inspector.audio.TopProperties(parent, uiFinder) - TopProperties","Type","Constructor","Description","Creates a new TopProperties.","Parameters","parent - The parent object. uiFinder - The axuielement object that represents this element.","Returns","Notes"]},{"l":"Fields"},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.audio.TopProperties.contentUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The axuielement object that represents the content of the TopProperties group."]}],[{"i":"cpapplefinalcutproinspectorbasemotionpanel","l":"cp.apple.finalcutpro.inspector.BaseMotionPanel","p":["A base class for Inspector panels that publish Motion parameters.","Extends BasePanel."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","BaseMotionPanel","Fields- Variables which can only be accessed from an object returned by a constructor","contentUI","published"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.BaseMotionPanel.matches(element)","Type","Function","Description","Checks if the provided element could be a BaseMotionPanel.","Parameters","element - The element to check","Returns","true if it matches, false if not.","Notes"]},{"l":"Constructors"},{"l":"BaseMotionPanel","p":["Signature","cp.apple.finalcutpro.inspector.BaseMotionPanel(parent, panelType) - cp.apple.finalcutpro.inspector.BaseMotionPanel","Type","Constructor","Description","Creates a new BaseMotionPanel object","Parameters","parent- The parent panelType- The panel type.","Returns","A BaseMotionPanel object","Notes"]},{"l":"Fields"},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.BaseMotionPanel.contentUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The primary content axuielement for the panel."]},{"l":"published","p":["Signature","cp.apple.finalcutpro.inspector.BaseMotionPanel.published cp.prop: cp.ui.PropertyRow; read-only","Type","Field","Description","The 'Published Parameters' section."]}],[{"i":"cpapplefinalcutproinspectorbasepanel","l":"cp.apple.finalcutpro.inspector.BasePanel","p":["A base class for the different panels in the Inspector.","Extends Element."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","BasePanel","Methods- API calls which can only be made on an object returned by a constructor","doShow","hide","panelType","show"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"BasePanel","p":["Signature","cp.apple.finalcutpro.inspector.BasePanel(parent, panelType) - BasePanel","Type","Constructor","Description","Constructs the panel, initialising the parent and the UI.","Parameters","parent - The parent Element. panelType - The panel type string, as defined in Inspector.INSPECTOR_TABS.","Returns","The new BasePanel instance.","Notes"]},{"l":"Methods"},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.BasePanel:doShow() - cp.rx.go.Statment","Type","Method","Description","A Statement that hides the panel.","Parameters","None","Returns","The Statement, resolving to true if successful and sending an error if not.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.inspector.BasePanel:hide() - none","Type","Method","Description","Hides the panel.","Parameters","None","Returns","Notes"]},{"l":"panelType","p":["Signature","cp.apple.finalcutpro.inspector.BasePanel:panelType() - string","Type","Method","Description","Gets the type of panel this is.","Parameters","None","Returns","The panel type identifier.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.BasePanel:show() - none","Type","Method","Description","Shows the panel.","Parameters","None","Returns","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcolorboard","l":"cp.apple.finalcutpro.inspector.color.ColorBoard","p":["Color Board Module."]},{"l":"API Overview","p":["aspect","aspectGroup","childUI","color","ColorBoard","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","contentUI","current","currentAspect","doHide","doNextAspect","doResetCurrent","doSelectAspect","doShow","exposure","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","hide","isActive","isShowing","matches","Methods- API calls which can only be made on an object returned by a constructor","nextAspect","reset","saturation","show","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"aspect","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard.aspect - table","Type","Constant","Description","A table containing tables of all the aspect panel settings"]},{"l":"Variables"},{"l":"currentAspect","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard.currentAspect - string","Type","Variable","Description","The current aspect as a string."]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard.matches(element) - boolean","Type","Function","Description","Checks to see if a GUI element is the Color Board.","Parameters","element- The element you want to check","Returns","true if the element is a Color Board otherwise false","Notes"]},{"l":"Constructors"},{"l":"ColorBoard","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard(parent) - ColorBoard object","Type","Constructor","Description","Creates a new ColorBoard object","Parameters","parent- The parent","Returns","A ColorBoard object","Notes"]},{"l":"Fields"},{"l":"aspectGroup","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard.aspectGroup cp.ui.RadioGroup","Type","Field","Description","The RadioGroup for the 'aspect' currently being controlled"]},{"l":"color","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard.color ColorBoardAspect","Type","Field","Description","The color aspect of the color board."]},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard.contentUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the hs.axuielement object for the Color Board's content."]},{"l":"exposure","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard.exposure ColorBoardAspect","Type","Field","Description","The exposure aspect of the color board."]},{"l":"isActive","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:isActive cp.prop: boolean; read-only","Type","Field","Description","Returns whether or not the Color Board is active"]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard.isShowing cp.prop: boolean; read-only; live","Type","Field","Description","Returns whether or not the Color Board is visible."]},{"l":"saturation","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard.saturation ColorBoardAspect","Type","Field","Description","The saturation aspect of the color board."]},{"l":"Methods"},{"l":"childUI","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:childUI(id) - hs.axuielement object","Type","Method","Description","Gets the hs.axuielement object for a child with the specified ID.","Parameters","axID - AXIdentifier of the child","Returns","An hs.axuielement object","Notes"]},{"l":"current","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:current() - ColorBoardAspect","Type","Method","Description","Returns the currently-selected 'aspect' of the Color Board - either the color, saturation or exposure. If the color board is not currently visible, it returns the color aspect by default.","Parameters","None","Returns","The currently active ColorBoardAspect, or the color aspect if none is showing.","Notes"]},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that hides the Color Board.","Parameters","None","Returns","The Statement, which will send a single true if successful, otherwise false, or an error being sent.","Notes"]},{"l":"doNextAspect","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:doNextAspect() - cp.rx.go.Statementboolean","Type","Method","Description","A Statement that toggles the Color Board Panels between \"Color\", \"Saturation\" and \"Exposure\".","Parameters","None","Returns","ColorBoard object","Notes"]},{"l":"doResetCurrent","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:doResetCurrent([range]) - cp.rx.go.Statement","Type","Method","Description","A Statement that will reset the current 'active' aspect (e.g. color) in the Color Board. If the range is provided, only that subset ( master, shadows, midtones, highlights) will be reset.","Parameters","range - Optional range to reset in the current aspect.","Returns","The Statement, resolving with true if completed or an error if not.","Notes"]},{"l":"doSelectAspect","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:doSelectAspect(index) - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to select the specified aspect index. If the index is not between 1 and 3, and error will be thrown.","Parameters","index - The index to select.","Returns","The Statement, which will resolve to true if successful, or throw an error if not.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the Color Board.","Parameters","None","Returns","The Statement, which will send a single true if successful, otherwise false, or an error being sent.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:hide() - self","Type","Method","Description","Hides the Color Board","Parameters","None","Returns","ColorBoard object","Notes"]},{"l":"nextAspect","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:nextAspect() - ColorBoard object","Type","Method","Description","Toggles the Color Board Panels between \"Color\", \"Saturation\" and \"Exposure\"","Parameters","None","Returns","ColorBoard object","Notes"]},{"l":"reset","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:reset() - self","Type","Method","Description","Resets the current aspect.","Parameters","None","Returns","ColorBoard object","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoard:show() - ColorBoard object","Type","Method","Description","Shows the Color Board","Parameters","None","Returns","ColorBoard object","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcolorboardaspect","l":"cp.apple.finalcutpro.inspector.color.ColorBoardAspect","p":["Represents a particular aspect of the color board (Color/Saturation/Exposure)."]},{"l":"API Overview","p":["ColorBoardAspect","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","hasAngle","highlights","id","ids","index","master","Methods- API calls which can only be made on an object returned by a constructor","midtones","reset","selected","shadows","show"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"ids","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect.ids - table","Type","Constant","Description","A table containing the list of aspect IDs (\"color\", \"saturation\", \"exposure\")."]},{"l":"Constructors"},{"l":"ColorBoardAspect","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect(parent, index[, hasAngle]) - ColorBoardAspect","Type","Constructor","Description","Creates a new ColorBoardAspect object.","Parameters","parent - The parent object. index - The Color Board Aspect Index. hasAngle - If true, the aspect has an angle parameter. Defaults to false","Returns","A new `ColorBoardAspect object.","Notes"]},{"l":"Fields"},{"l":"highlights","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect.highlights ColorPuck","Type","Field","Description","The Highlights ColorPuck object."]},{"l":"master","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect.master ColorPuck","Type","Field","Description","The Master ColorPuck object."]},{"l":"midtones","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect.midtones ColorPuck","Type","Field","Description","The Midtones ColorPuck object."]},{"l":"selected","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect:selected() - boolean","Type","Field","Description","Is the Color Board Aspect selected?"]},{"l":"shadows","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect.shadows ColorPuck","Type","Field","Description","The Shadows ColorPuck object."]},{"l":"Methods"},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows this Color Board Aspect.","Parameters","None","Returns","The Statement, resolving to true if successful or throwing an error if not.","Notes"]},{"l":"hasAngle","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect:hasAngle() - boolean","Type","Method","Description","Checks if the aspect has an angle property.","Parameters","None","Returns","true if it has an angle propery.","Notes"]},{"l":"id","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect:id() - string","Type","Method","Description","Gets the Color Board Aspect ID.","Parameters","None","Returns","The ID as string.","Notes"]},{"l":"index","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect:index() - number","Type","Method","Description","Gets the Color Board Aspect index.","Parameters","None","Returns","A number.","Notes"]},{"l":"reset","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect:reset() - cp.rx.go.Statement","Type","Method","Description","A Statement that resets all pucks in the the Color Board Aspect.","Parameters","None","Returns","The Statement, which will resolve to true if sucessful, or throws an error if not.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorBoardAspect:show() - cp.apple.finalcutpro.inspector.color.ColorBoardAspect","Type","Method","Description","Shows the Color Board Aspect","Parameters","None","Returns","The cp.apple.finalcutpro.inspector.color.ColorBoardAspect object for method chaining.","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcolorcurve","l":"cp.apple.finalcutpro.inspector.color.ColorCurve","p":["A ColorCurve Element."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","ColorCurve"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurve.matches(element) - boolean","Type","Function","Description","Checks if the specified value is a ColorCurve.","Parameters","element - The axuielement to check.","Returns","true if it matches a ColorCurve element.","Notes"]},{"l":"Constructors"},{"l":"ColorCurve","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurve(parent, type) - ColorCurve","Type","Constructor","Description","Creates a new ColorCurve Element.","Parameters","parent - The parent Element. type - The TYPE of curve.","Returns","The new ColorCurve.","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcolorcurves","l":"cp.apple.finalcutpro.inspector.color.ColorCurves","p":["Color Curves Module.","Requires Final Cut Pro 10.4 or later."]},{"l":"API Overview","p":["blue","ColorCurves","Constructors- API calls which return an object, typically one that offers API methods","contentUI","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","green","luma","matches","Methods- API calls which can only be made on an object returned by a constructor","mix","mixRow","mixSlider","preserveLuma","preserveLumaRow","red","show","viewingAllCurves","viewModeButton","wheelType"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.matches(element)","Type","Function","Description","Checks if the specified element is the Color Curves element.","Parameters","element - The element to check","Returns","true if the element is the Color Curves.","Notes"]},{"l":"Constructors"},{"l":"ColorCurves","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves(parent) - ColorCurves object","Type","Constructor","Description","Creates a new ColorCurves object","Parameters","parent- The parent","Returns","A ColorInspector object","Notes"]},{"l":"Fields"},{"l":"blue","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.blue ColorCurve","Type","Field","Description","A ColorCurve"]},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.contentUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The axuielement representing the content element of the ColorCurves corrector."]},{"l":"green","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.green ColorCurve","Type","Field","Description","A ColorCurve"]},{"l":"luma","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.luma ColorCurve","Type","Field","Description","A ColorCurve"]},{"l":"mix","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.mix cp.prop: number","Type","Field","Description","The mix amount for this corrector. A number ranging from 0 to 1."]},{"l":"mixRow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.mixRow cp.ui.PropertyRow","Type","Field","Description","The PropertyRow that provides access to the 'Mix' parameter, and axuielement"]},{"l":"mixSlider","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.mixSlider cp.ui.Slider","Type","Field","Description","A Slider that provides access to the 'Mix' slider."]},{"l":"preserveLuma","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.preserveLuma cp.ui.CheckBox","Type","Field","Description","Returns a CheckBox that provides access to the 'Preserve Luma' slider."]},{"l":"preserveLumaRow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.preserveLumaRow cp.ui.PropertyRow","Type","Field","Description","A PropertyRow that provides access to the 'Preserve Luma' parameter, and axuielement"]},{"l":"red","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.red ColorCurve","Type","Field","Description","A ColorCurve"]},{"l":"viewingAllCurves","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.viewingAllCurves cp.prop: boolean","Type","Field","Description","Reports and modifies whether the corrector is showing \"All Curves\" ( true) or \"Single Curves\" ( false)."]},{"l":"viewModeButton","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.viewModeButton cp.ui.MenuButton","Type","Field","Description","Returns the MenuButton for the View Mode."]},{"l":"wheelType","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves.wheelType RadioGroup","Type","Field","Description","The RadioGroup that allows selection of the curve type. Only available when"]},{"l":"Methods"},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorCurves:show() - boolean","Type","Method","Description","Show's the Color Board within the Color Inspector.","Parameters","None","Returns","ColorCurves object","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcolorinspector","l":"cp.apple.finalcutpro.inspector.color.ColorInspector","p":["Color Inspector Module."]},{"l":"API Overview","p":["activateCorrection","addCorrection","colorBoard","colorCurves","ColorInspector","colorWheels","Constants- Useful values which cannot be changed","CORRECTION_TYPES","corrections","correctorUI","doActivateCorrection","doAddCorrection","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","hide","hueSaturationCurves","matches","Methods- API calls which can only be made on an object returned by a constructor","show","topBarUI","value"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"CORRECTION_TYPES","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.CORRECTION_TYPES","Type","Constant","Description","Table of Correction Types:"]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.matches(element)","Type","Function","Description","Checks if the specified element is the Color Inspector element.","Parameters","element - The element to check","Returns","true if the element is the Color Inspector.","Notes"]},{"l":"Fields"},{"l":"colorBoard","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.colorBoard ColorBoard","Type","Field","Description","The ColorBoard object."]},{"l":"colorCurves","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.colorCurves ColorCurves","Type","Field","Description","The ColorCurves object."]},{"l":"colorWheels","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.colorWheels ColorWheels","Type","Field","Description","The ColorWheels object."]},{"l":"corrections","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.corrections CorrectionsBar","Type","Field","Description","The CorrectionsBar instance representing the available corrections,"]},{"l":"correctorUI","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.correctorUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the hs.axuielement object representing the currently-selected corrector panel."]},{"l":"hueSaturationCurves","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.hueSaturationCurves HueSaturationCurves","Type","Field","Description","The HueSaturationCurves object."]},{"l":"topBarUI","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.topBarUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the hs.axuielement object representing the top bar."]},{"l":"value","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector.value cp.prop: cp.drawing.color","Type","Field","Description","Gets the Color Well Value as a cp.drawing.color."]},{"l":"Methods"},{"l":"activateCorrection","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector:activateCorrection(correctionType[, number]) - self","Type","Method","Description","Activates the named correction type and number, if present. If no corrector with the type/number combination exists, a new one is added.","Parameters","correctionType - The string for the type of correction (in English). E.g. \"Color Wheels\", \"Color Board\", etc. number - The correction number for that type. Defaults to 1.","Returns","ColorInspector object","Notes"]},{"l":"addCorrection","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector:addCorrection(correctionType) - self","Type","Method","Description","Adds the named correction type.","Parameters","correctionType - The string for the type of correction (in English). E.g. \"Color Wheels\", \"Color Board\", etc.","Returns","ColorInspector object","Notes"]},{"l":"ColorInspector","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector(parent) - ColorInspector object","Type","Method","Description","Creates a new ColorInspector object","Parameters","parent- The parent","Returns","A ColorInspector object","Notes"]},{"l":"doActivateCorrection","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector:doActivateCorrection(correctionType[, number]) - cp.rx.go.Statementboolean","Type","Method","Description","Returns a Statement that activates the named correction type and number, if present. If no corrector with the type/number combination exists, a new one is added.","Parameters","correctionType - The string for the type of correction (in English). E.g. \"Color Wheels\", \"Color Board\", etc. number - The correction number for that type. Defaults to 1.","Returns","The Statement, which sends a single true value if successful, or sends an error if not.","Notes"]},{"l":"doAddCorrection","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector:doAddCorrection(correctionType) - cp.rx.go.Statement","Type","Method","Description","A Statement that adds the named correction type.","Parameters","correctionType - The string for the type of correction (in English). E.g. \"Color Wheels\", \"Color Board\", etc.","Returns","The Statement, resolving to true if successful, or sending an error if not.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to show the Color Inspector.","Parameters","None","Returns","The Statement, resolving to true if successful or sending an error if not.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector:hide() - ColorInspector","Type","Method","Description","Hides the Color Inspector","Parameters","None","Returns","ColorInspector object","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorInspector:show() - self","Type","Method","Description","Shows the Color Inspector.","Parameters","None","Returns","ColorInspector object","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcolorpuck","l":"cp.apple.finalcutpro.inspector.color.ColorPuck","p":["Color ColorPuck Module."]},{"l":"API Overview","p":["accumulate","angle","cleanup","colorMarker","ColorPuck","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","contentUI","DEFAULT_ANGLES","doReset","doSelect","doShiftPercent","doShow","drawMarker","ELASTICITY","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getArc","getBrightness","hasAngle","index","label","loop","matches","Methods- API calls which can only be made on an object returned by a constructor","NATURAL_LENGTH","percent","RANGE","reset","row","select","shiftAngle","shiftPercent","show","skimming","start","stop"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_ANGLES","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.DEFAULT_ANGLES - table","Type","Constant","Description","The table of default angles for the various pucks (1-4)."]},{"l":"ELASTICITY","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.ELASTICITY - number","Type","Constant","Description","Elasticity as number."]},{"l":"NATURAL_LENGTH","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.NATURAL_LENGTH - number","Type","Constant","Description","Natural Length as number."]},{"l":"RANGE","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.RANGE - table","Type","Constant","Description","Table of puck ranges."]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"ColorPuck","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck(parent, puckNumber, labelKeys, hasAngle) - ColorPuck","Type","Constructor","Description","Creates a new ColorPuck object","Parameters","parent- The parent puckNumber- The puck number labelKeys- Label Keys hasAngle- If true, the puck has an angle parameter.","Returns","A ColorInspector object","Notes"]},{"l":"Fields"},{"l":"angle","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.angle cp.ui.TextField","Type","Field","Description","The 'angle' text field (only present for the 'color' aspect)."]},{"l":"label","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.label cp.prop: string; read-only","Type","Field","Description","The human-readable label for the puck, in FCPX's current language."]},{"l":"percent","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.percent cp.prop: TextField","Type","Field","Description","The 'percent' text field."]},{"l":"row","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.row cp.prop: PropertyRow","Type","Field","Description","Finds the 'row' for the property type."]},{"l":"skimming","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck.skimming cp.prop: boolean","Type","Field","Description","The Skimming Preferences value."]},{"l":"Methods"},{"l":"accumulate","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:accumulate(xShift, yShift) - none","Type","Method","Description","Accumulate's the Shift Values.","Parameters","xShift- x value as number yShift- y value as number","Returns","x- Accumulated x value as number y- Accumulated y value as number","Notes"]},{"l":"cleanup","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:cleanup() - none","Type","Method","Description","Cleans up the Color ColorPuck drawings.","Parameters","None","Returns","Notes"]},{"l":"colorMarker","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:colorMarker(pct, angle) - none","Type","Method","Description","Draws a Color Marker.","Parameters","pct - Percentage angle - Angle","Returns","None","Notes"]},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:contentUI() - axuielementObject","Type","Method","Description","Returns the Content Accessibility Object","Parameters","None","Returns","An axuielementObject or nil","Notes"]},{"l":"doReset","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:doReset() - cp.rx.go.Statement","Type","Method","Description","A Statement that resets the puck to its default settings.","Parameters","None","Returns","The Statement, resolving to true if successful, or throwing an error if not.","Notes"]},{"l":"doSelect","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:doSelect() - cp.rx.go.Statement","Type","Method","Description","A Statement that selects this puck.","Parameters","None","Returns","The Statement, resolving to true if successful or throwing an error if no.","Notes"]},{"l":"doShiftPercent","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:doShiftPercent(amount) - cp.rx.go.Statement","Type","Method","Description","A Statement that shifts the percent value by the provide amount.","Parameters","amount- The amount to shift the percent value.","Returns","The Statement, resolving to the updated percent value, or throwing an error if there is a problem.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the Color ColorPuck.","Parameters","None","Returns","The Statement, resolving to true if successful or sending an error if not.","Notes"]},{"l":"drawMarker","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:drawMarker() - none","Type","Method","Description","Draws a marker.","Parameters","None","Returns","Notes"]},{"l":"getArc","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:getArc() - number","Type","Method","Description","Gets the arc value.","Parameters","None","Returns","The arc value as number.","Notes"]},{"l":"getBrightness","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:getBrightness() - number","Type","Method","Description","Gets the brightness value.","Parameters","None","Returns","The brightness value as number.","Notes"]},{"l":"hasAngle","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:hasAngle() - boolean","Type","Method","Description","Indicates if the puck has an angle parameter. The angle cp.prop will always exist regardless, but if this is false, it will never return a result.","Parameters","None","Returns","true if the puck has an angle.","Notes"]},{"l":"index","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:index() - number","Type","Method","Description","Returns the puck number (1 through 4).","Parameters","None","Returns","The puck number.","Notes"]},{"l":"loop","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:loop() - none","Type","Method","Description","Loops the Color ColorPuck function.","Parameters","None","Returns","Notes"]},{"l":"reset","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:reset() - cp.apple.finalcutpro.inspector.color.ColorPuck","Type","Method","Description","Resets the puck to its default settings.","Parameters","None","Returns","The ColorPuck instance.","Notes"]},{"l":"select","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:select() - cp.apple.finalcutpro.inspector.color.ColorPuck","Type","Method","Description","Selects this puck.","Parameters","None","Returns","The ColorPuck instance.","Notes"]},{"l":"shiftAngle","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:shiftAngle(amount) - cp.apple.finalcutpro.inspector.color.ColorPuck","Type","Method","Description","Shifts the angle value by the provide amount.","Parameters","amount - The amount to shift the angle value.","Returns","The ColorPuck instance.","Notes"]},{"l":"shiftPercent","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:shiftPercent(amount) - cp.apple.finalcutpro.inspector.color.ColorPuck","Type","Method","Description","Shifts the percent value by the provide amount.","Parameters","amount- The amount to shift the percent value.","Returns","The updated value.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:show() - cp.apple.finalcutpro.inspector.color.ColorPuck","Type","Method","Description","Shows the Color ColorPuck","Parameters","None","Returns","The cp.apple.finalcutpro.inspector.color.ColorPuck object for method chaining.","Notes"]},{"l":"start","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:start() - cp.apple.finalcutpro.inspector.color.ColorPuck","Type","Method","Description","Starts a Color ColorPuck.","Parameters","None","Returns","The ColorPuck instance.","Notes"]},{"l":"stop","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorPuck:stop() - none","Type","Method","Description","Stops a Color ColorPuck.","Parameters","None","Returns","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcolorwell","l":"cp.apple.finalcutpro.inspector.color.ColorWell","p":["Represents a single Color Well in the Color Wheels Inspector."]},{"l":"API Overview","p":["center","colorOrientation","colorPosition","ColorWell","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","Fields- Variables which can only be accessed from an object returned by a constructor","focused","Functions- API calls offered directly by the extension","KEY_PRESS","matches","Methods- API calls which can only be made on an object returned by a constructor","nudge","puckPosition","reset","select"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"KEY_PRESS","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell.KEY_PRESS","Type","Constant","Description","This can be used with nudge to shift by the same distance"]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell.matches(element)","Type","Function","Description","Checks if the specified element is a Color Well.","Parameters","element - The element to check","Returns","true if the element is a Color Well.","Notes"]},{"l":"Constructors"},{"l":"ColorWell","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell(parent, uiFinder[, hueShift]) - ColorWell","Type","Constructor","Description","Creates a new ColorWell instance, with the specified parent and finder function. The finder function should return the specific color well UI element that this instance represents.","Parameters","parent - The parent object uiFinder - Returns the axuielement that represents the color well. hueShift - The amount to shift the hue.","Returns","A new ColorWell instance.","Notes"]},{"l":"Fields"},{"l":"center","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell.center cp.prop: point; read-only","Type","Field","Description","The center point of the ColorWell. A table with {x=..., y=...}."]},{"l":"colorOrientation","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell.colorOrientation cp.prop: table","Type","Field","Description","Provides the orientation of the color as a table containing an up and right value."]},{"l":"colorPosition","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell.colorPosition cp.prop: hs.geometry.point","Type","Field","Description","X/Y screen position for the current color value of the Color Well. This ignores the bounds of the"]},{"l":"focused","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell.focused cp.pref: boolean","Type","Field","Description","Gets and sets whether the Color Well has focus."]},{"l":"puckPosition","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell.puckPosition cp.prop: hs.geometry.point","Type","Field","Description","Absolute X/Y screen position for the puck in the Color Well. Colours outside the bounds are clamped inside the color well."]},{"l":"Methods"},{"l":"nudge","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell:nudge(right, up) - cp.rx.go.Statement","Type","Method","Description","A Statement that nudges the colorPosition by right/ up values. Negative right values shift left, negative up values shift down. You may have decimal shift values.","Parameters","right- The number of steps to shift right. May be negative to shift left. up- The number of pixels to shift down. May be negative to shift down.","Returns","The ColorWell instance.","Notes"]},{"l":"reset","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell:reset() - self","Type","Method","Description","Resets the color wheel.","Parameters","None","Returns","The ColorWell instance.","Notes"]},{"l":"select","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWell:select() - cp.apple.finalcutpro.inspector.color.ColorWell","Type","Method","Description","Selects this color well.","Parameters","None","Returns","The ColorWell instance.","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcolorwheel","l":"cp.apple.finalcutpro.inspector.color.ColorWheel","p":["Represents a single Color Well in the Color Wheels Inspector."]},{"l":"API Overview","p":["brightness","brightnessValue","colorOrientation","colorPosition","colorValue","colorWell","ColorWheel","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","doNudgeColor","doSelect","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","matches","Methods- API calls which can only be made on an object returned by a constructor","nudgeColor","puckPosition","reset","saturation","saturationValue","select","show","TYPE"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"TYPE","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.TYPE","Constant","Description","The possible types of ColorWheels: MASTER, SHADOWS, MIDTONES, HIGHLIGHTS."]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.matches(element)","Type","Function","Description","Checks if the specified element is a Color Well.","Parameters","element - The element to check","Returns","true if the element is a Color Well.","Notes"]},{"l":"Constructors"},{"l":"ColorWheel","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel(parent, type) - ColorWheel","Type","Constructor","Description","Creates a new ColorWheel instance, with the specified parent and type.","Parameters","parent - The parent object. type - The type of color wheel. Must be one of the ColorWheel.TYPE values.","Returns","A new ColorWheel instance.","Notes"]},{"l":"Fields"},{"l":"brightnessValue","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.brightnessValue cp.prop: number","Type","Field","Description","The current brightness value, as a number between -12 and 10."]},{"l":"colorOrientation","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.colorOrientation cp.prop: table","Type","Field","Description","Provides the orientation of the color as a table containing an up and right value."]},{"l":"colorPosition","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.colorPosition cp.prop: point","Type","Field","Description","X/Y screen position for the current color value of the Color Well. This ignores the bounds of the"]},{"l":"colorValue","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.colorValue cp.prop: hs.drawing.color","Type","Field","Description","The current color value, as a hs.drawing.color table."]},{"l":"puckPosition","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.puckPosition cp.prop: point","Type","Field","Description","Absolute X/Y screen position for the puck in the Color Well. Colours outside the bounds are clamped inside the color well."]},{"l":"reset","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.reset cp.ui.Button","Type","Field","Description","A Button that resets the color wheel values, if the ColorWheel is showing."]},{"l":"saturationValue","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.saturationValue cp.prop: number","Type","Field","Description","The current saturation value, as a number between 0 and 10."]},{"l":"Methods"},{"l":"brightness","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.brightness ValueIndicator","Type","Method","Description","Returns the brightness ValueIndicator for this ColorWheel.","Parameters","None","Returns","The brightness ValueIndicator instance.","Notes"]},{"l":"colorWell","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.colorWell ColorWell","Type","Method","Description","Returns the ColorWell for this ColorWheel.","Parameters","None","Returns","The ColorWell instance.","Notes"]},{"l":"doNudgeColor","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel:doNudgeColor(right, up) - cp.rx.go.Statement","Type","Method","Description","A Statement that nudges the colorPosition by right/ up values. Negative right values shift left, negative up values shift down. You may have decimal shift values.","Parameters","right- The number of steps to shift right. May be negative to shift left. up- The number of pixels to shift down. May be negative to shift down.","Returns","The Statement, resolving to true if successful.","Notes"]},{"l":"doSelect","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel:doSelect() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to select this ColorWheel.","Parameters","None","Returns","The Statement, resolving to true if selected, otherwise false.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to show the ColorWheel.","Parameters","None","Returns","The Statement, resolving to true if shown, false if not.","Notes"]},{"l":"nudgeColor","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel:nudgeColor(right, up) - self","Type","Method","Description","Nudges the colorPosition by right/ up values. Negative right values shift left, negative up values shift down. You may have decimal shift values.","Parameters","right- The number of steps to shift right. May be negative to shift left. up- The number of pixels to shift down. May be negative to shift down.","Returns","The ColorWheel instance.","Notes"]},{"l":"saturation","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel.saturation ValueIndicator","Type","Method","Description","Returns the saturation ValueIndicator for this ColorWheel.","Parameters","None","Returns","The saturation ValueIndicator instance.","Notes"]},{"l":"select","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel:select() - cp.apple.finalcutpro.inspector.color.ColorWheel","Type","Method","Description","Shows and selects this color wheel.","Parameters","None","Returns","The ColorWheel instance.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheel:show() - self","Type","Method","Description","Shows the ColorWheel, if possible.","Parameters","None","Returns","The same ColorWheel instance, for chaining.","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcolorwheels","l":"cp.apple.finalcutpro.inspector.color.ColorWheels","p":["Color Wheels Module.","Extends Element"]},{"l":"API Overview","p":["ColorWheels","Constructors- API calls which return an object, typically one that offers API methods","contentUI","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","highlights","hue","hueRow","hueSlider","hueTextField","master","matches","maxValue","Methods- API calls which can only be made on an object returned by a constructor","midtones","minValue","mix","mixRow","mixSlider","mixTextField","shadows","show","temperature","temperatureRow","temperatureSlider","temperatureTextField","tint","tintRow","tintSlider","tintTextField","value","viewingAllWheels","viewMode","wheelType"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.matches(element)","Type","Function","Description","Checks if the specified element is the Color Wheels element.","Parameters","element - The element to check","Returns","true if the element is the Color Wheels.","Notes"]},{"l":"Constructors"},{"l":"ColorWheels","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels(parent) - ColorInspector","Type","Constructor","Description","Creates a new ColorWheels object","Parameters","parent- The parent","Returns","A new ColorInspector object","Notes"]},{"l":"Fields"},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.contentUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The axuielement representing the content element of the ColorWheels corrector."]},{"l":"highlights","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.highlights ColorWheel","Type","Field","Description","A ColorWheel that allows control of the 'highlights' color settings."]},{"l":"hue","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.hue cp.prop: number","Type","Field","Description","The hue for the corrector. A number from 0 to 360."]},{"l":"hueRow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.hueRow cp.ui.PropertyRow","Type","Field","Description","A PropertyRow that provides access to the 'Hue' parameter, and axuielement"]},{"l":"hueSlider","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.hueSlider cp.ui.Slider","Type","Field","Description","Returns a Slider that provides access to the 'Hue' slider."]},{"l":"hueTextField","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.hueTextField cp.ui.TextField","Type","Field","Description","A TextField that provides access to the 'Hue' slider."]},{"l":"master","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.master ColorWheel","Type","Field","Description","A ColorWheel that allows control of the 'master' color settings."]},{"l":"maxValue","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.maxValue cp.prop: number","Type","Field","Description","The maximum value of the indicator as a number."]},{"l":"midtones","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.midtones ColorWheel","Type","Field","Description","A ColorWheel that allows control of the 'midtones' color settings."]},{"l":"minValue","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.minValue cp.prop: number","Type","Field","Description","The minimum value of the indicator as a number."]},{"l":"mix","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.mix cp.prop: number","Type","Field","Description","The mix amount for this corrector. A number ranging from 0 to 1."]},{"l":"mixRow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.mixRow cp.ui.PropertyRow","Type","Field","Description","A PropertyRow that provides access to the 'Mix' parameter, and axuielement"]},{"l":"mixSlider","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.mixSlider cp.ui.Slider","Type","Field","Description","A Slider that provides access to the 'Mix' slider."]},{"l":"mixTextField","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.mixTextField cp.ui.TextField","Type","Field","Description","A TextField that provides access to the 'Mix' slider."]},{"l":"shadows","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.shadows ColorWheel","Type","Field","Description","A ColorWheel that allows control of the 'shadows' color settings."]},{"l":"temperature","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.temperature cp.prop: number","Type","Field","Description","The color temperature for this corrector. A number from 2500 to 10000."]},{"l":"temperatureRow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.temperatureRow cp.ui.PropertyRow","Type","Field","Description","A PropertyRow that provides access to the 'Temperatures' parameter, and axuielement"]},{"l":"temperatureSlider","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.temperatureSlider cp.ui.Slider","Type","Field","Description","A Slider that provides access to the 'Temperatures' slider."]},{"l":"temperatureTextField","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.temperatureTextField cp.ui.TextField","Type","Field","Description","A TextField that provides access to the 'Temperature' slider."]},{"l":"tint","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.tint cp.prop: number","Type","Field","Description","The tint for the corrector. A number from -50 to 50."]},{"l":"tintRow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.tintRow cp.ui.PropertyRow","Type","Field","Description","A PropertyRow that provides access to the 'Tint' parameter, and axuielement"]},{"l":"tintSlider","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.tintSlider cp.ui.Slider","Type","Field","Description","Returns a Slider that provides access to the 'Tint' slider."]},{"l":"tintTextField","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.tintTextField cp.ui.TextField","Type","Field","Description","A TextField that provides access to the 'Tint' slider."]},{"l":"value","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.value cp.prop: number","Type","Field","Description","The value of the value indicator as a number."]},{"l":"viewingAllWheels","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.viewingAllWheels cp.prop: boolean","Type","Field","Description","Reports and modifies whether the ColorWheels corrector is showing \"All Wheels\" ( true) or \"Single Wheels\" ( false)."]},{"l":"viewMode","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.viewMode cp.ui.MenuButton","Type","Field","Description","The MenuButton for the View Mode."]},{"l":"wheelType","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels.wheelType cp.ui.RadioGroup","Type","Field","Description","The RadioGroup that allows selection of the wheel type. Only available when"]},{"l":"Methods"},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels:doShow() - cs.rx.go.Statement","Type","Method","Description","A Statement that shows the Color Board within the Color Inspector.","Parameters","None","Returns","The Statement, resolving to true if successfully shown.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.color.ColorWheels:show() - boolean","Type","Method","Description","Show's the Color Board within the Color Inspector.","Parameters","None","Returns","ColorWheels object","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorcorrectionsbar","l":"cp.apple.finalcutpro.inspector.color.CorrectionsBar","p":["The Correction selection/management bar at the top of the ColorInspector","Requires Final Cut Pro 10.4 or later."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","CorrectionsBar","matches","Fields- Variables which can only be accessed from an object returned by a constructor","correction","menuButton","Methods- API calls which can only be made on an object returned by a constructor","activate","add","doActivate","doShow","findCorrectionLabel","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"CorrectionsBar","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar(parent) - CorrectionsBar","Type","Function","Description","Creates a new Media Import object.","Parameters","parent - The parent object.","Returns","A new CorrectionsBar object.","Notes"]},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Fields"},{"l":"correction","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar.correction cp.ui.MenuButton","Type","Field","Description","The MenuButton that lists the current correction."]},{"l":"menuButton","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar.menuButton MenuButton","Type","Field","Description","The menu button."]},{"l":"Methods"},{"l":"activate","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar:activate(correctionType, number) - cp.apple.finalcutpro.inspector.color.CorrectionsBar","Type","Method","Description","Activates a correction type.","Parameters","correctionType- The correction type as string. number- The number of the correction.","Returns","cp.apple.finalcutpro.inspector.color.CorrectionsBar object.","Notes"]},{"l":"add","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar:add(correctionType) - cp.apple.finalcutpro.inspector.color.CorrectionsBar","Type","Method","Description","Adds the specific correction type.","Parameters","correctionType- The correction type as string.","Returns","cp.apple.finalcutpro.inspector.color.CorrectionsBar object.","Notes"]},{"l":"doActivate","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar:doActivate(correctionType, number) - cp.rx.go.Statement","Type","Method","Description","A Statement that activates a correction type.","Parameters","correctionType- The correction type as string. number- The number of the correction.","Returns","The Statement.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to show the bar.","Parameters","None","Returns","The Statement, which will resolve to true if successful, or send an error if not.","Notes"]},{"l":"findCorrectionLabel","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar:findCorrectionLabel(correctionType) - string","Type","Method","Description","Returns Correction Label.","Parameters","correctionType - The correction type as string.","Returns","The correction label as string.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.color.CorrectionsBar:show() - self","Type","Method","Description","Attempts to show the bar.","Parameters","None","Returns","The CorrectionsBar instance.","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorhuesaturationcurve","l":"cp.apple.finalcutpro.inspector.color.HueSaturationCurve","p":["A HueSaturationCurve Element."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","HueSaturationCurve"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurve.matches(element) - boolean","Type","Function","Description","Checks if the specified value is a HueSaturationCurve.","Parameters","element - The axuielement to check.","Returns","true if it matches a HueSaturationCurve element.","Notes"]},{"l":"Constructors"},{"l":"HueSaturationCurve","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurve(parent, type) - HueSaturationCurve","Type","Constructor","Description","Creates a new HueSaturationCurve Element.","Parameters","parent - The parent Element. type - The TYPE of curve.","Returns","The new HueSaturationCurve.","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorhuesaturationcurves","l":"cp.apple.finalcutpro.inspector.color.HueSaturationCurves","p":["Color Curves Module.","Requires Final Cut Pro 10.4 or later."]},{"l":"API Overview","p":["colorVsSat","Constructors- API calls which return an object, typically one that offers API methods","contentUI","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","HueSaturationCurves","hueVsHue","hueVsLuma","hueVsSat","lumaVsSat","matches","Methods- API calls which can only be made on an object returned by a constructor","mix","mixRow","mixSlider","satVsSat","show","viewingAllCurves","viewModeButton","wheelType"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.matches(element)","Type","Function","Description","Checks if the specified element is the Color Curves element.","Parameters","element - The element to check","Returns","true if the element is the Color Curves.","Notes"]},{"l":"Constructors"},{"l":"HueSaturationCurves","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves(parent) - HueSaturationCurves object","Type","Constructor","Description","Creates a new HueSaturationCurves object","Parameters","parent- The parent","Returns","A ColorInspector object","Notes"]},{"l":"Fields"},{"l":"colorVsSat","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.colorVsSat HueSaturationCurve","Type","Field","Description","A HueSaturationCurve"]},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.contentUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The axuielement representing the content element of the HueSaturationCurves corrector."]},{"l":"hueVsHue","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.hueVsHue HueSaturationCurve","Type","Field","Description","A HueSaturationCurve"]},{"l":"hueVsLuma","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.hueVsLuma HueSaturationCurve","Type","Field","Description","A HueSaturationCurve"]},{"l":"hueVsSat","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.hueVsSat HueSaturationCurve","Type","Field","Description","A HueSaturationCurve"]},{"l":"lumaVsSat","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.lumaVsSat HueSaturationCurve","Type","Field","Description","A HueSaturationCurve"]},{"l":"mix","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.mix cp.prop: number","Type","Field","Description","The mix amount for this corrector. A number ranging from 0 to 1."]},{"l":"mixRow","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.mixRow cp.ui.PropertyRow","Type","Field","Description","A PropertyRow that provides access to the 'Mix' parameter, and axuielement"]},{"l":"mixSlider","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.mixSlider cp.ui.Slider","Type","Field","Description","A Slider that provides access to the 'Mix' slider."]},{"l":"satVsSat","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.satVsSat HueSaturationCurve","Type","Field","Description","A HueSaturationCurve"]},{"l":"viewingAllCurves","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.viewingAllCurves cp.prop: boolean","Type","Field","Description","Reports and modifies whether the corrector is showing \"All Curves\" ( true) or \"Single Curves\" ( false)."]},{"l":"viewModeButton","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.viewModeButton cp.ui.MenuButton","Type","Field","Description","The MenuButton for the View Mode."]},{"l":"wheelType","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves.wheelType RadioGroup","Type","Field","Description","The RadioGroup that allows selection of the curve type. Only available when"]},{"l":"Methods"},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.color.HueSaturationCurves:show() - boolean","Type","Method","Description","Show's the Color Board within the Color Inspector.","Parameters","None","Returns","HueSaturationCurves object","Notes"]}],[{"i":"cpapplefinalcutproinspectorcolorvalueindicator","l":"cp.apple.finalcutpro.inspector.color.ValueIndicator","p":["ValueIndicator Module."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","ValueIndicator","Methods- API calls which can only be made on an object returned by a constructor","decrement","increment","isShowing","loadLayout","saveLayout","shiftValue"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.color.ValueIndicator.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"ValueIndicator","p":["Signature","cp.apple.finalcutpro.inspector.color.ValueIndicator(parent, uiFinder, minValue, maxValue, toAXValueFn, fromAXValueFn) - ValueIndicator","Type","Constructor","Description","Creates a new ValueIndicator.","Parameters","parent- The parent table. uiFinder- The function which returns the axuielement. minValue- The minimum value allowed for the value. maxValue- The maximum value allowed for the value. toAXValueFn- The function which will convert the user value to the actual AXValue. fromAXValueFn- The function which will convert the current AXValue to a user value.","Returns","New ValueIndicator instance.","Notes"]},{"l":"Methods"},{"l":"decrement","p":["Signature","cp.apple.finalcutpro.inspector.color.ValueIndicator:decrement() - cp.apple.finalcutpro.inspector.color.ValueIndicator","Type","Method","Description","Decrements the value indicator.","Parameters","None","Returns","The cp.apple.finalcutpro.inspector.color.ValueIndicator object.","Notes"]},{"l":"increment","p":["Signature","cp.apple.finalcutpro.inspector.color.ValueIndicator:increment() - cp.apple.finalcutpro.inspector.color.ValueIndicator","Type","Method","Description","Increments the value indicator.","Parameters","None","Returns","The cp.apple.finalcutpro.inspector.color.ValueIndicator object.","Notes"]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.inspector.color.ValueIndicator:isShowing() - boolean","Type","Method","Description","Is the Value Indicator currently showing?","Parameters","None","Returns","true if showing, otherwise false","Notes"]},{"l":"loadLayout","p":["Signature","cp.apple.finalcutpro.inspector.color.ValueIndicator:loadLayout(layout) - none","Type","Method","Description","Loads a layout.","Parameters","layout- The layout table you want to load.","Returns","None","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.inspector.color.ValueIndicator:saveLayout() - table","Type","Method","Description","Saves the layout.","Parameters","None","Returns","A table containing the layout.","Notes"]},{"l":"shiftValue","p":["Signature","cp.apple.finalcutpro.inspector.color.ValueIndicator:shiftValue(value) - cp.apple.finalcutpro.inspector.color.ValueIndicator","Type","Method","Description","Shifts the Value Indicator value.","Parameters","value- The amount to shift the value indicator by as a number.","Returns","The cp.apple.finalcutpro.inspector.color.ValueIndicator object.","Notes"]}],[{"i":"cpapplefinalcutproinspectorgeneratorgeneratorinspector","l":"cp.apple.finalcutpro.inspector.generator.GeneratorInspector","p":["Generator Inspector Module. This appears for both Generators and Titles."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","GeneratorInspector"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"GeneratorInspector","p":["Signature","cp.apple.finalcutpro.inspector.generator.GeneratorInspector(parent) - GeneratorInspector object","Type","Constructor","Description","Creates a new GeneratorInspector object","Parameters","parent- The parent","Returns","A GeneratorInspector object","Notes"]}],[{"i":"cpapplefinalcutproinspectorinfoinfoinspector","l":"cp.apple.finalcutpro.inspector.info.InfoInspector","p":["Video Inspector Module."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","metadataViews","Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","new","Fields- Variables which can only be accessed from an object returned by a constructor","metadataView","metadataViewButton","Methods- API calls which can only be made on an object returned by a constructor","propertiesUI"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"metadataViews","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoInspector.metadataViews - table","Type","Constant","Description","Metadata Views"]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoInspector.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoInspector.new(parent) - InfoInspector object","Type","Constructor","Description","Creates a new InfoInspector object","Parameters","parent- The parent","Returns","A InfoInspector object","Notes"]},{"l":"Fields"},{"l":"metadataView","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoInspector.metadataView cp.prop: string","Type","Field","Description","Gets the name of the current metadata view."]},{"l":"metadataViewButton","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoInspector.metadataViewButton cp.io.MenuButton","Type","Field","Description","The Info Inspector Metadata View Button."]},{"l":"Methods"},{"l":"propertiesUI","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoInspector:propertiesUI() - hs.axuielement object","Type","Method","Description","Returns the hs.axuielement object for the Properties UI.","Parameters","None","Returns","A hs.axuielement object.","Notes"]}],[{"i":"cpapplefinalcutproinspectorinfoinfoprojectinspector","l":"cp.apple.finalcutpro.inspector.info.InfoProjectInspector","p":["Info Inspector Module when a Project is selected."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","new","Fields- Variables which can only be accessed from an object returned by a constructor","modify","Methods- API calls which can only be made on an object returned by a constructor","doShow","propertiesUI"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoProjectInspector.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoProjectInspector.new(parent) - InfoProjectInspector object","Type","Constructor","Description","Creates a new InfoProjectInspector object","Parameters","parent- The parent","Returns","A InfoProjectInspector object","Notes"]},{"l":"Fields"},{"l":"modify","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoProjectInspector.modify cp.ui.Button","Type","Field","Description","The Modify Project button in the Info Inspector."]},{"l":"Methods"},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoProjectInspector:doShow() - cp.rx.go.Statment","Type","Method","Description","A Statement that shows the panel.","Parameters","None","Returns","The Statement, resolving to true if successful and sending an error if not.","Notes"]},{"l":"propertiesUI","p":["Signature","cp.apple.finalcutpro.inspector.info.InfoProjectInspector:propertiesUI() - hs.axuielement object","Type","Method","Description","Returns the hs.axuielement object for the Properties UI.","Parameters","None","Returns","A hs.axuielement object.","Notes"]}],[{"i":"cpapplefinalcutproinspectorinspector","l":"cp.apple.finalcutpro.inspector.Inspector","p":["Inspector"]},{"l":"API Overview","p":["audio","bottomBarUI","color","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","doFindTabButton","doHide","doSelectTab","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","generator","hide","info","Inspector","INSPECTOR_TABS","isFullHeight","isShowing","labelUI","matches","Methods- API calls which can only be made on an object returned by a constructor","panelUI","projectInfo","propertiesUI","selectedTab","selectTab","share","show","tabAvailable","text","title","topBarUI","transition","video"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"INSPECTOR_TABS","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.INSPECTOR_TABS - table","Type","Constant","Description","Table of supported Inspector Tabs"]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - axuielementObject","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"Inspector","p":["Signature","cp.apple.finalcutpro.inspector.Inspector(parent) - Inspector","Type","Constructor","Description","Creates a new Inspector.","Parameters","parent - The parent object.","Returns","The Inspector object.","Notes"]},{"l":"Fields"},{"l":"audio","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.audio cp.apple.finalcutpro.inspector.AudioInspector","Type","Field","Description","The AudioInspector."]},{"l":"bottomBarUI","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.bottomBarUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the bottom bar axuielement for the Inspector."]},{"l":"color","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.color cp.apple.finalcutpro.inspector.ColorInspector","Type","Field","Description","The ColorInspector."]},{"l":"generator","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.generator cp.apple.finalcutpro.inspector.GeneratorInspector","Type","Field","Description","The GeneratorInspector"]},{"l":"info","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.info cp.apple.finalcutpro.inspector.InfoInspector","Type","Field","Description","The InfoInspector."]},{"l":"isFullHeight","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.isFullHeight cp.prop: boolean","Type","Field","Description","Returns true if the Inspector is full height."]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.isShowing cp.prop: boolean; read-only","Type","Field","Description","Returns true if the Inspector is showing otherwise false"]},{"l":"labelUI","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.labelUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the axuielement for text label at the top of the Inspector."]},{"l":"panelUI","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.panelUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the central panel axuielement for the Inspector."]},{"l":"projectInfo","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.projectInfo cp.apple.finalcutpro.inspector.InfoProjectInspector","Type","Field","Description","The InfoProjectInspector."]},{"l":"propertiesUI","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.propertiesUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the properties axuielement for the Inspector. This contains the rows of property values."]},{"l":"share","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.share cp.apple.finalcutpro.inspector.ShareInspector","Type","Field","Description","The ShareInspector."]},{"l":"text","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.text cp.apple.finalcutpro.inspector.TextInspector","Type","Field","Description","The TextzInspector."]},{"l":"title","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.title cp.apple.finalcutpro.inspector.TitleInspector","Type","Field","Description","The TitleInspector."]},{"l":"topBarUI","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.topBarUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the \"top bar\" axuielement for the Inspector."]},{"l":"transition","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.transition cp.apple.finalcutpro.inspector.TransitionInspector","Type","Field","Description","The TransitionInspector."]},{"l":"video","p":["Signature","cp.apple.finalcutpro.inspector.Inspector.video cp.apple.finalcutpro.inspector.VideoInspector","Type","Field","Description","The VideoInspector."]},{"l":"Methods"},{"l":"doFindTabButton","p":["Signature","cp.apple.finalcutpro.inspector.Inspector:doFindTabButton(type) - cp.rx.go.Statement","Type","Method","Description","Finds the named Inspector tab button, or sends an error if the type is unsupported.","Parameters","type - the type of the button to return. (e.g. \"Video\")","Returns","A Statement to execute.","Notes","Valid strings for type are as follows: Audio Color Effect Generator Info Share Text Title Transition Video Not all button types are available in all contexts."]},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.inspector.Inspector:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to hide the Inspector.","Parameters","None","Returns","The Statement, resolving to true if the Inspector was hidden successfully, or an error if not.","Notes"]},{"l":"doSelectTab","p":["Signature","cp.apple.finalcutpro.inspector.Inspector:doSelectTab(title) - cp.rx.go.Statement","Type","Method","Description","A Statement that selects the specified tab title.","Parameters","title - The title of the tab to select.","Returns","The Statement","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.Inspector:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to show the Inspector.","Parameters","None","Returns","The Statement, resolving to true if the Inspector was shown successfully, or an error if not.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.inspector.Inspector:hide() - Inspector","Type","Method","Description","Hides the inspector.","Parameters","None","Returns","The Inspector instance.","Notes"]},{"l":"selectedTab","p":["Signature","cp.apple.finalcutpro.inspector.Inspector:selectedTab() - string or nil","Type","Method","Description","Returns the name of the selected inspector tab otherwise nil.","Parameters","None","Returns","A string of the selected tab, otherwise nil if the Inspector is closed or an error occurred.","Notes","The tab strings can be: Audio Color Effect Generator Info Share Text Title Transition Video"]},{"l":"selectTab","p":["Signature","cp.apple.finalcutpro.inspector.Inspector:selectTab(tab) - boolean","Type","Method","Description","Selects a tab in the inspector.","Parameters","tab - A string from the cp.apple.finalcutpro.inspector.Inspector.INSPECTOR_TABS table","Returns","A string of the selected tab, otherwise nil if an error occurred.","Notes","This method will open the Inspector if it's closed, and leave it open. Valid strings for value are as follows: Audio Color Effect Generator Info Share Text Title Transition Video"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.Inspector:show([tab]) - Inspector","Type","Method","Description","Shows the inspector.","Parameters","[tab] - A string from the cp.apple.finalcutpro.inspector.Inspector.INSPECTOR_TABS table","Returns","The Inspector instance.","Notes","Valid strings for value are as follows: Audio Color Effect Generator Info Share Text Title Transition Video"]},{"l":"tabAvailable","p":["Signature","cp.apple.finalcutpro.inspector.Inspector:tabAvailable(tab) - boolean","Type","Method","Description","Checks to see if a tab is currently available in the Inspector.","Parameters","tab - A string from the cp.apple.finalcutpro.inspector.Inspector.INSPECTOR_TABS table","Returns","true if available otherwise false.","Notes","Valid strings for value are as follows: Audio Color Effect Generator Info Share Text Title Transition Video"]}],[{"i":"cpapplefinalcutproinspectorinspectorproperty","l":"cp.apple.finalcutpro.inspector.InspectorProperty","p":["InspectorProperty contains helper functions for handling common property types that occur in various Inspectors in FCP.","In addition to specific property row types like textField, slider, etc., there is also a section, which is for rows which expand/collapse to reveal other properties."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","checkBox","hasProperties","menuButton","numberField","popUpButton","section","simple","slider","staticText","textField","xy"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"checkBox","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.checkBox(labelKey[, index]) - cp.prop cp.ui.PropertyRow; read-only","Type","Function","Description","Creates a new cp.prop that contains a PropertyRow matching the labelKey.","Parameters","labelKey - The I18N key that the row lable matches. index - The instance number of that label (defaults to 1).","Returns","The cp.prop that returns the PropertyRow.","Notes","It has one additional property:** value- A cp.ui.CheckBox which contains the boolean value for the row."]},{"l":"hasProperties","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.hasProperties(parent, uiFinder) - boolean","Type","Function","Description","This will prepare the parent to handle containing PropertyRow children, and returns a function which can pass in a table of properties to bind to the parent.","Parameters","parent - The parent table. uiFinder - The function or cp.prop which will be called to find the parent UI element. Functions will be passed the parent when being executed.","Returns","boolean","Notes","For example: lua/lililocal o = {/lili propertiesUI = ...,/lili}/liliInspectorProperty.hasProperties(o, o.propertiesUI) {/lili propOne = InspectorProperty.textField FFPropOne,/lili sectionOne = InspectorProperty.section FFSectionOne {/lili sliderOne = InspectorProperty.slider FFSliderOne,/lili },/lili}/lili"]},{"l":"menuButton","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.menuButton(labelKey[, index]) - cp.prop cp.ui.PropertyRow; read-only","Type","Function","Description","Creates a new cp.prop that contains a PropertyRow matching the labelKey.","Parameters","labelKey - The I18N key that the row lable matches. index - The instance number of that label (defaults to 1).","Returns","The cp.prop that returns the PropertyRow.","Notes","It has one additional property:** value- A cp.ui.MenuButton which contains the text value."]},{"l":"numberField","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.numberField(labelKey[, index]) - cp.prop cp.ui.PropertyRow; read-only","Type","Function","Description","Creates a new cp.prop that contains a PropertyRow matching the labelKey.","Parameters","labelKey - The I18N key that the row lable matches. index - The instance number of that label (defaults to 1).","Returns","The cp.prop that returns the PropertyRow.","Notes","It has one additional property:** value- A cp.ui.TextField which contains the number value."]},{"l":"popUpButton","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.popUpButton(labelKey[, index]) - cp.prop cp.ui.PropertyRow; read-only","Type","Function","Description","Creates a new cp.prop that contains a PropertyRow matching the labelKey.","Parameters","labelKey - The I18N key that the row lable matches. index - The instance number of that label (defaults to 1).","Returns","The cp.prop that returns the PropertyRow.","Notes","It has one additional property:** value- A cp.ui.PopUpButton which contains the text value."]},{"l":"section","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | cp.apple.finalcutpro.inspector.InspectorProperty.section(labelKey[, index]) - function | | Type | Function | | Description | Returns a 'section row' factory function that can be called to create a section row that contains other PropertyRow' cp.props. | | **Parameters** | ullilabelKey - The I18N lookup key to find the row with./liliindex - (optional) The occurrence of the key value in the parent. Sometimes multiple rows have the same title. Defaults to 1./li/ul | | **Returns** | ulliA function which will create the section row when called./li/ul | | **Notes** | ulliThis does *not* return an actual cp.prop. Rather, it returns a 'factory' function that will help configure the sub-properties of of the section. This can be used as follows:/lili/lili```lua/lililocal o = {}/liliprop.bind(o) {/lili sectionOne = InspectorProperty.section FFHeaderOneKey { -- has sub-properties inside the /lili subRowOne = InspectorProperty.textField FFSubRowOneKey,/lili subRowTwo = InspectorProperty.slider FFSubRowTwoKey,/lili },/lili sectionTwo = InspectorProperty.section FFHeaderTwoKey {} -- no sub-properties, still needs /lili}/lili/lili-- access subRowOne/lililocal value = o:sectionOne():subRowOne()/lili```/lili/liliThe o.sectionOneproperty will be acp.propwith the following built-in additional properties:/lili **enabled - acp.ui.CheckBoxwhich reports if the section row is enabled./lili **toggle - acp.ui.Buttonwhich will toggle the show/hide button (if present)/lili **reset - acp.ui.Buttonwhich will reset the sub-property values, if present in the UI./lili **expanded - acp.prop` which reports if the section is currently expanded. |"]},{"l":"simple","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.simple(labelKey[, prepareFn][, index]]) - cp.prop cp.ui.PropertyRow; read-only","Type","Function","Description","Creates a new cp.prop that contains a PropertyRow matching the labelKey.","Parameters","labelKey - The I18N key that the row lable matches. prepareFn - The function to call to perform additional preparations on the row. index - The instance number of that label (defaults to 1).","Returns","The cp.prop that returns the PropertyRow.","Notes","It has no additional properties, but it does allow a prepareFn to be provided, which will be called after the PropertyRow is created, and passed the new PropertyRow as the first argument."]},{"l":"slider","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.slider(labelKey[, index]) - cp.prop cp.ui.PropertyRow; read-only","Type","Function","Description","Creates a new cp.prop that contains a PropertyRow matching the labelKey.","Parameters","labelKey - The I18N key that the row lable matches. index - The instance number of that label (defaults to 1).","Returns","The cp.prop that returns the PropertyRow.","Notes","It has one additional property:** value- A cp.ui.TextField which contains the value of the slider."]},{"l":"staticText","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.staticText(labelKey[, index]) - cp.prop cp.ui.PropertyRow; read-only","Type","Function","Description","Creates a new cp.prop that contains a PropertyRow matching the labelKey.","Parameters","labelKey - The I18N key that the row lable matches. index - The instance number of that label (defaults to 1).","Returns","The cp.prop that returns the PropertyRow.","Notes","It has one additional property:** value- A cp.ui.StaticText which contains the text value."]},{"l":"textField","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.textField(labelKey[, index]) - cp.prop cp.ui.PropertyRow; read-only","Type","Function","Description","Creates a new cp.prop that contains a PropertyRow matching the labelKey.","Parameters","labelKey - The I18N key that the row lable matches. index - The instance number of that label (defaults to 1).","Returns","The cp.prop that returns the PropertyRow.","Notes","It has one additional property:** value- A cp.ui.TextField which contains the text value."]},{"l":"xy","p":["Signature","cp.apple.finalcutpro.inspector.InspectorProperty.xy(labelKey[, index]) - cp.prop cp.ui.PropertyRow; read-only","Type","Function","Description","Creates a new cp.prop that contains a PropertyRow matching the labelKey.","Parameters","labelKey - The I18N key that the row lable matches. index - The instance number of that label (defaults to 1).","Returns","The cp.prop that returns the PropertyRow.","Notes","It has two additional properties:** x- A cp.ui.TextField containing the 'X' value.** y- A cp.ui.TextField containing the Y value."]}],[{"i":"cpapplefinalcutproinspectorshareshareinspector","l":"cp.apple.finalcutpro.inspector.share.ShareInspector","p":["CheckBox Property:","enabled - (cp.ui.CheckBox) Indicates if the section is enabled.","expanded - (cp.prop ) Get/sets whether the section is expanded.","For example:","Menu Property:","Property Rows depend on the type of property:","reset - (cp.ui.Button) Will reset the contents of the section.","Section Rows ( compositing, transform, etc.) have the following properties:","Share Inspector Module.","Slider Property:","toggle - (cp.ui.Button) Will toggle the Hide/Show button.","value - (cp.ui.CheckBox) The currently value.","value - (cp.ui.PopUpButton) The current value of the property.","value - (cp.ui.Slider) The current value of the property.","x - (cp.ui.TextField) The current 'X' value.","XY Property:","y - (cp.ui.TextField) The current 'Y' value.","You should also be able to show a specific property and it will be revealed:"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","new"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.share.ShareInspector.matches(element)","Type","Function","Description","Checks if the provided element could be a ShareInspector.","Parameters","element - The element to check","Returns","true if it matches, false if not.","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.apple.finalcutpro.inspector.share.ShareInspector.new(parent) - cp.apple.finalcutpro.share.ShareInspector","Type","Constructor","Description","Creates a new ShareInspector object","Parameters","parent- The parent","Returns","A ShareInspector object","Notes"]}],[{"i":"cpapplefinalcutproinspectortexttextinspector","l":"cp.apple.finalcutpro.inspector.text.TextInspector","p":["CheckBox Property:","enabled - (cp.ui.CheckBox) Indicates if the section is enabled.","expanded - (cp.prop ) Get/sets whether the section is expanded.","For example:","Menu Property:","Property Rows depend on the type of property:","reset - (cp.ui.Button) Will reset the contents of the section.","Section Rows ( compositing, transform, etc.) have the following properties:","Slider Property:","Text Inspector Module.","toggle - (cp.ui.Button) Will toggle the Hide/Show button.","value - (cp.ui.CheckBox) The currently value.","value - (cp.ui.PopUpButton) The current value of the property.","value - (cp.ui.Slider) The current value of the property.","x - (cp.ui.TextField) The current 'X' value.","XY Property:","y - (cp.ui.TextField) The current 'Y' value.","You should also be able to show a specific property and it will be revealed:"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","TextInspector","Methods- API calls which can only be made on an object returned by a constructor","doHide","doShow","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.text.TextInspector.matches(element)","Type","Function","Description","Checks if the provided element could be a TextInspector.","Parameters","element - The element to check","Returns","true if it matches, false if not.","Notes"]},{"l":"Constructors"},{"l":"TextInspector","p":["Signature","cp.apple.finalcutpro.inspector.text.TextInspector(parent) - cp.apple.finalcutpro.text.TextInspector","Type","Constructor","Description","Creates a new TextInspector object","Parameters","parent- The parent","Returns","A TextInspector object","Notes"]},{"l":"Methods"},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.inspector.text.TextInspector:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that hides the Text Inspector.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.inspector.text.TextInspector:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the Text Inspector.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.inspector.text.TextInspector:show() - TextInspector","Type","Method","Description","Shows the Text Inspector","Parameters","None","Returns","TextInspector","Notes"]}],[{"i":"cpapplefinalcutproinspectortitletitleinspector","l":"cp.apple.finalcutpro.inspector.title.TitleInspector","p":["Title Inspector Module.","Extends BaseMotionPanel."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","TitleInspector"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"TitleInspector","p":["Signature","cp.apple.finalcutpro.inspector.title.TitleInspector(parent) - cp.apple.finalcutpro.inspector.title.TitleInspector","Type","Constructor","Description","Creates a new TitleInspector object","Parameters","parent- The parent","Returns","A TitleInspector object","Notes"]}],[{"i":"cpapplefinalcutproinspectortransitiontransitioninspector","l":"cp.apple.finalcutpro.inspector.transition.TransitionInspector","p":["Transition Inspector Module."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","EASE","FADE_TYPES","LOOKS","Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","TransitionInspector"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"EASE","p":["Signature","cp.apple.finalcutpro.inspector.transition.TransitionInspector.EASE - table","Type","Constant","Description","Ease Types"]},{"l":"FADE_TYPES","p":["Signature","cp.apple.finalcutpro.inspector.transition.TransitionInspector.FADE_TYPES - table","Type","Constant","Description","Fade Types"]},{"l":"LOOKS","p":["Signature","cp.apple.finalcutpro.inspector.transition.TransitionInspector.LOOKS - table","Type","Constant","Description","Cross Dissolve Looks"]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.transition.TransitionInspector.matches(element)","Type","Function","Description","Checks if the element is the TransitionInspector","Parameters","element - The element to check","Returns","true if the element is a match, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"TransitionInspector","p":["Signature","cp.apple.finalcutpro.inspector.transition.TransitionInspector(parent) - TransitionInspector","Type","Constructor","Description","Creates a new TransitionInspector object.","Parameters","parent - The parent","Returns","A TransitionInspector object","Notes"]}],[{"i":"cpapplefinalcutproinspectorvideovideoinspector","l":"cp.apple.finalcutpro.inspector.video.VideoInspector","p":["CheckBox Property:","enabled - (cp.ui.CheckBox) Indicates if the section is enabled.","expanded - (cp.prop ) Get/sets whether the section is expanded.","For example:","Menu Property:","Property Rows depend on the type of property:","reset - (cp.ui.Button) Will reset the contents of the section.","Section Rows ( compositing, transform, etc.) have the following properties:","Slider Property:","toggle - (cp.ui.Button) Will toggle the Hide/Show button.","value - (cp.ui.CheckBox) The currently value.","value - (cp.ui.PopUpButton) The current value of the property.","value - (cp.ui.Slider) The current value of the property.","Video Inspector Module.","x - (cp.ui.TextField) The current 'X' value.","XY Property:","y - (cp.ui.TextField) The current 'Y' value.","You should also be able to show a specific property and it will be revealed:"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","BLEND_MODES","CROP_TYPES","ROLLING_SHUTTER_AMOUNTS","SPATIAL_CONFORM_TYPES","STABILIZATION_METHODS","Functions- API calls offered directly by the extension","matches","selectedEffectCheckBox","Constructors- API calls which return an object, typically one that offers API methods","VideoInspector","Fields- Variables which can only be accessed from an object returned by a constructor","contentUI","Methods- API calls which can only be made on an object returned by a constructor","effectCheckBoxes"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"BLEND_MODES","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector.BLEND_MODES - table","Type","Constant","Description","Blend Modes"]},{"l":"CROP_TYPES","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector.CROP_TYPES - table","Type","Constant","Description","Crop Types"]},{"l":"ROLLING_SHUTTER_AMOUNTS","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector.ROLLING_SHUTTER_AMOUNTS - table","Type","Constant","Description","Rolling Shutter Amounts"]},{"l":"SPATIAL_CONFORM_TYPES","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector.SPATIAL_CONFORM_TYPES - table","Type","Constant","Description","Spatial Conform Types"]},{"l":"STABILIZATION_METHODS","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector.STABILIZATION_METHODS - table","Type","Constant","Description","Stabilisation Methods"]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector.matches(element)","Type","Function","Description","Checks if the provided element could be a VideoInspector.","Parameters","element - The element to check","Returns","true if it matches, false if not.","Notes"]},{"l":"selectedEffectCheckBox","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector:selectedEffectCheckBox() - axuielement","Type","Function","Description","Gets the selected effect checkbox object.","Parameters","None","Returns","A axuielement object.","Notes"]},{"l":"Constructors"},{"l":"VideoInspector","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector(parent) - cp.apple.finalcutpro.inspector.video.VideoInspector","Type","Constructor","Description","Creates a new VideoInspector object","Parameters","parent- The parent","Returns","A VideoInspector object","Notes"]},{"l":"Fields"},{"l":"contentUI","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector.contentUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The axuielement containing the properties rows, if available."]},{"l":"Methods"},{"l":"effectCheckBoxes","p":["Signature","cp.apple.finalcutpro.inspector.video.VideoInspector:effectCheckBoxes() - table","Type","Method","Description","Gets a table containing all of the effect checkboxes.","Parameters","None","Returns","A table.","Notes"]}],[{"i":"cpapplefinalcutpromainbackgroundtasksdialog","l":"cp.apple.finalcutpro.main.BackgroundTasksDialog","p":["Represents the Background Tasks warning dialog."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","BackgroundTasksDialog","Fields- Variables which can only be accessed from an object returned by a constructor","cancel","continue"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.BackgroundTasksDialog.matches(element) - boolean","Type","Function","Description","Checks if the element is an BackgroundTasksDialog instance.","Parameters","element - The axuielement to check.","Returns","true if it matches the pattern for a `BackgroundTasksDialog``.","Notes"]},{"l":"Constructors"},{"l":"BackgroundTasksDialog","p":["Signature","cp.apple.finalcutpro.main.BackgroundTasksDialog(cpApp)","Type","Constructor","Description","Creates a new Background Tasks Dialog","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"cancel","p":["Signature","cp.apple.finalcutpro.main.BackgroundTasksDialog.cancel cp.ui.Button","Type","Field","Description","The Cancel button."]},{"l":"continue","p":["Signature","cp.apple.finalcutpro.main.BackgroundTasksDialog.continue cp.ui.Button","Type","Field","Description","The Continue button."]}],[{"i":"cpapplefinalcutpromainbrowser","l":"cp.apple.finalcutpro.main.Browser","p":["Browser Module."]},{"l":"Submodules","p":["cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover"]},{"l":"API Overview","p":["appearanceAndFiltering","Browser","Constructors- API calls which return an object, typically one that offers API methods","doHide","doShow","doShowOnPrimary","doShowOnSecondary","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","generators","generatorsShowing","hide","isOnPrimary","isOnSecondary","libraries","librariesShowing","loadLayout","markerPopover","matches","media","mediaShowing","Methods- API calls which can only be made on an object returned by a constructor","saveLayout","showGenerators","showLibraries","showMedia","showOnPrimary","showOnSecondary"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.Browser.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"Browser","p":["Signature","cp.apple.finalcutpro.main.Browser(app) - Browser","Type","Constructor","Description","Creates a new Browser instance.","Parameters","app - The Final Cut Pro app instance.","Returns","The new Browser.","Notes"]},{"l":"Fields"},{"l":"generators","p":["Signature","cp.apple.finalcutpro.main.Browser.generators cp.apple.finalcutpro.main.GeneratorsBrowser","Type","Field","Description","Generators Browser object."]},{"l":"generatorsShowing","p":["Signature","cp.apple.finalcutpro.main.Browser.generatorsShowing cp.prop: boolean; read-only","Type","Field","Description","Is the 'Generators' button active, and thus showing?"]},{"l":"isOnPrimary","p":["Signature","cp.apple.finalcutpro.main.Browser.isOnPrimary cp.prop: boolean; read-only","Type","Field","Description","Is the Browser on the Primary Window?"]},{"l":"isOnSecondary","p":["Signature","cp.apple.finalcutpro.main.Browser.isOnSecondary cp.prop: boolean; read-only","Type","Field","Description","Is the Browser on the Secondary Window?"]},{"l":"libraries","p":["Signature","cp.apple.finalcutpro.main.Browser.libraries cp.apple.finalcutpro.main.LibrariesBrowser","Type","Field","Description","The module object.","Parameters","None","Returns","A LibrariesBrowser object."]},{"l":"librariesShowing","p":["Signature","cp.apple.finalcutpro.main.Browser.librariesShowing cp.prop: boolean; read-only","Type","Field","Description","Is the 'Libraries' button active, and thus showing?"]},{"l":"markerPopover","p":["Signature","cp.apple.finalcutpro.main.Browser.markerPopover BrowserMarkerPopover","Type","Field","Description","The Browser Marker Popover object."]},{"l":"media","p":["Signature","cp.apple.finalcutpro.main.Browser.media cp.apple.finalcutpro.main.MediaBrowser","Type","Field","Description","The Media Browser object."]},{"l":"mediaShowing","p":["Signature","cp.apple.finalcutpro.main.Browser.mediaShowing cp.prop: boolean; read-only","Type","Field","Description","Is the 'Media' button active, and thus showing?"]},{"l":"showGenerators","p":["Signature","cp.apple.finalcutpro.main.Browser.showGenerators cp.ui.CheckBox","Type","Field","Description","The CheckBox indicating if the Generators Browser is showing."]},{"l":"showLibraries","p":["Signature","cp.apple.finalcutpro.main.Browser.showLibraries cp.ui.CheckBox","Type","Field","Description","Indicates if Libraries is showing, and can be clicked to toggle."]},{"l":"showMedia","p":["Signature","cp.apple.finalcutpro.main.Browser.showMedia cp.ui.CheckBox","Type","Field","Description","CheckBox indicating if the Media Browser is showing."]},{"l":"Methods"},{"l":"appearanceAndFiltering","p":["Signature","cp.apple.finalcutpro.main.Browser.appearanceAndFiltering cp.apple.finalcutpro.main.AppearanceAndFiltering","Type","Method","Description","The Clip AppearanceAndFiltering Menu Popover","Parameters","None","Returns","Notes"]},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.main.Browser:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that will hide the Browser.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.main.Browser:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that will ensure the Browser is showing. If it's currently showing on the Secondary Screen it will stay there, otherwise it will get shown on the Primary Screen.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"doShowOnPrimary","p":["Signature","cp.apple.finalcutpro.main.Browser:doShowOnPrimary() - cp.rx.go.Statement","Type","Method","Description","A Statement that will show the Browser on Primary Screen.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"doShowOnSecondary","p":["Signature","cp.apple.finalcutpro.main.Browser:doShowOnSecondary() - cp.rx.go.Statement","Type","Method","Description","A Statement that will show the Browser on Secondary Screen.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.main.Browser:hide() - Browser","Type","Method","Description","Hides the Browser.","Parameters","None","Returns","The Browser object.","Notes"]},{"l":"loadLayout","p":["Signature","cp.apple.finalcutpro.main.Browser:loadLayout(layout) - none","Type","Method","Description","Loads a Browser layout.","Parameters","layout - A table containing the Browser layout settings - created using cp.apple.finalcutpro.main.Browser:saveLayout().","Returns","None","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.main.Browser:saveLayout() - table","Type","Method","Description","Saves the current Browser layout to a table.","Parameters","None","Returns","A table containing the current Browser Layout.","Notes"]},{"l":"showOnPrimary","p":["Signature","cp.apple.finalcutpro.main.Browser:showOnPrimary() - Browser","Type","Method","Description","Show Browser on Primary Screen.","Parameters","None","Returns","The Browser object.","Notes"]},{"l":"showOnSecondary","p":["Signature","cp.apple.finalcutpro.main.Browser:showOnSecondary() - Browser","Type","Method","Description","Show Browser on Secondary Screen.","Parameters","None","Returns","The Browser object.","Notes"]}],[{"i":"cpapplefinalcutpromainbrowserbrowsermarkerpopover","l":"cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover","p":["Browser Marker Popup."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","BrowserMarkerPopover","Fields- Variables which can only be accessed from an object returned by a constructor","chapter","completed","delete","done","name","standard","toDo","Methods- API calls which can only be made on an object returned by a constructor","hide","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover.matches(element) - boolean","Type","Function","Description","Checks to see if a GUI element is the Browser Marker Popover or not","Parameters","element - The element you want to check","Returns","true if the element is the Browser Marker Popover otherwise false","Notes"]},{"l":"Constructors"},{"l":"BrowserMarkerPopover","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover(parent) - BrowserMarkerPopover","Type","Constructor","Description","Constructs a new Browser Marker Popover","Parameters","parent - The parent object","Returns","The new BrowserMarkerPopover instance.","Notes"]},{"l":"Fields"},{"l":"chapter","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover.chapter cp.ui.RadioButton","Type","Field","Description","The \"Chapter\" Marker button."]},{"l":"completed","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover.completed cp.ui.CheckBox","Type","Field","Description","Gets the \"Completed\" checkbox. This only available if you have a \"To Do\" marker selected.","Parameters","None","Returns","A Button object."]},{"l":"delete","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover.delete cp.ui.Button","Type","Field","Description","Gets the \"Delete\" Button.","Parameters","None","Returns","A Button object."]},{"l":"done","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover.done cp.ui.Button","Type","Field","Description","The \"Done\" Button.","Parameters","None","Returns","A Button object."]},{"l":"name","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover.name cp.ui.TextField","Type","Field","Description","Gets the Marker Name TextField.","Parameters","None","Returns","A TextField object."]},{"l":"standard","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover.standard cp.ui.RadioButton","Type","Field","Description","The \"Standard\" Marker button."]},{"l":"toDo","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover.toDo cp.ui.RadioButton","Type","Field","Description","The \"To Do\" Marker button."]},{"l":"Methods"},{"l":"hide","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover:hide() - BrowserMarkerPopover","Type","Method","Description","Hides the Browser Marker Popover by clicking \"Done\" on the popover.","Parameters","None","Returns","BrowserMarkerPopover object","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.Browser.BrowserMarkerPopover:show() - BrowserMarkerPopover","Type","Method","Description","Shows the Browser Marker Popover by triggering \"Add Marker and Modify\" from the menu bar.","Parameters","None","Returns","BrowserMarkerPopover object","Notes"]}],[{"i":"cpapplefinalcutpromaineffectsbrowser","l":"cp.apple.finalcutpro.main.EffectsBrowser","p":["Effects Browser Module."]},{"l":"API Overview","p":["applyItem","audioCategoryRowsUI","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","contents","currentItemsUI","doHideSidebar","doShow","doShowSidebar","doToggleSidebar","EFFECTS","EffectsBrowser","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getCurrentTitles","group","hide","hideSidebar","isShowing","itemIsSelected","loadLayout","mainGroupUI","matches","Methods- API calls which can only be made on an object returned by a constructor","saveLayout","search","selectedItemsUI","show","showAllAudioEffects","showAllEffects","showAllTransitions","showAllVideoEffects","showAudioCategory","showInstalledEffects","showInstalledTransitions","showSidebar","showTransitionsCategory","showVideoCategory","sidebar","sidebarToggle","toggleButton","toggleSidebar","TRANSITIONS","type","Variables- Configurable values","videoCategoryRowsUI"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"EFFECTS","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.EFFECTS - string","Type","Constant","Description","Effects."]},{"l":"TRANSITIONS","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.TRANSITIONS - string","Type","Constant","Description","Transitions."]},{"l":"Variables"},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.isShowing cp.prop: boolean","Type","Variable","Description","Is the Effects Browser showing?"]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"EffectsBrowser","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser(parent, type) - EffectsBrowser","Type","Constructor","Description","Creates a new EffectsBrowser instance.","Parameters","parent - The parent object. type - A string determining whether the Effects Browser is for Effects ( cp.apple.finalcutpro.main.EffectsBrowser.EFFECTS) or Transitions ( cp.apple.finalcutpro.main.EffectsBrowser.TRANSITIONS).","Returns","A new EffectsBrowser object.","Notes"]},{"l":"Fields"},{"l":"contents","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.contents cp.ui.ScrollArea","Type","Field","Description","The Effects Browser Contents."]},{"l":"group","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.group cp.ui.PopUpButton","Type","Field","Description","The group PopUpButton."]},{"l":"mainGroupUI","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:mainGroupUI() - cp.prop: hs.axuielement; read-only","Type","Field","Description","Main Group UI."]},{"l":"search","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.search cp.ui.PopUpButton","Type","Field","Description","The Search PopUpButton object."]},{"l":"sidebar","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.sidebar cp.ui.OldTable","Type","Field","Description","The sidebar Table object."]},{"l":"sidebarToggle","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.sidebarToggle cp.ui.CheckBox","Type","Field","Description","The Sidebar Toggle."]},{"l":"toggleButton","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser.toggleButton cp.ui.RadioButton","Type","Field","Description","The Effects Browser Toggle Button."]},{"l":"Methods"},{"l":"applyItem","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:applyItem(itemUI) - EffectsBrowser","Type","Method","Description","Applies an item by double clicking on it.","Parameters","itemUI - The axuielementObject of the item you want to apply.","Returns","The EffectsBrowser object.","Notes"]},{"l":"audioCategoryRowsUI","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:audioCategoryRowsUI() - axuielementObject","Type","Method","Description","Gets the Audio Category Rows UI.","Parameters","None","Returns","axuielementObject object.","Notes"]},{"l":"currentItemsUI","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:currentItemsUI() - axuielementObject","Type","Method","Description","Gets the current items UI.","Parameters","None","Returns","axuielementObject object.","Notes"]},{"l":"doHideSidebar","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:doHideSidebar() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will hide the Sidebar.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:doShow() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will show the Effects Browser.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doShowSidebar","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:doShowSidebar() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will show the Sidebar.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doToggleSidebar","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:doToggleSidebar() - cp.rx.go.Statement","Type","Method","Description","A Statement to toggle the Sidebar.","Parameters","None","Returns","The Statement object.","Notes"]},{"l":"getCurrentTitles","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:getCurrentTitles() - table","Type","Method","Description","Returns the list of titles for all effects/transitions currently visible.","Parameters","None","Returns","A table","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:hide() - EffectsBrowser","Type","Method","Description","Hide the Effects Browser.","Parameters","None","Returns","The EffectsBrowser object.","Notes"]},{"l":"hideSidebar","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:hideSidebar() - EffectsBrowser","Type","Method","Description","Hide Sidebar.","Parameters","None","Returns","The EffectsBrowser object.","Notes"]},{"l":"itemIsSelected","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:itemIsSelected(itemUI) - boolean","Type","Method","Description","Checks to see if an item is selected.","Parameters","itemUI - A axuielementObject to check.","Returns","true if the item is selected, otherwise false.","Notes"]},{"l":"loadLayout","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:loadLayout(layout) - none","Type","Method","Description","Loads a Effects Browser layout.","Parameters","layout - A table containing the Effects Browser layout settings - created using cp.apple.finalcutpro.main.Browser:saveLayout().","Returns","None","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:saveLayout() - table","Type","Method","Description","Saves the current Effects Browser layout to a table.","Parameters","None","Returns","A table containing the current Effects Browser Layout.","Notes"]},{"l":"selectedItemsUI","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:selectedItemsUI() - axuielementObject","Type","Method","Description","Gets the selected items UI.","Parameters","None","Returns","axuielementObject object.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:show() - EffectsBrowser","Type","Method","Description","Show the Effects Browser.","Parameters","None","Returns","The EffectsBrowser object.","Notes"]},{"l":"showAllAudioEffects","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showAllAudioEffects() - boolean","Type","Method","Description","Show All Audio Effects.","Parameters","None","Returns","true if successful otherwise false.","Notes"]},{"l":"showAllEffects","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showAllEffects() - EffectsBrowser","Type","Method","Description","Show All Effects.","Parameters","None","Returns","The EffectsBrowser object.","Notes"]},{"l":"showAllTransitions","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showAllTransitions() - EffectsBrowser","Type","Method","Description","Show All Transitions.","Parameters","None","Returns","The EffectsBrowser object.","Notes"]},{"l":"showAllVideoEffects","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showAllVideoEffects() - boolean","Type","Method","Description","Show All Video Effects.","Parameters","None","Returns","true if successful otherwise false.","Notes"]},{"l":"showAudioCategory","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showAudioCategory(name) - self","Type","Method","Description","Ensures the sidebar is showing and that the selected 'Audio' category is selected, if available.","Parameters","name- The category name, in the current language.","Returns","The browser.","Notes"]},{"l":"showInstalledEffects","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showInstalledEffects() - EffectsBrowser","Type","Method","Description","Show Installed Effects.","Parameters","None","Returns","The EffectsBrowser object.","Notes"]},{"l":"showInstalledTransitions","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showInstalledTransitions() - EffectsBrowser","Type","Method","Description","Show Installed Transitions.","Parameters","None","Returns","The EffectsBrowser object.","Notes"]},{"l":"showSidebar","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showSidebar() - EffectsBrowser","Type","Method","Description","Show Sidebar.","Parameters","None","Returns","The EffectsBrowser object.","Notes"]},{"l":"showTransitionsCategory","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showTransitionsCategory(name) - EffectsBrowser","Type","Method","Description","Ensures the sidebar is showing and that the selected 'Transitions' category is selected, if available.","Parameters","name - The category name, in the current language.","Returns","The EffectsBrowser object.","Notes"]},{"l":"showVideoCategory","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:showVideoCategory(name) - EffectsBrowser","Type","Method","Description","Ensures the sidebar is showing and that the selected 'Video' category is selected, if available.","Parameters","name - The category name, in the current language.","Returns","The EffectsBrowser object.","Notes"]},{"l":"toggleSidebar","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:toggleSidebar() - EffectsBrowser","Type","Method","Description","Toggle Sidebar.","Parameters","None","Returns","The EffectsBrowser object.","Notes"]},{"l":"type","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:type() - App","Method","Description","Type of Effects Browser.","Parameters","None","Returns","App","Notes"]},{"l":"videoCategoryRowsUI","p":["Signature","cp.apple.finalcutpro.main.EffectsBrowser:videoCategoryRowsUI() - axuielementObject","Type","Method","Description","Gets the Video Category Rows UI.","Parameters","None","Returns","axuielementObject object.","Notes"]}],[{"i":"cpapplefinalcutpromainfindandreplacetitletext","l":"cp.apple.finalcutpro.main.FindAndReplaceTitleText","p":["Represents a \"Find and Replace Title Text\" dialogue box."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","doFindAndReplaceAll","doHide","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","FindAndReplaceTitleText","findText","loopSearch","matchCase","Methods- API calls which can only be made on an object returned by a constructor","next","previous","replace","replaceAll","replaceAndFind","replaceText","searchIn","wholeWords"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"FindAndReplaceTitleText","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText(cpApp)","Type","Constructor","Description","Creates a new \"Find and Replace Title Text\" Dialog","Parameters","cpApp - The cpApp","Returns","None","Notes"]},{"l":"Fields"},{"l":"findText","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.findText cp.ui.TextField","Type","Field","Description","The \"Find\" search field, as a TextField"]},{"l":"loopSearch","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.loopSearch cp.ui.CheckBox","Type","Field","Description","The \"Loop search\" CheckBox."]},{"l":"matchCase","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.matchCase cp.ui.CheckBox","Type","Field","Description","The \"Match case\" CheckBox."]},{"l":"next","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.next cp.ui.Button","Type","Field","Description","The \"Next\" Button."]},{"l":"previous","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.previous cp.ui.Button","Type","Field","Description","The \"Previous\" Button."]},{"l":"replace","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.replace cp.ui.Button","Type","Field","Description","The \"Replace\" Button."]},{"l":"replaceAll","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.replaceAll cp.ui.Button","Type","Field","Description","The \"Replace All\" Button."]},{"l":"replaceAndFind","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.replaceAndFind cp.ui.Button","Type","Field","Description","The \"Replace & Find\" Button."]},{"l":"replaceText","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.replaceText cp.ui.TextField","Type","Field","Description","The \"Replace\" search field, as a TextField"]},{"l":"searchIn","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.searchIn cp.ui.PopUpButton","Type","Field","Description","The \"Search In\" PopUpButton."]},{"l":"wholeWords","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText.wholeWords cp.ui.CheckBox","Type","Field","Description","The \"Whole words\" CheckBox."]},{"l":"Methods"},{"l":"doFindAndReplaceAll","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText:doFindAndReplaceAll(find, replace) - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to find all titles containing find and replace them with replace.","Parameters","find - what to find replace - what to replace","Returns","None","Notes"]},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to hide the \"Find And Replace Title Text\" dialog.","Parameters","None","Returns","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.main.FindAndReplaceTitleText:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to show the \"Find And Replace Title Text\" dialog.","Parameters","None","Returns","Notes"]}],[{"i":"cpapplefinalcutpromainfullscreenplayer","l":"cp.apple.finalcutpro.main.FullScreenPlayer","p":["Full Screen Window Player.","Triggered by the \"View > Playback > Play Full Screen\" menubar item."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","FullScreenPlayer","Fields- Variables which can only be accessed from an object returned by a constructor","isFullScreen","rootGroupUI","viewerGroupUI","Methods- API calls which can only be made on an object returned by a constructor","doShow","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.FullScreenPlayer.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"FullScreenPlayer","p":["Signature","cp.apple.finalcutpro.main.FullScreenPlayer(app) - FullScreenPlayer","Type","Constructor","Description","Creates a new FCPX FullScreenPlayer instance.","Parameters","app - The FCP app instance.","Returns","The new FullScreenPlayer.","Notes"]},{"l":"Fields"},{"l":"isFullScreen","p":["Signature","cp.apple.finalcutpro.main.FullScreenPlayer.isFullScreen cp.prop; boolean; read-only; live","Type","Field","Description","Checks if the window is full-screen."]},{"l":"rootGroupUI","p":["Signature","cp.apple.finalcutpro.main.FullScreenPlayer.rootGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The root AXGroup."]},{"l":"viewerGroupUI","p":["Signature","cp.apple.finalcutpro.main.FullScreenPlayer.viewerGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The Viewer's group UI element."]},{"l":"Methods"},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.main.FullScreenPlayer:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to show the full screen window.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.FullScreenPlayer:show() - cp.apple.finalcutpro","Type","Method","Description","Attempts to show the full screen window.","Parameters","None","Returns","The window instance.","Notes"]}],[{"i":"cpapplefinalcutpromaingeneratorsbrowser","l":"cp.apple.finalcutpro.main.GeneratorsBrowser","p":["Generators Browser Module."]},{"l":"API Overview","p":["applyItem","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","contents","currentItemsUI","Fields- Variables which can only be accessed from an object returned by a constructor","GeneratorsBrowser","getCurrentTitles","getGeneratorsRowLabel","getTitlesRowLabel","group","hide","isShowing","itemIsSelected","loadLayout","mainGroupUI","Methods- API calls which can only be made on an object returned by a constructor","saveLayout","search","selectedItemsUI","show","showAllGenerators","showAllTitles","showGeneratorsCategory","showInstalledGenerators","showInstalledTitles","showSidebar","showTitlesCategory","sidebar","TITLE","topCategoriesUI","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"TITLE","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser.TITLE - string","Type","Constant","Description","Titles & Generators Title."]},{"l":"Variables"},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser.isShowing cp.prop: boolean","Type","Variable","Description","Is the Generators Browser showing?"]},{"l":"Constructors"},{"l":"GeneratorsBrowser","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser(parent) - GeneratorsBrowser","Type","Constructor","Description","Creates a new GeneratorsBrowser instance.","Parameters","app - The cp.apple.finalcutpro object.","Returns","A new GeneratorsBrowser object.","Notes"]},{"l":"Fields"},{"l":"contents","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser.contents cp.ui.ScrollArea","Type","Field","Description","The Generators Browser Contents."]},{"l":"group","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser.group cp.ui.PopUpButton","Type","Field","Description","The group."]},{"l":"mainGroupUI","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser.mainGroupUI cp.prop: axuielementObject","Type","Field","Description","Main Group UI."]},{"l":"search","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser.search cp.ui.TextField","Type","Field","Description","Gets the Search TextField object."]},{"l":"sidebar","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser.sidebar cp.ui.OldTable","Type","Field","Description","The sidebar object."]},{"l":"Methods"},{"l":"applyItem","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:applyItem(itemUI) - GeneratorsBrowser","Type","Method","Description","Applies an item by double clicking on it.","Parameters","itemUI - The axuielementObject of the item you want to apply.","Returns","The GeneratorsBrowser object.","Notes"]},{"l":"currentItemsUI","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:currentItemsUI() - axuielementObject","Type","Method","Description","Gets the current items UI.","Parameters","None","Returns","axuielementObject object.","Notes"]},{"l":"getCurrentTitles","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:getCurrentTitles() - table","Type","Method","Description","Returns the list of titles for all generators currently visible.","Parameters","None","Returns","A table","Notes"]},{"l":"getGeneratorsRowLabel","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:getGeneratorsRowLabel() - string","Type","Method","Description","Gets a Generators Row Label.","Parameters","None","Returns","The Generators Row Label as string.","Notes"]},{"l":"getTitlesRowLabel","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:getTitlesRowLabel() - string","Type","Method","Description","Returns the label of the 'Titles' row in the current language.","Parameters","None","Returns","The 'Titles' label.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:hide() - GeneratorsBrowser","Type","Method","Description","Hides the Generators Browser.","Parameters","None","Returns","The GeneratorsBrowser instance.","Notes"]},{"l":"itemIsSelected","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:itemIsSelected(itemUI) - boolean","Type","Method","Description","Checks to see if an item is selected.","Parameters","itemUI - A axuielementObject to check.","Returns","true if the item is selected, otherwise false.","Notes"]},{"l":"loadLayout","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:loadLayout(layout) - none","Type","Method","Description","Loads a Generators Browser layout.","Parameters","layout - A table containing the Generators Browser layout settings - created using cp.apple.finalcutpro.main.GeneratorsBrowser:saveLayout().","Returns","None","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:saveLayout() - table","Type","Method","Description","Saves the current Generators Browser layout to a table.","Parameters","None","Returns","A table containing the current Effects Browser Layout.","Notes"]},{"l":"selectedItemsUI","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:selectedItemsUI() - axuielementObject","Type","Method","Description","Gets the selected items UI.","Parameters","None","Returns","axuielementObject object.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:show() - GeneratorsBrowser","Type","Method","Description","Shows the Generators Browser.","Parameters","None","Returns","The GeneratorsBrowser instance.","Notes"]},{"l":"showAllGenerators","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:showAllGenerators() - GeneratorsBrowser","Type","Method","Description","Show All Generators.","Parameters","None","Returns","The GeneratorsBrowser object.","Notes"]},{"l":"showAllTitles","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:showAllTitles() - GeneratorsBrowser","Type","Method","Description","Ensures the sidebar is showing in the Generators & Titles panel, focused on all 'Titles'.","Parameters","None","Returns","The GeneratorsBrowser object.","Notes"]},{"l":"showGeneratorsCategory","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:showGeneratorsCategory(name) - GeneratorsBrowser","Type","Method","Description","Show a specific Generators Category.","Parameters","name - The name of the Generators Category to show.","Returns","The GeneratorsBrowser object.","Notes"]},{"l":"showInstalledGenerators","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:showInstalledGenerators() - GeneratorsBrowser","Type","Method","Description","Ensures that the browser is showing 'Installed Generators'.","Parameters","None","Returns","The GeneratorsBrowser object.","Notes"]},{"l":"showInstalledTitles","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:showInstalledTitles() - GeneratorsBrowser","Type","Method","Description","Ensures that the browser is showing 'Installed Titles'.","Parameters","None","Returns","The GeneratorsBrowser object.","Notes"]},{"l":"showSidebar","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:showSidebar() - GeneratorsBrowser","Type","Method","Description","Ensures the sidebar is showing in the Generators & Titles panel.","Parameters","None","Returns","The GeneratorsBrowser object.","Notes"]},{"l":"showTitlesCategory","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:showTitlesCategory(name) - self","Type","Method","Description","Ensures the sidebar is showing and that the selected 'Titles' category is selected, if available.","Parameters","name - The category name, in the current language.","Returns","The Generators Browser.","Notes"]},{"l":"topCategoriesUI","p":["Signature","cp.apple.finalcutpro.main.GeneratorsBrowser:topCategoriesUI() - table","Type","Method","Description","Returns an array of the top-level categories in the sidebar.","Parameters","None","Returns","The array of category rows.","Notes"]}],[{"i":"cpapplefinalcutpromainkeywordeditor","l":"cp.apple.finalcutpro.main.KeywordEditor","p":["Keyword Editor Module."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","doHide","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","hide","isShowing","keyboardShortcuts","KeywordEditor","keywords","matches","Methods- API calls which can only be made on an object returned by a constructor","NUMBER_OF_SHORTCUTS","parent","resetButton","shortcutButtons","shortcutFields","show"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"NUMBER_OF_SHORTCUTS","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor.NUMBER_OF_SHORTCUTS - number","Type","Constant","Description","The number of Keyword Keyboard shortcuts available."]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor.matches(element) - boolean","Type","Function","Description","Checks to see if an hs.axuielement object matches a Keyword Editor window","Parameters","element - the hs.axuielement object you want to check","Returns","true if a match otherwise false","Notes"]},{"l":"Constructors"},{"l":"KeywordEditor","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor(parent) - KeywordEditor object","Type","Constructor","Description","Creates a new KeywordEditor object","Parameters","parent- The parent","Returns","A KeywordEditor object","Notes"]},{"l":"Fields"},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor.isShowing cp.prop: boolean; live?","Type","Field","Description","Indicates whether or not the Keyword Editor is currently showing."]},{"l":"keyboardShortcuts","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor.keyboardShortcuts cp.ui.DisclosureWindow","Type","Field","Description","The DisclosureTriangle that shows/hides the keyboard shortcuts configuration."]},{"l":"keywords","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor.keywords cp.ui.TextField","Type","Field","Description","A TextField that contains the current keywords. The value is a table of string values for each individual keyword."]},{"l":"resetButton","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor.resetButton cp.ui.Button","Type","Field","Description","The Button that resets the current keywords to blank."]},{"l":"shortcutButtons","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor.shortcutButtons table of cp.ui.Button","Type","Field","Description","The list of keyboard shortcut Button s. The button for Cmd+1 is accessed via shortcutButtons[1], and so on."]},{"l":"shortcutFields","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor.shortcutFields table of KeywordField","Type","Field","Description","The list of keyboard shortcut KeywordField s. The field for Cmd+1 is accessed via shortcutFields[1], and so on."]},{"l":"Methods"},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that hides the Keyword Editor.","Parameters","None","Returns","The Statement","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the Keyword Editor.","Parameters","None","Returns","The Statement","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor:hide() - boolean","Type","Method","Description","Hides the Keyword Editor.","Parameters","None","Returns","KeywordEditor object true if successful otherwise false","Notes"]},{"l":"parent","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor:parent() - table","Type","Method","Description","Returns the KeywordEditor's parent table","Parameters","None","Returns","The parent object as a table","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.KeywordEditor:show() - boolean","Type","Method","Description","Shows the Keyword Editor.","Parameters","None","Returns","KeywordEditor object true if successful otherwise false","Notes"]}],[{"i":"cpapplefinalcutpromainkeywordfield","l":"cp.apple.finalcutpro.main.KeywordField","p":["Keyword Text Field Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","KeywordField","Methods- API calls which can only be made on an object returned by a constructor","addKeyword","removeKeyword"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"KeywordField","p":["Signature","cp.apple.finalcutpro.main.KeywordField(parent, uiFinder) - KeywordField","Type","Constructor","Description","Constructs a new KeywordField.","Parameters","parent - the parent object. uiFinder - The function or cp.prop that provides the axuielement.","Returns","The new KeywordField.","Notes"]},{"l":"Methods"},{"l":"addKeyword","p":["Signature","cp.apple.finalcutpro.main.KeywordField:addKeyword(keyword) - boolean","Type","Method","Description","Attempts to add the specified keyword.","Parameters","keyword - The keyword string to add.","Returns","true if the keyword was not present and added, otherwise false.","Notes"]},{"l":"removeKeyword","p":["Signature","cp.apple.finalcutpro.main.KeywordField:removeKeyword(keyword) - boolean","Type","Method","Description","Attempts to remove the specified keyword.","Parameters","keyword - The keyword string to remove.","Returns","true if the keyword was present and removed, otherwise false.","Notes"]}],[{"i":"cpapplefinalcutpromainlibrariesbrowser","l":"cp.apple.finalcutpro.main.LibrariesBrowser","p":["Libraries Browser Module."]},{"l":"API Overview","p":["clipFiltering","clips","clipsUI","Constructors- API calls which return an object, typically one that offers API methods","deselectAll","doFindClips","doFindClipsTitled","doHide","doOpenClipTitled","doSelectClipTitled","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","filmstrip","Functions- API calls offered directly by the extension","hide","indexOfClip","isFilmstripView","isFocused","isListView","LibrariesBrowser","list","loadLayout","mainGroupUI","Methods- API calls which can only be made on an object returned by a constructor","openClipTitled","playhead","saveLayout","search","searchToggle","selectAll","selectClip","selectClipAt","selectClipTitled","selectedClips","selectedClipsUI","selectLibrary","show","showClip","sidebar","skimmingPlayhead","toggleViewMode"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"deselectAll","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:deselectAll() - boolean","Type","Function","Description","Deselect all clips.","Parameters","None","Returns","true if successful otherwise false.","Notes"]},{"l":"indexOfClip","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:indexOfClip(clip) - number | nil","Type","Function","Description","Gets the index of a specific clip.","Parameters","clip - The Clip you want to get the index of.","Returns","The index or nil if an error occurs.","Notes"]},{"l":"Constructors"},{"l":"LibrariesBrowser","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser(app) - LibrariesBrowser","Type","Constructor","Description","Creates a new LibrariesBrowser instance.","Parameters","parent - The parent object.","Returns","A new LibrariesBrowser object.","Notes"]},{"l":"Fields"},{"l":"clipFiltering","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.clipFiltering cp.ui.PopUpButton","Type","Field","Description","The Clip Filtering PopUpButton."]},{"l":"filmstrip","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.filmstrip LibrariesFilmstrip","Type","Field","Description","The LibrariesFilmstrip object."]},{"l":"isFilmstripView","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.isFilmstripView cp.prop: boolean; read-only","Type","Field","Description","Indicates if the Library Browser is in 'filmstrip view' mode."]},{"l":"isFocused","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.isFocused cp.prop: boolean; read-only","Type","Field","Description","Indicates if the Libraries Browser is the current focus."]},{"l":"isListView","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.isListView cp.prop: boolean; read-only","Type","Field","Description","Indicates if the Library Browser is in 'list view' mode."]},{"l":"list","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.list LibrariesList","Type","Field","Description","The LibrariesList object."]},{"l":"mainGroupUI","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.mainGroupUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the main group within the Libraries Browser, or nil if not available.."]},{"l":"search","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.search cp.ui.TextField","Type","Field","Description","The Search TextField."]},{"l":"searchToggle","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.searchToggle cp.ui.Button","Type","Field","Description","The Search Toggle Button."]},{"l":"toggleViewMode","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.toggleViewMode cp.ui.Button","Type","Field","Description","The Toggle View Mode Button."]},{"l":"Methods"},{"l":"clips","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:clips(filterFn) - table | nil","Type","Method","Description","Gets clips using a custom filter.","Parameters","filterFn - A function to filter the UI results.","Returns","A table of Clip objects or nil if no clip UI could be found.","Notes"]},{"l":"clipsUI","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:clipsUI(filterFn) - table | nil","Type","Method","Description","Gets clip UIs using a custom filter.","Parameters","filterFn - A function to filter the UI results.","Returns","A table of axuielementObject objects or nil if no clip UI could be found.","Notes"]},{"l":"doFindClips","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:doFindClips(filter) - cp.rx.go.Statement","Type","Method","Description","A Statement which will send each clip in the Libraries Browser matching the filter as an onNext signal.","Parameters","filter - a function which receives the Clip to check and returns true or false.","Returns","The Statement.","Notes"]},{"l":"doFindClipsTitled","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:doFindClipsTitled(title) - cp.rx.go.Statement","Type","Method","Description","A Statement which will send each clip in the Libraries Browser with the specified title as an onNext signal.","Parameters","title - The title string to check for.","Returns","The Statement.","Notes"]},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that will hide the Libraries Browser.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doOpenClipTitled","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:doOpenClipTitled(title) - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to open the named clip in the Libraries Browser in the Timeline.","Parameters","title - The title of the clip to open.","Returns","The Statement to execute.","Notes"]},{"l":"doSelectClipTitled","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:doSelectClipTitled(title) - cp.rx.go.Statement","Type","Method","Description","A Statement which will select the first clip with a matching title.","Parameters","title - The title to select.","Returns","The Statement ready to execute.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that will show the Libraries Browser.","Parameters","None","Returns","The Statement object.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:hide() - LibrariesBrowser","Type","Method","Description","Hide the Libraries Browser.","Parameters","None","Returns","The LibrariesBrowser object.","Notes"]},{"l":"loadLayout","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:loadLayout(layout) - none","Type","Method","Description","Loads a Libraries Browser layout.","Parameters","layout - A table containing the Libraries Browser layout settings - created using cp.apple.finalcutpro.main.LibrariesBrowser:saveLayout().","Returns","None","Notes"]},{"l":"openClipTitled","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:openClipTitled(name) - boolean","Type","Method","Description","Open a clip with a specific title.","Parameters","name - The name of the clip you want to open.","Returns","true if successful, otherwise false.","Notes"]},{"l":"playhead","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:playhead() - Playhead","Type","Method","Description","Gets the Libraries Browser Playhead.","Parameters","None","Returns","A Playhead object.","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:saveLayout() - table","Type","Method","Description","Saves the current Libraries Browser layout to a table.","Parameters","None","Returns","A table containing the current Libraries Browser Layout.","Notes"]},{"l":"selectAll","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:selectAll([clips]) - boolean","Type","Method","Description","Select all clips.","Parameters","clips - A optional table of Clip objects.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectClip","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:selectClip(clip) - boolean","Type","Method","Description","Selects a clip.","Parameters","clip - The Clip you want to select.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectClipAt","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:selectClipAt(index) - boolean","Type","Method","Description","Select clip at a specific index.","Parameters","index - A number of where the clip appears in the list.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectClipTitled","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:selectClipTitled(title) - boolean","Type","Method","Description","Select clip with a specific title.","Parameters","title - The title of a clip.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectedClips","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:selectedClips() - table | nil","Type","Method","Description","Gets selected clips.","Parameters","None","Returns","A table of Clip objects or nil if no clips are selected.","Notes"]},{"l":"selectedClipsUI","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:selectedClipsUI() - table | nil","Type","Method","Description","Gets selected clips UI's.","Parameters","None","Returns","A table of axuielementObject objects or nil if no clips are selected.","Notes"]},{"l":"selectLibrary","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:selectLibrary(...) - Table","Type","Method","Description","Selects a Library.","Parameters","... - Libraries as string.","Returns","A Table object.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:show() - LibrariesBrowser","Type","Method","Description","Show the Libraries Browser.","Parameters","None","Returns","The LibrariesBrowser object.","Notes"]},{"l":"showClip","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:showClip(clip) - boolean","Type","Method","Description","Shows a clip.","Parameters","clip - The Clip you want to show.","Returns","true if successful otherwise false.","Notes"]},{"l":"sidebar","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser.sidebar cp.apple.finalcutpro.main.LibrariesSidebar","Type","Method","Description","The LibrariesSidebar Table","Parameters","None","Returns","Notes"]},{"l":"skimmingPlayhead","p":["Signature","cp.apple.finalcutpro.main.LibrariesBrowser:skimmingPlayhead() - Playhead","Type","Method","Description","Gets the Libraries Browser Skimming Playhead.","Parameters","None","Returns","A Playhead object.","Notes"]}],[{"i":"cpapplefinalcutpromainlibrariesfilmstrip","l":"cp.apple.finalcutpro.main.LibrariesFilmstrip","p":["Libraries Filmstrip Module."]},{"l":"API Overview","p":["clips","clipsUI","Constructors- API calls which return an object, typically one that offers API methods","deselectAll","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","indexOfClip","Methods- API calls which can only be made on an object returned by a constructor","new","playhead","selectAll","selectClip","selectClipAt","selectClipTitled","selectedClips","selectedClipsUI","show","showClip","showClipAt","skimmingPlayhead","sortClips"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"clips","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:clips(filterFn) - table | nil","Type","Function","Description","Gets clips using a custom filter.","Parameters","filterFn - A function to filter the UI results.","Returns","A table of Clip objects or nil if no clip UI could be found.","Notes"]},{"l":"clipsUI","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:clipsUI(filterFn) - table | nil","Type","Function","Description","Gets clip UIs using a custom filter.","Parameters","filterFn - A function to filter the UI results.","Returns","A table of axuielementObject objects or nil if no clip UI could be found.","Notes"]},{"l":"deselectAll","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:deselectAll() - boolean","Type","Function","Description","Deselect all clips.","Parameters","None","Returns","true if successful otherwise false.","Notes"]},{"l":"indexOfClip","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:indexOfClip(clip) - number | nil","Type","Function","Description","Gets the index of a specific clip.","Parameters","clip - The Clip you want to get the index of.","Returns","The index or nil if an error occurs.","Notes"]},{"l":"selectAll","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:selectAll([clips]) - boolean","Type","Function","Description","Select all clips.","Parameters","clips - A optional table of Clip objects.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectClip","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip.selectClip(clip) - boolean","Type","Function","Description","Selects a clip.","Parameters","clip - The Clip you want to select.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectClipAt","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:selectClipAt(index) - boolean","Type","Function","Description","Select clip at a specific index.","Parameters","index - A number of where the clip appears in the list.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectClipTitled","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:selectClipTitled(title) - boolean","Type","Function","Description","Select clip with a specific title.","Parameters","title - The title of a clip.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectedClips","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:selectedClips() - table | nil","Type","Function","Description","Gets selected clips.","Parameters","None","Returns","A table of Clip objects or nil if no clips are selected.","Notes"]},{"l":"selectedClipsUI","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:selectedClipsUI() - table | nil","Type","Function","Description","Gets selected clips UI's.","Parameters","None","Returns","A table of axuielementObject objects or nil if no clips are selected.","Notes"]},{"l":"showClip","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:showClip(clip) - boolean","Type","Function","Description","Shows a clip.","Parameters","clip - The Clip you want to show.","Returns","true if successful otherwise false.","Notes"]},{"l":"showClipAt","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:showClipAt(index) - boolean","Type","Function","Description","Shows a clip at a specific index.","Parameters","index - The index of the clip you want to show.","Returns","true if successful otherwise false.","Notes"]},{"l":"sortClips","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip.sortClips(a,b) - boolean","Type","Function","Description","Determines if clip A is above clip B or not.","Parameters","a - Clip A b - Clip B","Returns","true if clip A is above clip B, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip.new(app) - LibrariesFilmstrip","Type","Constructor","Description","Creates a new LibrariesFilmstrip instance.","Parameters","parent - The parent object","Returns","A new LibrariesFilmstrip object.","Notes"]},{"l":"Fields"},{"l":"playhead","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip.playhead Playhead","Type","Field","Description","The Libraries Filmstrip Playhead."]},{"l":"skimmingPlayhead","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip.skimmingPlayhead Playhead","Type","Field","Description","The Libraries Filmstrip Skimming Playhead."]},{"l":"Methods"},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.LibrariesFilmstrip:show() - LibrariesFilmstrip","Type","Method","Description","Show the Libraries Filmstrip.","Parameters","None","Returns","LibrariesFilmstrip object","Notes"]}],[{"i":"cpapplefinalcutpromainlibrarieslist","l":"cp.apple.finalcutpro.main.LibrariesList","p":["Libraries List Module."]},{"l":"API Overview","p":["clips","clipsUI","columns","Constructors- API calls which return an object, typically one that offers API methods","contents","deselectAll","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","indexOfClip","isFocused","isShowing","LibrariesList","Methods- API calls which can only be made on an object returned by a constructor","playerUI","playhead","selectAll","selectClip","selectClipAt","selectClipTitled","selectedClips","selectedClipsUI","show","showClip","skimmingPlayhead"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"clips","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:clips(filterFn) - table | nil","Type","Function","Description","Gets clips using a custom filter.","Parameters","filterFn - A function to filter the UI results.","Returns","A table of Clip objects or nil if no clip UI could be found.","Notes"]},{"l":"clipsUI","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:clipsUI(filterFn) - table | nil","Type","Function","Description","Gets clip UIs using a custom filter.","Parameters","filterFn - A function to filter the UI results.","Returns","A table of axuielementObject objects or nil if no clip UI could be found.","Notes"]},{"l":"deselectAll","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:deselectAll() - boolean","Type","Function","Description","Deselect all clips.","Parameters","None","Returns","true if successful otherwise false.","Notes"]},{"l":"indexOfClip","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:indexOfClip(clip) - number | nil","Type","Function","Description","Gets the index of a specific clip.","Parameters","clip - The Clip you want to get the index of.","Returns","The index or nil if an error occurs.","Notes"]},{"l":"selectAll","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:selectAll([clips]) - boolean","Type","Function","Description","Select all clips.","Parameters","clips - A optional table of Clip objects.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectClip","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:selectClip(clip) - boolean","Type","Function","Description","Selects a clip.","Parameters","clip - The Clip you want to select.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectClipAt","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:selectClipAt(index) - boolean","Type","Function","Description","Select clip at a specific index.","Parameters","index - A number of where the clip appears in the list.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectClipTitled","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:selectClipTitled(title) - boolean","Type","Function","Description","Select clip with a specific title.","Parameters","title - The title of a clip.","Returns","true if successful otherwise false.","Notes"]},{"l":"selectedClips","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:selectedClips() - table | nil","Type","Function","Description","Gets selected clips.","Parameters","None","Returns","A table of Clip objects or nil if no clips are selected.","Notes"]},{"l":"selectedClipsUI","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:selectedClipsUI() - table | nil","Type","Function","Description","Gets selected clips UI's.","Parameters","None","Returns","A table of axuielementObject objects or nil if no clips are selected.","Notes"]},{"l":"showClip","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:showClip(clip) - boolean","Type","Function","Description","Shows a clip.","Parameters","clip - The Clip you want to show.","Returns","true if successful otherwise false.","Notes"]},{"l":"Constructors"},{"l":"LibrariesList","p":["Signature","cp.apple.finalcutpro.main.LibrariesList(app) - LibrariesList","Type","Constructor","Description","Creates a new LibrariesList instance.","Parameters","parent - The parent object.","Returns","A new LibrariesList object.","Notes"]},{"l":"Fields"},{"l":"contents","p":["Signature","cp.apple.finalcutpro.main.LibrariesList.contents cp.ui.OldTable","Type","Field","Description","The Libraries List Contents UI."]},{"l":"isFocused","p":["Signature","cp.apple.finalcutpro.main.LibrariesList.isFocused cp.prop: boolean; read-only","Type","Field","Description","Checks if the Libraries List is currently focused within FCPX."]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.main.LibrariesList.isShowing cp.prop: boolean; read-only","Type","Field","Description","Checks if the Libraries List is showing on screen."]},{"l":"playerUI","p":["Signature","cp.apple.finalcutpro.main.LibrariesList.playerUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The axuielement for the player section of the Libraries List UI."]},{"l":"playhead","p":["Signature","cp.apple.finalcutpro.main.LibrariesList.playhead Playhead","Type","Field","Description","The Libraries List Playhead."]},{"l":"skimmingPlayhead","p":["Signature","cp.apple.finalcutpro.main.LibrariesList.skimmingPlayhead Playhead","Type","Field","Description","the Libraries List Skimming Playhead."]},{"l":"Methods"},{"l":"columns","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:columns() - Columns","Type","Method","Description","Gets the List View Columns object.","Parameters","None","Returns","A Columns object.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.LibrariesList:show() - LibrariesList","Type","Method","Description","Show the Libraries List.","Parameters","None","Returns","LibrariesList object","Notes"]}],[{"i":"cpapplefinalcutpromainlibrariessidebar","l":"cp.apple.finalcutpro.main.LibrariesSidebar","p":["Libraries Sidebar Browser Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","LibrariesSidebar","Methods- API calls which can only be made on an object returned by a constructor","selectActiveLibrary","show"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"LibrariesSidebar","p":["Signature","cp.apple.finalcutpro.main.LibrariesSidebar(parent) - LibrariesSidebar","Type","Constructor","Description","Creates a new LibrariesSidebar instance.","Parameters","parent - The parent object.","Returns","A new LibrariesSidebar object.","Notes"]},{"l":"Methods"},{"l":"selectActiveLibrary","p":["Signature","cp.apple.finalcutpro.main.LibrariesSidebar:selectActiveLibrary() - LibrariesSidebar","Type","Method","Description","Selects the active library.","Parameters","None","Returns","The LibrariesSidebar object.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.LibrariesSidebar:show() - LibrariesSidebar","Type","Method","Description","Show the Libraries Sidebar.","Parameters","None","Returns","The LibrariesSidebar object.","Notes"]}],[{"i":"cpapplefinalcutpromainmediabrowser","l":"cp.apple.finalcutpro.main.MediaBrowser","p":["Media Browser Module."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","Fields- Variables which can only be accessed from an object returned by a constructor","GARAGE_BAND","group","hide","isShowing","ITUNES","LEGACY_TITLE","loadLayout","mainGroupUI","MAX_SECTIONS","MediaBrowser","Methods- API calls which can only be made on an object returned by a constructor","PHOTOS","saveLayout","search","show","showGarageBand","showITunes","showPhotos","showSection","showSidebar","showSoundEffects","sidebar","SOUND_EFFECTS","TITLE","topCategoriesUI"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"GARAGE_BAND","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.GARAGE_BAND - number","Type","Constant","Description","Garage Band ID."]},{"l":"ITUNES","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.ITUNES - number","Type","Constant","Description","iTunes ID."]},{"l":"LEGACY_TITLE","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.LEGACY_TITLE - string","Type","Constant","Description","Photos & Audio Title in v10.6.1 and earlier."]},{"l":"MAX_SECTIONS","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.MAX_SECTIONS - number","Type","Constant","Description","Maximum Sections."]},{"l":"PHOTOS","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.PHOTOS - number","Type","Constant","Description","Photos ID."]},{"l":"SOUND_EFFECTS","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.SOUND_EFFECTS - number","Type","Constant","Description","Sound Effects ID."]},{"l":"TITLE","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.TITLE - string","Type","Constant","Description","Photos & Audio Title in v10.6.2 and later."]},{"l":"Constructors"},{"l":"MediaBrowser","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser(parent) - MediaBrowser","Type","Constructor","Description","Creates a new Browser instance.","Parameters","parent - The parent object.","Returns","A new MediaBrowser object.","Notes"]},{"l":"Fields"},{"l":"group","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.group cp.ui.PopUpButton","Type","Field","Description","The group PopUpButton."]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.isShowing cp.prop: boolean; read-only","Type","Field","Description","Checks if the Media Browser is showing."]},{"l":"mainGroupUI","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.mainGroupUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the main group UI for the Media Browser, or nil if not available."]},{"l":"search","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.search cp.ui.TextField","Type","Field","Description","The search TextField."]},{"l":"sidebar","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser.sidebar cp.ui.OldTable","Type","Field","Description","The Sidebar Table."]},{"l":"Methods"},{"l":"hide","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:hide() - MediaBrowser","Type","Method","Description","Hide the Media Browser.","Parameters","None","Returns","The MediaBrowser object.","Notes"]},{"l":"loadLayout","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:loadLayout(layout) - none","Type","Method","Description","Loads a Media Browser layout.","Parameters","layout - A table containing the Media Browser layout settings - created using cp.apple.finalcutpro.main.MediaBrowser:saveLayout().","Returns","None","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:saveLayout() - table","Type","Method","Description","Saves the current Media Browser layout to a table.","Parameters","None","Returns","A table containing the current Media Browser Layout.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:show() - MediaBrowser","Type","Method","Description","Show the Media Browser.","Parameters","None","Returns","The MediaBrowser object.","Notes"]},{"l":"showGarageBand","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:showGarageBand() - MediaBrowser","Type","Method","Description","Show Garage Band Section.","Parameters","None","Returns","MediaBrowser object.","Notes"]},{"l":"showITunes","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:showITunes() - MediaBrowser","Type","Method","Description","Show iTunes Section.","Parameters","None","Returns","MediaBrowser object.","Notes"]},{"l":"showPhotos","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:showPhotos() - MediaBrowser","Type","Method","Description","Show Photos Section.","Parameters","None","Returns","MediaBrowser object.","Notes"]},{"l":"showSection","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:showSection(index) - MediaBrowser","Type","Method","Description","Show a specific section.","Parameters","index - The index ID of the section you want to show as a number.","Returns","MediaBrowser object.","Notes"]},{"l":"showSidebar","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:showSidebar() - MediaBrowser","Type","Method","Description","Show the Media Browser Sidebar.","Parameters","None","Returns","MediaBrowser object.","Notes"]},{"l":"showSoundEffects","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:showSoundEffects() - MediaBrowser","Type","Method","Description","Show Sound Effects Section.","Parameters","None","Returns","MediaBrowser object.","Notes"]},{"l":"topCategoriesUI","p":["Signature","cp.apple.finalcutpro.main.MediaBrowser:topCategoriesUI() - axuielementObject","Type","Method","Description","Get the Top Categories UI.","Parameters","None","Returns","axuielementObject object.","Notes"]}],[{"i":"cpapplefinalcutpromainplayhead","l":"cp.apple.finalcutpro.main.Playhead","p":["Playhead Module."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","find","matches","Constructors- API calls which return an object, typically one that offers API methods","Playhead","Fields- Variables which can only be accessed from an object returned by a constructor","center","currentViewer","frame","isPersistent","position","timecode","Methods- API calls which can only be made on an object returned by a constructor","hide","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"find","p":["Signature","cp.apple.finalcutpro.main.Playhead.find(containerUI, skimming) - hs.axuielement object | nil","Type","Function","Description","Finds the playhead (either persistent or skimming) in the specified container. Defaults to persistent.","Parameters","containerUI- The container UI skimming- Whether or not you want the skimming playhead as boolean.","Returns","The playhead hs.axuielement object or nil if not found.","Notes"]},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.Playhead.matches(element) - boolean","Type","Function","Description","Checks to see if a GUI element is the Playhead or not","Parameters","element- The element you want to check","Returns","true if the element is the Playhead otherwise false","Notes"]},{"l":"Constructors"},{"l":"Playhead","p":["Signature","cp.apple.finalcutpro.main.Playhead(parent[, skimming[, containerFn[, useEventViewer]]]) - Playhead","Type","Constructor","Description","Constructs a new Playhead","Parameters","parent - The parent object skimming - (optional) if true, this links to the 'skimming' playhead created under the mouse, if present. containerUI - (optional) a cp.prop which returns the container axuielement which contains the playheads. If not present, it will use the parent's UI element. useEventViewer - (optional) if true, this will use the Event Viewer's timecode, when available.","Returns","The new Playhead instance.","Notes"]},{"l":"Fields"},{"l":"center","p":["Signature","cp.apple.finalcutpro.main.Playhead.center cp.prop: hs.geometry.point; read-only; live?","Type","Field","Description","Gets the centre point ({x, y}) of the playhead."]},{"l":"currentViewer","p":["Signature","cp.apple.finalcutpro.main.Playhead.currentViewer cp.prop: cp.apple.finalcutpro.viewer.Viewer; read-only; live","Type","Field","Description","Represents the current viewer for the playhead. This may be either the primary Viewer or the Event Viewer,"]},{"l":"frame","p":["Signature","cp.apple.finalcutpro.main.Playhead.frame cp.prop: hs.geometry.frame; read-only; live?","Type","Field","Description","Gets the frame of the playhead."]},{"l":"isPersistent","p":["Signature","cp.apple.finalcutpro.main.Playhead.isPersistent cp.prop: boolean; read-only","Type","Field","Description","Is the playhead persistent?"]},{"l":"position","p":["Signature","cp.apple.finalcutpro.main.Playhead.position cp.prop; number; read-only; live?","Type","Field","Description","Gets the horizontal position of the playhead line, which may be different to the x position of the playhead."]},{"l":"timecode","p":["Signature","cp.apple.finalcutpro.main.Playhead.timecode cp.prop: string; live?","Type","Field","Description","Gets and sets the current timecode."]},{"l":"Methods"},{"l":"hide","p":["Signature","cp.apple.finalcutpro.main.Playhead:hide() - Playhead object","Type","Method","Description","Hides the Playhead","Parameters","None","Returns","Playhead object","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.Playhead:show() - Playhead object","Type","Method","Description","Shows the Playhead","Parameters","None","Returns","Playhead object","Notes"]}],[{"i":"cpapplefinalcutpromainprimarytoolbar","l":"cp.apple.finalcutpro.main.PrimaryToolbar","p":["Timeline Toolbar."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","PrimaryToolbar","Fields- Variables which can only be accessed from an object returned by a constructor","backgroundTasksWindow","browserShowing","extensions","inspectorShowing","keywordEditor","mediaImport","shareButton","timelineShowing"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"PrimaryToolbar","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar(parent) - PrimaryToolbar","Type","Constructor","Description","Creates a new PrimaryToolbar instance.","Parameters","parent - The parent object.","Returns","A new PrimaryToolbar object.","Notes"]},{"l":"Fields"},{"l":"backgroundTasksWindow","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar.backgroundTasksWindow cp.ui.CheckBox","Type","Field","Description","The CheckBox that will open the BackgroundTasksWindow dialog"]},{"l":"browserShowing","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar.browserShowing cp.ui.CheckBox","Type","Field","Description","The CheckBox indicating if the Browser is showing"]},{"l":"extensions","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar.extensions cp.ui.Button","Type","Field","Description","The Button that will open the \"Available Extensions\" dialog, or trigger the only extension, if only one is installed."]},{"l":"inspectorShowing","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar.inspectorShowing cp.ui.CheckBox","Type","Field","Description","The CheckBox indicating if the Inspector is showing"]},{"l":"keywordEditor","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar.keywordEditor cp.ui.CheckBox","Type","Field","Description","The CheckBox that will open the KeywordEditor dialog when checked."]},{"l":"mediaImport","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar.mediaImport cp.ui.Button","Type","Field","Description","The Button that will open the MediaImport dialog"]},{"l":"shareButton","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar.shareButton cp.ui.Button","Type","Field","Description","The Share Button."]},{"l":"timelineShowing","p":["Signature","cp.apple.finalcutpro.main.PrimaryToolbar.timelineShowing cp.ui.CheckBox","Type","Field","Description","The CheckBox indicating if the Timeline is showing"]}],[{"i":"cpapplefinalcutpromainprimarywindow","l":"cp.apple.finalcutpro.main.PrimaryWindow","p":["Primary Window Module."]},{"l":"API Overview","p":["alert","app","bottomGroupUI","browserGroupUI","colorBoard","Constructors- API calls which return an object, typically one that offers API methods","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","frame","Functions- API calls offered directly by the extension","hsWindow","inspector","isFullScreen","isShowing","leftGroupUI","matches","Methods- API calls which can only be made on an object returned by a constructor","PrimaryWindow","rightGroupUI","rootGroupUI","show","timelineGroupUI","toolbar","topGroupUI","UI","viewerGroupUI","window"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.matches(w) - boolean","Type","Function","Description","Checks to see if a window matches the PrimaryWindow requirements","Parameters","w - The window to check","Returns","true if matched otherwise false","Notes"]},{"l":"Constructors"},{"l":"PrimaryWindow","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow(app) - PrimaryWindow object","Type","Constructor","Description","Creates a new PrimaryWindow.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"alert","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.alert cp.ui.Alert","Type","Field","Description","Provides access to any 'Alert' windows on the PrimaryWindow."]},{"l":"bottomGroupUI","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow:bottomGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the bottom group UI as a hs.axuielement object."]},{"l":"browserGroupUI","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.browserGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the UI which contains the Browser."]},{"l":"colorBoard","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.colorBoard ColorBoard","Type","Field","Description","The ColorBoard object."]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow:doShow() - PrimaryWindow","Type","Field","Description","A Statement that attempts to show the Primary Window.","Returns","The Statement, which resolves as either true or sends an error."]},{"l":"frame","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.frame cp.prop: frame","Type","Field","Description","The current position (x, y, width, height) of the window."]},{"l":"hsWindow","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.hsWindow cp.prop: hs.window; read-only","Type","Field","Description","The hs.window instance for the window, or nil if it can't be found."]},{"l":"inspector","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.inspector Inspector","Type","Field","Description","The Inspector object."]},{"l":"isFullScreen","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.isFullScreen cp.prop: boolean","Type","Field","Description","Is true if the window is full-screen."]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.isShowing cp.prop: boolean","Type","Field","Description","Is true if the window is visible."]},{"l":"leftGroupUI","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.leftGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the left group UI as a hs.axuielement object"]},{"l":"rightGroupUI","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.rightGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the right group UI as a hs.axuielement object."]},{"l":"rootGroupUI","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.rootGroupUI() cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the top AXSplitGroup as a hs.axuielement object"]},{"l":"timelineGroupUI","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.timelineGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the UI that contains the Timeline."]},{"l":"toolbar","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.toolbar cp.ui.PrimaryToolbar","Type","Field","Description","The PrimaryToolbar element."]},{"l":"topGroupUI","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.topGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the top group UI as a hs.axuielement object."]},{"l":"UI","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.UI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The main axuielement for the window. May be nil if not currently available."]},{"l":"viewerGroupUI","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.viewerGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the UI that contains the Viewer."]},{"l":"window","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow.window cp.ui.Window","Type","Field","Description","The Window instance."]},{"l":"Methods"},{"l":"app","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow:app() - cp.apple.finalcutpro","Type","Method","Description","Returns the application the display belongs to.","Parameters","None","Returns","The app instance.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.PrimaryWindow:show() - PrimaryWindow","Type","Method","Description","Shows the Primary Window.","Parameters","None","Returns","The PrimaryWindow instance.","Notes"]}],[{"i":"cpapplefinalcutpromainsecondarywindow","l":"cp.apple.finalcutpro.main.SecondaryWindow","p":["Secondary Window Module."]},{"l":"API Overview","p":["app","browserGroupUI","Constructors- API calls which return an object, typically one that offers API methods","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","frame","Functions- API calls offered directly by the extension","hsWindow","isFullScreen","isShowing","matches","Methods- API calls which can only be made on an object returned by a constructor","rootGroupUI","SecondaryWindow","show","timelineGroupUI","viewerGroupUI"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"SecondaryWindow","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow(app) - SecondaryWindow","Type","Constructor","Description","Creates a new SecondaryWindow instance.","Parameters","app - The cp.apple.finalcutpro object.","Returns","A new SecondaryWindow object.","Notes"]},{"l":"Fields"},{"l":"browserGroupUI","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow.browserGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The UI element that will contain the Browser if it's on the Secondary Window."]},{"l":"frame","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow.frame cp.prop: frame","Type","Field","Description","The current position (x, y, width, height) of the window."]},{"l":"hsWindow","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow.hsWindow cp.prop: hs.window; read-only; live","Type","Field","Description","The hs.window instance for the window, or nil if it can't be found."]},{"l":"isFullScreen","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow.isFullScreen cp.prop: boolean; live","Type","Field","Description","Is true if the window is full-screen."]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow.isShowing cp.prop: boolean; read-only; live","Type","Field","Description","Is true if the window is visible."]},{"l":"rootGroupUI","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow.rootGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The root UI element on the window."]},{"l":"timelineGroupUI","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow.timelineGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The UI element that will contain the Timeline if it's on the Secondary Window."]},{"l":"viewerGroupUI","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow.viewerGroupUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The UI element that will contain the Viewer if it's on the Secondary Window."]},{"l":"Methods"},{"l":"app","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow:app() - App","Type","Method","Description","Returns the app instance representing Final Cut Pro.","Parameters","None","Returns","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the Secondary Window.","Parameters","None","Returns","The SecondaryWindow object.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.main.SecondaryWindow:show() - SecondaryWindow","Type","Method","Description","Show the Secondary Window.","Parameters","None","Returns","The SecondaryWindow object.","Notes"]}],[{"i":"cpapplefinalcutpromaintranscodemedia","l":"cp.apple.finalcutpro.main.TranscodeMedia","p":["Represents the Transcode Media sheet."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","cancel","createOptimizedMedia","createProxyMedia","ok"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"cancel","p":["Signature","cp.apple.finalcutpro.main.TranscodeMedia.cancel cp.ui.Button","Type","Field","Description","The \"Cancel\" button, as a Button"]},{"l":"createOptimizedMedia","p":["Signature","cp.apple.finalcutpro.main.TranscodeMedia.createOptimizedMedia cp.ui.CheckBox","Type","Field","Description","The \"Create Optimized Media\" check box, as a CheckBox"]},{"l":"createProxyMedia","p":["Signature","cp.apple.finalcutpro.main.TranscodeMedia.createProxyMedia cp.ui.CheckBox","Type","Field","Description","The \"Create Proxy Media\" check box, as a CheckBox"]},{"l":"ok","p":["Signature","cp.apple.finalcutpro.main.TranscodeMedia.ok cp.ui.Button","Type","Field","Description","The \"OK\" button, as a Button"]}],[{"i":"cpapplefinalcutpromenu","l":"cp.apple.finalcutpro.menu","p":["Final Cut Pro Menu Helper Functions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpapplefinalcutproplugins","l":"cp.apple.finalcutpro.plugins","p":["Scans an entire system for Final Cut Pro Effects, Generators, Titles & Transitions.","Usage:"]},{"l":"Submodules","p":["cp.apple.finalcutpro.plugins.guiscan"]},{"l":"API Overview","p":["app","audioEffects","clearCaches","Constants- Useful values which cannot be changed","effectBundleStrings","effectStrings","Functions- API calls offered directly by the extension","generators","Methods- API calls which can only be made on an object returned by a constructor","new","ofType","registerPlugin","reset","scan","scanAll","scanAppAudioEffectBundles","scanAppBuiltInPlugins","scanAppEdelEffects","scanAppEffectsPresets","scanAppMotionTemplates","scanned","scanPluginCategoryDirectory","scanPluginsDirectory","scanPluginThemeDirectory","scanSystemAudioUnits","scanSystemMotionTemplates","scanUserColorPresets","scanUserEffectsPresets","scanUserMotionTemplates","titles","transitions","translateEffectBundle","types","unwatch","videoEffects","watch"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"types","p":["Signature","cp.apple.finalcutpro.plugins.types - table","Type","Constant","Description","Table of the different audio/video/transition/generator types."]},{"l":"Functions"},{"l":"clearCaches","p":["Signature","cp.apple.finalcutpro.plugins.clearCaches() - boolean","Type","Function","Description","Clears any local caches created for tracking the plugins.","Parameters","None","Returns","true if the caches have been cleared successfully.","Notes","Does not uninstall any of the actual plugins."]},{"l":"new","p":["Signature","cp.apple.finalcutpro.plugins.new(fcp) - plugins object","Type","Function","Description","Creates a new Plugins Object.","Parameters","fcp - The cp.apple.finalcutpro object","Returns","The plugins object","Notes"]},{"l":"scan","p":["Signature","cp.apple.finalcutpro.plugins:scan() - none","Type","Function","Description","Scans Final Cut Pro for Effects, Transitions, Generators & Titles","Parameters","fcp - the cp.apple.finalcutpro instance","Returns","None","Notes"]},{"l":"scanAppEffectsPresets","p":["Signature","cp.apple.finalcutpro.plugins:scanAppEffectsPresets(locale) - none","Type","Function","Description","Scans Final Cut Pro Built-in Effects Presets","Parameters","locale- The locale to scan for.","Returns","None","Notes"]},{"l":"scanned","p":["Signature","cp.apple.finalcutpro.plugins.scanned() - boolean","Type","Function","Description","Gets if the system has been scanned.","Parameters","None","Returns","true is scanned otherwise false.","Notes"]},{"l":"scanSystemAudioUnits","p":["Signature","cp.apple.finalcutpro.plugins:scanSystemAudioUnits(locale) - none","Type","Function","Description","Scans for Validated Audio Units, and saves the results to a cache for faster subsequent startup times.","Parameters","locale - the locale to scan in.","Returns","None","Notes"]},{"l":"scanUserColorPresets","p":["Signature","cp.apple.finalcutpro.plugins:scanUserColorPresets(locale) - none","Type","Function","Description","Scans Final Cut Pro User Color Presets","Parameters","locale- The locale to scan for.","Returns","None","Notes"]},{"l":"scanUserEffectsPresets","p":["Signature","cp.apple.finalcutpro.plugins:scanUserEffectsPresets(locale) - none","Type","Function","Description","Scans Final Cut Pro Effects Presets","Parameters","locale- The locale to scan for.","Returns","None","Notes"]},{"l":"Methods"},{"l":"app","p":["Signature","cp.apple.finalcutpro.plugins:app() - plugins","Type","Method","Description","Returns the cp.apple.finalcutpro object.","Parameters","None","Returns","The cp.apple.finalcutpro object.","Notes"]},{"l":"audioEffects","p":["Signature","cp.apple.finalcutpro.plugins:audioEffects([locale]) - table","Type","Method","Description","Finds the 'audio effect' plugins.","Parameters","locale- The locale code to search for (e.g. \"en\"). Defaults to the current FCPX langauge.","Returns","A table of the available plugins.","Notes"]},{"l":"effectBundleStrings","p":["Signature","cp.apple.finalcutpro.plugins:effectBundleStrings() - table","Type","Method","Description","Returns all the Effect Bundle Strings.","Parameters","None","Returns","The effect bundle strings in a table.","Notes"]},{"l":"effectStrings","p":["Signature","cp.apple.finalcutpro.plugins:effectStrings() - table","Type","Method","Description","Returns a table of Effects Strings.","Parameters","None","Returns","A table of effect strings.","Notes"]},{"l":"generators","p":["Signature","cp.apple.finalcutpro.plugins:generators([locale]) - table","Type","Method","Description","Finds the 'generator' plugins.","Parameters","locale- The locale code to search for (e.g. \"en\"). Defaults to the current FCPX langauge.","Returns","A table of the available plugins.","Notes"]},{"l":"ofType","p":["Signature","cp.apple.finalcutpro.plugins:ofType(type[, locale]) - table","Type","Method","Description","Finds the plugins of the specified type ( types.videoEffect, etc.) and if provided, locale.","Parameters","type- The plugin type. See types for the complete list. locale- The locale code to search for (e.g. \"en\"). Defaults to the current FCPX langauge.","Returns","A table of the available plugins of the specified type.","Notes"]},{"l":"registerPlugin","p":["Signature","cp.apple.finalcutpro.plugins:registerPlugin(path, type, categoryName, themeName, pluginName, locale) - plugin","Type","Method","Description","Registers a plugin with the specified details.","Parameters","path- The path to the plugin directory. type- The type of plugin categoryName- The category name, in the specified locale. themeName- The theme name, in the specified locale. May be nil if not in a theme. pluginName- The plugin name, in the specified locale. locale- The cp.i18n.localeID or string code for same (e.g. \"en\", \"fr\", \"de\")","Returns","The plugin object.","Notes","locale defaults to the current Final Cut Pro locale if nothing is supplied."]},{"l":"reset","p":["Signature","cp.apple.finalcutpro.plugins:reset() - none","Type","Method","Description","Resets all the cached plugins.","Parameters","None","Returns","Notes"]},{"l":"scanAll","p":["Signature","cp.apple.finalcutpro.plugins:scanAll() - nil","Type","Method","Description","Scans all supported locales, loading them into memory.","Parameters","None","Returns","Nothing","Notes"]},{"l":"scanAppAudioEffectBundles","p":["Signature","cp.apple.finalcutpro.plugins:scanAppAudioEffectBundles() - none","Type","Method","Description","Scans the Audio Effect Bundles directories.","Parameters","directoryPath - Directory to scan","Returns","None","Notes"]},{"l":"scanAppBuiltInPlugins","p":["Signature","cp.apple.finalcutpro.plugins:scanAppBuiltInPlugins([locale]) - None","Type","Method","Description","Scan Built In Plugins.","Parameters","locale- The cp.i18n.localeID code to search for. Defaults to the current FCPX langauge.","Returns","None","Notes"]},{"l":"scanAppEdelEffects","p":["Signature","cp.apple.finalcutpro.plugins:scanAppEdelEffects() - none","Type","Method","Description","Scans for Soundtrack Pro EDEL Effects.","Parameters","None","Returns","Notes"]},{"l":"scanAppMotionTemplates","p":["Signature","cp.apple.finalcutpro.plugins:scanAppMotionTemplates(locale) - none","Type","Method","Description","Scans for app-provided Final Cut Pro Plugins.","Parameters","locale- The locale to scan for.","Returns","None","Notes"]},{"l":"scanPluginCategoryDirectory","p":["Signature","cp.apple.finalcutpro.plugins:scanPluginCategoryDirectory(locale, path, plugin) - boolean","Type","Method","Description","Scans a folder as a plugin category folder. The contents will be folders that are either theme folders or actual plugins.","Parameters","locale- The locale to scan with. path- The path to the plugin type directory plugin- A table containing the plugin details collected so far.","Returns","true if the folder was scanned successfully.","Notes"]},{"l":"scanPluginsDirectory","p":["Signature","cp.apple.finalcutpro.plugins:scanPluginsDirectory(locale, path, filter) - boolean","Type","Method","Description","Scans a root plugins directory.","Parameters","locale- The locale code to scan for (e.g. \"en\" or \"fr\"). path- The path of the root plugin directory to scan. checkFn- A function which will receive the path being scanned and return true if it should be scanned.","Returns","true if the plugin directory was successfully scanned.","Notes","Plugins directories have a standard structure which comes in two flavours:** //.** ///.** ////. This is somewhat complicated by 'localization', wherein each of the folder levels may have a .localized extension. If this is the case, it will contain a subfolder called .localized, which in turn contains files which describe the local name for the folder in any number of locales. This function will drill down through the contents of the specified path, assuming the above structure, and then register any contained plugins in the locale provided. Other locales are ignored, other than some use of English when checking for specific effect types (Effect, Generator, etc.)."]},{"l":"scanPluginThemeDirectory","p":["Signature","cp.apple.finalcutpro.plugins:scanPluginThemeDirectory(locale, path, plugin) - boolean","Type","Method","Description","Scans a folder as a plugin theme folder. The contents will be plugin folders.","Parameters","locale- The locale to scan with. path- The path to the plugin type directory plugin- A table containing the plugin details collected so far.","Returns","true if the folder was scanned successfully.","Notes"]},{"l":"scanSystemMotionTemplates","p":["Signature","cp.apple.finalcutpro.plugins:scanSystemMotionTemplates(locale) - none","Type","Method","Description","Scans for system-provided Final Cut Pro Plugins.","Parameters","locale- The locale to scan for.","Returns","None","Notes"]},{"l":"scanUserMotionTemplates","p":["Signature","cp.apple.finalcutpro.plugins:scanUserMotionTemplates(locale) - none","Type","Method","Description","Scans for user-provided Final Cut Pro Plugins.","Parameters","locale- The locale to scan for.","Returns","None","Notes"]},{"l":"titles","p":["Signature","cp.apple.finalcutpro.plugins:titles([locale]) - table","Type","Method","Description","Finds the 'title' plugins.","Parameters","locale- The locale code to search for (e.g. \"en\"). Defaults to the current FCPX langauge.","Returns","A table of the available plugins.","Notes"]},{"l":"transitions","p":["Signature","cp.apple.finalcutpro.plugins:transitions([locale]) - table","Type","Method","Description","Finds the 'transitions' plugins.","Parameters","locale- The locale code to search for (e.g. \"en\"). Defaults to the current FCPX langauge.","Returns","A table of the available plugins.","Notes"]},{"l":"translateEffectBundle","p":["Signature","cp.apple.finalcutpro.plugins:translateEffectBundle(input, locale) - none","Type","Method","Description","Translates an Effect Bundle Item.","Parameters","input - The original name locale - The locale code you want to attempt to translate to","Returns","The translated value for input in the specified locale, if present.","Notes"]},{"l":"unwatch","p":["Signature","cp.apple.finalcutpro.plugins:unwatch(id) - watcher","Type","Method","Description","Unwatches a watcher with a specific ID.","Parameters","id - The ID of the watcher to stop watching.","Returns","The watcher object.","Notes"]},{"l":"videoEffects","p":["Signature","cp.apple.finalcutpro.plugins:videoEffects([locale]) - table","Type","Method","Description","Finds the 'video effect' plugins.","Parameters","locale- The locale code to search for (e.g. \"en\"). Defaults to the current FCPX langauge.","Returns","A table of the available plugins.","Notes"]},{"l":"watch","p":["Signature","cp.apple.finalcutpro.plugins:watch(events) - watcher","Type","Method","Description","Adds a watcher for the provided events table.","Parameters","events - A table of events to watch.","Returns","The watcher object","Notes","The events can be:** videoEffects** audioEffects** transitions** titles** generators"]}],[{"i":"cpapplefinalcutpropluginsguiscan","l":"cp.apple.finalcutpro.plugins.guiscan","p":["Final Cut Pro GUI Plugin Scanner.","Usage:"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpapplefinalcutproprefseditingpanel","l":"cp.apple.finalcutpro.prefs.EditingPanel","p":["Editing Panel Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","EditingPanel","Fields- Variables which can only be accessed from an object returned by a constructor","audioFadeDuration","positionPlayheadAfterEditOperation","showDetailedTrimmingFeedback","showReferenceWaveforms","stillImageDuration","transitionDuration"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"EditingPanel","p":["Signature","cp.apple.finalcutpro.prefs.EditingPanel(preferencesDialog) - EditingPanel","Type","Constructor","Description","Creates a new EditingPanel instance.","Parameters","parent - The parent object.","Returns","A new EditingPanel object.","Notes"]},{"l":"Fields"},{"l":"audioFadeDuration","p":["Signature","cp.apple.finalcutpro.prefs.EditingPanel.audioFadeDuration cp.ui.TextField: number","Type","Field","Description","The \"Audio Fade Duration\" TextField with a number value."]},{"l":"positionPlayheadAfterEditOperation","p":["Signature","cp.apple.finalcutpro.prefs.EditingPanel.positionPlayheadAfterEditOperation cp.ui.CheckBox","Type","Field","Description","The \"Position playhead after edit operation\" CheckBox."]},{"l":"showDetailedTrimmingFeedback","p":["Signature","cp.apple.finalcutpro.prefs.EditingPanel.showDetailedTrimmingFeedback cp.ui.CheckBox","Type","Field","Description","The \"Show detailed trimming feedback\" CheckBox."]},{"l":"showReferenceWaveforms","p":["Signature","cp.apple.finalcutpro.prefs.EditingPanel.showReferenceWaveforms cp.ui.CheckBox","Type","Field","Description","The \"Show reference waveforms\" CheckBox."]},{"l":"stillImageDuration","p":["Signature","cp.apple.finalcutpro.prefs.EditingPanel.stillImageDuration cp.ui.TextField: number","Type","Field","Description","The \"Still image Duration\" TextField with a number value."]},{"l":"transitionDuration","p":["Signature","cp.apple.finalcutpro.prefs.EditingPanel.transitionDuration cp.ui.TextField: number","Type","Field","Description","The \"Transition Duration\" TextField with a number value."]}],[{"i":"cpapplefinalcutproprefsgeneralpanel","l":"cp.apple.finalcutpro.prefs.GeneralPanel","p":["General Panel Module."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","TIME_DISPLAY","Functions- API calls offered directly by the extension","timeDisplay","Constructors- API calls which return an object, typically one that offers API methods","GeneralPanel"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"TIME_DISPLAY","p":["Signature","cp.apple.finalcutpro.prefs.GeneralPanel.TIME_DISPLAY - table","Type","Constant","Description","The time display options."]},{"l":"Functions"},{"l":"timeDisplay","p":["Signature","cp.apple.finalcutpro.prefs.GeneralPanel.timeDisplay([value]) - string | nil","Type","Function","Description","Gets to sets the Time Display value.","Parameters","value - An optional value to set the Time Display.","Returns","The time display if successful, otherwise nil if an error occurs.","Notes"]},{"l":"Constructors"},{"l":"GeneralPanel","p":["Signature","cp.apple.finalcutpro.prefs.GeneralPanel(preferencesDialog) - GeneralPanel","Type","Constructor","Description","Creates a new GeneralPanel instance.","Parameters","parent - The parent object.","Returns","A new GeneralPanel object.","Notes"]}],[{"i":"cpapplefinalcutproprefsimportpanel","l":"cp.apple.finalcutpro.prefs.ImportPanel","p":["Import Panel Module."]},{"l":"API Overview","p":["analyzeAudioProblems","analyzeBalanceColor","assignAudioRole","Constructors- API calls which return an object, typically one that offers API methods","copyToLibraryStorageLocation","createOptimizedMedia","createProxyMedia","Fields- Variables which can only be accessed from an object returned by a constructor","findPeople","findPeopleConsolidatedResults","findPeopleSmartCollections","ImportPanel","iXMLRoles","keywordsFromFinderTags","keywordsFromFolders","leaveFilesInPlace","Methods- API calls which can only be made on an object returned by a constructor","removeSilentChannels","separateMonoGroupStereoAudio","toggleMediaLocation"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"ImportPanel","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel(preferencesDialog) - ImportPanel","Type","Constructor","Description","Creates a new ImportPanel instance.","Parameters","parent - The parent object.","Returns","A new ImportPanel object.","Notes"]},{"l":"Fields"},{"l":"analyzeAudioProblems","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.analyzeAudioProblems cp.ui.CheckBox","Type","Field","Description","The \"Analyze and fix audio problems\" CheckBox."]},{"l":"analyzeBalanceColor","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.analyzeBalanceColor cp.ui.CheckBox","Type","Field","Description","The \"Analyze video for balance color\" CheckBox."]},{"l":"assignAudioRole","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.assignAudioRole cp.ui.PopUpButton","Type","Field","Description","The \"Assign Role\" PopUpButton."]},{"l":"copyToLibraryStorageLocation","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.copyToLibraryStorageLocation cp.ui.RadioButton","Type","Field","Description","The \"Copy to library storage location\" RadioButton."]},{"l":"createOptimizedMedia","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.createOptimizedMedia cp.ui.CheckBox","Type","Field","Description","The \"Create optimized media\" CheckBox."]},{"l":"createProxyMedia","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.createProxyMedia cp.ui.CheckBox","Type","Field","Description","The \"Create proxy media\" CheckBox."]},{"l":"findPeople","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.findPeople cp.ui.CheckBox","Type","Field","Description","The \"Find people\" CheckBox."]},{"l":"findPeopleConsolidatedResults","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.findPeopleConsolidatedResults cp.ui.CheckBox","Type","Field","Description","The \"Consolidate find people results\" CheckBox."]},{"l":"findPeopleSmartCollections","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.findPeopleSmartCollections cp.ui.CheckBox","Type","Field","Description","The \"Create Smart Collections after analysis\" CheckBox."]},{"l":"iXMLRoles","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.iXMLRoles cp.ui.CheckBox","Type","Field","Description","The \"Assign iXML track names if available\" CheckBox."]},{"l":"keywordsFromFinderTags","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.keywordsFromFinderTags cp.ui.CheckBox","Type","Field","Description","The \"Keywords from Finder tags\" CheckBox."]},{"l":"keywordsFromFolders","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.keywordsFromFolders cp.ui.CheckBox","Type","Field","Description","The \"Keywords from folders\" CheckBox."]},{"l":"leaveFilesInPlace","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.leaveFilesInPlace cp.ui.RadioButton","Type","Field","Description","The \"Leave files in place\" RadioButton."]},{"l":"removeSilentChannels","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.removeSilentChannels cp.ui.CheckBox","Type","Field","Description","The \"Remove silent channels\" CheckBox."]},{"l":"separateMonoGroupStereoAudio","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel.separateMonoGroupStereoAudio cp.ui.CheckBox","Type","Field","Description","The \"Separate mono and group stereo audio\" CheckBox."]},{"l":"Methods"},{"l":"toggleMediaLocation","p":["Signature","cp.apple.finalcutpro.prefs.ImportPanel:toggleMediaLocation() - cp.rx.go.Statement","Type","Method","Description","A Statement that toggles between the \"Copy to library storage location\" and \"Leave files in place\" options.","Parameters","None","Returns","Notes"]}],[{"i":"cpapplefinalcutproprefspanel","l":"cp.apple.finalcutpro.prefs.Panel","p":["Preferences Panel."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","hide","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"hide","p":["Signature","cp.apple.finalcutpro.prefs.Panel:hide() - self","Type","Function","Description","Hides the General Preferences Panel.","Parameters","None","Returns","self","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.prefs.Panel:show() - self","Type","Function","Description","Shows the Panel.","Parameters","None","Returns","self","Notes"]}],[{"i":"cpapplefinalcutproprefsplaybackpanel","l":"cp.apple.finalcutpro.prefs.PlaybackPanel","p":["Playback Panel Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","PlaybackPanel","Fields- Variables which can only be accessed from an object returned by a constructor","avOutput","backgroundRender","backgroundRenderDelay","createMulticamOptimizedMedia","playerBackground","postRollDuration","preRollDuration","renderShareGPU","showHDRAsToneMapped","warnAfterPlaybackOnDiskFrameDrop","warnAfterPlaybackOnVRFrameDrop","warnOnFrameDrop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"PlaybackPanel","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel(preferencesDialog) - PlaybackPanel","Type","Constructor","Description","Creates a new PlaybackPanel instance.","Parameters","parent - The parent object.","Returns","A new PlaybackPanel object.","Notes"]},{"l":"Fields"},{"l":"avOutput","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.avOutput cp.ui.PopUpButton","Type","Field","Description","The PopUpButton for \"A/V Output\"."]},{"l":"backgroundRender","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.backgroundRender cp.ui.CheckBox","Type","Field","Description","The CheckBox for \"Background render\"."]},{"l":"backgroundRenderDelay","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.backgroundRenderDelay cp.ui.TextField","Type","Field","Description","The TextField for \"Background render\"."]},{"l":"createMulticamOptimizedMedia","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.createMulticamOptimizedMedia cp.ui.CheckBox","Type","Field","Description","The CheckBox for \"Create optimized media for multicam clips\"."]},{"l":"playerBackground","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.playerBackground cp.ui.PopUpButton","Type","Field","Description","The PopUpButton for \"Player Background\"."]},{"l":"postRollDuration","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.postRollDuration cp.ui.TextField","Type","Field","Description","The TextField for \"Post-Roll Duration\" in seconds."]},{"l":"preRollDuration","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.preRollDuration cp.ui.TextField","Type","Field","Description","The TextField for \"Pre-Roll Duration\" in seconds."]},{"l":"renderShareGPU","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.renderShareGPU cp.ui.PopUpButton","Type","Field","Description","The PopUpButton for \"Render/Share GPU\"."]},{"l":"showHDRAsToneMapped","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.showHDRAsToneMapped cp.ui.CheckBox","Type","Field","Description","The CheckBox for \"Show HDR as Tone Mapped\"."]},{"l":"warnAfterPlaybackOnDiskFrameDrop","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.warnAfterPlaybackOnDiskFrameDrop cp.ui.CheckBox","Type","Field","Description","The CheckBox for \"If frames drop due to disk performance, warn after playback\"."]},{"l":"warnAfterPlaybackOnVRFrameDrop","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.warnAfterPlaybackOnVRFrameDrop cp.ui.CheckBox","Type","Field","Description","The CheckBox for \"If frames drop on VR headset, warn after playback\"."]},{"l":"warnOnFrameDrop","p":["Signature","cp.apple.finalcutpro.prefs.PlaybackPanel.warnOnFrameDrop cp.ui.CheckBox","Type","Field","Description","The CheckBox for \"If a frame drops, stop playback and warn\"."]}],[{"i":"cpapplefinalcutproprefspreferenceswindow","l":"cp.apple.finalcutpro.prefs.PreferencesWindow","p":["Preferences Window Module."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","editingPanel","generalPanel","importPanel","playbackPanel","title","toolbar","Methods- API calls which can only be made on an object returned by a constructor","doHide","doShow","hide","show"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"editingPanel","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow.editingPanel EditingPanel","Type","Field","Description","The EditingPanel for the Preferences Window."]},{"l":"generalPanel","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow.generalPanel GeneralPanel","Type","Field","Description","The GeneralPanel for the Preferences Window."]},{"l":"importPanel","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow.importPanel ImportPanel","Type","Field","Description","The ImportPanel for the Preferences Window."]},{"l":"playbackPanel","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow.playbackPanel PlaybackPanel","Type","Field","Description","The PlaybackPanel for the Preferences Window."]},{"l":"title","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow.title cp.ui.StaticText","Type","Field","Description","The StaticText for the Preferences Window title."]},{"l":"toolbar","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow.toolbar cp.ui.Toolbar","Type","Field","Description","The Toolbar for the Preferences Window."]},{"l":"Methods"},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to hide the Preferences window.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to show the Preferences window.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow:hide() - PreferencesWindow","Type","Method","Description","Attempts to hide the Preferences window.","Parameters","None","Returns","The same PreferencesWindow, for chaining.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.prefs.PreferencesWindow:show() - PreferencesWindow","Type","Method","Description","Attempts to show the Preferences window.","Parameters","None","Returns","The same PreferencesWindow, for chaining.","Notes"]}],[{"i":"cpapplefinalcutprostrings","l":"cp.apple.finalcutpro.strings","p":["The cp.strings for I18N lookups related to Final Cut Pro. This has been populated with common lookups for user interface values that appear in Final Cut Pro."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","strings","Methods- API calls which can only be made on an object returned by a constructor","find","findKeys"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"strings","p":["Signature","cp.apple.finalcutpro.strings cp.strings","Type","Constant","Description","The cp.strings providing access to common FCPX text values."]},{"l":"Methods"},{"l":"find","p":["Signature","cp.apple.finalcutpro.strings:find(key[, locale][, quiet]]) - string","Type","Method","Description","Looks up an application string with the specified key. If no context value is provided, the current context is used.","Parameters","key- The key to look up. locale- Optional locale to retrieve the key for, if available. May be a string or cp.i18n.localeID. quiet- Optional boolean, defaults to false. If true, no warnings are logged for missing keys.","Returns","The requested string or nil if the application is not running.","Notes"]},{"l":"findKeys","p":["Signature","cp.apple.finalcutpro.strings:findKeys(string[, lang]) - {string}","Type","Method","Description","Looks up an application string and returns an array of keys that match. It will take into account current language the app is running in, or use lang if provided.","Parameters","string- The string to look up. lang- The language (defaults to current FCPX language).","Returns","The array of keys with a matching string.","Notes","This method may be very inefficient, since it has to search through every possible key/value pair to find matches. It is not recommended that this is used in production."]}],[{"i":"cpapplefinalcutprotimelineappearance","l":"cp.apple.finalcutpro.timeline.Appearance","p":["Timeline Appearance Popup module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","Appearance","Fields- Variables which can only be accessed from an object returned by a constructor","angles","clipHeight","clipNames","clipRoles","clipWaveformHeight","laneHeaders","zoomAmount","Methods- API calls which can only be made on an object returned by a constructor","doShow","show"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Appearance","p":["Signature","cp.apple.finalcutpro.timeline.Appearance(toggle) - Appearance","Type","Constructor","Description","Creates a new Appearance instance.","Parameters","toggle - The parent CheckBox toggle.","Returns","A new Appearance object.","Notes"]},{"l":"Fields"},{"l":"angles","p":["Signature","cp.apple.finalcutpro.timeline.Appearance.angles cp.ui.CheckBox","Type","Field","Description"]},{"l":"clipHeight","p":["Signature","cp.apple.finalcutpro.timeline.Appearance.clipHeight cp.ui.Slider","Type","Field","Description","The Clip Height Slider."]},{"l":"clipNames","p":["Signature","cp.apple.finalcutpro.timeline.Appearance.clipNames cp.ui.CheckBox","Type","Field","Description","Clip Names"]},{"l":"clipRoles","p":["Signature","cp.apple.finalcutpro.timeline.Appearance.clipRoles cp.ui.CheckBox","Type","Field","Description","Clip Roles"]},{"l":"clipWaveformHeight","p":["Signature","cp.apple.finalcutpro.timeline.Appearance.clipWaveformHeight cp.ui.RadioGroup","Type","Field","Description","The Waveform Height Radio Group."]},{"l":"laneHeaders","p":["Signature","cp.apple.finalcutpro.timeline.Appearance.laneHeaders cp.ui.CheckBox","Type","Field","Description","Lane Headers"]},{"l":"zoomAmount","p":["Signature","cp.apple.finalcutpro.timeline.Appearance.zoomAmount cp.ui.Slider","Type","Field","Description","The Zoom Slider."]},{"l":"Methods"},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.timeline.Appearance:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the Timeline Appearance popup.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.timeline.Appearance:show() - Appearance","Type","Method","Description","Show the Timeline Appearance popup.","Parameters","None","Returns","The Appearance object.","Notes"]}],[{"i":"cpapplefinalcutprotimelineaudiorole","l":"cp.apple.finalcutpro.timeline.AudioRole","p":["Extends Role","A Role representing Audio."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","AudioRole","Fields- Variables which can only be accessed from an object returned by a constructor","focusedInTimeline","subroleLanes","subrolesExpanded","Methods- API calls which can only be made on an object returned by a constructor","doFocusInTimeline","doHideSubroleLanes","doShowSubroleLanes","doUnfocusInTimeline"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.AudioRole.matches(element) - boolean","Type","Function","Description","Checks if the element is a \"Audio\" Role.","Parameters","element - An element to check","Returns","A boolean","Notes"]},{"l":"Constructors"},{"l":"AudioRole","p":["Signature","cp.apple.finalcutpro.timeline.AudioRole(parent, uiFinder)","Type","Constructor","Description","Creates a new instance with the specified parent and uiFinder.","Parameters","parent - the parent Element. uiFinder - a function or cp.prop containing the axuielement","Returns","The new Row.","Notes"]},{"l":"Fields"},{"l":"focusedInTimeline","p":["Signature","cp.apple.finalcutpro.timeline.AudioRole.focusedInTimeline cp.ui.CheckBox","Type","Field","Description","A CheckBox that toggles this role is larger than the other audio roles on the timeline."]},{"l":"subroleLanes","p":["Signature","cp.apple.finalcutpro.timeline.AudioRole.subroleLanes cp.ui.CheckButton","Type","Field","Description","A CheckButton that toggles whether the subroles are visible in the Timeline."]},{"l":"subrolesExpanded","p":["Signature","cp.apple.finalcutpro.timeline.AudioRole.subrolesExpanded cp.ui.CheckButton","Type","Field","Description","A CheckButton that toggles whether the roles are visible in the Index.","Notes","Unlike the VideoRole and CaptionsRole, this is a CheckBox and is always visible."]},{"l":"Methods"},{"l":"doFocusInTimeline","p":["Signature","cp.apple.finalcutpro.timeline.AudioRole:doFocusInTimeline() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to focus on this audio role in the timeline.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doHideSubroleLanes","p":["Signature","cp.apple.finalcutpro.timeline.AudioRole:doHideSubroleLanes() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to hide the subrole lanes on this audio role in the timeline.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doShowSubroleLanes","p":["Signature","cp.apple.finalcutpro.timeline.AudioRole:doShowSubroleLanes() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to show the subrole lanes on this audio role in the timeline.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doUnfocusInTimeline","p":["Signature","cp.apple.finalcutpro.timeline.AudioRole:doUnfocusInTimeline() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to unfocus on this audio role in the timeline.","Parameters","None","Returns","A Statement","Notes"]}],[{"i":"cpapplefinalcutprotimelineaudiosubrole","l":"cp.apple.finalcutpro.timeline.AudioSubrole","p":["Extends Role","A Role representing Audio."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","AudioSubrole"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.AudioSubrole.matches(element) - boolean","Type","Function","Description","Checks if the element is a \"Audio\" Subrole.","Parameters","element - An element to check","Returns","A boolean","Notes"]},{"l":"Constructors"},{"l":"AudioSubrole","p":["Signature","cp.apple.finalcutpro.timeline.AudioSubrole(parent, uiFinder)","Type","Constructor","Description","Creates a new instance with the specified parent and uiFinder.","Parameters","parent - the parent Element. uiFinder - a function or cp.prop containing the axuielement","Returns","The new Row.","Notes"]}],[{"i":"cpapplefinalcutprotimelinecaptionsrole","l":"cp.apple.finalcutpro.timeline.CaptionsRole","p":["Extends Role","A Role representing Captions."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","CaptionsRole","Fields- Variables which can only be accessed from an object returned by a constructor","subrolesExpanded","visibleInViewer"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.CaptionsRole.matches(element) - boolean","Type","Function","Description","Checks if the element is a \"Captions\" Role.","Parameters","element - The element to check","Returns","A boolean","Notes"]},{"l":"Constructors"},{"l":"CaptionsRole","p":["Signature","cp.apple.finalcutpro.timeline.CaptionsRole(parent, uiFinder)","Type","Constructor","Description","Creates a new instance with the specified parent and uiFinder.","Parameters","parent - the parent Element. uiFinder - a function or cp.prop containing the axuielement","Returns","The new Row.","Notes"]},{"l":"Fields"},{"l":"subrolesExpanded","p":["Signature","cp.apple.finalcutpro.timeline.CaptionsRole.subrolesExpanded cp.ui.Button","Type","Field","Description","A Button that toggles whether the sub-captions are visible."]},{"l":"visibleInViewer","p":["Signature","cp.apple.finalcutpro.timeline.CaptionsRole.visibleInViewer cp.ui.CheckBox","Type","Field","Description","A CheckBox that toggles whether captions are visible in the Viewer."]}],[{"i":"cpapplefinalcutprotimelinecaptionssubrole","l":"cp.apple.finalcutpro.timeline.CaptionsSubrole","p":["Extends Role","A Role representing Captions."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","CaptionsSubrole","Fields- Variables which can only be accessed from an object returned by a constructor","format","visibleInTimeline"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.CaptionsSubrole.matches(element) - boolean","Type","Function","Description","Checks if the element is a \"Captions\" Subrole.","Parameters","element - An element to check","Returns","A boolean","Notes"]},{"l":"Constructors"},{"l":"CaptionsSubrole","p":["Signature","cp.apple.finalcutpro.timeline.CaptionsSubrole(parent, uiFinder)","Type","Constructor","Description","Creates a new instance with the specified parent and uiFinder.","Parameters","parent - the parent Element. uiFinder - a function or cp.prop containing the axuielement","Returns","The new Row.","Notes"]},{"l":"Fields"},{"l":"format","p":["Signature","cp.apple.finalcutpro.timeline.CaptionsSubrole.format cp.ui.StaticText","Type","Field","Description","A StaticText which represents the subtitle format (e.g. \"ITT\", \"SRT\")."]},{"l":"visibleInTimeline","p":["Signature","cp.apple.finalcutpro.timeline.CaptionsSubrole.visibleInTimeline cp.ui.CheckBox","Type","Field","Description","A CheckBox that indicates if the subtitle track is visible in the Viewer."]}],[{"i":"cpapplefinalcutprotimelinecontents","l":"cp.apple.finalcutpro.timeline.Contents","p":["Timeline Contents Module."]},{"l":"API Overview","p":["activePlayhead","children","clipsUI","Constructors- API calls which return an object, typically one that offers API methods","Contents","doFocus","doHide","doSelectClip","doSelectClips","doSelectNone","doSelectTopClip","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","isLoaded","matches","Methods- API calls which can only be made on an object returned by a constructor","playhead","playheadClipsUI","positionClipsUI","rangeSelectionUI","scrollArea","scrollAreaUI","selectedChildren","selectedClipsUI","skimmingPlayhead","skimmingPlayheadClipsUI","viewFrame"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"clipsUI","p":["Signature","cp.apple.finalcutpro.timeline.Contents:clipsUI(expandedGroups, filterFn) - table of axuielements","Type","Function","Description","Returns a table containing the list of clips in the Timeline.","Parameters","expandGroups - (optional) if true, expand AXGroups to include contained AXLayoutItems filterFn - (optional) if provided, the function will be called to check each clip","Returns","The table of axuielements that match the conditions","Notes","If expandsGroups is true any AXGroup items will be expanded to the list of contained AXLayoutItems. If filterFn is provided it will be called with a single argument to check if the provided clip should be included in the final table."]},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.Contents.matches(element) - boolean","Type","Function","Description","Checks if an axuielementObject matches the Contents type.","Parameters","element - An axuielementObject to check.","Returns","true if it matches, otherwise false.","Notes"]},{"l":"playheadClipsUI","p":["Signature","cp.apple.finalcutpro.timeline.Contents:playheadClipsUI(expandedGroups, filterFn) - table of axuielements","Type","Function","Description","Returns a table array containing the list of clips in the Timeline under the playhead, ordered with the highest clips at the beginning of the array.","Parameters","expandGroups - (optional) if true, expand AXGroups to include contained AXLayoutItems filterFn - (optional) if provided, the function will be called to check each clip","Returns","The table of axuielements that match the conditions","Notes","If expandsGroups is true any AXGroup items will be expanded to the list of contained AXLayoutItems. If filterFn is provided it will be called with a single argument to check if the provided clip should be included in the final table."]},{"l":"positionClipsUI","p":["Signature","cp.apple.finalcutpro.timeline.Contents:positionClipsUI(position, expandedGroups, filterFn) - table of axuielements","Type","Function","Description","Returns a table array containing the list of clips in the Timeline at the specified position, ordered with the highest clips at the beginning of the array.","Parameters","position - The X(or horizontal) position value to find clips under. expandGroups - (optional) if true, expand AXGroups to include contained AXLayoutItems filterFn - (optional) if provided, the function will be called to check each clip","Returns","The table of axuielements that match the conditions","Notes","If expandsGroups is true any AXGroup items will be expanded to the list of contained AXLayoutItems. If filterFn is provided it will be called with a single argument to check if the provided clip should be included in the final table."]},{"l":"skimmingPlayheadClipsUI","p":["Signature","cp.apple.finalcutpro.timeline.Contents:skimmingPlayheadClipsUI(expandedGroups, filterFn) - table of axuielements","Type","Function","Description","Returns a table array containing the list of clips in the Timeline under the skimming playhead, ordered with the highest clips at the beginning of the array.","Parameters","expandGroups - (optional) if true, expand AXGroups to include contained AXLayoutItems filterFn - (optional) if provided, the function will be called to check each clip","Returns","The table of axuielements that match the conditions","Notes","If expandsGroups is true any AXGroup items will be expanded to the list of contained AXLayoutItems. If filterFn is provided it will be called with a single argument to check if the provided clip should be included in the final table."]},{"l":"Constructors"},{"l":"Contents","p":["Signature","cp.apple.finalcutpro.timeline.Contents(parent) - Contents","Type","Constructor","Description","Creates a new Timeline Contents instance.","Parameters","parent - The parent Timeline","Returns","A new Contents object.","Notes"]},{"l":"Fields"},{"l":"children","p":["Signature","cp.apple.finalcutpro.timeline.Contents.children cp.prop: table; read-only; live","Type","Field","Description","The current set of child elements in the Contents."]},{"l":"isLoaded","p":["Signature","cp.apple.finalcutpro.timeline.Contents.isLoaded cp.prop: booelan; read-only; live","Type","Field","Description","Checks if the Timeline has content loaded."]},{"l":"playhead","p":["Signature","cp.apple.finalcutpro.timeline.Contents.playhead cp.apple.finalcutpro.main.Playhead","Type","Field","Description","The main Playhead."]},{"l":"scrollArea","p":["Signature","cp.apple.finalcutpro.timeline.Contents.scrollArea cp.ui.ScrollArea","Type","Field","Description","The ScrollArea for the Contents element."]},{"l":"scrollAreaUI","p":["Signature","cp.apple.finalcutpro.timeline.Contents.scrollAreaUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The parent ScrollArea UI of the Timeline Contents area."]},{"l":"selectedChildren","p":["Signature","cp.apple.finalcutpro.timeline.Contents.selectedChildren cp.prop: table; read-only; live","Type","Field","Description","The current set of selected child elements in the Contents."]},{"l":"skimmingPlayhead","p":["Signature","cp.apple.finalcutpro.timeline.Contents.skimmingPlayhead cp.apple.finalcutpro.main.Playhead","Type","Field","Description","The Playhead that tracks with the mouse pointer."]},{"l":"viewFrame","p":["Signature","cp.apple.finalcutpro.timeline.Contents.viewFrame cp.prop: table; read-only; live","Type","Field","Description","The current 'frame' of the internal timeline content, or nil if not available."]},{"l":"Methods"},{"l":"activePlayhead","p":["Signature","cp.apple.finalcutpro.timeline.Contents:activePlayhead() - Playhead","Type","Method","Description","Returns the active Playhead. If the Skimming Playhead is available, return that, otherwise, return the normal Playhead.","Parameters","None","Returns","The active Playhead.","Notes"]},{"l":"doFocus","p":["Signature","cp.apple.finalcutpro.timeline.Contents:doFocus(show) - cp.rx.go.Statement","Type","Method","Description","A Statement which will focus on the Contents.","Parameters","show - if true, the Contents will be shown before focusing.","Returns","The Statement.","Notes"]},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.timeline.Contents:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to hide the Timeline Contents.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doSelectClip","p":["Signature","cp.apple.finalcutpro.timeline.Contents:doSelectClip(clipUI) - cp.rx.go.Statement","Type","Method","Description","A Statement which will select the specified single hs.axuielement value in the Timeline Contents area.","Parameters","clipUI - The hs._asm.axuilement values to select.","Returns","A Statement that will select the clip or throw an error if there is an issue.","Notes"]},{"l":"doSelectClips","p":["Signature","cp.apple.finalcutpro.timeline.Contents:doSelectClips(clipsUI) - cp.rx.go.Statement","Type","Method","Description","A Statement which will select the specified list of hs.axuielement values in the Timeline Contents area.","Parameters","clipsUI - The table of hs._asm.axuilement values to select.","Returns","A Statement that will select the clips or throw an error if there is an issue.","Notes"]},{"l":"doSelectNone","p":["Signature","cp.apple.finalcutpro.timeline.Contents:doSelectNone() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will clear any clip selection.","Parameters","None","Returns","The Statement","Notes"]},{"l":"doSelectTopClip","p":["Signature","cp.apple.finalcutpro.timeline.Contents:doSelectTopClip([position]) - cp.rx.go.Statement","Type","Method","Description","Creates a Statement that will select the top clip at the given position, resolving to the top clip if available.","Parameters","position - (optional) The position table to select the top clip at. If not provided, the current active playhead position is used.","Returns","The Statement","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.timeline.Contents:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to show the Timeline Contents.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"rangeSelectionUI","p":["Signature","cp.apple.finalcutpro.timeline.Contents:rangeSelectionUI() - axuielements","Type","Method","Description","Returns the UI for the current 'Range Selection', if present.","Parameters","None","Returns","The 'Range Selection' UI or nil","Notes"]},{"l":"selectedClipsUI","p":["Signature","cp.apple.finalcutpro.timeline.Contents:selectedClipsUI(expandedGroups, filterFn) - table of axuielements","Type","Method","Description","Returns a table containing the list of selected clips.","Parameters","expandGroups - (optional) if true, expand AXGroups to include contained AXLayoutItems filterFn - (optional) if provided, the function will be called to check each clip","Returns","The table of selected axuielements that match the conditions","Notes","If expandsGroups is true any AXGroup items will be expanded to the list of contained AXLayoutItems. If filterFn is provided it will be called with a single argument to check if the provided clip should be included in the final table."]}],[{"i":"cpapplefinalcutprotimelineindex","l":"cp.apple.finalcutpro.timeline.Index","p":["Timeline Index Module."]},{"l":"API Overview","p":["activeTab","captions","clips","Constructors- API calls which return an object, typically one that offers API methods","doHide","doLayout","doShow","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","Index","matches","Methods- API calls which can only be made on an object returned by a constructor","mode","roles","saveLayout","search","tags"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.Index.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"Index","p":["Signature","cp.apple.finalcutpro.timeline.Index(timeline) - cp.apple.finalcutpro.timeline.Index","Type","Constructor","Description","Creates a new Timeline Index.","Parameters","timeline - Timeline.","Returns","A new Index instance.","Notes"]},{"l":"Fields"},{"l":"captions","p":["Signature","cp.apple.finalcutpro.timeline.Index.captions cp.apple.finalcutpro.timeline.IndexCaptions","Type","Field","Description","The IndexCaptions."]},{"l":"clips","p":["Signature","cp.apple.finalcutpro.timeline.Index.clips cp.apple.finalcutpro.timeline.IndexClips","Type","Field","Description","The IndexClips."]},{"l":"mode","p":["Signature","cp.apple.finalcutpro.timeline.Index.mode cp.apple.finalcutpro.timeline.IndexMode","Type","Field","Description","The IndexMode for the Index."]},{"l":"roles","p":["Signature","cp.apple.finalcutpro.timeline.Index.roles cp.apple.finalcutpro.timeline.IndexRoles","Type","Field","Description","The IndexRoles."]},{"l":"search","p":["Signature","cp.apple.finalcutpro.timeline.Index.search cp.ui.SearchField","Type","Field","Description","The SearchField for the Timeline Index."]},{"l":"tags","p":["Signature","cp.apple.finalcutpro.timeline.Index.tags cp.apple.finalcutpro.timeline.IndexTags","Type","Field","Description","The IndexTags."]},{"l":"Methods"},{"l":"activeTab","p":["Signature","cp.apple.finalcutpro.timeline.Index:activeTab() - object","Type","Method","Description","Gets the active tab.","Parameters","None","Returns","The active tab or nil.","Notes"]},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.timeline.Index:doHide() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement which will hide the Index if possible.","Parameters","None","Returns","Statement","Notes"]},{"l":"doLayout","p":["Signature","cp.apple.finalcutpro.timeline.Index:doLayout(layout) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will apply the layout provided, if possible.","Parameters","layout - the table containing the layout configuration. Usually created via the [#saveLayout] method.","Returns","The Statement.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.timeline.Index:doShow() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement which will show the Index if possible.","Parameters","None","Returns","Statement","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.timeline.Index:saveLayout() - table","Type","Method","Description","Returns a table containing the layout configuration for this class.","Parameters","None","Returns","The layout configuration table.","Notes"]}],[{"i":"cpapplefinalcutprotimelineindexcaptions","l":"cp.apple.finalcutpro.timeline.IndexCaptions","p":["Provides access to the 'Captions' section of the Timeline Index"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","activate","list","viewErrors","Methods- API calls which can only be made on an object returned by a constructor","doLayout","saveLayout"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"activate","p":["Signature","cp.apple.finalcutpro.timeline.IndexCaptions.activate cp.ui.RadioButton","Type","Field","Description","The RadioButton that activates the 'Captions' section."]},{"l":"list","p":["Signature","cp.apple.finalcutpro.timeline.IndexCaptions.list cp.ui.OldTable","Type","Field","Description","The list of captions as a Table."]},{"l":"viewErrors","p":["Signature","cp.apple.finalcutpro.timeline.IndexCaptions.viewErrors cp.ui.Button","Type","Field","Description","The Button that will allow viewing errors in the Captions list."]},{"l":"Methods"},{"l":"doLayout","p":["Signature","cp.apple.finalcutpro.timeline.IndexCaptions:doLayout(layout) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will apply the layout provided, if possible.","Parameters","layout - the table containing the layout configuration. Usually created via the [#saveLayout] method.","Returns","The Statement.","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.timeline.IndexCaptions:saveLayout() - table","Type","Method","Description","Returns a table containing the layout configuration for this class.","Parameters","None","Returns","The layout configuration table.","Notes"]}],[{"i":"cpapplefinalcutprotimelineindexclips","l":"cp.apple.finalcutpro.timeline.IndexClips","p":["Extends IndexSection","Provides access to the 'Clips' section of the Timeline Index"]},{"l":"Submodules","p":["cp.apple.finalcutpro.timeline.IndexClips.Type"]},{"l":"API Overview","p":["activate","all","audio","Constructors- API calls which return an object, typically one that offers API methods","doFindAuditions","doFindClipsContaining","doFindCompoundClips","doFindMissingMedia","doFindMulticams","doFindSynchronized","doLayout","doShowAll","doShowAudio","doShowTitles","doShowVideo","Fields- Variables which can only be accessed from an object returned by a constructor","IndexClips","list","Methods- API calls which can only be made on an object returned by a constructor","saveLayout","titles","type","video"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"IndexClips","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips(index) - IndexClips","Type","Constructor","Description","Creates the IndexClips instance.","Parameters","index - The Index instance.","Returns","Notes"]},{"l":"Fields"},{"l":"activate","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.activate cp.ui.RadioButton","Type","Field","Description","The RadioButton that activates the 'Clips' section."]},{"l":"all","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.all cp.ui.RadioButton","Type","Field","Description","The RadioButton that will show \"All\" types of media."]},{"l":"audio","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.audio cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Audio\" filter."]},{"l":"list","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.list cp.ui.OldTable","Type","Field","Description","The list of clips as a Table."]},{"l":"titles","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.titles cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Titles\" filter."]},{"l":"type","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.type cp.apple.finalcutpro.timeline.IndexClips.Type","Field","Description","The IndexClips.Type."]},{"l":"video","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.video cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Video\" filter."]},{"l":"Methods"},{"l":"doFindAuditions","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doFindAuditions() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will use the index to search for all \"Auditions\".","Parameters","None","Returns","A Statement","Notes"]},{"l":"doFindClipsContaining","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doFindClipsContaining(text) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will use the index to search for clips containing the specified text.","Parameters","text - The text to search for.","Returns","The Statement","Notes","Because the text can change each time, this result is not cached automatically. However as long as you are searching for the same text the result can be safely cached. The [#toFindMissingMedia] method does this, for example."]},{"l":"doFindCompoundClips","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doFindCompoundClips() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will use the index to search for all \"Compound Clips\".","Parameters","None","Returns","A Statement","Notes"]},{"l":"doFindMissingMedia","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doFindMissingMedia() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will use the index to search for all \"Missing Media\".","Parameters","None","Returns","A Statement","Notes"]},{"l":"doFindMulticams","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doFindMulticams() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will use the index to search for all \"Multicam\" clips.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doFindSynchronized","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doFindSynchronized() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will use the index to search for all \"Synchronized\" Clips.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doLayout","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doLayout(layout) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will apply the layout provided, if possible.","Parameters","layout - the table containing the layout configuration. Usually created via the [#saveLayout] method.","Returns","The Statement.","Notes"]},{"l":"doShowAll","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doShowAll() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the clip index to \"All\" media types.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doShowAudio","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doShowAudio() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the clip index to \"Audio\" media types.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doShowTitles","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doShowTitles() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the clip index to \"Titles\" media types.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doShowVideo","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:doShowVideo() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the clip index to \"Video\" media types.","Parameters","None","Returns","A Statement","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips:saveLayout() - table","Type","Method","Description","Returns a table containing the layout configuration for this class.","Parameters","None","Returns","The layout configuration table.","Notes"]}],[{"i":"cpapplefinalcutprotimelineindexclipstype","l":"cp.apple.finalcutpro.timeline.IndexClips.Type","p":["The collection of RadioButtons that allow filtering by Video/Audio/Title."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","audio","titles","video","Methods- API calls which can only be made on an object returned by a constructor","matches"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"audio","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.Type.audio cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Audio\" filter."]},{"l":"titles","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.Type.titles cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Titles\" filter."]},{"l":"video","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.Type.video cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Video\" filter."]},{"l":"Methods"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.IndexClips.Type.matches(element) - boolean","Type","Method","Description","Checks if the element is the IndexClips.Type group.","Parameters","element - The axuielement to check.","Returns","true if it matches, otherwise false.","Notes"]}],[{"i":"cpapplefinalcutprotimelineindexmode","l":"cp.apple.finalcutpro.timeline.IndexMode","p":["Timeline Index Mode Radio Group Module."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","IndexMode","Fields- Variables which can only be accessed from an object returned by a constructor","captions","clips","roles","tags"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.IndexMode.matches(element) - boolean","Type","Function","Description","Checks if the element is the IndexMode.","Parameters","element - The axuielement to check.","Returns","true if it matches, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"IndexMode","p":["Signature","cp.apple.finalcutpro.timeline.IndexMode(index) - cp.apple.finalcutpro.timeline.IndexMode","Type","Constructor","Description","Creates a new IndexMode instance.","Parameters","index - The Index that contains the mode.","Returns","The new IndexMode instance.","Notes"]},{"l":"Fields"},{"l":"captions","p":["Signature","cp.apple.finalcutpro.timeline.IndexMode.captions cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Captions\" mode."]},{"l":"clips","p":["Signature","cp.apple.finalcutpro.timeline.IndexMode.clips cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Clips\" mode."]},{"l":"roles","p":["Signature","cp.apple.finalcutpro.timeline.IndexMode.roles cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Roles\" mode."]},{"l":"tags","p":["Signature","cp.apple.finalcutpro.timeline.IndexMode.tags cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Tags\" mode."]}],[{"i":"cpapplefinalcutprotimelineindexroles","l":"cp.apple.finalcutpro.timeline.IndexRoles","p":["Provides access to the 'Roles' section of the Timeline Index"]},{"l":"API Overview","p":["activate","allRoles","area","audioRoles","captionRoles","collapseSubroles","doActivate","doCollapseSubroles","doDeactivate","doFocusInTimeline","doHideAudioLanes","doHideSubroleLanes","doLayout","doShowAudioLanes","doShowSubroleLanes","doUnfocusInTimeline","editRoles","Fields- Variables which can only be accessed from an object returned by a constructor","fineRoleTitled","hideAudioLanes","list","Methods- API calls which can only be made on an object returned by a constructor","saveLayout","showAudioLanes","videoRoles"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"activate","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles.activate cp.ui.RadioButton","Type","Field","Description","The RadioButton that activates the 'Roles' section."]},{"l":"area","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles.area cp.apple.finalcutpro.timeline.IndexRolesArea","Type","Field","Description","The IndexRolesArea containing the list of Role."]},{"l":"collapseSubroles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles.collapseSubroles cp.ui.Button","Type","Field","Description","The Collapse Subroles Button."]},{"l":"editRoles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles.editRoles cp.ui.Button","Type","Field","Description","The Edit Roles... Button."]},{"l":"hideAudioLanes","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles.hideAudioLanes cp.ui.Button","Type","Field","Description","The Hide Audio Lanes Button."]},{"l":"list","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles.list cp.apple.finalcutpro.timeline.IndexRolesList","Type","Field","Description","The IndexRolesList for the roles."]},{"l":"showAudioLanes","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles.showAudioLanes cp.ui.Button","Type","Field","Description","The Show Audio Lanes Button."]},{"l":"Methods"},{"l":"allRoles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:allRoles([includeSubroles]) - table of Roles","Type","Method","Description","Finds all Roles, optionally including all Subroles","Parameters","includeSubroles - (defaults to false) if true include subroles.","Returns","The table of Role s, or nil if no UI is available.","Notes"]},{"l":"audioRoles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:audioRoles([includeSubroles]) - table of Roles","Type","Method","Description","Finds all Audio Roles, optionally including all Subroles","Parameters","includeSubroles - (defaults to false) if true include subroles.","Returns","The table of Role s, or nil if no UI is available.","Notes"]},{"l":"captionRoles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:captionRoles([includeSubroles]) - table of Roles","Type","Method","Description","Finds all Caption Roles, optionally including all Subroles","Parameters","includeSubroles - (defaults to false) if true include subroles.","Returns","The table of Role s, or nil if no UI is available.","Notes"]},{"l":"doActivate","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doActivate(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will activate the provided role, if it is available. This will automatically show and hide the Index if it is not currently visible.","Parameters","The title of the Role to activate.","Returns","The Statement","Notes","The title can be the English name (eg. \"Video\", \"Titles\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doCollapseSubroles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doCollapseSubroles() - cp.rx.go.Statement","Type","Method","Description","A Statement that will collapse subroles, if they are currently expanded.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doDeactivate","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doDeactivate(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will deactivate the provided role, if it is available. This will automatically show and hide the Index if it is not currently visible.","Parameters","The title of the Role to activate.","Returns","The Statement","Notes","The title can be the English name (eg. \"Video\", \"Titles\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doFocusInTimeline","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doFocusInTimeline(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will focus the listed role, if it is available and is an AudioRole. This will automatically show and hide the Index if it is not currently visible.","Parameters","The title of the Role to activate.","Returns","The Statement","Notes","The title can be the English name (eg. \"Dialogue\", \"Music\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doHideAudioLanes","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doHideAudioLanes() - cp.rx.go.Statement","Type","Method","Description","A Statement that will collapse subroles (if necessary) and hide the audio lanes.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doHideSubroleLanes","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doHideSubroleLanes(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will hide the subrole lanes for the listed role, if it is available and is an AudioRole. This will automatically show and hide the Index if it is not currently visible.","Parameters","The title of the Role.","Returns","The Statement","Notes","The title can be the English name (eg. \"Dialogue\", \"Music\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doLayout","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doLayout(layout) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will apply the layout provided, if possible.","Parameters","layout - the table containing the layout configuration. Usually created via the [#saveLayout] method.","Returns","The Statement.","Notes"]},{"l":"doShowAudioLanes","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doShowAudioLanes() - cp.rx.go.Statement","Type","Method","Description","A Statement that will show the Audio Lanes when executed.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doShowSubroleLanes","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doShowSubroleLanes(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will show subrole lanes for the role, if it is available and is an AudioRole. This will automatically show and hide the Index if it is not currently visible.","Parameters","The title of the Role.","Returns","The Statement","Notes","The title can be the English name (eg. \"Dialogue\", \"Music\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doUnfocusInTimeline","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:doUnfocusInTimeline(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will unfocus the listed role, if it is available and is an AudioRole. This will automatically show and hide the Index if it is not currently visible.","Parameters","The title of the Role to activate.","Returns","The Statement","Notes","The title can be the English name (eg. \"Dialogue\", \"Music\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"fineRoleTitled","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:fineRoleTitled(title) - Role or nil","Type","Method","Description","Finds the Role with the specified title.","Parameters","title - The title to match.","Returns","The Role with the title, or nil.","Notes","The title can be the English name (eg. \"Video\", \"Titles\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:saveLayout() - table","Type","Method","Description","Returns a table containing the layout configuration for this class.","Parameters","None","Returns","The layout configuration table.","Notes"]},{"l":"videoRoles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRoles:videoRoles([includeSubroles]) - table of Roles","Type","Method","Description","Finds all Video Roles, optionally including all Subroles","Parameters","includeSubroles - (defaults to false) if true include subroles.","Returns","The table of Role s, or nil if no UI is available.","Notes"]}],[{"i":"cpapplefinalcutprotimelineindexrolesarea","l":"cp.apple.finalcutpro.timeline.IndexRolesArea","p":["Represents the list of Roles in the IndexRoles."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Fields- Variables which can only be accessed from an object returned by a constructor","list"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesArea.matches(element) - boolean","Type","Function","Description","Checks if the element matches an IndexRolesArea.","Parameters","element - The axuielement to check.","Returns","true if it matches, otherwise false.","Notes"]},{"l":"Fields"},{"l":"list","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesArea.list cp.apple.finalcutpro.timeline.IndexRolesList","Type","Field","Description","The IndexRolesList that serves as the list of the scroll area."]}],[{"i":"cpapplefinalcutprotimelineindexroleslist","l":"cp.apple.finalcutpro.timeline.IndexRolesList","p":["Timeline Index Roles List."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","allRoles","audioRoles","doActivate","doDeactivate","doFocusInTimeline","doHideSubroleLanes","doShowSubroleLanes","doUnfocusInTimeline","filterRoles","findRoleTitled","videoRoles"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"allRoles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:allRoles([includeSubroles]) - table of Roles","Type","Method","Description","Returns the list of caption Role s in the current list.","Parameters","includeSubroles - if true, include Subroles, otherwise exclude them.","Returns","A table of Role s, or nil if no UI is available currently.","Notes"]},{"l":"audioRoles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:audioRoles([includeSubroles]) - table of Roles","Type","Method","Description","Returns the list of all audio Role s in the current list.","Parameters","includeSubroles - if true, include Subroles, otherwise exclude them.","Returns","A table of Role s, or nil if no UI is available currently.","Notes"]},{"l":"doActivate","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:doActivate(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will activate the provided role, if it is available.","Parameters","title - The title of the Role to activate.","Returns","The Statement","Notes","The title can be the English name (eg. \"Video\", \"Titles\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doDeactivate","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:doDeactivate(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will deactivate the provided role, if it is available.","Parameters","title - The title of the Role to deactivate.","Returns","The Statement","Notes","The title can be the English name (eg. \"Video\", \"Titles\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doFocusInTimeline","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:doFocusInTimeline(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will focus the provided AudioRole, if it is available.","Parameters","title - The title of the Role to activate.","Returns","The Statement","Notes","The title can be the English name (eg. \"Video\", \"Titles\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doHideSubroleLanes","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:doHideSubroleLanes(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will hide subrole lanes for the provided AudioRole, if it is available.","Parameters","title - The title of the Role.","Returns","The Statement","Notes","The title can be the English name (eg. \"Dialogue\", \"Music\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doShowSubroleLanes","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:doShowSubroleLanes(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will show subrole lanes for the provided AudioRole, if it is available.","Parameters","title - The title of the Role.","Returns","The Statement","Notes","The title can be the English name (eg. \"Dialogue\", \"Music\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"doUnfocusInTimeline","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:doUnfocusInTimeline(title) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will unfocus the provided AudioRole, if it is available.","Parameters","title - The title of the Role to activate.","Returns","The Statement","Notes","The title can be the English name (eg. \"Dialogue\", \"Music\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"filterRoles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:filterRoles([matcherFn]) - table of Roles or nil","Type","Method","Description","Filters the current list of Role s based on the given matchesFn predicate.","Parameters","matchesFn - the matcher function. If not provided, no additional filtering occurs.","Returns","The table of Role, or nil if no UI is currently available.","Notes"]},{"l":"findRoleTitled","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:findRoleTitled(title) - Role or nil","Type","Method","Description","Returns the Role with the specified title.","Parameters","title - The title of the role to find.","Returns","The Role, or nil if it can't be found.","Notes","The title can be the English name (eg. \"Video\", \"Titles\", etc.) for default Roles, and it will find the correct role in the current FCPX language."]},{"l":"videoRoles","p":["Signature","cp.apple.finalcutpro.timeline.IndexRolesList:videoRoles([includeSubroles]) - table of Roles","Type","Method","Description","Returns the list of all video Role s in the current list.","Parameters","includeSubroles - if true, include Subroles, otherwise exclude them.","Returns","A table of Role s, or nil if no UI is available currently.","Notes"]}],[{"i":"cpapplefinalcutprotimelineindexsection","l":"cp.apple.finalcutpro.timeline.IndexSection","p":["An abstract base class for sections inside the Index. This contains common methods and other definitions that apply for all sections.","This will generally not be created directly, but will be created via subclass such as IndexClips."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","IndexSection","Fields- Variables which can only be accessed from an object returned by a constructor","activate","index","isShowing","search","UI","Methods- API calls which can only be made on an object returned by a constructor","app","doActivateSearch","doShow","parent"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"IndexSection","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection(index) - IndexSection","Type","Constructor","Description","Creates the IndexSection instance.","Parameters","index - The Index instance.","Returns","Notes"]},{"l":"Fields"},{"l":"activate","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection.activate cp.ui.RadioButton","Type","Field","Description","The RadioButton that activates the section.","Notes","Must be overridden in subclasses to provide the actual RadioButton."]},{"l":"index","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection.index cp.apple.finalcutpro.timeline.Index","Type","Field","Description","The parent Index."]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection.isShowing cp.prop: boolean; read-only; live?","Type","Field","Description","Indicates if the section is currently showing."]},{"l":"search","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection.search cp.ui.SearchField","Type","Field","Description","The shared SearchField for the Index"]},{"l":"UI","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection.UI cp.prop: axuielement; read-only; live?","Type","Field","Description","The axuielement that represents the item."]},{"l":"Methods"},{"l":"app","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection:app() - cp.apple.finalcutpro","Type","Method","Description","The Final Cut Pro instance.","Parameters","None","Returns","Notes"]},{"l":"doActivateSearch","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection:doActivateSearch() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will show the Clips in the Timeline Index and focus on the Search field.","Parameters","None","Returns","Returns a Statement","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that will show the Clips section in the Timeline Index, if possible.","Parameters","None","Returns","The Statement","Notes"]},{"l":"parent","p":["Signature","cp.apple.finalcutpro.timeline.IndexSection:parent() - cp.apple.finalcutpro.timeline.Index","Type","Method","Description","The parent index.","Parameters","None","Returns","Notes"]}],[{"i":"cpapplefinalcutprotimelineindextags","l":"cp.apple.finalcutpro.timeline.IndexTags","p":["Provides access to the 'Tags' section of the Timeline Index"]},{"l":"Submodules","p":["cp.apple.finalcutpro.timeline.IndexTags.Type"]},{"l":"API Overview","p":["activate","all","analysisKeywords","chapters","completeTodos","doLayout","doShowAll","doShowAnalysisKeywords","doShowChapters","doShowCompleteTodos","doShowIncompleteTodos","doShowKeywords","doShowStandardMarkers","Fields- Variables which can only be accessed from an object returned by a constructor","incompleteTodos","keywords","list","Methods- API calls which can only be made on an object returned by a constructor","saveLayout","standardMarkers","type"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"activate","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.activate cp.ui.RadioButton","Type","Field","Description","The RadioButton that activates the 'Tags' section."]},{"l":"all","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.all cp.ui.RadioButton","Type","Field","Description","The RadioButton that will show \"All\" types of media."]},{"l":"analysisKeywords","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.analysisKeywords cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Auto-analysis keywords\" filter."]},{"l":"chapters","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.chapters cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Chapter markers\" filter."]},{"l":"completeTodos","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.completeTodos cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Complete todo marker\" filter."]},{"l":"incompleteTodos","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.incompleteTodos cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Incomplete todo marker\" filter."]},{"l":"keywords","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.keywords cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Keywords\" filter."]},{"l":"list","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.list cp.ui.OldTable","Type","Field","Description","The list of tags as a Table."]},{"l":"standardMarkers","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.standardMarkers cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Standard markers\" filter."]},{"l":"type","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.type cp.apple.finalcutpro.timeline.IndexTags.Type","Field","Description","The IndexTags.Type."]},{"l":"Methods"},{"l":"doLayout","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags:doLayout(layout) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will apply the layout provided, if possible.","Parameters","layout - the table containing the layout configuration. Usually created via the [#saveLayout] method.","Returns","The Statement.","Notes"]},{"l":"doShowAll","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags:doShowAll() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the tag index to \"All\" media types.","Parameters","None","Returns","Statement","Notes"]},{"l":"doShowAnalysisKeywords","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags:doShowAnalysisKeywords() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the tag index to \"Analysis Keywords\".","Parameters","None","Returns","Statement","Notes"]},{"l":"doShowChapters","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags:doShowChapters() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the tag index to \"Chapter\" markers.","Parameters","None","Returns","Statement","Notes"]},{"l":"doShowCompleteTodos","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags:doShowCompleteTodos() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the tag index to \"Complete Todos\".","Parameters","None","Returns","Statement","Notes"]},{"l":"doShowIncompleteTodos","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags:doShowIncompleteTodos() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the tag index to \"Incomplete Todo Markers\".","Parameters","None","Returns","Statement","Notes"]},{"l":"doShowKeywords","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags:doShowKeywords() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the tag index to \"Keywords\".","Parameters","None","Returns","Statement","Notes"]},{"l":"doShowStandardMarkers","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags:doShowStandardMarkers() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will set the tag index to \"Standard\" markers.","Parameters","None","Returns","Statement","Notes"]},{"l":"saveLayout","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags:saveLayout() - table","Type","Method","Description","Returns a table containing the layout configuration for this class.","Parameters","None","Returns","The layout configuration table.","Notes"]}],[{"i":"cpapplefinalcutprotimelineindextagstype","l":"cp.apple.finalcutpro.timeline.IndexTags.Type","p":["The collection of RadioButtons that allow filtering by Video/Audio/Title."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","analysisKeywords","chapters","completeTodos","incompleteTodos","keywords","standardMarkers","Methods- API calls which can only be made on an object returned by a constructor","matches"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"analysisKeywords","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.Type.analysisKeywords cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Auto-analysis keywords\" filter."]},{"l":"chapters","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.Type.chapters cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Chapter markers\" filter."]},{"l":"completeTodos","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.Type.completeTodos cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Complete todo marker\" filter."]},{"l":"incompleteTodos","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.Type.incompleteTodos cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Incomplete todo marker\" filter."]},{"l":"keywords","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.Type.keywords cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Keywords\" filter."]},{"l":"standardMarkers","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.Type.standardMarkers cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Show standard markers\" filter."]},{"l":"Methods"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.IndexTags.Type.matches(element) - boolean","Type","Method","Description","Checks if the element is the IndexTags.Type group.","Parameters","element - The axuielement to check.","Returns","true if it matches, otherwise false.","Notes"]}],[{"i":"cpapplefinalcutprotimelinerole","l":"cp.apple.finalcutpro.timeline.Role","p":["Extends Row","Represents a Role in the Timeline Index."]},{"l":"API Overview","p":["active","cellUI","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","doActivate","doDeactivate","Fields- Variables which can only be accessed from an object returned by a constructor","findTitle","Functions- API calls offered directly by the extension","is","matches","Methods- API calls which can only be made on an object returned by a constructor","Role","subroleRow","title","TITLE_KEY","TYPE"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"TITLE_KEY","p":["Signature","cp.apple.finalcutpro.timeline.Role.TITLE_KEY table","Type","Constant","Description","Contains the list of strings used for default roles.","Notes","CAPTIONS - \"Captions\" VIDEO - \"Video\" TITLES - \"Titles\" DIALOGUE - \"Dialogue\" MUSIC - \"Music\" EFFECTS - \"Effects\""]},{"l":"TYPE","p":["Signature","cp.apple.finalcutpro.timeline.Role.TYPE table","Constant","Description","Contains the set of role types.","Notes","VIDEO - A Video Role AUDIO - An Audio Role CAPTION - A Caption Role"]},{"l":"Functions"},{"l":"findTitle","p":["Signature","cp.apple.finalcutpro.timeline.Role.findTitle(title) - string","Type","Function","Description","Checks if FCPX is not currently running in English, it will check if the title is one of the default English Role titles, and return the current language instead. If it's not found, unmodified title is returned.","Parameters","title - A string to find.","Returns","A string","Notes"]},{"l":"is","p":["Signature","cp.apple.finalcutpro.timeline.Role.is(thing) - boolean","Type","Function","Description","Checks if the thing is a Role.","Parameters","thing- The thing to check","Returns","true if the thing is a Table instance.","Notes"]},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.Role.matches(element) - boolean","Type","Function","Description","Checks if the element is a Role.","Parameters","element - the axuielement to check.","Returns","true if it matches, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"Role","p":["Signature","cp.apple.finalcutpro.timeline.Role(parent, uiFinder, type)","Type","Constructor","Description","Creates the new Role. Typically this is not called directly, but rather by one of the subclass roles, such as AudioRole or VideoRole.","Parameters","parent - The parent Element uiFinder - The function or cp.prop that provides the axuielement. type - The [#TYPE] of Role.","Returns","The new Role instance.","Notes"]},{"l":"Fields"},{"l":"active","p":["Signature","cp.apple.finalcutpro.timeline.Role.active cp.ui.CheckBox","Type","Field","Description","The CheckBox that determines if the Role is active in the timeline."]},{"l":"cellUI","p":["Signature","cp.apple.finalcutpro.timeline.Role.cellUI cp.prop: axuielement; read-only","Type","Field","Description","The AXCell axuielement containing the Role details."]},{"l":"subroleRow","p":["Signature","cp.apple.finalcutpro.timeline.Role.subroleRow cp.prop: boolean; read-only","Type","Field","Description","This is true if the Role is an Subrole Row."]},{"l":"title","p":["Signature","cp.apple.finalcutpro.timeline.Role.title cp.ui.StaticText","Type","Field","Description","The StaticText containing the title."]},{"l":"Methods"},{"l":"doActivate","p":["Signature","cp.apple.finalcutpro.timeline.Role:doActivate() - cp.rx.go.Statement.md","Type","Method","Description","A Statement that will activate the current role, if possible.","Parameters","None","Returns","Statement","Notes"]},{"l":"doDeactivate","p":["Signature","cp.apple.finalcutpro.timeline.Role:doDeactivate() - cp.rx.go.Statement.md","Type","Method","Description","A Statement that will deactivate the current role, if possible.","Parameters","None","Returns","Statement","Notes"]},{"i":"type-1","l":"type","p":["Signature","cp.apple.finalcutpro.timeline.Role:type() - cp.apple.finalcut.timeline.Role.TYPE","Method","Description","Returns the type of Role this is.","Parameters","None","Returns","Role Type","Notes"]}],[{"i":"cpapplefinalcutprotimelinespeedpopover","l":"cp.apple.finalcutpro.timeline.SpeedPopover","p":["Extends Timeline","Represents the Speed Popover."]},{"l":"API Overview","p":["byDuration","byRate","Constructors- API calls which return an object, typically one that offers API methods","direction","doShow","duration","Fields- Variables which can only be accessed from an object returned by a constructor","forward","Functions- API calls offered directly by the extension","matches","Methods- API calls which can only be made on an object returned by a constructor","rate","reverse","ripple","setSpeed","SpeedPopover"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover.matches(element) - boolean","Type","Function","Description","Checks if the element is a \"Video\" Role.","Parameters","element - An element to check","Returns","A boolean","Notes"]},{"l":"Constructors"},{"l":"SpeedPopover","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover(parent, uiFinder)","Type","Constructor","Description","Creates a new instance with the specified parent and uiFinder.","Parameters","parent - the parent Element. uiFinder - a function or cp.prop containing the axuielement","Returns","The new SpeedPopover.","Notes"]},{"l":"Fields"},{"l":"byDuration","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:byDuration cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Duration\" radio button."]},{"l":"byRate","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:byRate cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Rate\" radio button."]},{"l":"direction","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:direction cp.ui.RadioGroup","Type","Field","Description","The RadioGroup for the \"Direction\" radio group."]},{"l":"duration","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:duration cp.ui.TextField","Type","Field","Description","The TextField for the \"Duration\" text field."]},{"l":"forward","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:forward cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Forward\" radio button."]},{"l":"rate","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:rate cp.ui.TextField","Type","Field","Description","The TextField for the \"Rate\" text field."]},{"l":"reverse","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:reverse cp.ui.RadioButton","Type","Field","Description","The RadioButton for the \"Reverse\" radio button."]},{"l":"ripple","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:ripple cp.ui.RadioGroup","Type","Field","Description","The CheckBox for the \"Ripple\" checkbox."]},{"l":"setSpeed","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:setSpeed cp.ui.RadioGroup","Type","Field","Description","The RadioGroup for the \"Set Speed\" radio group."]},{"l":"Methods"},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.timeline.SpeedPopover:doShow() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement that will show the Speed Popover.","Parameters","None","Returns","A Statement which will send true if it successful, or false otherwise.","Notes"]}],[{"i":"cpapplefinalcutprotimelinetimeline","l":"cp.apple.finalcutpro.timeline.Timeline","p":["Timeline Module. The timeline module provides an interface to the Final Cut Pro timeline. It delegates to the contents property, so any functions which can be called on the contents property can be called on the Timeline module."]},{"l":"API Overview","p":["app","Constructors- API calls which return an object, typically one that offers API methods","contents","doHide","doOpenProject","doShowOnPrimary","doShowOnSecondary","effects","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","hide","index","isFocused","isOnPrimary","isOnSecondary","isPlaying","isShowing","mainUI","matches","matchesMain","Methods- API calls which can only be made on an object returned by a constructor","rangeSelected","show","showOnPrimary","showOnSecondary","speedPopover","Timeline","title","toolbar","transitions"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false.","Notes","element should be an AXGroup, which contains an AXSplitGroup with an AXIdentifier of _NS:237(as of Final Cut Pro 10.4)"]},{"l":"matchesMain","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.matchesMain(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes","element should be an AXSplitGroup with an AXIdentifier of _NS:237(as of Final Cut Pro 10.4) Because the timeline contents is hard to detect, we look for the timeline toolbar instead."]},{"l":"Constructors"},{"l":"Timeline","p":["Signature","cp.apple.finalcutpro.timeline.Timeline(app) - Timeline","Type","Constructor","Description","Creates a new Timeline instance.","Parameters","app - The cp.apple.finalcutpro object.","Returns","A new Timeline object.","Notes"]},{"l":"Fields"},{"l":"contents","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.contents cp.apple.finalcutpro.timeline.Contents","Type","Field","Description","The Timeline Contents. The Content is the main body of the timeline,"]},{"l":"effects","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.effects cp.apple.finalcutpro.main.EffectsBrowser","Type","Field","Description","The (sometimes hidden) Effect Browser."]},{"l":"index","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.index cp.apple.finalcutpro.timeline.Index","Type","Field","Description","The Index."]},{"l":"isFocused","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.isFocused cp.prop: boolean","Type","Field","Description","Is the timeline focused?"]},{"l":"isOnPrimary","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.isOnPrimary cp.prop: boolean; read-only","Type","Field","Description","Checks if the Timeline is on the Primary Display."]},{"l":"isOnSecondary","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.isOnSecondary cp.prop: boolean; read-only","Type","Field","Description","Checks if the Timeline is on the Secondary Display."]},{"l":"isPlaying","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.isPlaying cp.prop: boolean","Type","Field","Description","Is the timeline playing?"]},{"l":"isShowing","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.isShowing cp.prop: boolean; read-only","Type","Field","Description","Checks if the Timeline is showing on either the Primary or Secondary display."]},{"l":"mainUI","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.mainUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the axuielement representing the 'timeline', or nil if not available."]},{"l":"rangeSelected","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.rangeSelected cp.prop: boolean; read-only","Type","Field","Description","Checks if a range is selected in the timeline."]},{"l":"speedPopover","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.speedPopover cp.apple.finalcutpro.timeline.SpeedPopover","Type","Field","Description","The SpeedPopover."]},{"l":"title","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.title cp.ui.StaticText","Type","Field","Description","The StaticText containing the title."]},{"l":"toolbar","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.toolbar Toolbar","Type","Field","Description","The bar at the top of the timeline."]},{"l":"transitions","p":["Signature","cp.apple.finalcutpro.timeline.Timeline.transitions cp.apple.finalcutpro.main.EffectsBrowser","Type","Field","Description","The (sometimes hidden) Transitions Browser."]},{"l":"Methods"},{"l":"app","p":["Signature","cp.apple.finalcutpro.timeline.Timeline:app() - App","Type","Method","Description","Returns the app instance representing Final Cut Pro.","Parameters","None","Returns","Notes"]},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.timeline.Timeline:doHide() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will hide the Timeline (regardless of whether it was on the Primary or Secondary window).","Parameters","None","Returns","A Statement ready to run.","Notes"]},{"l":"doOpenProject","p":["Signature","cp.apple.finalcutpro.timeline.Timeline:doOpenProject(title) - cp.rx.go.Statement","Type","Method","Description","Opens a project from the timeline navigation popups.","Parameters","title - The title of the project you want to open.","Returns","The Statement to run.","Notes","The title supports patterns, so you can do things like: require(cp.apple.finalcutpro).timeline:doOpenProject(Audio.*):Now()"]},{"l":"doShowOnPrimary","p":["Signature","cp.apple.finalcutpro.timeline.Timeline:doShowOnPrimary() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement that will ensure the timeline is in the primary window.","Parameters","timeout - The timeout period for the operation.","Returns","A Statement which will send true if it successful, or false otherwise.","Notes"]},{"l":"doShowOnSecondary","p":["Signature","cp.apple.finalcutpro.timeline.Timeline:doShowOnSecondary() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement that will ensure the timeline is in the secondary window.","Parameters","timeout - The timeout period for the operation.","Returns","A Statement which will send true if it successful, or false otherwise.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.timeline.Timeline:hide() - Timeline","Type","Method","Description","Hide's the Timeline (regardless of whether it was on the Primary or Secondary display).","Parameters","None","Returns","Timeline object.","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.timeline.Timeline:show() - Timeline","Type","Method","Description","Show's the Timeline on the Primary Display.","Parameters","None","Returns","Timeline object.","Notes"]},{"l":"showOnPrimary","p":["Signature","cp.apple.finalcutpro.timeline.Timeline:showOnPrimary() - Timeline","Type","Method","Description","Show's the Timeline on the Primary Display.","Parameters","None","Returns","Timeline object.","Notes"]},{"l":"showOnSecondary","p":["Signature","cp.apple.finalcutpro.timeline.Timeline:showOnSecondary() - Timeline","Type","Method","Description","Show's the Timeline on the Secondary Display.","Parameters","None","Returns","Timeline object.","Notes"]}],[{"i":"cpapplefinalcutprotimelinetoolbar","l":"cp.apple.finalcutpro.timeline.Toolbar","p":["Timeline Toolbar"]},{"l":"Submodules","p":["cp.apple.finalcutpro.timeline.Toolbar.Browser","cp.apple.finalcutpro.timeline.Toolbar.Clip"]},{"l":"API Overview","p":["appearance","appearanceToggle","appendClip","audioSkimming","back","browser","clip","clipMedia","Constructors- API calls which return an object, typically one that offers API methods","duration","effects","Fields- Variables which can only be accessed from an object returned by a constructor","forward","Functions- API calls offered directly by the extension","index","insertClip","matches","overwriteClip","skimming","snapping","solo","title","tool","Toolbar","transitions","trimAlignedEdges"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.matches(element) - boolean","Type","Function","Description","Checks if the element is a Toolbar.","Parameters","element - the axuielement to check.","Returns","true if it matches, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"Toolbar","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar(timeline) - cp.apple.finalcutpro.timeline.Toolbar","Type","Constructor","Description","Creates a new Toolbar with the specified parent.","Parameters","timeline - The Timeline.","Returns","The new Toolbar instance.","Notes"]},{"l":"Fields"},{"l":"appearance","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.appearance cp.apple.finalcutpro.timeline.Appearance","Type","Field","Description","The Appearance button/palette control."]},{"l":"appearanceToggle","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.appearanceToggle cp.ui.CheckBox","Type","Field","Description","A CheckBox field which will toggle the appearance popover."]},{"l":"appendClip","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.appendClip cp.ui.Button","Type","Field","Description","The Button which appends a clip from the Browser into the Timeline."]},{"l":"audioSkimming","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.audioSkimming cp.ui.CheckBox","Type","Field","Description","The CheckBox that indicates if audio is played while skimming."]},{"l":"back","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.back cp.ui.Button","Type","Field","Description","The Button for \"go back in timeline history\"."]},{"l":"browser","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.browser cp.apple.finalcutpro.timeline.Toolbar.Browser","Type","Field","Description","The Toolbar.Browser containing buttons that will toggle the Effects/Transitions browsers."]},{"l":"clip","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.clip cp.apple.finalcutpro.timeline.Toolbar.Clip","Type","Field","Description","The Clip group of checkbox items."]},{"l":"clipMedia","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.clipMedia cp.ui.MenuButton","Type","Field","Description","The MenuButton which allows the user to select the media type that will"]},{"l":"duration","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.duration cp.ui.StaticText","Type","Field","Description","The StaticText which displays the duration of the Timeline."]},{"l":"effects","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.effects cp.ui.RadioButton","Type","Field","Description","The RadioButton which toggles the 'Effects' browser visibility."]},{"l":"forward","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.forward cp.ui.Button","Type","Field","Description","The Button for \"go forward in timeline history\"."]},{"l":"index","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.index cp.ui.CheckBox","Type","Field","Description","The CheckBox which indicates if the Timeline Index is visible."]},{"l":"insertClip","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.insertClip cp.ui.Button","Type","Field","Description","The Button which inserts a clip from the Browser into the Timeline."]},{"l":"overwriteClip","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.overwriteClip cp.ui.Button","Type","Field","Description","The Button which overwrites a clip from the Browser into the Timeline."]},{"l":"skimming","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.skimming cp.ui.CheckBox","Type","Field","Description","The CheckBox that indicates if video/audio skimming is active."]},{"l":"snapping","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.snapping cp.ui.CheckBox","Type","Field","Description","The CheckBox that indicates if snapping is enabled."]},{"l":"solo","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.solo cp.ui.CheckBox","Type","Field","Description","The CheckBox that indicates if audio is soloed on the selected clip(s)."]},{"l":"title","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.title cp.ui.MenuButton","Type","Field","Description","The MenuButton which lists the current project and allows"]},{"l":"tool","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.tool cp.apple.finalcutpro.timeline.ToolPalette","Type","Field","Description","The ToolPalette, which allows the user to select the tool"]},{"l":"transitions","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.transitions cp.ui.RadioButton","Type","Field","Description","The RadioButton which toggles the 'Transitions' browser visibility."]},{"l":"trimAlignedEdges","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.trimAlignedEdges cp.ui.CheckBox","Type","Field","Description","The CheckBox which allows the user to trim the edges of the selected clips.","Notes","As of FCP 10.6.3, this is currently always hidden, and cannot have its value changed. Uncertain in exactly which version this turned up."]}],[{"i":"cpapplefinalcutprotimelinetoolbarbrowser","l":"cp.apple.finalcutpro.timeline.Toolbar.Browser","p":["A RadioGroup that contains buttons to show or hide the Effects and Transitions Browsers."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","effects","transitions"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"effects","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.Browser.effects cp.ui.RadioButton","Type","Field","Description","The RadioButton which toggles the 'Effects' browser visibility."]},{"l":"transitions","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.Browser.transitions cp.ui.RadioButton","Type","Field","Description","The RadioButton which toggles the 'Transitions' browser visibility."]}],[{"i":"cpapplefinalcutprotimelinetoolbarclip","l":"cp.apple.finalcutpro.timeline.Toolbar.Clip","p":["Provides access to clip options such as skimming, audio skimming, soloing and snap."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","audioSkimming","skimming","snapping","solo","trimAlignedEdges"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"audioSkimming","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.Clip.audioSkimming cp.ui.CheckBox","Type","Field","Description","The CheckBox that indicates if audio is played while skimming."]},{"l":"skimming","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.Clip.skimming cp.ui.CheckBox","Type","Field","Description","The CheckBox that indicates if video/audio skimming is active."]},{"l":"snapping","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.Clip.snapping cp.ui.CheckBox","Type","Field","Description","The CheckBox that indicates if snapping is enabled."]},{"l":"solo","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.Clip.solo cp.ui.CheckBox","Type","Field","Description","The CheckBox that indicates if audio is soloed on the selected clip(s)."]},{"l":"trimAlignedEdges","p":["Signature","cp.apple.finalcutpro.timeline.Toolbar.Clip.trimAlignedEdges cp.ui.CheckBox","Type","Field","Description","The CheckBox which allows the user to trim the edges of the selected clips.","Notes","As of FCP 10.6.3, this is currently always hidden, and cannot have its value changed. Uncertain in exactly which version this turned up."]}],[{"i":"cpapplefinalcutprotimelinetoolpalette","l":"cp.apple.finalcutpro.timeline.ToolPalette","p":["Represents the Tool Palette Menu Button in the Timeline.","Extends:","MenuButton"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","OPTIONS","Fields- Variables which can only be accessed from an object returned by a constructor","isBlade","isHand","isPosition","isRange","isSelect","isTrim","isZoom","value"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"OPTIONS","p":["Signature","cp.apple.finalcutpro.timeline.ToolPalette.OPTIONS table of tables","Type","Constant","Description","The options for the Tool Palette Menu Button.","Notes","Contains SELECT, TRIM, POSITION, RANGE, BLADE, ZOOM, and HAND. The CommandSetID value can be used with cp.apple.finalcutpro:doShortcut()."]},{"l":"Fields"},{"l":"isBlade","p":["Signature","cp.apple.finalcutpro.timeline.ToolPalette.isBlade cp.prop: boolean","Type","Field","Description","A cp.prop that indicates if the Tool Palette is set to the BLADE option."]},{"l":"isHand","p":["Signature","cp.apple.finalcutpro.timeline.ToolPalette.isHand cp.prop: boolean","Type","Field","Description","A cp.prop that indicates if the Tool Palette is set to the HAND option."]},{"l":"isPosition","p":["Signature","cp.apple.finalcutpro.timeline.ToolPalette.isPosition cp.prop: boolean","Type","Field","Description","A cp.prop that indicates if the Tool Palette is set to the POSITION option."]},{"l":"isRange","p":["Signature","cp.apple.finalcutpro.timeline.ToolPalette.isRange cp.prop: boolean","Type","Field","Description","A cp.prop that indicates if the Tool Palette is set to the RANGE option."]},{"l":"isSelect","p":["Signature","cp.apple.finalcutpro.timeline.ToolPalette.isSelect cp.prop: boolean","Type","Field","Description","A cp.prop that indicates if the Tool Palette is set to the SELECT option."]},{"l":"isTrim","p":["Signature","cp.apple.finalcutpro.timeline.ToolPalette.isTrim cp.prop: boolean","Type","Field","Description","A cp.prop that indicates if the Tool Palette is set to the TRIM option."]},{"l":"isZoom","p":["Signature","cp.apple.finalcutpro.timeline.ToolPalette.isZoom cp.prop: boolean","Type","Field","Description","A cp.prop that indicates if the Tool Palette is set to the ZOOM option."]},{"l":"value","p":["Signature","cp.apple.finalcutpro.timeline.ToolPalette.value cp.prop: ToolPalette.OPTIONS, live?, read-write","Type","Field","Description","A cp.prop containing the current OPTIONS value of the Tool Palette. May be nil if the toolbar is not available."]}],[{"i":"cpapplefinalcutprotimelinevideorole","l":"cp.apple.finalcutpro.timeline.VideoRole","p":["Extends Role","A Role representing Video clips."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","VideoRole","Fields- Variables which can only be accessed from an object returned by a constructor","subrolesExpanded"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.timeline.VideoRole.matches(element) - boolean","Type","Function","Description","Checks if the element is a \"Video\" Role.","Parameters","element - An element to check","Returns","A boolean","Notes"]},{"l":"Constructors"},{"l":"VideoRole","p":["Signature","cp.apple.finalcutpro.timeline.VideoRole(parent, uiFinder)","Type","Constructor","Description","Creates a new instance with the specified parent and uiFinder.","Parameters","parent - the parent Element. uiFinder - a function or cp.prop containing the axuielement","Returns","The new Row.","Notes"]},{"l":"Fields"},{"l":"subrolesExpanded","p":["Signature","cp.apple.finalcutpro.timeline.VideoRole.subrolesExpanded cp.ui.Button","Type","Field","Description","A Button that toggles whether the sub-captions are visible.","Notes","This Button is only visible when the pointer is hovering over the Role."]}],[{"i":"cpapplefinalcutprotimelinevideosubrole","l":"cp.apple.finalcutpro.timeline.VideoSubrole","p":["Extends Role","A Role representing Captions."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","VideoSubrole"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"VideoSubrole","p":["Signature","cp.apple.finalcutpro.timeline.VideoSubrole(parent, uiFinder)","Type","Constructor","Description","Creates a new instance with the specified parent and uiFinder.","Parameters","parent - the parent Element. uiFinder - a function or cp.prop containing the axuielement","Returns","The new Row.","Notes"]}],[{"i":"cpapplefinalcutproviewercontrolbar","l":"cp.apple.finalcutpro.viewer.ControlBar","p":["Represents the bottom \"control\" bar on a Viewer which contains the play/pause button, timecode, audio meters, etc."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","ControlBar","Fields- Variables which can only be accessed from an object returned by a constructor","timecode"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.viewer.ControlBar.matches(element) - boolean","Type","Function","Description","Checks if the element is a ControlBar instance.","Parameters","element - The axuielement to check.","Returns","true if it matches the pattern for a Viewer ControlBar.","Notes"]},{"l":"Constructors"},{"l":"ControlBar","p":["Signature","cp.apple.finalcutpro.viewer.ControlBar(viewer)","Type","Constructor","Description","Creates a new ControlBar instance.","Parameters","viewer - The Viewer instance.","Returns","The new ControlBar.","Notes"]},{"l":"Fields"},{"l":"timecode","p":["Signature","cp.apple.finalcutpro.viewer.ControlBar.timecode cp.prop: string; live","Type","Field","Description","The current timecode value, with the format \"hh:mm:ss:ff\". Setting also supports \"hh:mm:ss;ff\"."]}],[{"i":"cpapplefinalcutproviewerinfobar","l":"cp.apple.finalcutpro.viewer.InfoBar","p":["Represents the bar of information about the Viewer(format, title, viewing options).","See also ControlBar."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","InfoBar","Fields- Variables which can only be accessed from an object returned by a constructor","format","formatField","framerate","title","titleField","viewMenu","zoomwMenu"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.viewer.InfoBar.matches(element) - boolean","Type","Function","Description","Checks if the element is an InfoBar instance.","Parameters","element - The axuielement to check.","Returns","true if it matches the pattern for a Viewer InfoBar.","Notes"]},{"l":"Constructors"},{"l":"InfoBar","p":["Signature","cp.apple.finalcutpro.viewer.InfoBar(viewer)","Type","Constructor","Description","Creates a new InfoBar instance.","Parameters","viewer - The Viewer instance.","Returns","The new InfoBar.","Notes"]},{"l":"Fields"},{"l":"format","p":["Signature","cp.apple.finalcutpro.viewer.InfoBar.format cp.prop: number; read-only","Type","Field","Description","Provides the full format text value, or nil if not available."]},{"l":"formatField","p":["Signature","cp.apple.finalcutpro.viewer.InfoBar.formatField cp.ui.StaticText","Type","Field","Description","The \"Field\" value for the current clip, as a StaticText"]},{"l":"framerate","p":["Signature","cp.apple.finalcutpro.viewer.InfoBar.framerate cp.prop: number; read-only","Type","Field","Description","Provides the framerate as a number, or nil if not available."]},{"l":"title","p":["Signature","cp.apple.finalcutpro.viewer.InfoBar.title cp.prop: string; read-only; live?","Type","Field","Description","Provides the Title of the clip in the Viewer as a StaticText."]},{"l":"titleField","p":["Signature","cp.apple.finalcutpro.viewer.InfoBar.titleField cp.ui.StaticText","Type","Field","Description","Provides the Title of the clip in the Viewer as a StaticText."]},{"l":"viewMenu","p":["Signature","cp.apple.finalcutpro.viewer.InfoBar:viewMenu cp.ui.MenuButton","Type","Field","Description","The MenuButton for the \"View\" menu."]},{"l":"zoomwMenu","p":["Signature","cp.apple.finalcutpro.viewer.InfoBar:zoomwMenu cp.ui.MenuButton","Type","Field","Description","The MenuButton for the \"Zoom Level\" menu."]}],[{"i":"cpapplefinalcutproviewerviewer","l":"cp.apple.finalcutpro.viewer.Viewer","p":["Viewer Module."]},{"l":"API Overview","p":["app","BACKGROUND","betterQuality","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","contentsUI","controlBar","currentWindow","doHide","doPause","doPlay","doShowOnPrimary","doShowOnSecondary","Fields- Variables which can only be accessed from an object returned by a constructor","frame","framerate","Functions- API calls offered directly by the extension","getFormat","hasPlayerControls","hide","infoBar","isEventViewer","isMainViewer","isOnPrimary","isOnSecondary","matches","Methods- API calls which can only be made on an object returned by a constructor","notifier","PLAYBACK_MODE","playbackMode","playButton","showOnPrimary","showOnSecondary","timecode","timecodeField","title","usingProxies","videoImage","videoImageUI","Viewer"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"BACKGROUND","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.BACKGROUND - table","Type","Constant","Description","Lists the possible background values: BLACK, WHITE, CHECKERBOARD."]},{"l":"PLAYBACK_MODE","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.PLAYBACK_MODE - table","Type","Constant","Description","Lists the possible playback modes for the viewer: ORIGINAL_BETTER_QUALITY, ORIGINAL_BETTER_PERFORMANCE, PROXY_PREFERRED, PROXY_ONLY."]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"Viewer","p":["Signature","cp.apple.finalcutpro.viewer.Viewer(app, eventViewer) - Viewer","Type","Constructor","Description","Creates a new Viewer instance.","Parameters","app - The FCP application. eventViewer - If true, the viewer is the Event Viewer.","Returns","The new Viewer instance.","Notes"]},{"l":"Fields"},{"i":"background-1","l":"background","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.background - cp.prop: number, live?","Type","Field","Description","The viewer background mode. See Viewer.BACKGROUND for options.","Notes","sets the background for all viewers."]},{"l":"betterQuality","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | cp.apple.finalcutpro.viewer.Viewer.betterQuality cp.prop: boolean, read-only | | Type | Field | | Description | Checks if the viewer is using playing with better quality (true) or performance (false). | | **Notes** | ulliUse playbackMode` to change modes between original/proxy/quality/performance. |"]},{"l":"contentsUI","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.contentsUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Provides the axuielement for the media contents of the Viewer, or nil if not available."]},{"l":"controlBar","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.controlBar cp.apple.finalcutpro.viewer.ControlBar","Type","Field","Description","Provides the ControlBar for this Viewer."]},{"l":"frame","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.frame cp.prop: table; read-only","Type","Field","Description","Returns the current frame for the viewer, or nil if it is not available."]},{"l":"framerate","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.framerate cp.prop: number; read-only","Type","Field","Description","Provides the framerate as a number, or nil if not available."]},{"l":"getFormat","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.getFormat cp.prop: string; read-only","Type","Field","Description","Provides the format text value, or nil if none is available."]},{"l":"hasPlayerControls","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.hasPlayerControls cp.prop: boolean; read-only","Type","Field","Description","Checks if the viewer has Player Controls visible."]},{"l":"infoBar","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.infoBar cp.apple.finalcutpro.viewer.InfoBar","Type","Field","Description","Provides the InfoBar for this Viewer."]},{"l":"isEventViewer","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.isEventViewer cp.prop: boolean","Type","Field","Description","Returns true if this is the Event Viewer."]},{"l":"isMainViewer","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.isMainViewer cp.prop: boolean","Type","Field","Description","Returns true if this is the main Viewer."]},{"l":"isOnPrimary","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.isOnPrimary cp.prop: boolean; read-only","Type","Field","Description","Checks if the Viewer is showing on the Primary Window."]},{"l":"isOnSecondary","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.isOnSecondary cp.prop: boolean; read-only","Type","Field","Description","Checks if the Viewer is showing on the Secondary Window."]},{"l":"playbackMode","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.playbackMode - Viewer.PLAYBACK_MODE","Type","Field","Description","Reports and allows modification of the current playback mode."]},{"l":"playButton","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.playButton cp.ui.Button","Type","Field","Description","The Play Button object.","Parameters","None","Returns","A Button"]},{"l":"timecode","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.timecode cp.prop: string; live","Type","Field","Description","The current timecode value, with the format \"hh:mm:ss:ff\". Setting also supports \"hh:mm:ss;ff\"."]},{"l":"timecodeField","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.timecodeField cp.ui.StaticText","Type","Field","Description","The StaticText containing the timecode value."]},{"l":"title","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.title cp.ui.StaticText","Type","Field","Description","Provides the Title of the clip in the Viewer as a StaticText"]},{"l":"usingProxies","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.usingProxies cp.prop: boolean, read-only","Type","Field","Description","Indicates if the viewer is using Proxies ( true) or Optimized/Original media ( false).","Notes","Use playbackMode to change modes between original/proxy/quality/performance."]},{"l":"videoImage","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.videoImage cp.ui.Image","Type","Field","Description","The Image for the video content."]},{"l":"videoImageUI","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.videoImageUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Provides the axuielement for video image within the Viewer, or nil if not available."]},{"l":"Methods"},{"l":"app","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:app() - application","Type","Method","Description","Returns the application.","Parameters","None","Returns","The application.","Notes"]},{"l":"currentWindow","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:currentWindow() - PrimaryWindow | SecondaryWindow","Type","Method","Description","Gets the current window object.","Parameters","None","Returns","The PrimaryWindow or the SecondaryWindow.","Notes"]},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that hides the Viewer.","Parameters","None","Returns","The Statement, resolving to true, or sends an error.","Notes"]},{"l":"doPause","p":["Signature","cp.apple.finalcutpro.viewer.Viewer.doPause() - cp.rx.go.Statement","Type","Method","Description","Pause the Viewer.","Parameters","None","Returns","The Statement","Notes"]},{"l":"doPlay","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:doPlay() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will play the Viewer.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doShowOnPrimary","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:doShowOnPrimary() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the Viewer on the Primary display.","Parameters","None","Returns","The Statement, which resolves to true, or sends an error message.","Notes"]},{"l":"doShowOnSecondary","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:doShowOnSecondary() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the Viewer on the Secondary display.","Parameters","None","Returns","The Statement, resolving to true, or sending an error message.","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:hide() - self","Type","Method","Description","Hides the Viewer.","Parameters","None","Returns","Self","Notes"]},{"l":"notifier","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:notifier() - cp.ui.notifier","Type","Method","Description","Returns a notifier that is tracking the application UI element. It has already been started.","Parameters","None","Returns","The notifier.","Notes"]},{"l":"showOnPrimary","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:showOnPrimary() - self","Type","Method","Description","Shows the Viewer on the Primary display.","Parameters","None","Returns","Self","Notes"]},{"l":"showOnSecondary","p":["Signature","cp.apple.finalcutpro.viewer.Viewer:showOnSecondary() - self","Type","Method","Description","Shows the Viewer on the Seconary display.","Parameters","None","Returns","Self","Notes"]}],[{"i":"cpapplefinalcutproworkflowextensionscommandpostwindow","l":"cp.apple.finalcutpro.workflowextensions.CommandPostWindow","p":["The CommandPost Workflow Extension Window."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","CommandPostWindow","Fields- Variables which can only be accessed from an object returned by a constructor","reloadButton","Methods- API calls which can only be made on an object returned by a constructor","doHide","doShow","hasStalled","hide","reload","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.apple.finalcutpro.workflowextensions.CommandPostWindow.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"CommandPostWindow","p":["Signature","cp.apple.finalcutpro.workflowextensions.CommandPostWindow(app) - CommandPostWindow","Type","Constructor","Description","Creates a new CommandPost Workflow Extension window object.","Parameters","app - The cp.apple.finalcutpro object.","Returns","A new CommandPostWindow object.","Notes"]},{"l":"Fields"},{"l":"reloadButton","p":["Signature","cp.apple.finalcutpro.workflowextensions.CommandPostWindow.reloadButton cp.ui.Button","Type","Field","Description","The Reload Button within a stalled Workflow Extension."]},{"l":"Methods"},{"l":"doHide","p":["Signature","cp.apple.finalcutpro.workflowextensions.CommandPostWindow:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to hide the CommandPost Workflow Extension window.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doShow","p":["Signature","cp.apple.finalcutpro.workflowextensions.CommandPostWindow:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to show the CommandPost Workflow Extension window.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"hasStalled","p":["Signature","cp.apple.finalcutpro.workflowextensions.CommandPostWindow:hasStalled() - boolean","Type","Method","Description","Has the Workflow Extension stalled?","Parameters","None","Returns","true if stalled, otherwise false","Notes"]},{"l":"hide","p":["Signature","cp.apple.finalcutpro.workflowextensions.CommandPostWindow:hide() - CommandPostWindow","Type","Method","Description","Attempts to hide the CommandPost Workflow Extension window.","Parameters","None","Returns","The same CommandPostWindow, for chaining.","Notes"]},{"l":"reload","p":["Signature","cp.apple.finalcutpro.workflowextensions.CommandPostWindow:reload() - none","Type","Method","Description","Press the Reload Button.","Parameters","None","Returns","Notes"]},{"l":"show","p":["Signature","cp.apple.finalcutpro.workflowextensions.CommandPostWindow:show() - CommandPostWindow","Type","Method","Description","Attempts to show the CommandPost Workflow Extension window.","Parameters","None","Returns","The same CommandPostWindow, for chaining.","Notes","If the Workflow Extension has stalled, this method will restart it."]}],[{"i":"cpapplemotion","l":"cp.apple.motion","p":["Represents the Motion application, providing functions that allow different tasks to be accomplished."]},{"l":"Submodules","p":["cp.apple.motion.app"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","BUNDLE_ID","Methods- API calls which can only be made on an object returned by a constructor","bundleID","doRestart","hide","launch","notifier","path","quit","show"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"BUNDLE_ID","p":["Signature","cp.apple.motion.BUNDLE_ID","Type","Constant","Description","Compressor's Bundle ID"]},{"l":"Methods"},{"l":"bundleID","p":["Signature","cp.apple.motion:bundleID() - string","Type","Method","Description","Returns the Compressor Bundle ID","Parameters","None","Returns","A string of the Compressor Bundle ID","Notes"]},{"l":"doRestart","p":["Signature","cp.apple.motion:doRestart() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will restart the application.","Parameters","None","Returns","true if the application was running and restarted successfully.","Notes"]},{"l":"hide","p":["Signature","cp.apple.motion:hide() - self","Type","Method","Description","Hides Compressor","Parameters","None","Returns","The motion instance.","Notes"]},{"l":"launch","p":["Signature","cp.apple.motion:launch([waitSeconds]) - self","Type","Method","Description","Launches Compressor, or brings it to the front if it was already running.","Parameters","waitSeconds - if provided, we will wait for up to the specified seconds for the launch to complete.","Returns","true if Compressor was either launched or focused, otherwise false (e.g. if Compressor doesn't exist)","Notes"]},{"l":"notifier","p":["Signature","cp.apple.motion:notifier() - cp.ui.notifier","Type","Method","Description","Returns a notifier that is tracking the application UI element. It has already been started.","Parameters","None","Returns","The notifier.","Notes"]},{"l":"path","p":["Signature","cp.apple.motion:path() - string or nil","Type","Method","Description","Path to Compressor Application","Parameters","None","Returns","A string containing Compressor's filesystem path, or nil if the bundle identifier could not be located","Notes"]},{"l":"quit","p":["Signature","cp.apple.motion:quit([waitSeconds]) - self","Type","Method","Description","Quits Compressor","Parameters","waitSeconds - if provided, we will wait for the specified time for the quit to complete before returning.","Returns","The motion instance.","Notes"]},{"l":"show","p":["Signature","cp.apple.motion:show() - self","Type","Method","Description","Activate Compressor","Parameters","None","Returns","The motion instance.","Notes"]}],[{"i":"cpapplemotionapp","l":"cp.apple.motion.app","p":["The cp.app for Apple's Motion."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpbattery","l":"cp.battery","p":["Provides access to various properties of the battery. Each of these properties is a cp.prop, so it can be watched for changes. For example:","This will print\"Now using AC Power\" or \"Now using Battery Power\" whenever the power supply changes.","By default the watcher initialises in a \"stopped\" state, and must be started for the cp.prop watchers to trigger."]},{"l":"API Overview","p":["_watcher","amperage","capacity","Constants- Useful values which cannot be changed","cycles","designCapacity","Functions- API calls offered directly by the extension","health","healthCondition","isCharged","isCharging","isFinishingCharge","maxCapacity","otherBatteryInfo","percentage","psuSerial","start","stop","timeRemaining","timeToFullCharge","Variables- Configurable values","voltage","watts"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"amperage","p":["Signature","cp.battery.amperage cp.prop: number; read-only","Type","Constant","Description","Returns the amount of current flowing through the battery, in mAh.","Notes","A number containing the amount of current flowing through the battery. The value may be:** Less than zero if the battery is being discharged (i.e. the computer is running on battery power)** Zero if the battery is being neither charged nor discharded** Greater than zero if the bettery is being charged"]},{"l":"capacity","p":["Signature","cp.battery.capacity cp.prop: number; read-only","Type","Constant","Description","Returns the current capacity of the battery in mAh.","Notes","This is the measure of how charged the battery is, vs the value of cp.battery.maxCapacity()."]},{"l":"cycles","p":["Signature","cp.battery.cycles cp.prop: number; read-only","Type","Constant","Description","Returns the number of discharge cycles of the battery.","Notes","One cycle is a full discharge of the battery, followed by a full charge. This may also be an aggregate of many smaller discharge-then-charge cycles (e.g. 10 iterations of discharging the battery from 100% to 90% and then charging back to 100% each time, is considered to be one cycle)."]},{"l":"designCapacity","p":["Signature","cp.battery.designCapacity cp.prop: number; read-only","Type","Constant","Description","Returns the design capacity of the battery in mAh."]},{"l":"health","p":["Signature","cp.battery.health cp.prop: string; read-only","Type","Constant","Description","Returns the health status of the battery; either \"Good\", \"Fair\" or \"Poor\","]},{"l":"healthCondition","p":["Signature","cp.battery.healthCondition cp.prop: string; read-only","Type","Constant","Description","Returns the health condition status of the battery:"]},{"l":"isCharged","p":["Signature","cp.battery.isCharged cp.prop: boolean; read-only","Type","Constant","Description","Checks if the battery is fully charged."]},{"l":"isCharging","p":["Signature","cp.battery.isCharging cp.prop: boolean; read-only","Type","Constant","Description","Checks if the battery is currently charging."]},{"l":"isFinishingCharge","p":["Signature","cp.battery.isFinishingCharge cp.prop: boolean | string; read-only","Type","Constant","Description","Checks if the battery is trickle charging;"]},{"l":"maxCapacity","p":["Signature","cp.battery.maxCapacity cp.prop; number; read-only","Type","Constant","Description","Returns the maximum capacity of the battery in mAh.","Notes","This may exceed the value of cp.battery.designCapacity() due to small variations in the production chemistry vs the design."]},{"l":"otherBatteryInfo","p":["Signature","cp.battery.otherBatteryInfo cp.prop: table | nil; read-only","Type","Constant","Description","Returns information about non-PSU batteries (e.g. bluetooth accessories). If none are found, nil is returned."]},{"l":"percentage","p":["Signature","cp.battery.percentage cp.prop; string; read-only","Type","Constant","Description","Returns the current source of power; either AC Power, Battery Power or Off Line."]},{"l":"psuSerial","p":["Signature","cp.battery.psuSerial cp.prop: number; read-only","Type","Constant","Description","Returns the serial number of the attached power supply, or 0 if not present."]},{"l":"timeRemaining","p":["Signature","cp.battery.timeRemaining cp.prop: number; read-only","Type","Constant","Description","The amount of battery life remaining, in minuges.","Notes","The return value may be:** Greater than zero to indicate the number of minutes remaining.** -1 if the remaining batttery life is being calculated.** -2 if there is unlimited time remaining (i.e. the system is on AC power)."]},{"l":"timeToFullCharge","p":["Signature","cp.battery.timeToFullCharge cp.prop; number; read-only","Type","Constant","Description","Returns the time remaining for the battery to be fully charged, in minutes, or `-`` if still being calculated."]},{"l":"voltage","p":["Signature","cp.battery.voltage cp.prop: number; read-only","Type","Constant","Description","Returns the current voltage of the battery in mV."]},{"l":"watts","p":["Signature","cp.battery.watts cp.prop: number; read-only","Type","Constant","Description","Returns the power entering or leaving the battery, in W."]},{"l":"Variables"},{"l":"_watcher","p":["Signature","cp.battery._watcher - hs.battery.watcher object","Type","Variable","Description","The battery watcher."]},{"l":"Functions"},{"l":"start","p":["Signature","cp.battery.start() - none","Type","Function","Description","Starts the battery watcher.","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","cp.battery.stop() - none","Type","Function","Description","Stops the battery watcher.","Parameters","None","Returns","Notes"]}],[{"i":"cpbench","l":"cp.bench","p":["Benchmarking Tool.","TIME FUNCTION EXECUTION: Use this to benchmark sections of code. Wrap them in a function inside this function call. Eg:","local _ bench = require(\"cp.bench\")","local foo = _ bench(\"Foo Test\", function() return do.somethingHere() end) --_ bench","You can also benchmark all (or some) of the functions on a table in one hit by using the 'bench.press' function:","local mod = -- All functions are benchmarked mod = _ bench.press(\"mymod\", mod)-- Just the \"foo\" and \"bar\" functions are benchmarked. mod = _ bench.press(\"mymod\", mod, {\"foo\", \"bar\"})"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpblackmagicresolve","l":"cp.blackmagic.resolve","p":["The Blackmagic DaVinci Resolve Extension."]},{"l":"Submodules","p":["cp.blackmagic.resolve.app","cp.blackmagic.resolve.color","cp.blackmagic.resolve.main"]},{"l":"API Overview","p":["bundleID","Color","Constants- Useful values which cannot be changed","currentLocale","doHide","doLaunch","doQuit","doRestart","doShow","EARLIEST_SUPPORTED_VERSION","Fields- Variables which can only be accessed from an object returned by a constructor","getPath","hide","isFrontmost","isInstalled","isModalDialogOpen","isRunning","isShowing","isSupported","isUnsupported","launch","Methods- API calls which can only be made on an object returned by a constructor","notifier","preferences","primaryWindow","quit","show","supportedLocales","UI","version","versionString","windowsUI"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"EARLIEST_SUPPORTED_VERSION","p":["Signature","cp.blackmagic.resolve.EARLIEST_SUPPORTED_VERSION semver","Type","Constant","Description","The earliest version this API supports."]},{"l":"preferences","p":["Signature","cp.blackmagic.resolve.preferences cp.app.prefs","Type","Constant","Description","The cp.app.prefs for DaVinci Resolve."]},{"l":"Fields"},{"l":"Color","p":["Signature","cp.blackmagic.resolve.Color cp.blackmagic.resolve.Color","Type","Field","Description","The Color Workspace.","Parameters","None","Returns","the Browser"]},{"l":"currentLocale","p":["Signature","cp.blackmagic.resolve.currentLocale cp.prop: cp.i18n.localeID; live","Type","Field","Description","Gets and sets the current locale for FCPX."]},{"l":"isFrontmost","p":["Signature","cp.blackmagic.resolve:isFrontmost cp.prop: boolean; read-only; live","Type","Field","Description","Is DaVinci Resolve Frontmost?"]},{"l":"isInstalled","p":["Signature","cp.blackmagic.resolve.isInstalled cp.prop: boolean; read-only","Type","Field","Description","Is any version of DaVinci Resolve Installed?"]},{"l":"isModalDialogOpen","p":["Signature","cp.blackmagic.resolve:isModalDialogOpen cp.prop: boolean; read-only","Type","Field","Description","Is a modal dialog currently open?"]},{"l":"isRunning","p":["Signature","cp.blackmagic.resolve.isRunning cp.prop: boolean; read-only","Type","Field","Description","Is DaVinci Resolve Running?"]},{"l":"isShowing","p":["Signature","cp.blackmagic.resolve.isShowing cp.prop: boolean; read-only; live","Type","Field","Description","Is Final Cut visible on screen?"]},{"l":"isSupported","p":["Signature","cp.blackmagic.resolve.isSupported cp.prop: boolean; read-only; live","Type","Field","Description","Is a supported version of DaVinci Resolve installed?","Notes","Supported version refers to any version of DaVinci Resolve equal or higher to cp.blackmagic.resolve.EARLIEST_SUPPORTED_VERSION"]},{"l":"isUnsupported","p":["Signature","cp.blackmagic.resolve.isUnsupported cp.prop: boolean; read-only","Type","Field","Description","Is an unsupported version of DaVinci Resolve installed?","Notes","Supported version refers to any version of DaVinci Resolve equal or higher to cp.blackmagic.resolve.EARLIEST_SUPPORTED_VERSION"]},{"l":"primaryWindow","p":["Signature","cp.blackmagic.resolve.primaryWindow PrimaryWindow","Type","Field","Description","The DaVinci Resolve Primary Window."]},{"l":"supportedLocales","p":["Signature","cp.blackmagic.resolve.supportedLocales cp.prop: table of cp.i18n.localeID; read-only","Type","Field","Description","The list of supported locales for this version of FCPX."]},{"l":"UI","p":["Signature","cp.blackmagic.resolve.UI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","The DaVinci Resolve axuielement, if available."]},{"l":"version","p":["Signature","cp.blackmagic.resolve.version cp.prop: semver; read-only; live","Type","Field","Description","The version number of the running or default installation of FCPX as a semver."]},{"l":"versionString","p":["Signature","cp.blackmagic.resolve.versionString cp.prop: string; read-only; live","Type","Field","Description","The version number of the running or default installation of FCPX as a string."]},{"l":"windowsUI","p":["Signature","cp.blackmagic.resolve.windowsUI cp.prop: hs.axuielement; read-only; live","Type","Field","Description","Returns the UI containing the list of windows in the app."]},{"l":"Methods"},{"l":"bundleID","p":["Signature","cp.blackmagic.resolve:bundleID() - string","Type","Method","Description","Returns the Bundle ID for the app.","Parameters","None","Returns","The Bundle ID","Notes"]},{"l":"doHide","p":["Signature","cp.blackmagic.resolve:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that will hide the FCP.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"doLaunch","p":["Signature","cp.blackmagic.resolve:doLaunch() - cp.rx.go.Statement","Type","Method","Description","A Statement that will launch, or focus it if already running FCP.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"doQuit","p":["Signature","cp.blackmagic.resolve:doQuit() - cp.rx.go.Statement","Type","Method","Description","A Statement that will quit FCP.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"doRestart","p":["Signature","cp.blackmagic.resolve:doRestart() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will restart DaVinci Resolve, if it is running. If not, nothing happens.","Parameters","None.","Returns","The FCP instance.","Notes"]},{"l":"doShow","p":["Signature","cp.blackmagic.resolve:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that will show FCP on-screen.","Parameters","None","Returns","The Statement to execute.","Notes"]},{"l":"getPath","p":["Signature","cp.blackmagic.resolve:getPath() - string or nil","Type","Method","Description","Path to DaVinci Resolve Application","Parameters","None","Returns","A string containing DaVinci Resolve's filesystem path, or nil if DaVinci Resolve's path could not be determined.","Notes"]},{"l":"hide","p":["Signature","cp.blackmagic.resolve:hide() - self","Type","Method","Description","Hides DaVinci Resolve","Parameters","None","Returns","The FCP instance.","Notes"]},{"l":"launch","p":["Signature","cp.blackmagic.resolve:launch([waitSeconds], [path]) - self","Type","Method","Description","Launches DaVinci Resolve, or brings it to the front if it was already running.","Parameters","waitSeconds- If provided, the number of seconds to wait until the launch completes. If nil, it will return immediately. path- An optional full path to an application without an extension (i.e /Applications/DaVinci Resolve 10.3.4). This allows you to load previous versions of the application.","Returns","The FCP instance.","Notes"]},{"l":"notifier","p":["Signature","cp.blackmagic.resolve:notifier() - cp.ui.notifier","Type","Method","Description","Returns a notifier that is tracking the application UI element. It has already been started.","Parameters","None","Returns","The notifier.","Notes"]},{"l":"quit","p":["Signature","cp.blackmagic.resolve:quit([waitSeconds]) - self","Type","Method","Description","Quits DaVinci Resolve, if it's running.","Parameters","waitSeconds - The number of seconds to wait for the quit to complete.","Returns","The FCP instance.","Notes"]},{"l":"show","p":["Signature","cp.blackmagic.resolve:show() - cp.blackmagic.resolve","Type","Method","Description","Activate DaVinci Resolve, if it is running.","Parameters","None","Returns","The FCP instance.","Notes"]}],[{"i":"cpblackmagicresolveapp","l":"cp.blackmagic.resolve.app","p":["The cp.app for Blackmagic DaVinci Resolve."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","app","Fields- Variables which can only be accessed from an object returned by a constructor","application"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"app","p":["Signature","cp.blackmagic.resolve.app cp.app","Type","Constant","Description","The cp.app for DaVinci Resolve."]},{"l":"Fields"},{"l":"application","p":["Signature","cp.blackmagic.resolve.application cp.prop: hs.application; read-only","Type","Field","Description","Returns the running hs.application for DaVinci Resolve, or nil if it's not running."]}],[{"i":"cpblackmagicresolvecolorcolor","l":"cp.blackmagic.resolve.color.Color","p":["Color Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","Color"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Color","p":["Signature","cp.blackmagic.resolve.color.Color(app) - Color","Type","Constructor","Description","Creates a new Color instance.","Parameters","app - The Final Cut Pro app instance.","Returns","The new Color.","Notes"]}],[{"i":"cpblackmagicresolvecolortracker","l":"cp.blackmagic.resolve.color.Tracker","p":["Tracker"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpblackmagicresolvemainprimarywindow","l":"cp.blackmagic.resolve.main.PrimaryWindow","p":["Primary Window Module."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","PrimaryWindow","Fields- Variables which can only be accessed from an object returned by a constructor","doShow","resolve","Methods- API calls which can only be made on an object returned by a constructor","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.blackmagic.resolve.main.PrimaryWindow.matches(w) - boolean","Type","Function","Description","Checks to see if a window matches the PrimaryWindow requirements","Parameters","w - The window to check","Returns","true if matched otherwise false","Notes"]},{"l":"Constructors"},{"l":"PrimaryWindow","p":["Signature","cp.blackmagic.resolve.main.PrimaryWindow(app) - PrimaryWindow object","Type","Constructor","Description","Creates a new PrimaryWindow.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"doShow","p":["Signature","cp.blackmagic.resolve.main.PrimaryWindow:doShow() - PrimaryWindow","Type","Field","Description","A Statement that attempts to show the Primary Window.","Returns","The Statement, which resolves as either true or sends an error."]},{"l":"resolve","p":["Signature","cp.blackmagic.resolve.main.PrimaryWindow.resolve - cp.blackmagic.resolve","Type","Field","Description","The main Resolve application root."]},{"l":"Methods"},{"l":"show","p":["Signature","cp.blackmagic.resolve.main.PrimaryWindow:show() - PrimaryWindow","Type","Method","Description","Shows the Primary Window.","Parameters","None","Returns","The PrimaryWindow instance.","Notes"]}],[{"i":"cpbuffer","l":"cp.buffer","p":["Internal byte buffer type. Allows additional chunks of bytes to be concatonated relatively inexpensively, as well as peek and pop operations to preview/read in chunks of bytes.","For example:"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","clone","fromHex","new","Methods- API calls which can only be made on an object returned by a constructor","drop","len","peek","pop","push"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.buffer.is(value) - boolean","Type","Function","Description","Checks if the value is an instance of a buffer.","Parameters","value- The value to check.","Returns","true if the value is an instance of buffer.","Notes"]},{"l":"Constructors"},{"l":"clone","p":["Signature","cp.buffer.clone(otherBuffer) - buffer","Type","Constructor","Description","Creates a copy of the provided buffer. It shares data with the original, but can be modified via pop/ push, etc without affecting the original.","Parameters","otherBuffer - The buffer to clone.","Returns","the clone of the original buffer.","Notes"]},{"l":"fromHex","p":["Signature","cp.buffer.fromHex(hexString[, spacer]) - cp.buffer","Type","Constructor","Description","Creates a buffer from the bytes represented by the provided hex string.","Parameters","hexString - The string of hex characters to convert. spacer - The character to ignore as a spacer. Defaults to space (\" \").","Returns","The new buffer.","Notes","Examples: buffer.fromHex(ABCDE) buffer.fromHex(12-34-56, -)"]},{"l":"new","p":["Signature","cp.buffer.new(...) - buffer","Type","Constructor","Description","Creates a new byte string buffer containing the provided string chunks.","Parameters","... - The new string chunks to add to the end of the buffer.","Returns","The new buffer.","Notes"]},{"l":"Methods"},{"l":"drop","p":["Signature","cp.buffer:drop(len) - boolean","Type","Method","Description","Drops the specified len of bytes from the start of the buffer.","Parameters","len - The number of bytes to read.","Returns","true if successful, or false if there are not enough bytes available for the requested len.","Notes","Equivalent to, but more efficient than pop if you don't need the bytes being dropped."]},{"l":"len","p":["Signature","cp.buffer:len() - number","Type","Method","Description","Returns the total number of bytes in the buffer.","Parameters","None","Returns","The number of bytes in the buffer.","Notes"]},{"l":"peek","p":["Signature","cp.buffer:peek(len) - string | nil","Type","Method","Description","Reads the specified len of bytes from the start of the buffer without removing them.","Parameters","len - The number of bytes to read.","Returns","The string of bytes or nil if there are not enough bytes available for the requested len.","Notes"]},{"l":"pop","p":["Signature","cp.buffer:pop(len) - string | nil","Type","Method","Description","Reads the specified len of bytes from the start of the buffer, removing them.","Parameters","len - The number of bytes to read.","Returns","The string of bytes or nil if there are not enough bytes available for the requested len.","Notes"]},{"l":"push","p":["Signature","cp.buffer:push(...) - buffer","Type","Method","Description","Pushes the provided string s onto the end of the buffer.","Parameters","... - The new string chunks to add to the end of the buffer.","Returns","The same buffer instance.","Notes","Throws an error if more than cp.buffer.maxChunks are currently in the buffer when a new value is pushed."]}],[{"i":"cpchoices","l":"cp.choices","p":["Choices Module."]},{"l":"Submodules","p":["cp.choices.builder"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","new","Methods- API calls which can only be made on an object returned by a constructor","getChoices"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"new","p":["Signature","cp.choices.new(type) - choices","Type","Function","Description","Creates a new cp.choices instance for the specified type.","Parameters","type- The unique ID for the type.","Returns","The new choices instance.","Notes"]},{"l":"Methods"},{"l":"getChoices","p":["Signature","cp.choices:getChoices() - array of choices","Type","Method","Description","Returns the array of choices that have been added to this instance.","Parameters","None","Returns","The array of choices.","Notes"]},{"i":"new-1","l":"new","p":["Signature","cp.choices:new(choiceType) - choices.builder","Type","Method","Description","Adds a new choice with the specified.","Parameters","text- The text title for the choice.","Returns","The choice builder, added to the choices set.","Notes","Additional settings can be set using the returned builder instance. E.g.:/lilichoices:add(Do Something)/lili :subText(Cool Actions)/lili :params({/lili one = foo,/lili two = bar,/lili })/lili"]}],[{"i":"cpchoicesbuilder","l":"cp.choices.builder","p":["Choices Builder Module."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","new","Methods- API calls which can only be made on an object returned by a constructor","id","image","params","subText","text"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"new","p":["Signature","cp.choices.builder.new(choiceType) - builder","Type","Function","Description","Creates a new choice builder instance.","Parameters","choice- The choice instance to configure.","Returns","The new choice builder.","Notes"]},{"l":"Methods"},{"l":"id","p":["Signature","cp.choices.builder:id(value) - builder","Type","Method","Description","Sets the ID of the choice.","Parameters","value- The ID.","Returns","The choice builder.","Notes"]},{"l":"image","p":["Signature","cp.choices.builder:image(value) - builder","Type","Method","Description","Sets the image of the choice.","Parameters","value - A hs.image image object that will be displayed next to the choice","Returns","The choice builder.","Notes"]},{"l":"params","p":["Signature","cp.choices.builder:params(value) - builder","Type","Method","Description","Specifies a table of parameter values for the choice. These values need to be simple - text, numbers, booleans, or tables.","Parameters","value- The table of parameters.","Returns","The choice builder, added to the choices set.","Notes"]},{"l":"subText","p":["Signature","cp.choices.builder:subText(value) - builder","Type","Method","Description","Specifies the subText value for the choice being built.","Parameters","value- The subText title for the choice.","Returns","The choice builder.","Notes"]},{"l":"text","p":["Signature","cp.choices.builder:text(value) - builder","Type","Method","Description","Specifies the text value for the choice being built.","Parameters","value- The text title for the choice.","Returns","The choice builder, added to the choices set.","Notes"]}],[{"i":"cpcollectlazylist","l":"cp.collect.LazyList","p":["A LazyList is a list that is lazily evaluated. It will dynamically create items on demand, and may cache the results if configured to do so.","It works by requiring two functions which provide information about the length and item at a given index. The len function is called when the length of the list is required, and the get function is called when an item is required.","This allows the list to be created lazily, and the items to be created on demand. That is useful for lists that are expensive to create, but are only required when they are actually used."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","cp.collect.LazyList.new(lenFn, getFn[, options]) - cp.collect.LazyList","Type","Constructor","Description","Creates a new LazyList with the provided lenFn and getFn, and a table with options.","Parameters","lenFn - A function that returns the length of the list. getFn - A function that returns the item at the specified index. options - A table of options.","Returns","A new LazyList instance.","Notes","The lenFn function has the signature function() - number. The getFn function has the signature function(index) - item. The options table has the following keys: cached- A boolean indicating whether the list should cache the results of the getFn. Defaults to false."]}],[{"i":"cpcollectlist","l":"cp.collect.List","p":["Lists are similar tables which can contain nil items without shortening the length. They also have a few additional methods to assist with managing the size."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","of","sized","Methods- API calls which can only be made on an object returned by a constructor","size","trim"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"of","p":["Signature","cp.collect.List.of(...) - cp.collect.List","Type","Constructor","Description","Creates a new List with the specified items init.","Parameters","... - The items to put in the list, in order.","Returns","The new List instance.","Notes"]},{"l":"sized","p":["Signature","cp.collect.List.sized([size[, defaultValue]]) - cp.collect.List","Type","Constructor","Description","Creates a new List with the specified size.","Parameters","size - The size of the list. Defaults to 0. defaultValue - If specified, all items in the list will be initialised to the default value.","Returns","The new List instance.","Notes"]},{"l":"Methods"},{"l":"size","p":["Signature","cp.collect.List:size([newSize]) - number","Type","Method","Description","Returns and/or sets the current size of the list.","Parameters","newSize - if provided, sets the new size of the list. Any values contained above the new size are set to nil.","Returns","The size of the list.","Notes"]},{"l":"trim","p":["Signature","cp.collect.List:trim([minSize]) - cp.collect.List","Type","Method","Description","Trims the current List to only contain trailing values that are not nil.","Parameters","minSize - If provided, the minimum size to trim down to. Defaults to 0.","Returns","The same List instance.","Notes"]}],[{"i":"cpcollectqueue","l":"cp.collect.Queue","p":["A \"double-ended queue\" implementation. This allows pushing and popping values to the left or right side of the queue. This can be used for classic 'stack' and 'queue' uses - for a stack, push and pop from one end, for a queue, push and pop from opposite ends.","# will always return the size of the queue.","The left-most item in the queue wil always be at index 1, the right-most will be at index #.","You can iterate via ipairs, but as with all tables, the queue contains any nil values, it will stop at that point. To iterate the whole queue, you need to use the # operator. Eg:"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","contains","len","peekLeft","peekRight","popLeft","popRight","pushLeft","pushRight","removeItem","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"contains","p":["Signature","cp.collect.Queue.contains(queue, item) - boolean","Type","Function","Description","Checks if the queue contains the specified item.","Parameters","queue - The queue to check. item - The item to check for.","Returns","true if the item is in the queue.","Notes"]},{"l":"len","p":["Signature","cp.collect.Queue.len(queue) - anything","Type","Function","Description","Returns the number of items in the queue.","Parameters","queue - The queue to check.","Returns","The total number of items.","Notes"]},{"l":"peekLeft","p":["Signature","cp.collect.Queue.peekLeft(queue) - anything","Type","Function","Description","Returns the left-most value from the queue without removig it.","Parameters","queue - The queue to peek into.","Returns","The left-most value of the Queue.","Notes"]},{"l":"peekRight","p":["Signature","cp.collect.Queue.peekRight(queue) - anything","Type","Function","Description","Returns the right-most value from the queue without removig it.","Parameters","queue - The queue to peek into.","Returns","The right-most value of the Queue.","Notes"]},{"l":"popLeft","p":["Signature","cp.collect.Queue.popLeft(queue) - anything","Type","Function","Description","Removes the left-most value from the queue and returns it.","Parameters","queue - The queue to pop from.","Returns","The left-most value of the Queue.","Notes"]},{"l":"popRight","p":["Signature","cp.collect.Queue.popRight(queue) - anything","Type","Function","Description","Removes the right-most value from the queue and returns it.","Parameters","queue - The queue to pop from.","Returns","The right-most value of the Queue.","Notes"]},{"l":"pushLeft","p":["Signature","cp.collect.Queue.pushLeft(queue, ...) - cp.collect.Queue","Type","Function","Description","Pushes the values to the left side of the queue.","Parameters","queue - The queue to push into.... - The values to push.","Returns","The same Queue instance.","Notes","If there are multiple values, then they will be added from right to left. That is to say, the left-most of the new values will be the left-most value of the queue."]},{"l":"pushRight","p":["Signature","cp.collect.Queue.pushRight(queue, ...) - cp.collect.Queue","Type","Function","Description","Pushes the values to the right side of the queue.","Parameters","queue - The queue to push into.... - The values to push.","Returns","The same Queue instance.","Notes","If there are multiple values, then they will be added from left to right. That is to say, the right-most of the new values will be the right-most value of the queue."]},{"l":"removeItem","p":["Signature","cp.collect.Queue.removeItem(queue, item) - number","Type","Function","Description","Attempts to remove the specified item from the queue.","Parameters","queue - The queue to modify. item - The item to remove, if present.","Returns","The index of the item, or nil if not found.","Notes","This call may be very expensive if there are many items in the queue after the specified item. If the item was found, the index it was found at is returned. If not, nil is returned."]},{"i":"removeitem-1","l":"removeItem","p":["Signature","cp.collect.Queue:removeItem(item) - number","Type","Function","Description","Attempts to remove the specified item from the queue.","Parameters","item - The item to remove, if present.","Returns","The index of the item, or nil if not found.","Notes","This call may be very expensive if there are many items in the queue after the specified item. If the item was found, the index it was found at is returned. If not, nil is returned."]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.collect.Queue.new([...]) - cp.collect.Queue","Type","Constructor","Description","Creates a new Queue.","Parameters","... - The optional list of values to add to the right of the queue.","Returns","the new Queue.","Notes","You can also create a new queue by calling Queue(..) directly."]},{"l":"Methods"},{"i":"contains-1","l":"contains","p":["Signature","cp.collect.Queue:contains(item) - boolean","Type","Method","Description","Checks if the queue contains the specified item.","Parameters","item - The item to check for.","Returns","true if the item is in the queue.","Notes"]},{"i":"len-1","l":"len","p":["Signature","cp.collect.Queue:len(queue) - anything","Type","Method","Description","Returns the number of items in the queue.","Parameters","queue - The queue to check.","Returns","The total number of items.","Notes"]},{"i":"peekleft-1","l":"peekLeft","p":["Signature","cp.collect.Queue:peekLeft() - anything","Type","Method","Description","Returns the left-most value from the queue without removig it.","Parameters","None","Returns","The left-most value of the Queue.","Notes"]},{"i":"peekright-1","l":"peekRight","p":["Signature","cp.collect.Queue:peekRight() - anything","Type","Method","Description","Returns the right-most value from the queue without removig it.","Parameters","queue - The queue to peek into.","Returns","The right-most value of the Queue.","Notes"]},{"i":"popleft-1","l":"popLeft","p":["Signature","cp.collect.Queue:popLeft() - anything","Type","Method","Description","Removes the left-most value from the queue and returns it.","Parameters","None","Returns","The left-most value of the Queue.","Notes"]},{"i":"popright-1","l":"popRight","p":["Signature","cp.collect.Queue:popRight() - anything","Type","Method","Description","Removes the right-most value from the queue and returns it.","Parameters","None","Returns","The right-most value of the Queue.","Notes"]},{"i":"pushleft-1","l":"pushLeft","p":["Signature","cp.collect.Queue:pushLeft(...) - cp.collect.Queue","Type","Method","Description","Pushes the values to the left side of the queue.","Parameters","... - The values to push.","Returns","The same Queue instance.","Notes","If there are multiple values, then they will be added from right to left. That is to say, the left-most of the new values will be the left-most value of the queue."]},{"i":"pushright-1","l":"pushRight","p":["Signature","cp.collect.Queue:pushRight(...) - cp.collect.Queue","Type","Method","Description","Pushes the values to the right side of the queue.","Parameters","... - The values to push.","Returns","The same Queue instance.","Notes","If there are multiple values, then they will be added from left to right. That is to say, the right-most of the new values will be the right-most value of the queue."]}],[{"i":"cpcollectset","l":"cp.collect.Set","p":["An implementation of a logical set, which contains a single unique reference of each item in it. For example:","You can combine sets in a couple of ways. For example, a union:","...or an intersection:","As indicated above, you can use operators for common set operations. Specifically:","union(A ⋃ B): a | b or a + b","intersection(A ∩ B): a b","complement(A c): -a","difference(A - B): a - b","symetric difference(A ⊕ B) a ~ b","Keep in mind that Lua's operator precedence may be different to that of standard set operations, so it's probably best to group operations in brackets if you combine more than one in a single statement. For example:"]},{"l":"API Overview","p":["clone","complement","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","difference","everything","fromList","fromMap","Functions- API calls offered directly by the extension","has","intersection","is","isComplement","Methods- API calls which can only be made on an object returned by a constructor","nothing","of","size","symetricDifference","union"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"everything","p":["Signature","cp.collect.Set.everything cp.collect.Set","Type","Constant","Description","A Set which contains the whole universe."]},{"l":"nothing","p":["Signature","cp.collect.Set.nothing cp.collect.Set","Type","Constant","Description","An empty Set."]},{"l":"Functions"},{"l":"complement","p":["Signature","cp.collect.Set.complement(set) - cp.collect.Set","Type","Function","Description","Returns a Set which is the complement of the provided set.","Parameters","set - The Set to complement.","Returns","The new Set.","Notes"]},{"l":"difference","p":["Signature","cp.collect.Set.difference(left, right) - cp.collect.Set","Type","Function","Description","Returns a new Set which is the set of values in left that are not in right.","Parameters","left - The left Set. right - The right Set.","Returns","The new Set.","Notes"]},{"l":"has","p":["Signature","cp.collect.Set.has(set, value) - boolean","Type","Function","Description","Checks if the set has the specified value.","Parameters","set - The Set to check. value - The value to check for.","Returns","true if the value is contained in the Set.","Notes"]},{"l":"intersection","p":["Signature","cp.collect.Set.intersection(left, right) - cp.collect.Set","Type","Function","Description","Parameters","left - The left Set right - The right Set.","Returns","A new Set which contains an intersection left and right.","Notes"]},{"l":"is","p":["Signature","cp.collect.Set.is(thing) - boolean","Type","Function","Description","Checks if the thing is a Set.","Parameters","thing - The thing to check.","Returns","true if it is a Set.","Notes"]},{"l":"isComplement","p":["Signature","cp.collect.Set.isComplement(set) - boolean","Type","Function","Description","Checks if the set is a complement set.","Parameters","set - The set to check.","Returns","true if the set is a complement.","Notes"]},{"l":"size","p":["Signature","cp.collect.Set.size(set) - number","Type","Function","Description","Returns the size of the set.","Parameters","set - The set to find the size of.","Returns","the number of values in the set, or the number of values removed from a complement set.","Notes","If the set is empty, 0 is returned. If the set is a complement, this will return a negative number indicating how many values have been removed from the universal set of all things. If the set is a complement of an empty set, nil is returned to indicate the size is infinite."]},{"l":"symetricDifference","p":["Signature","cp.collect.Set.symetricDifference(left, right) - cp.collect.Set","Type","Function","Description","Performs a symetric difference of keys with a value of true in the left and right table into a new table. The resulting table will contain items that only occur in the left or right set, but not both.","Parameters","left - The left Set. right - The right Set.","Returns","The new Set.","Notes"]},{"l":"union","p":["Signature","cp.collect.Set.union(left, right) - cp.collect.Set","Type","Function","Description","Returns a new Set which is a union of the left and right","Parameters","left - The left Set. right - The right Set.","Returns","A new Set which contains a union of the left and right Set s.","Notes"]},{"l":"Constructors"},{"l":"clone","p":["Signature","cp.collect.Set.clone(set) - cp.collect.Set","Type","Constructor","Description","Creates a new Set which is a clone of the provided Set.","Parameters","set - The set to clone.","Returns","The new Set instance.","Notes"]},{"l":"fromList","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | cp.collect.Set.fromList(list) - cp.collect.Set | | Type | Constructor | | Description | Creates a new Set instance, containing the unique items in the table collected as a list from 1 to n. Any duplicate items will only occur in the Set once. | | Parameters | list - The table that contains items as a list to add to the Set. E.g. {foo, bar}/li/ul | | **Returns** | ulliThe new Set`. | | Notes | |"]},{"l":"fromMap","p":["Signature","cp.collect.Set.fromMap(map) - cp.collect.Set","Type","Constructor","Description","Creates a new Set instance, containing the items in the provided table who's key value is true. Keys with values other than true will be ignored.","Parameters","map - The table that contains key/value items to add to the set. E.g. {foo = true, bar = true}","Returns","The new Set.","Notes"]},{"l":"of","p":["Signature","cp.collect.Set.of(...) - cp.collect.Set","Type","Constructor","Description","Creates a new Set instance, containing the items in the parameter list.","Parameters","The set items.","Returns","The new Set instance.","Notes"]},{"l":"Methods"},{"i":"complement-1","l":"complement","p":["Signature","cp.collect.Set:complement() - cp.collect.Set","Type","Method","Description","Returns a new Set which is the complement of the current Set.","Parameters","None","Returns","The new Set.","Notes","You can also use the - or ~ prefix operators. E.g. -a or ~a."]},{"i":"difference-1","l":"difference","p":["Signature","cp.collect.Set:difference(right) - cp.collect.Set","Type","Method","Description","Returns a new Set which is the set of values in this Set that are not in right.","Parameters","right - The right Set.","Returns","The new Set.","Notes","You can also use the - operator. E.g. a - b."]},{"i":"has-1","l":"has","p":["Signature","cp.collect.Set:has(value) - boolean","Type","Method","Description","Checks if this set has the specified value.","Parameters","value - The value to check for.","Returns","true if the Set contains the value.","Notes","You can also check for specific values via mySet['key'] or mySet.key."]},{"i":"intersection-1","l":"intersection","p":["Signature","cp.collect.Set:intersection(...) - cp.collect.Set","Type","Method","Description","Creates a new Set which is an intersection of the current values plus other Set s passed in.","Parameters","... - The list of Set s to create an intersection from.","Returns","The new Set.","Notes","You can also use the operator. E.g. a b."]},{"i":"iscomplement-1","l":"isComplement","p":["Signature","cp.collect.Set:isComplement() - boolean","Type","Method","Description","Checks if the set is a complement set.","Parameters","None","Returns","true if the set is a complement.","Notes"]},{"i":"size-1","l":"size","p":["Signature","cp.collect.Set:size() - number","Type","Method","Description","Returns the size of the Set. If the set is a complement, this will return a negative number indicating how many values have been removed from the universal set of all things.","Parameters","None","Returns","the number of values in the set, or the number of values removed from a complement set.","Notes","If the set is empty, 0 is returned. If the set is a complement, this will return a negative number indicating how many values have been removed from the universal set of all things. If the set is a complement of an empty set, nil is returned to indicate the size is infinite."]},{"i":"symetricdifference-1","l":"symetricDifference","p":["Signature","cp.collect.Set:symetricDifference(right) - cp.collect.Set","Type","Method","Description","Performs a symetric difference of keys with a value of true in the left and right table into a new table. The resulting table will contain items that only occur in the left or right set, but not both.","Parameters","right - The right Set.","Returns","The new Set.","Notes","You can also use the ~ operator. E.g. a ~ b."]},{"i":"union-1","l":"union","p":["Signature","cp.collect.Set:union(...) - cp.collect.Set","Type","Method","Description","Creates a new set which is a union of the current set plus other Set s passed in.","Parameters","... - The list of Set s to create a union from.","Returns","The new Set which is a union.","Notes","You can also use the \\| or + operator. E.g. a \\| b or a + b."]}],[{"i":"cpcommands","l":"cp.commands","p":["Commands Module."]},{"l":"Submodules","p":["cp.commands.command","cp.commands.englishKeyCodes","cp.commands.shortcut"]},{"l":"API Overview","p":["activate","add","clear","Constants- Useful values which cannot be changed","DEFAULT_EXTENSION","deleteShortcuts","disable","enable","enabled","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","get","getAll","getShortcutsPath","group","groupIds","groups","id","isEditable","loadFromFile","loadShortcuts","Methods- API calls which can only be made on an object returned by a constructor","new","saveShortcuts","saveToFile","watch"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_EXTENSION","p":["Signature","cp.commands.DEFAULT_EXTENSION - string","Type","Constant","Description","The menubar position priority."]},{"l":"Functions"},{"l":"getShortcutsPath","p":["Signature","cp.commands.getShortcutsPath(name) - string","Type","Function","Description","Returns the path to the named shortcut set.","Parameters","None","Returns","A string","Notes"]},{"l":"group","p":["Signature","cp.commands.group(id) - cp.command or nil","Type","Function","Description","Creates a collection of commands. These commands can be enabled or disabled as a group.","Parameters","id- The ID to retrieve","Returns","cp.commands- The command group with the specified ID, or nil if none exists.","Notes"]},{"l":"groupIds","p":["Signature","cp.commands.groupIds() - table","Type","Function","Description","Returns an array of IDs of command groups which have been created.","Parameters","None","Returns","table- The array of group IDs.","Notes"]},{"l":"groups","p":["Signature","cp.commands.groups(id) - table of cp.commands","Type","Function","Description","Returns a table with the set of commands.","Parameters","id- The ID to retrieve","Returns","cp.commands- The command group with the specified ID, or nil if none exists.","Notes"]},{"l":"loadFromFile","p":["Signature","cp.commands.loadFromFile(name) - boolean","Type","Function","Description","Loads a shortcut set from the standard location with the specified name.","Parameters","name - The name of the shortcut set. E.g. \"My Custom Shortcuts\"","Returns","true if the file was found and loaded successfully.","Notes"]},{"l":"new","p":["Signature","cp.commands.new(id) - cp.commands","Type","Function","Description","Creates a collection of commands. These commands can be enabled or disabled as a group.","Parameters","id- The unique ID for this command group.","Returns","cp.commands - The command group that was created.","Notes"]},{"l":"saveToFile","p":["Signature","cp.commands.saveToFile(name) - boolean","Type","Function","Description","Saves the current shortcuts for all groups to a file in the standard location with the provided name.","Parameters","name - The name of the command set. E.g. \"My Custom Commands\"","Returns","true if the shortcuts were saved successfully.","Notes"]},{"l":"Fields"},{"l":"enabled","p":["Signature","cp.commands.enabled cp.prop: boolean","Type","Field","Description","If enabled, the commands in the group will be active as well."]},{"l":"isEditable","p":["Signature","cp.commands.isEditable cp.prop: boolean","Type","Field","Description","If set to false, the command group is not user-editable."]},{"l":"Methods"},{"l":"activate","p":["Signature","cp.commands:activate(successFn, failureFn) - nil","Type","Method","Description","Will trigger an 'activate' event, and then execute either the successFn or failureFn if the command group is not enabled within 5 seconds.","Parameters","successFn - the function to call if successfully activated. failureFn - the function to call if not activated after 5 seconds.","Returns","Nothing.","Notes"]},{"l":"add","p":["Signature","cp.commands:add(commandId) - cp.commands.command","Type","Method","Description","Adds a new command with the specified ID to this group. Additional configuration should be applied to the returned command instance. Eg:","Parameters","commandId- The unique ID for the new command.","Returns","The new cp.commands.command instance.","Notes","For example: lua/lilimyCommands:add(fooBar):groupedBy(foo):whenActivated(function() ... end)`/lili"]},{"l":"clear","p":["Signature","cp.commands:clear() - cp.commands","Type","Method","Description","Clears all commands and their shortcuts.","Parameters","None","Returns","The command group instance.","Notes"]},{"l":"deleteShortcuts","p":["Signature","cp.commands:deleteShortcuts() - cp.commands","Type","Method","Description","Clears all shortcuts associated with commands in this command group.","Parameters","None","Returns","The command group instance.","Notes"]},{"l":"disable","p":["Signature","cp.commands:disable() - cp.commands","Type","Method","Description","Disables the command group.","Parameters","None","Returns","The command group instance.","Notes"]},{"l":"enable","p":["Signature","cp.commands:enable() - cp.commands","Type","Method","Description","Enables the command group.","Parameters","None","Returns","The command group instance.","Notes"]},{"l":"get","p":["Signature","cp.commands:get(commandId) - cp.commands.command","Type","Method","Description","Returns the command with the specified ID, or nil if none exists.","Parameters","commandId- The command ID to retrieve.","Returns","The cp.commands.command, or nil.","Notes"]},{"l":"getAll","p":["Signature","cp.commands:getAll() - table of cp.commands.command","Type","Method","Description","Returns the table of commands, with the key being the ID and the value being the command instance.","Parameters","None","Returns","A table","Notes","For example: lua/lilifor id,cmd in pairs(myCommands:getAll()) do/lili .../liliend/lili"]},{"l":"id","p":["Signature","cp.commands:id() - string","Type","Method","Description","Returns the unique ID of the command group.","Parameters","None","Returns","The command group ID string.","Notes"]},{"l":"loadShortcuts","p":["Signature","cp.commands:loadShortcuts(data) - nil","Type","Method","Description","Loads the shortcut details in the data table and applies them to the commands in this group. The data should probably come from the saveShortcuts method.","Parameters","data - The data table containing shortcuts.","Returns","Nothing","Notes"]},{"l":"saveShortcuts","p":["Signature","cp.commands:saveShortcuts() - table","Type","Method","Description","Returns a table that is approprate to be saved to file that contains the shortuct for all contained cp.commands.command instances.","Parameters","None","Returns","The table of shortcuts for commands.","Notes"]},{"l":"watch","p":["Signature","cp.commands:watch(events) - cp.commands","Type","Method","Description","Adds an event watcher to the command group.","Parameters","events - The table of events to watch for (see Notes).","Returns","The command group instance.","Notes","The table can have properties with the following functions, which will be called for the specific event:** add(command): Called after the provided cp.commands.command instance has been added.** activate() Called when the command group is activated.** enable(): Called when the command group is enabled.** disable(): Called when the command group is disabled."]}],[{"i":"cpcommandscommand","l":"cp.commands.command","p":["Commands Module."]},{"l":"API Overview","p":["action","activated","activatedBy","addShortcut","deleteShortcuts","disable","enable","Fields- Variables which can only be accessed from an object returned by a constructor","getAction","getFirstShortcut","getGroup","getImage","getShortcuts","getSubtitle","getTitle","groupedBy","hasAction","id","image","isActive","isEnabled","Methods- API calls which can only be made on an object returned by a constructor","new","parent","pressed","released","repeated","setShortcuts","subtitled","titled","whenActivated","whenPressed","whenReleased","whenRepeated"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"isActive","p":["Signature","cp.commands.command.isActive cp.prop: boolean; read-only","Type","Field","Description","Indicates if the command is active. To be active, both the command and the group it belongs to must be enabled."]},{"l":"isEnabled","p":["Signature","cp.commands.command.isEnabled cp.prop: boolean","Type","Field","Description","If set to true, the command is enabled."]},{"l":"Methods"},{"l":"action","p":["Signature","cp.commands.command:action(getFn, setFn) - command","Type","Method","Description","Sets the action get and set callbacks for a specific command.","Parameters","getFn - The function that gets the action. setFn - The function that sets the action.","Returns","command - The command that was created.","Notes","The getFn function should have no arguments. The setFn function can have two optional arguments: clear- A boolean that defines whether or not the value should be cleared. completionFn- An optional completion function callback."]},{"l":"activated","p":["Signature","cp.commands.command:activated(repeats) - command","Type","Method","Description","Executes the 'pressed', then 'repeated', then 'released' functions, if present.","Parameters","repeats- the number of times to repeat the 'repeated' function. Defaults to 1.","Returns","the last 'truthy' result (non-nil/false).","Notes"]},{"l":"activatedBy","p":["Signature","cp.commands.command:activatedBy([modifiers,] [keyCode]) - command/modifier","Type","Method","Description","Specifies that the command is activated by pressing a key combination.","Parameters","modifiers- (optional) The table containing names of required modifiers. keyCode- (optional) The key code that will activate the command, with no modifiers.","Returns","command if a keyCode was provided, or modifier if not.","Notes","This method can be called multiple times, and multiple key combinations will be registered for the command. To remove existing key combinations, call the command:deleteShortcuts() method.** If the keyCode is provided, no modifiers need to be pressed to activate and the command is returned.** If the modifiers and keyCode are provided, the combination is created and the command is returned.** If no keyCode is provided, a modifier is returned, which lets you specify keyboard combinations. For example:/lililocal global = commands.collection(global)/lililocal pressA = global:add(commandA):activatedBy(a)/lililocal pressShiftA = global:add(commandShiftA):activatedBy({shift}, a)/lililocal pressCmdA = global:add(commandCmdA):activatedBy():command(a)/lililocal pressOptCmdA = global:add(commandOptCmdA):activatedBy():option():command(a)/liliglobal:enable()/lili"]},{"l":"addShortcut","p":["Signature","cp.commands.command:addShortcut(newShortcut) - command","Type","Method","Description","Adds the specified shortcut to the command. If the command is enabled, the shortcut will also be enabled.","Parameters","newShortcut- the shortcut to add.","Returns","self","Notes"]},{"l":"deleteShortcuts","p":["Signature","cp.commands.command:deleteShortcuts() - command","Type","Method","Description","Sets the function that will be called when the command key combo is pressed.","Parameters","None","Returns","command - The current command","Notes"]},{"l":"disable","p":["Signature","cp.commands.command:disable() - cp.commands.command","Type","Method","Description","Disables the command.","Parameters","None","Returns","The cp.commands.command instance.","Notes"]},{"l":"enable","p":["Signature","cp.commands.command:enable() - cp.commands.command","Type","Method","Description","Enables the command.","Parameters","None","Returns","The cp.commands.command instance.","Notes"]},{"l":"getAction","p":["Signature","cp.commands.command:getAction() - function, function","Type","Method","Description","Gets the action get and set callbacks for a specific command.","Parameters","None","Returns","getFn - The function that gets the action. setFn - The function that sets the action.","Notes"]},{"l":"getFirstShortcut","p":["Signature","cp.commands.command:getFirstShortcut() - command","Type","Method","Description","Returns the first shortcut, or nil if none have been registered.","Parameters","None","Returns","The first shortcut, or nil.","Notes"]},{"l":"getGroup","p":["Signature","cp.commands.command:getGroup() - string","Type","Method","Description","Returns the group ID for the command.","Parameters","None","Returns","The group ID.","Notes"]},{"l":"getImage","p":["Signature","cp.commands.command:getImage() - hs.image object","Type","Method","Description","Returns the current image.","Parameters","None","Returns","A hs.image object or nil if not is specified.","Notes"]},{"l":"getShortcuts","p":["Signature","cp.commands.command:getShortcuts() - command","Type","Method","Description","Returns the set of shortcuts assigned to this command.","Parameters","None","Returns","The associated shortcuts.","Notes"]},{"l":"getSubtitle","p":["Signature","cp.commands.command:getSubtitle() - string","Type","Method","Description","Returns the current subtitle, based on either the set subtitle, or the \"_ subtitle\" value in the I18N files. If nothing is available, it will return nil.","Parameters","None","Returns","The subtitle value or nil.","Notes"]},{"l":"getTitle","p":["Signature","cp.commands.command:getTitle() - string","Type","Method","Description","Returns the command title in the current language, if availalbe. If not, the ID is returned.","Parameters","None","Returns","The human-readable command title.","Notes"]},{"l":"groupedBy","p":["Signature","cp.commands.command:groupedBy(group) - cp.commands.command","Type","Method","Description","Specifies that the command is grouped by a specific value.","Parameters","group- The group ID.","Returns","The cp.commands.command instance.","Notes","This is different to the command group/parent value."]},{"l":"hasAction","p":["Signature","cp.commands.command:hasAction() - boolean","Type","Method","Description","Gets whether or not any action callbacks have been assigned.","Parameters","None","Returns","true if action callbacks have been assigned, otherwise false.","Notes"]},{"l":"id","p":["Signature","cp.commands.command:id() - string","Type","Method","Description","Returns the ID for this command.","Parameters","None","Returns","The ID.","Notes"]},{"l":"image","p":["Signature","cp.commands.command:image(img) - cp.commands.command","Type","Method","Description","Sets the specified image and returns the cp.commands.command instance.","Parameters","img- The hs.image to use.","Returns","The cp.commands.command instance.","Notes"]},{"l":"new","p":["Signature","cp.commands.command.new(id, parent) - command","Type","Method","Description","Creates a new command, which can have keyboard shortcuts assigned to it.","Parameters","id- the unique identifier for the command. E.g. 'cpCustomCommand' parent- The parent group.","Returns","command - The command that was created.","Notes"]},{"l":"parent","p":["Signature","cp.commands.command:parent() - cp.commands","Type","Method","Description","Returns the parent command group.","Parameters","None","Returns","The parent cp.commands.","Notes"]},{"l":"pressed","p":["Signature","cp.commands.command:pressed() - command","Type","Method","Description","Executes the 'pressed' function, if present.","Parameters","None","Returns","the result of the function, or nil if none is present.","Notes"]},{"l":"released","p":["Signature","cp.commands.command:released() - command","Type","Method","Description","Executes the 'released' function, if present.","Parameters","None","Returns","the result of the function, or nil if none is present.","Notes"]},{"l":"repeated","p":["Signature","cp.commands.command:repeated(repeats) - command","Type","Method","Description","Executes the 'repeated' function, if present.","Parameters","repeats- the number of times to repeat. Defaults to 1.","Returns","the last result.","Notes"]},{"l":"setShortcuts","p":["Signature","cp.commands.command:setShortcuts(shortcuts) - command","Type","Method","Description","Deletes any existing shortcuts and applies the new set of shortcuts in the table.","Parameters","shortcuts - The set of cp.commands.shortcuts to apply to this command.","Returns","The cp.commands.command instance.","Notes"]},{"l":"subtitled","p":["Signature","cp.commands.command:subtitled(subtitle) - cp.commands.command","Type","Method","Description","Sets the specified subtitle and returns the cp.commands.command instance.","Parameters","subtitle- The new subtitle.","Returns","The cp.commands.command instance.","Notes","By default, it will look up the ID_subtitle value. Anything set here will override it in all langauges."]},{"l":"titled","p":["Signature","cp.commands.command:titled(title) - command","Type","Method","Description","Applies the provided human-readable title to the command.","Parameters","id - the unique identifier for the command (i.e. 'CPCustomCommand').","Returns","command - The command that was created.","Notes"]},{"l":"whenActivated","p":["Signature","cp.commands.command:whenActivated(activatedFn) - command","Type","Method","Description","Sets the function that will be called when the command is activated.","Parameters","activatedFn- the function to call when activated.","Returns","command - The current command","Notes","This is a shortcut for calling whenPressed(...)"]},{"l":"whenPressed","p":["Signature","cp.commands.command:whenPressed(pressedFn) - command","Type","Method","Description","Sets the function that will be called when the command key combo is pressed.","Parameters","pressedFn- the function to call when pressed.","Returns","command - The current command","Notes"]},{"l":"whenReleased","p":["Signature","cp.commands.command:whenReleased(releasedFn) - command","Type","Method","Description","Sets the function that will be called when the command key combo is released.","Parameters","releasedFn- the function to call when released.","Returns","command - The current command","Notes"]},{"l":"whenRepeated","p":["Signature","cp.commands.command:whenRepeated(repeatedFn) - command","Type","Method","Description","Sets the function that will be called when the command key combo is repeated.","Parameters","repeatedFn- the function to call when repeated.","Returns","command - The current command","Notes"]}],[{"i":"cpcommandsenglishkeycodes","l":"cp.commands.englishKeyCodes","p":["Returns a table of all the English Key Codes."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpcommandsshortcut","l":"cp.commands.shortcut","p":["Shortcut Commands"]},{"l":"Submodules","p":["cp.commands.shortcut.builder"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","build","new","Fields- Variables which can only be accessed from an object returned by a constructor","isEnabled","Methods- API calls which can only be made on an object returned by a constructor","bind","delete","disable","enable","getKeyCode","getModifiers","trigger","unbind"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"build","p":["Signature","cp.commands.shortcut.build(receiverFn) - cp.commands.shortcut.builder","Type","Function","Description","Creates a new shortcut builder.","Parameters","receiverFn- (optional) a function which will get passed the shortcut when the build is complete.","Returns","shortcut.builder which can be used to create the shortcut.","Notes","If provided, the receiver function will be called when the shortcut has been configured, and passed the new shortcut. The result of that function will be returned to the next stage. If no receiverFn is provided, the shortcut will be returned directly. The builder is additive. You can create a complex keystroke combo by chaining the shortcut names together. For example: local myShortcut = shortcut.build():cmd():alt(x) Alternately, provide a receiver function and it will get passed the shortcut instead: shortcut.build(function(shortcut) self._myShortcut = shortcut end):cmd():alt(x)"]},{"l":"new","p":["Signature","cp.commands.shortcut.new(modifiers, keyCode) - shortcut","Type","Function","Description","Creates a new keyboard shortcut, attached to the specified hs.commands.command","Parameters","modifiers- The modifiers. keyCode- The key code.","Returns","shortcut - The shortcut that was created.","Notes"]},{"l":"Fields"},{"l":"isEnabled","p":["Signature","cp.commands.shortcut:isEnabled cp.prop: boolean","Type","Field","Description","If true, the shortcut is enabled."]},{"l":"Methods"},{"l":"bind","p":["Signature","cp.commands.shortcut:bind(pressedFn, releasedFn, repeatedFn) - shortcut","Type","Method","Description","This function binds the shortcut to a hotkey, with the specified callback functions for pressedFn, releasedFn and repeatedFn.","Parameters","pressedFn- (optional) If present, this is called when the shortcut combo is pressed. releasedFn- (optional) If present, this is called when the shortcut combo is released. repeatedFn- (optional) If present, this is called when the shortcut combo is repeated.","Returns","self","Notes","If the shortcut is enabled, the hotkey will also be enabled at this point."]},{"l":"delete","p":["Signature","cp.commands.shortcut:delete() - shortcut","Type","Method","Description","Deletes a shortcut.","Parameters","None","Returns","self","Notes"]},{"l":"disable","p":["Signature","cp.commands.shortcut:disable() - shortcut","Type","Method","Description","This disables the shortcut. If a hotkey has been bound, it will be disabled also.","Parameters","None","Returns","self","Notes"]},{"l":"enable","p":["Signature","cp.commands.shortcut:enable() - shortcut","Type","Method","Description","This enables the shortcut. If a hotkey has been bound, it will be enabled also.","Parameters","None","Returns","self","Notes"]},{"l":"getKeyCode","p":["Signature","cp.commands.shortcut:getKeyCode() - string","Type","Method","Description","Returns a string containing the keycode of the shortcut.","Parameters","None","Returns","string containing the keycode of the shortcut.","Notes"]},{"l":"getModifiers","p":["Signature","cp.commands.shortcut:getModifiers() - table","Type","Method","Description","Returns a table containing the modifiers for a shortcut.","Parameters","None","Returns","table containing the modifiers of the shortcut.","Notes"]},{"l":"trigger","p":["Signature","cp.commands.shortcut:trigger([app]) - shortcut","Type","Method","Description","This will trigger the keystroke specified in the shortcut.","Parameters","app - An optional hs.application object.","Returns","self","Notes"]},{"l":"unbind","p":["Signature","cp.commands.shortcut:unbind() - shortcut","Type","Method","Description","Unbinds a shortcut.","Parameters","None","Returns","self","Notes"]}],[{"i":"cpcommandsshortcutbuilder","l":"cp.commands.shortcut.builder","p":["Shortcut Commands Builder Module."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","add","new"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"add","p":["Signature","cp.commands.shortcut.builder:add(modifier, [keyCode]) - shortcut/command","Type","Method","Description","Adds the specified modifier to the set. If a keyCode is provided, no more modifiers can be added and the original command is returned instead. Otherwise, self is returned and further modifiers can be added.","Parameters","modifier - (optional) The modifier that was added. keyCode - (optional) The key code being modified.","Returns","self if no keyCode is provided, or the original command.","Notes"]},{"l":"new","p":["Signature","cp.commands.shortcut.builder.new([receiverFn]) - builder","Type","Method","Description","Creates a new shortcut builder.","Parameters","receiverFn- An optional function which will be called with the new shortcut, when built.","Returns","The builder instance","Notes","If provided, the receiver function will be called when the shortcut has been configured, and passed the new shortcut. The result of that function will be returned to the next stage. If no receiverFn is provided, the shortcut will be returned directly."]}],[{"i":"cpconfig","l":"cp.config","p":["Manage CommandPost's constants and settings."]},{"l":"Submodules","p":["cp.config.dockIconClickCallback","cp.config.fileDroppedToDockIconCallback","cp.config.shutdownCallback","cp.config.textDroppedToDockIconCallback"]},{"l":"API Overview","p":["appBuild","application","appName","appVersion","assetsPath","automaticScriptReloading","basePath","bundledPluginsPath","bundleID","cachePath","configPrefix","Constants- Useful values which cannot be changed","developerMode","Fields- Variables which can only be accessed from an object returned by a constructor","frontmost","Functions- API calls offered directly by the extension","get","iconPath","languagePath","pluginPaths","privacyPolicyURL","processID","prop","reset","scriptPath","set","sourceExtensions","sourceWatcher","translationURL","unwatch","userConfigRootPath","userPluginsPath","Variables- Configurable values","watch","watcher"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"appBuild","p":["Signature","cp.config.appBuild - string","Type","Constant","Description","Application Build"]},{"l":"appName","p":["Signature","cp.config.appName - string","Type","Constant","Description","The name of the Application"]},{"l":"appVersion","p":["Signature","cp.config.appVersion - string","Type","Constant","Description","Application Version"]},{"l":"assetsPath","p":["Signature","cp.config.assetsPath - string","Type","Constant","Description","Path to where Application Assets are stored"]},{"l":"basePath","p":["Signature","cp.config.basePath - string","Type","Constant","Description","Path to where the Extensions & Plugins folders are stored."]},{"l":"bundledPluginsPath","p":["Signature","cp.config.bundledPluginsPath - string","Type","Constant","Description","The path to bundled plugins"]},{"l":"bundleID","p":["Signature","cp.config.bundleID - string","Type","Constant","Description","Application's Bundle ID"]},{"l":"cachePath","p":["Signature","cp.config.cachePath - string","Type","Constant","Description","The path to the CommandPost Cache folder."]},{"l":"configPrefix","p":["Signature","cp.config.configPrefix - string","Type","Constant","Description","Prefix used for Configuration Settings"]},{"l":"iconPath","p":["Signature","cp.config.iconPath - string","Type","Constant","Description","Path to the Application Icon"]},{"l":"languagePath","p":["Signature","cp.config.languagePath - string","Type","Constant","Description","Path to the Languages Folder"]},{"l":"pluginPaths","p":["Signature","cp.config.pluginPaths - table","Type","Constant","Description","Table of Plugins Paths. Earlier entries take precedence."]},{"l":"privacyPolicyURL","p":["Signature","cp.config.privacyPolicyURL - string","Type","Constant","Description","URL for Privacy Policy"]},{"l":"processID","p":["Signature","cp.config.processID - number","Type","Constant","Description","Application's Process ID"]},{"l":"scriptPath","p":["Signature","cp.config.scriptPath - string","Type","Constant","Description","Path to where Application Scripts are stored"]},{"l":"sourceExtensions","p":["Signature","cp.config.sourceExtensions - table","Type","Constant","Description","Extensions for files which will trigger a reload when modified."]},{"l":"sourceWatcher","p":["Signature","cp.config.sourceWatcher - SourceWatcher","Type","Constant","Description","A cp.sourcewatcher that will watch for source files and reload CommandPost if any change."]},{"l":"translationURL","p":["Signature","cp.config.translationURL - string","Type","Constant","Description","URL for Translations"]},{"l":"userConfigRootPath","p":["Signature","cp.config.userConfigRootPath - string","Type","Constant","Description","The path to user configuration folders"]},{"l":"userPluginsPath","p":["Signature","cp.config.userPluginsPath - string","Type","Constant","Description","The path to user plugins"]},{"l":"Variables"},{"l":"automaticScriptReloading","p":["Signature","cp.config.automaticScriptReloading cp.prop: boolean","Type","Variable","Description","Automatic Script Reloading."]},{"l":"watcher","p":["Signature","cp.config.watcher() - watcher","Type","Variable","Description","Config Watcher"]},{"l":"Functions"},{"l":"application","p":["Signature","cp.config.application() - hs.application object","Type","Function","Description","Returns the Application as a hs.application object","Parameters","None","Returns","hs.application object","Notes"]},{"l":"get","p":["Signature","cp.config.get(key[, defaultValue]) - string or boolean or number or nil or table or binary data","Type","Function","Description","Loads a setting","Parameters","key - A string containing the name of the setting defaultValue - A default value if the setting doesn't already exist","Returns","The value of the setting","Notes"]},{"l":"prop","p":["Signature","cp.config.prop(key[, defaultValue]) - cp.prop","Type","Function","Description","Returns a cp.prop instance connected to the value of the specified key. When the value is modified, it will be notified.","Parameters","key- The configuration setting key. defaultValue- The default value if the key has not been set.","Returns","A cp.prop instance for the key.","Notes"]},{"l":"reset","p":["Signature","cp.config.reset()","Type","Function","Description","Resets all the settings for the Application","Parameters","None","Returns","Notes"]},{"l":"set","p":["Signature","cp.config.set(key, value)","Type","Function","Description","Saves a setting with common datatypes","Parameters","key- A string containing the name of the setting value- An optional value for the setting.","Returns","None","Notes","This function cannot set dates or raw data types Valid datatypes are:** string** number** boolean** nil** table (which may contain any of the same valid datatypes) if no value is provided, it is assumed to be nil"]},{"l":"unwatch","p":["Signature","cp.config.unwatch(id)","Type","Function","Description","Unregisters the watcher with the specified ID.","Parameters","id- The ID, originally returned from the watch function.","Returns","true if a watcher with the ID existed and was successfully removed.","Notes"]},{"l":"watch","p":["Signature","cp.config.watch(events) - id","Type","Function","Description","Watches for config events.","Parameters","events- a table containing functions for each event to watch for.","Returns","a unique ID that can be used to unwatch.","Notes","Supported events:** reset()- occurs after CommandPost's settings are reset."]},{"l":"Fields"},{"l":"developerMode","p":["Signature","cp.config.developerMode cp.prop: boolean; read-only","Type","Field","Description","When true, the app is in developer mode."]},{"l":"frontmost","p":["Signature","cp.config.frontmost cp.prop: boolean; read-only","Type","Field","Description","Returns whether or not the Application is frontmost."]}],[{"i":"cpconfigdockiconclickcallback","l":"cp.config.dockIconClickCallback","p":["Callback which triggers when the CommandPost Dock Icon is clicked"]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","callbackFn","get","getAll","id","new"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"callbackFn","p":["Signature","cp.config.dockIconClickCallback:callbackFn() - function","Type","Method","Description","Returns the callbackFn of the current Dock Icon Click Callback","Parameters","None","Returns","The callbackFn of the current Shutdown Callback","Notes"]},{"l":"get","p":["Signature","cp.config.dockIconClickCallback:get(id) - table","Type","Method","Description","Creates a new Dock Icon Click Callback.","Parameters","id- The unique ID for the callback you want to return.","Returns","table containing the callback","Notes"]},{"l":"getAll","p":["Signature","cp.config.dockIconClickCallback:getAll() - table","Type","Method","Description","Returns all of the created Dock Icon Click Callbacks","Parameters","None","Returns","table containing all of the created callbacks","Notes"]},{"l":"id","p":["Signature","cp.config.dockIconClickCallback:id() - string","Type","Method","Description","Returns the ID of the current Dock Icon Click Callback","Parameters","None","Returns","The ID of the current File Dropped to Dock Icon Callback as a string","Notes"]},{"l":"new","p":["Signature","cp.config.dockIconClickCallback:new(id, callbackFn) - table","Type","Method","Description","Creates a new File Dropped to Dock Icon Callback.","Parameters","id- The unique ID for this callback. callbackFn- The callback function","Returns","table that has been created","Notes"]}],[{"i":"cpconfigfiledroppedtodockiconcallback","l":"cp.config.fileDroppedToDockIconCallback","p":["File Dropped to Dock Icon Callback"]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","callbackFn","get","getAll","id","new"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"callbackFn","p":["Signature","cp.config.fileDroppedToDockIconCallback:callbackFn() - function","Type","Method","Description","Returns the callbackFn of the current File Dropped to Dock Icon Callback","Parameters","None","Returns","The callbackFn of the current Shutdown Callback","Notes"]},{"l":"get","p":["Signature","cp.config.fileDroppedToDockIconCallback:get(id) - table","Type","Method","Description","Creates a new File Dropped to Dock Icon Callback.","Parameters","id- The unique ID for the callback you want to return.","Returns","table containing the callback","Notes"]},{"l":"getAll","p":["Signature","cp.config.fileDroppedToDockIconCallback:getAll() - table","Type","Method","Description","Returns all of the created File Dropped to Dock Icon Callbacks","Parameters","None","Returns","table containing all of the created callbacks","Notes"]},{"l":"id","p":["Signature","cp.config.fileDroppedToDockIconCallback:id() - string","Type","Method","Description","Returns the ID of the current Text Dropped to Dock Icon Callback","Parameters","None","Returns","The ID of the current File Dropped to Dock Icon Callback as a string","Notes"]},{"l":"new","p":["Signature","cp.config.fileDroppedToDockIconCallback:new(id, callbackFn) - table","Type","Method","Description","Creates a new File Dropped to Dock Icon Callback.","Parameters","id- The unique ID for this callback. callbackFn- The callback function","Returns","table that has been created","Notes"]}],[{"i":"cpconfigshutdowncallback","l":"cp.config.shutdownCallback","p":["Shutdown Callback Module."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","callbackFn","get","getAll","id","new"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"callbackFn","p":["Signature","cp.config.shutdownCallback:callbackFn() - function","Type","Method","Description","Returns the callbackFn of the current Shutdown Callback","Parameters","None","Returns","The callbackFn of the current Shutdown Callback","Notes"]},{"l":"get","p":["Signature","cp.config.shutdownCallback:get(id) - table","Type","Method","Description","Creates a new Shutdown Callback.","Parameters","id- The unique ID for the callback you want to return.","Returns","table containing the callback","Notes"]},{"l":"getAll","p":["Signature","cp.config.shutdownCallback:getAll() - table","Type","Method","Description","Returns all of the created Shutdown Callbacks","Parameters","None","Returns","table containing all of the created callbacks","Notes"]},{"l":"id","p":["Signature","cp.config.shutdownCallback:id() - string","Type","Method","Description","Returns the ID of the current Shutdown Callback","Parameters","None","Returns","The ID of the current Shutdown Callback as a string","Notes"]},{"l":"new","p":["Signature","cp.config.shutdownCallback:new(id, callbackFn) - table","Type","Method","Description","Creates a new Shutdown Callback.","Parameters","id- The unique ID for this callback. callbackFn- The callback function","Returns","table that has been created","Notes"]}],[{"i":"cpconfigtextdroppedtodockiconcallback","l":"cp.config.textDroppedToDockIconCallback","p":["Text Dropped to Dock Icon Callback"]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","callbackFn","get","getAll","id","new"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"callbackFn","p":["Signature","cp.config.textDroppedToDockIconCallback:callbackFn() - function","Type","Method","Description","Returns the callbackFn of the current Text Dropped to Dock Icon Callback","Parameters","None","Returns","The callbackFn of the current Shutdown Callback","Notes"]},{"l":"get","p":["Signature","cp.config.textDroppedToDockIconCallback:get(id) - table","Type","Method","Description","Creates a new Text Dropped to Dock Icon Callback.","Parameters","id- The unique ID for the callback you want to return.","Returns","table containing the callback","Notes"]},{"l":"getAll","p":["Signature","cp.config.textDroppedToDockIconCallback:getAll() - table","Type","Method","Description","Returns all of the created Text Dropped to Dock Icon Callbacks","Parameters","None","Returns","table containing all of the created callbacks","Notes"]},{"l":"id","p":["Signature","cp.config.textDroppedToDockIconCallback:id() - string","Type","Method","Description","Returns the ID of the current Text Dropped to Dock Icon Callback","Parameters","None","Returns","The ID of the current Shutdown Callback as a string","Notes"]},{"l":"new","p":["Signature","cp.config.textDroppedToDockIconCallback:new(id, callbackFn) - table","Type","Method","Description","Creates a new Text Dropped to Dock Icon Callback.","Parameters","id- The unique ID for this callback. callbackFn- The callback function","Returns","table that has been created","Notes"]}],[{"i":"cpconsolehistory","l":"cp.console.history","p":["Console History Manager.","Based on code by @asmagill https://github.com/asmagill/hammerspoon-config-take2/blob/master/utils/_actions/consoleHistory.lua"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","clearHistory","history","init","pruneHistory","retrieveHistory","saveHistory","Fields- Variables which can only be accessed from an object returned by a constructor","cache"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"clearHistory","p":["Signature","cp.console.history.clearHistory() - none","Type","Function","Description","Clears the Console History.","Parameters","None","Returns","Notes"]},{"l":"history","p":["Signature","cp.console.history.history(toFind) - none","Type","Function","Description","Gets a history item.","Parameters","toFind - Number of the item to find.","Returns","None","Notes"]},{"l":"init","p":["Signature","cp.console.history.init() - self","Type","Function","Description","Initialise the module.","Parameters","None","Returns","Self","Notes"]},{"l":"pruneHistory","p":["Signature","cp.console.history.pruneHistory() - number","Type","Function","Description","Prune History","Parameters","None","Returns","Current History Count","Notes"]},{"l":"retrieveHistory","p":["Signature","cp.console.history.retrieveHistory() - none","Type","Function","Description","Retrieve's the Console History.","Parameters","None","Returns","Notes"]},{"l":"saveHistory","p":["Signature","cp.console.history.saveHistory() - none","Type","Function","Description","Saves the Console History.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"cache","p":["Signature","cp.console.history.cache cp.prop: table","Type","Field","Description","Console History Cache"]}],[{"i":"cpdeferred","l":"cp.deferred","p":["This extension makes it simple to defer multiple actions after a delay from the initial execution. Unlike hs.timer.delayed, the delay will not be extended with subsequent run() calls, but the delay will trigger again if run() is called again later.","For example:"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","action","delay","run","secondsRemaining","stop","waiting"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","cp.deferred.new(delay) - cp.deferred","Type","Constructor","Description","Creates a new defer instance, which will trigger any added action s by a set delay after the initial call to run().","Parameters","delay - The number of seconds to delay when run() is initally called.","Returns","The new cp.deferred instance.","Notes"]},{"l":"Methods"},{"l":"action","p":["Signature","cp.deferred:action(actionFn) - self","Type","Method","Description","Adds the action the the list that will be called when the timer goes off.","Parameters","The callable action.","Returns","Self","Notes","It must be a function(or callable table) with the following signature: lua/lilifunction() - nil/lili* Multiple actions can be added and they will all be called when the delay timer goes off."]},{"l":"delay","p":["Signature","cp.deferred:delay([value]) - self | number","Type","Method","Description","Sets/gets the delay period. If no value is provided, the current delay is returned.","Parameters","value - the new delay value.","Returns","The cp.deferred instance if a new value is provided, or the current delay if not.","Notes","If it is provided, then the new delay will be set. If it is currently waiting, then the wait will be restarted with the new delay."]},{"l":"run","p":["Signature","cp.deferred:run() - self","Type","Method","Description","Ensures that the actions will run after the delay. Multiple calls will not increase the delay from the initial call.","Parameters","None","Returns","The cp.deferred instance.","Notes"]},{"l":"secondsRemaining","p":["Signature","cp.deferred:secondsRemaining() - number | nil","Type","Method","Description","Returns the number of seconds until the next execution, or nil if it's not running.","Parameters","None","Returns","The number of seconds until execution.","Notes"]},{"l":"stop","p":["Signature","cp.deferred:stop() - self","Type","Method","Description","Stops any execution of any deferred actions, if it is currently running.","Parameters","None","Returns","The deferred timer.","Notes"]},{"l":"waiting","p":["Signature","cp.deferred:waiting() - boolean","Type","Method","Description","Checks if the defer is currently waiting to run.","Parameters","None","Returns","true if the deferred action is waiting to execute.","Notes"]}],[{"i":"cpdelegator","l":"cp.delegator","p":["cp.delegator is a middleclass\"mix-in\" that allows for simple specification of \"delegated\" values and functions in class definitions.","This allows you to compose an object from other objects, but allow methods or values from the composed values to be accessed directly via the composing parent object.","For example:","The order that delegator is included with other mixins can affect how it functions. For example, when mixing with cp.lazy, if cp.lazy is mixed in second, like so:","...then any delegated methods will take priority over lazy ones. Most likely you want to put lazy first, like so:","The easy way to remember is to read them together - \"lazy delegator\" sounds better than \"delegator lazy\"."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpdev","l":"cp.dev","p":["A set of handy developer tools for CommandPost."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","elementAtMouse","findUnusedLanguageStrings","highlight","highlightFrame","highlightPoint","hotkey","inspect","inspectAtMouse","inspectElement","inspectElementAtMousePath","test","which"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"elementAtMouse","p":["Signature","cp.dev.elementAtMouse() - axuielementObject","Type","Function","Description","Gets the AX element under the current mouse position.","Parameters","None","Returns","Notes"]},{"l":"findUnusedLanguageStrings","p":["Signature","cp.dev.findUnusedLanguageStrings() - string","Type","Function","Description","Searches for any unused language strings in English.json.","Parameters","None","Returns","A string with the results of the search.","Notes"]},{"l":"highlight","p":["Signature","cp.dev.highlight(element) - axuielementObject","Type","Function","Description","Highlights an AX element on the screen.","Parameters","element - The AX element to highlight.","Returns","The element.","Notes"]},{"l":"highlightFrame","p":["Signature","cp.dev.highlightFrame(frame) - none","Type","Function","Description","Highlights aa frame on the screen.","Parameters","frame - A hs.geometry frame object.","Returns","None","Notes"]},{"l":"highlightPoint","p":["Signature","cp.dev.highlightPoint(point) - none","Type","Function","Description","Highlights a point on the screen.","Parameters","point - A hs.geometry point object.","Returns","None","Notes"]},{"l":"hotkey","p":["Signature","cp.dev.hotkey(fn) - none","Type","Function","Description","Assigns a function to the CONTROL+OPTION+COMMAND+SHIFT+Q keyboard combination.","Parameters","fn - A function to execute when the hotkey is triggered.","Returns","None","Notes"]},{"l":"inspect","p":["Signature","cp.dev.inspect(item, options) - string","Type","Function","Description","Inspect an item.","Parameters","item - The object to inspect. options - Any additional options to pass along to cp.dev.inspectElement.","Returns","A results as a string.","Notes"]},{"l":"inspectAtMouse","p":["Signature","cp.dev.inspectAtMouse(options) - none","Type","Function","Description","Inspects an AX element under the current mouse position. Writes results to Debug Console.","Parameters","options - Any additional options to pass along to cp.dev.inspectElement.","Returns","None","Notes"]},{"l":"inspectElement","p":["Signature","cp.dev.inspectElement(element[, options]) - none","Type","Function","Description","Inspect an AX element. Writes results to Debug Console.","Parameters","element - The element to inspect. options - A table containing any optional values.","Returns","None.","Notes","The options table accepts the following parameters: depth - A number representing the maximum depth to recurse into variable."]},{"l":"inspectElementAtMousePath","p":["Signature","cp.dev.inspectElementAtMousePath(options) - none","Type","Function","Description","Inspects an AX element at the mouse path.","Parameters","options - A table containing any optional values.","Returns","None","Notes"]},{"l":"test","p":["Signature","cp.dev.test(id) - cp.test","Type","Function","Description","This function will return a cp.test.","Parameters","id - the id to test.","Returns","A [cp.test] to execute.","Notes","This function will return a cp.test with either the name id_test or id._test if the id is pointing at a folder. For example, you have an extensions called foo.bar, and you want to create a test for it. Option 1: id_test File: /src/tests/foo/bar_test.lua Option 2: id._test File: /src/tests/foo/bar/_test.lua You could then run all the contained tests like so: lua/lili_test(foo.bar)()/lili"]},{"l":"which","p":["Signature","cp.dev.which(cmd) - none","Type","Function","Description","The which utility takes a list of command names and searches the path for each executable file that would be run had these commands actually been invoked.","Parameters","cmd - The parameters to pass along to the which executable.","Returns","The path or nil and the error message if an error occurs.","Notes"]}],[{"i":"cpdialog","l":"cp.dialog","p":["A collection of handy Dialog tools for CommandPost.","Where possible, hs.dialog should be used instead of cp.dialog- however, there are still some instances where cp.dialog is preferred (i.e. if you want a dialog box to appear as if it's been generated by Final Cut Pro)."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","displayAlertMessage","displayChooseFile","displayChooseFolder","displayChooseFromList","displayErrorMessage","displayMessage","displayNotification","displaySmallNumberTextBoxMessage","displayTextBoxMessage","displayYesNoQuestion"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"displayAlertMessage","p":["Signature","cp.dialog.displayAlertMessage(message) - none","Type","Function","Description","Display an Alert Dialog (with stop icon).","Parameters","message - The message you want to display as a string","Returns","None","Notes","IMPORTANT: This should no longer be used in favour of hs.dialog.alert"]},{"l":"displayChooseFile","p":["Signature","cp.dialog.displayChooseFile(whatMessage, fileType[, defaultLocation]) - boolean or string","Type","Function","Description","Display a Choose File Dialog Box.","Parameters","whatMessage - The message you want to display as a string. fileType - The filetype you wish to display as either a string or a table of strings. defaultLocation - Path to Default Location. Defaults to the desktop.","Returns","false if cancelled if pressed otherwise the path to the file as a string","Notes","IMPORTANT: This should no longer be used in favour of hs.dialog.chooseFileOrFolder"]},{"l":"displayChooseFolder","p":["Signature","cp.dialog.displayChooseFolder(whatMessage[, defaultLocation]) - boolean or string","Type","Function","Description","Display a Choose Folder Dialog Box.","Parameters","whatMessage - The message you want to display as a string defaultLocation - An optional path (defaults to the user desktop)","Returns","false if cancelled if pressed otherwise the path to the folder as a string","Notes","IMPORTANT: This should no longer be used in favour of hs.dialog.chooseFileOrFolder"]},{"l":"displayChooseFromList","p":["Signature","cp.dialog.displayChooseFromList(dialogPrompt, listOptions, defaultItems) - table","Type","Function","Description","Displays a list that the user can select items from.","Parameters","dialogPrompt - The message you want to display as a string listOptions - A table containing all the options you want to include in the list as strings defaultItems - A table containing all the options you want select by default in the list as strings","Returns","A table with the selected items as strings","Notes"]},{"l":"displayErrorMessage","p":["Signature","cp.dialog.displayErrorMessage(whatError) - none","Type","Function","Description","Display an Error Message Dialog, given the user the option to submit feedback.","Parameters","whatError - The message you want to display as a string","Returns","None","Notes","IMPORTANT: This should no longer be used in favour of hs.dialog.alert"]},{"l":"displayMessage","p":["Signature","cp.dialog.displayMessage(whatMessage, optionalButtons) - object","Type","Function","Description","Display an Error Message Dialog, given the user the option to submit feedback.","Parameters","whatError - The message you want to display as a string optionalButtons - Optional buttons","Returns","None","Notes","IMPORTANT: This should no longer be used in favour of hs.dialog.alert"]},{"l":"displayNotification","p":["Signature","cp.dialog.displayNotification(whatMessage) - none","Type","Function","Description","Display's an alert on the screen.","Parameters","whatMessage - The message you want to display as a string","Returns","None","Notes","Any existing alerts will be removed to make way for the new one."]},{"l":"displaySmallNumberTextBoxMessage","p":["Signature","cp.dialog.displaySmallNumberTextBoxMessage(whatMessage, whatErrorMessage, defaultAnswer) - boolean or string","Type","Function","Description","Display a dialog box prompting the user for a number input. It accepts only entries that coerce directly to class integer.","Parameters","whatMessage - The message you want to display as a string whatErrorMessage - The error message that appears if a user input is invalid defaultAnswer - The default value of the text box","Returns","false if cancelled if pressed otherwise the text entered in the dialog box","Notes","IMPORTANT: This should no longer be used in favour of hs.dialog.textPrompt"]},{"l":"displayTextBoxMessage","p":["Signature","cp.dialog.displayTextBoxMessage(whatMessage, whatErrorMessage, defaultAnswer, validationFn) - boolean or string","Type","Function","Description","Display a dialog box prompting the user for a text input.","Parameters","whatMessage - The message you want to display as a string whatErrorMessage - The error message that appears if a user input is invalid defaultAnswer - The default value of the text box validationFn - A function that takes one parameter and returns a boolean value","Returns","false if cancelled if pressed otherwise the text entered in the dialog box","Notes","IMPORTANT: This should no longer be used in favour of hs.dialog.textPrompt"]},{"l":"displayYesNoQuestion","p":["Signature","cp.dialog.displayYesNoQuestion(message, informativeText) - boolean","Type","Function","Description","Displays a \"Yes\" or \"No\" question.","Parameters","whatMessage - The message you want to display as a string informativeText - Informative text.","Returns","true if yes is clicked otherwise false","Notes","IMPORTANT: This should no longer be used in favour of hs.dialog.alert"]}],[{"i":"cpdisk","l":"cp.disk","p":["Provides provides details about disk devices attached to the system. These may be mounted, unmounted, and may include devices which do not mount, or appear in the user interface by default.","The various methods have options table parameters, which allow filtering to be performed on the operations. These tables can have any combination of the following:","physical- only process physical drives.","virtual- only process virtual drives.","external- only external drives.","internal- only internal drives.","ejectable- only drives that can be ejected.","bootable- only bootable drives.","writable- only writeable drives.","root- only top-level drives (vs partitions)","hidden- by default, only 'unhidden' devices are returned.","mounted- only mounted drives.","unmounted- only unmounted drives."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","eject","mount","unmount","visit"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"eject","p":["Signature","cp.disk.eject(options) - nil","Type","Function","Description","Unmounts and ejects (where appropriate) all disks matching the provided options.","Parameters","options - The table of filter options.","Returns","Nothing.","Notes"]},{"l":"mount","p":["Signature","cp.disk.mount(options) - nil","Type","Function","Description","Mounts all disks matching the provided options.","Parameters","options - The table of filter options.","Returns","Nothing.","Notes"]},{"l":"unmount","p":["Signature","cp.disk.unmount(options) - nil","Type","Function","Description","Unmounts all disks matching the provided options.","Parameters","options - The table of filter options.","Returns","Nothing.","Notes"]},{"l":"visit","p":["Signature","cp.disk.visit(options, fn) - nil","Type","Function","Description","Visits all drives matching the options and executes the fn function with the deviceID string (e.g. \"disk0\" or \"disk2s1\") and a table of additional data about the drive.","Parameters","options - The table of filter options. fn - The function to execute.","Returns","Nothing.","Notes"]}],[{"i":"cpdocs","l":"cp.docs","p":["Documentation Tools.","These tools are for helping generate CommandPost documentation.","Example Usage:"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","generate","generateExtensionLinks","updateDeveloperGuideSummary"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"generate","p":["Signature","cp.docs.generate() - none","Type","Function","Description","Generates the CommandPost Developers Guide.","Parameters","None","Returns","Notes"]},{"l":"generateExtensionLinks","p":["Signature","cp.docs.generateExtensionLinks(folder) - none","Type","Function","Description","Returns markup of all of the API links for a specific group of extensions.","Parameters","folder - The folder you want to process (i.e. \"cp\", \"plugins\" or \"hs\").","Returns","The result as a string, otherwise nil if an error occurs.","Notes"]},{"l":"updateDeveloperGuideSummary","p":["Signature","cp.docs.updateDeveloperGuideSummary() - boolean","Type","Function","Description","Updates the Developer Guide Summary.","Parameters","None","Returns","true if successful otherwise nil","Notes"]}],[{"i":"cpfeedback","l":"cp.feedback","p":["Feedback Form."]},{"l":"API Overview","p":["Variables- Configurable values","defaultHeight","defaultTitle","defaultWidth","position","quitOnComplete","Functions- API calls offered directly by the extension","showFeedback"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"defaultHeight","p":["Signature","cp.feedback.defaultHeight - number","Type","Variable","Description","Default webview height."]},{"l":"defaultTitle","p":["Signature","cp.feedback.defaultTitle - number","Type","Variable","Description","Default webview title."]},{"l":"defaultWidth","p":["Signature","cp.feedback.defaultWidth - number","Type","Variable","Description","Default webview width."]},{"l":"position","p":["Signature","cp.feedback.position - prop","Type","Variable","Description","Webview Position."]},{"l":"quitOnComplete","p":["Signature","cp.feedback.quitOnComplete - boolean","Type","Variable","Description","Quit on complete?"]},{"l":"Functions"},{"l":"showFeedback","p":["Signature","cp.feedback.showFeedback(quitOnComplete) - nil","Type","Function","Description","Displays the Feedback Screen.","Parameters","quitOnComplete - true if you want CommandPost to quit after the Feedback is complete otherwise false","Returns","None","Notes"]}],[{"i":"cpfn","l":"cp.fn","p":["A collection of functions that are useful for working with functions. Heavily inspired by Point-Free's Overture library for Swift.","In general, the functions in this module come in two categories:","Functions which perform an action directly.","Functions which return a new function.","The second category of functions are called \"combinators\". A combinator is a function that returns a new function, often with configuration parameters passed in."]},{"l":"Submodules","p":["cp.fn.args","cp.fn.ax","cp.fn.prop","cp.fn.string","cp.fn.table","cp.fn.value"]},{"l":"API Overview","p":["all","any","call","chain","compare","compose","constant","curry","debug","flip","fork","Functions- API calls offered directly by the extension","identity","ifilter","none","over","pipe","prefix","reduce","resolve","set","uncurry","with"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"all","p":["Signature","cp.fn.all(...) - function","Type","Function","Description","A combinator that returns a function that passes its arguments to all the functions in fns and returns the last result, if all functions return a truthy value. Otherwise, it returns nil.","Parameters","... - A table or list of functions to call.","Returns","A function that passes its arguments to all the functions in fns and returns the last result, if all functions return a truthy value.","Notes"]},{"l":"any","p":["Signature","cp.fn.any(...) - function","Type","Function","Description","A combinator that returns a function that passes its arguments to all the functions in fns and returns the first truthy result, or nil if all functions return a falsy value.","Parameters","... - A table or list of functions to call.","Returns","A function that passes its arguments to all the functions in fns and returns the first truthy result, or nil if all functions return a 'falsy' value.","Notes"]},{"l":"call","p":["Signature","cp.fn.call(fn) - ...","Type","Function","Description","Calls the function fn with no arguments, returning the result.","Parameters","fn - The function to call.","Returns","The results of the function call.","Notes"]},{"l":"chain","p":["Signature","cp.fn.chain(...) - function","Type","Function","Description","Chain a series of functions together, passing the results of each function on to the next one, returning the last result, or returning nil immediately after all results of a function are nil.","Parameters","... - A list of functions.","Returns","A function that takes any number of inputs and returns any number of inputs.","Notes","The difference between chain and pipe is that chain will fail early with a nil result, while pipe will pass the nil onto the next function. Alternately, you can create a chain using the // operator, followed by for each subsequent function. Eg: chain // fn1 fn2 fn3. If using the alternate syntax, you may have to put parentheses around the chain if mixing with other operators like pipe or compose."]},{"l":"compare","p":["Signature","cp.fn.compare(...) - function","Type","Function","Description","A combinator that returns a function that checks each provided comparator in turn, returning true if the given comparator returns true, otherwise if the values are equal, checks the next comparator, and so on.","Parameters","... - A list of comparators.","Returns","A function that takes two inputs and true if the first input is less than the second input.","Notes","The comparators are called in the order they are provided. If no comparators are provided, returns a nil function, which is generally sorted with the standard operator."]},{"l":"compose","p":["Signature","cp.fn.compose(...) - function","Type","Function","Description","A combinator that performs backwards composition of functions, returning a function that is the composition of a list of functions processed from last to first.","Parameters","fns","... - A table or a list of functions.","Returns","A function that takes the input for the last function, and returns the result of the first function.","Notes"]},{"l":"constant","p":["Signature","cp.fn.constant(value) - function","Type","Function","Description","A combinator that returns a function that always returns the value.","Parameters","value - The value to return.","Returns","A function that always returns the value value.","Notes"]},{"l":"curry","p":["Signature","cp.fn.curry(function, argCount) - function","Type","Function","Description","Curries a function with the specified number of arguments, returning a function that accepts the first argument. It will return other functions that accept the second argument, and so on, until the final argument is collected, and the values are passed to the original function.","Parameters","fn - The function to curry. argCount - The number of arguments to accept.","Returns","A function that accepts the first argument.","Notes"]},{"l":"debug","p":["Signature","cp.fn.debug(message, ...) - function","Type","Function","Description","Returns a function that will print the provided message to the console.","Parameters","message - The message to print to the console.... - Optional functions to call with the values passed to the returned function.","Returns","A function that will print the provided message to the console.","Notes","This is useful for debugging, but is not recommended for production code. For example, the following will return \"b\" and also print table: 0xXXXXXXXXX and b to the console: fn.chain // fn.constant({a, b, c}) fn.debug(%d) fn.table.get(2) fn.debug(%d) Optional functions can be passed in, which will be provided the values passed to the returned function. If not provided, the values will be passed into the message for formatting directly. The returned function will always return the values passed in."]},{"l":"flip","p":["Signature","cp.fn.flip(fn) - function","Type","Function","Description","A combinator that flips the order of the next two arguments to a curried function.","Parameters","fn - The function to flip.","Returns","A function that accepts the second argument and returns a function expecting the first argument.","Notes","If multiple arguments are provided for either function, the order of the arguments within that list are not flipped."]},{"l":"fork","p":["Signature","cp.fn.fork(...) - function","Type","Function","Description","A combinator that returns a function that returns the result of calling ... with the functions passed in. This can be used to split an input into multiple outputs.","Parameters","... - A table or list of functions to call.","Returns","A function that returns the result of calling ... with the functions passed in.","Notes"]},{"l":"identity","p":["Signature","cp.fn.identity(...) - ...","Type","Function","Description","Returns the values passed in.","Parameters","... - The values to return.","Returns","The values passed in.","Notes"]},{"l":"ifilter","p":["Signature","cp.fn.ifilter([predicate]) - function(table) - table","Type","Function","Description","Returns a function that filters a table using the given predicate, in index order. If the predicate is not provided, the original table will be returned unchanged.","Parameters","predicate - A function that takes a value and returns true if the value should be included in the filtered table.","Returns","A function that takes a table and returns a filtered table.","Notes"]},{"l":"none","p":["Signature","cp.fn.none(...) - function","Type","Function","Description","A combinator that returns a function that passes its arguments to all the functions in fns and returns true if the first return value from each is falsey, otherwise it returns false.","Parameters","... - A table or list of functions to call.","Returns","A function which will be true if all of the functions in fns are falsy.","Notes"]},{"l":"over","p":["Signature","cp.fn.over(setter, fn) - function","Type","Function","Description","A combinator that returns a function that applies the transform function to the setter.","Parameters","setter - An immutable setter function. tx - A value transform function.","Returns","A root transform function.","Notes"]},{"l":"pipe","p":["Signature","cp.fn.pipe(...) - function","Type","Function","Description","A combinator that pipes a series of functions together, passing the results of each function on to the next one. The returned function takes any number of inputs and may return any number of inputs, depending on the results of the final function.","Parameters","fns","... - A table or list of functions.","Returns","A function that takes any number of inputs and returns any number of inputs.","Notes","The difference between chain and pipe is that chain will fail early with a nil result, while pipe will pass the nil onto the next function."]},{"l":"prefix","p":["Signature","cp.fn.prefix(fn, ...) - function","Type","Function","Description","Prefixes the provided values as the first arguments to the function.","Parameters","fn - The function to prefix.... - The arguments to prefix the function with.","Returns","A function that takes the remainder of fn's arguments and returns the result of fn with the provided arguments prepended.","Notes"]},{"l":"reduce","p":["Signature","cp.fn.reduce(fn, initial, ...) - any","Type","Function","Description","Reduces a list of values into a single value.","Parameters","fn - The function to reduce with. initial - The initial value to start with.... - The table or list of values to reduce.","Returns","The reduced value.","Notes"]},{"l":"resolve","p":["Signature","cp.fn.resolve(value, ...) - any","Type","Function","Description","If the value is a function, calls it with the provided arguments, otherwise returns the value.","Parameters","value - The value to resolve.... - The arguments to pass to the function.","Returns","The resolved value.","Notes"]},{"l":"set","p":["Signature","cp.fn.set(setter, value) - function","Type","Function","Description","Applies a value to an immutable setter function.","Parameters","setter - An immutable setter function (function(A -> B) -> function(S) -> T) value - A new value.","Returns","A root transform function.","Notes"]},{"l":"uncurry","p":["Signature","cp.fn.uncurry(fn, argCount) - function","Type","Function","Description","Uncurry a curried function with the specified number of arguments, returning a function the specified number of arguments.","Parameters","fn - The function to uncurry. argCount - The number of arguments to uncurry.","Returns","A function that takes the specified number of arguments.","Notes"]},{"l":"with","p":["Signature","cp.fn.with(value, fn) - function","Type","Function","Description","A combinator that returns a function that will call the provided function with the provided value as the first argument.","Parameters","value - The value to pass to the function. fn - The function to call.","Returns","A function that will call the provided function with the provided value as the first argument.","Notes"]}],[{"i":"cpfnargs","l":"cp.fn.args","p":["Functions for working with function arguments."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","from","hasAny","hasNone","only","pack","unpack"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"from","p":["Signature","cp.fn.args.from(index) - function(...) - ...","Type","Function","Description","Returns a function that selects the arguments from the provided index.","Parameters","index - The index of the argument to select.","Returns","A function that selects the argument at the specified index.","Notes"]},{"l":"hasAny","p":["Signature","cp.fn.args.hasAny(...) - boolean","Type","Function","Description","Returns true if any of the arguments are not nil.","Parameters","... - The arguments to check.","Returns","true if any of the arguments are not nil, false if not.","Notes"]},{"l":"hasNone","p":["Signature","cp.fn.args.hasNone(...) - boolean","Type","Function","Description","Returns true if all the arguments are nil.","Parameters","... - The arguments to check.","Returns","true if all the arguments are nil, false if not.","Notes"]},{"l":"only","p":["Signature","cp.fn.args.only(index, ...) - function(...) - any","Type","Function","Description","Returns a function that only returns the argument at the specified index.","Parameters","index - The index of the argument to return.... - The other indexes to include as well.","Returns","A function that returns the arguments at the specified indecies.","Notes"]},{"l":"pack","p":["Signature","cp.fn.args.pack(...) - table, boolean","Type","Function","Description","Packs the arguments into a table.","Parameters","... - The arguments to pack.","Returns","A table containing the arguments. A boolean indicating whether the arguments were packed into a table.","Notes","If the number of arguments is 1 and the first argument is a table, and the table has a size of 1 or more, it will be returned. Otherwise, the arguments are packed into a table."]},{"l":"unpack","p":["Signature","cp.fn.args.unpack(args, packed) - ... | table","Type","Function","Description","Unpacks the arguments from a table.","Parameters","args - The arguments to unpack. packed - A boolean indicating whether the arguments were packed.","Returns","The arguments, unpacked if necessary.","Notes","If the arguments were packed, the table is unpacked first.* Otherwise, the arguments are returned unchanged."]}],[{"i":"cpfnax","l":"cp.fn.ax","p":["A collection of useful functions for working with AX.","You may also find functions in cp.fn and cp.fn.table useful."]},{"l":"API Overview","p":["areAligned","attribute","bottomToTop","bottomUp","cache","childMatching","children","childrenMatching","childrenTopDown","childWith","Functions- API calls offered directly by the extension","hasAttributeValue","hasRole","init","initElements","isUIElement","isValid","leftToRight","matchesIf","narrowToWide","performAction","prop","rightToLeft","setAttribute","shortToTall","topDown","topToBottom","topToBottomBaseAligned","uielement","uielementList"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"areAligned","p":["Signature","cp.fn.ax.areAligned(a, b) - boolean","Type","Function","Description","Returns true if element a is aligned with element b.","Parameters","a - The first element b - The second element","Returns","true if a is aligned with b.","Notes","Two elements are considered to be aligned if the interesection if their heights are at least 50% of the height of both elements."]},{"l":"attribute","p":["Signature","cp.fn.ax.attribute(name) - function(uivalue) - any | nil","Type","Function","Description","Returns a function which will return the AX value of the given name from the given value.","Parameters","name - The name of the attribute to get. Eg. AXValue.","Returns","A function which will return the AX value of the given name from the given uivalue. This is safe to use as a cp.prop:mutate getter, since it will resolve the original value before getting the named attribute.","Notes"]},{"l":"bottomToTop","p":["Signature","cp.fn.ax.bottomToTop(a, b) - boolean","Type","Function","Description","Returns true if element a is below element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is below b.","Notes"]},{"l":"bottomUp","p":["Signature","cp.fn.ax.bottomUp(a, b) - boolean","Type","Function","Description","The reverse of topDown, ordering from linearly from bottom-to-top, right-to-left","Parameters","a - The first axuielement to compare. b - The second axuielement to compare.","Returns","true if a is below or to the right of b in the UI, false otherwise.","Notes"]},{"l":"cache","p":["Signature","cp.fn.ax.cache(source, key, finderFn, [verifyFn]) - cachedValue","Type","Function","Description","A combinator which checks if the cached value at the source[key] is a valid axuielement. If not it will call the provided finderFn() function (with no arguments), cache the result and return it.","Parameters","source - the table containing the cache key - the key the value is cached under finderFn - the function which will return the element if not found.[verifyFn] - an optional function which will check the cached element to verify it is still valid.","Returns","The valid cached value.","Notes","If the verifyFn is provided, it will be called to check that the cached value is still valid. It is passed a single parameter (the axuielement) and is expected to return true or false. Example:```lua ax.cache(self, \"_ ui\", MyElement.matches)( fn.table.get(1) -- return the first child of the element.) If the optional verifyFn is provided, it will be called to check that the cached value is still valid. It is passed a single parameter (the axuielement) and is expected to return true or false."]},{"l":"childMatching","p":["Signature","cp.fn.ax.childMatching(predicate[, index][, comparator]) - function(uivalue) - axuielement | nil","Type","Function","Description","Returns a function that will return the first child of the given uivalue that matches the given predicate.","Parameters","predicate - A function that will be called with the child axuielement and should return true if the child matches. index - An optional number that will be used to determine the child to return. Defaults to 1. comparator - An optional function that will be called with the child axuielement and should return true if the child matches. Defaults to cp.fn.ax.topDown.","Returns","A function that will return the first child of the given uivalue that matches the given predicate.","Notes"]},{"l":"children","p":["Signature","cp.fn.ax.children(value) - table | nil","Type","Function","Description","Returns the children of the given value.","Parameters","value - The value to get the children from.","Returns","The children of the given value or nil.","Notes","If it is a table with a AXChildren field, the AXChildren field is returned. If it is a table with a UI field, the UI field is called and the result is returned. If it is a table with a children function, it is called and the result is returned. If it is a table with a children field, the children field is returned. Otherwise, if it's any table, that table is returned."]},{"l":"childrenMatching","p":["Signature","cp.fn.ax.childrenMatching(predicate[, comparator]) - table of axuielement | nil","Type","Function","Description","Returns the children of the given uivalue that match the given predicate.","Parameters","predicate - The predicate to match. comparator - An optional comparator to use. Defaults to topDown.","Returns","A table of axuielement s that match the given predicate.","Notes"]},{"l":"childrenTopDown","p":["Signature","cp.fn.ax.childrenTopDown(value) - table | nil","Type","Function","Description","Returns the children of the given value sorted in topDown order.","Parameters","value - The value to get the children from.","Returns","The children of the given value, sorted topDown, or nil.","Notes"]},{"l":"childWith","p":["Signature","cp.fn.ax.childWith(attribute, value) - function(uivalue) - axuielement | nil","Type","Function","Description","Returns a function that will return the first child of the given uivalue that has the given attribute set to value.","Parameters","attribute - The attribute to check. value - The value to check.","Returns","A function that will return the first child of the given uivalue that has the given attribute set to value.","Notes"]},{"l":"hasAttributeValue","p":["Signature","cp.fn.ax.hasAttributeValue(attribute, value) - function(uivalue) - boolean","Type","Function","Description","Returns a function that returns true if the given uivalue has the given attribute set to the value.","Parameters","attribute - The attribute to check for. value - The value to check for.","Returns","A function that accepts an axuielement uivalue which in turn returns true if the uivalue has the given attribute set to the value.","Notes"]},{"l":"hasRole","p":["Signature","cp.fn.ax.hasRole(role) - function(uivalue) - boolean","Type","Function","Description","Returns a function that returns true if the given uivalue has the given AXRole.","Parameters","role - The role to check for.","Returns","A function that accepts an axuielement uivalue which in turn returns true if the uivalue has the given AXRole.","Notes"]},{"l":"init","p":["Signature","cp.fn.ax.init(elementType, ...) - function(parent, uiFinder) - cp.ui.Element","Type","Function","Description","Creates a function that will create a new cp.ui.Element of the given elementType with the given parent and uiFinder.","Parameters","elementType - The type of cp.ui.Element to create.... - Any additional arguments to pass to the elementType constructor.","Returns","A function that will create a new cp.ui.Element of the given elementType with the given parent and uiFinder.","Notes","Any additional arguments will be passed to the elementType constructor after the parent and uiFinder. If any of the additional arguments are a function, they will be called with the parent and uiFinder as the first two arguments when being passed into the constructor."]},{"l":"initElements","p":["Signature","cp.fn.ax.initElements(parent, elementsUiFinder, elementInits) - table of cp.ui.Element","Type","Function","Description","Creates a table of cp.ui.Element s of the given elementInits with the given parent and uiFinder. Any additional elements provided by elementsUiFinder which don't have a matching elementInits will be ignored.","Parameters","parent - The parent cp.ui.Element to use for the created cp.ui.Element s. elementsUiFinder - A function or cp.prop that will return a table of axuielement s to use as the elements for the created cp.ui.Element s. elementInits - A table of function s that will create cp.ui.Element s.","Returns","A table of cp.ui.Element s.","Notes"]},{"l":"isUIElement","p":["Signature","cp.fn.ax.isUIElement(value) - boolean","Type","Function","Description","Checks to see if the value is an axuielement","Parameters","value - The value to check","Returns","true if the value is an axuielement","Notes"]},{"l":"isValid","p":["Signature","cp.fn.ax.isValid(element) - boolean","Type","Function","Description","Checks if the axuilelement is still valid - that is, still active in the UI.","Parameters","element - the axuielement","Returns","true if the element is valid.","Notes"]},{"l":"leftToRight","p":["Signature","cp.fn.ax.leftToRight(a, b) - boolean","Type","Function","Description","Returns true if element a is left of element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is left of b.","Notes"]},{"l":"matchesIf","p":["Signature","cp.fn.ax.matchesIf(...) - function(value) - boolean","Type","Function","Description","Creates a function which will return true if the value is either an axuielement, an Element, or a callable(function) that returns an axuielement that matches the predicate.","Parameters","... - Any number of predicates, all of which must return a truthy value for the value to match.","Returns","A function which will return true if the value is a match.","Notes"]},{"l":"narrowToWide","p":["Signature","cp.fn.ax.narrowToWide(a, b) - boolean","Type","Function","Description","Returns true if element a is narrower than element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is narrower than b.","Notes"]},{"l":"performAction","p":["Signature","cp.fn.ax.performAction(action) - function(uivalue) - axuielement | false | nil, errString","Type","Function","Description","Performs the given action on the given uivalue.","Parameters","action - The action to perform (e.g. \"AXPress\")","Returns","A function that accepts an axuielement uivalue which in turn returns the result of performing the action.","Notes"]},{"l":"prop","p":["Signature","cp.fn.ax.prop(uiFinder, attributeName[, settable]) - cp.prop","Type","Function","Description","Creates a new cp.prop which will find the hs.axuielement via the uiFinder and get/set the value (if settable is true).","Parameters","uiFinder - the cp.prop or function which will retrieve the current hs.axuielement. attributeName - the AX atrribute name the property links to. settable - Defaults to false. If true, the property will also be settable.","Returns","The cp.prop for the attribute.","Notes","If the uiFinder is a cp.prop, it will be monitored for changes, making the resulting prop\"live\"."]},{"l":"rightToLeft","p":["Signature","cp.fn.ax.rightToLeft(a, b) - boolean","Type","Function","Description","Returns true if element a is right of element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is right of b.","Notes"]},{"l":"setAttribute","p":["Signature","cp.fn.ax.setAttribute(name) - function(newValue, uivalue) - nil","Type","Function","Description","Returns a function which will set the AX value of uivalue(if present) the given name from the given value. If the uivalue is not present, it will not attempt to set the new value.","Parameters","name - The name of the attribute to set. Eg. AXValue.","Returns","A function which will set the AX value of the given name from the given uivalue. The newValue will be passed to the setAttributeValue method of the uivalue. The uivalue will attempt to be resolved via uielement. This is safe to use as a cp.prop:mutate setter, since it will take the newValue and uivalue in the correct order and resolve the uivalue.","Notes"]},{"l":"shortToTall","p":["Signature","cp.fn.ax.shortToTall(a, b) - boolean","Type","Function","Description","Returns true if element a is shorter than element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is shorter than b.","Notes"]},{"l":"topDown","p":["Signature","cp.fn.ax.topDown(a, b) - boolean","Type","Function","Description","Compares two axuielement values, ordering them linearly, from top-to-bottom, left-to-right. See the Notes section for more information.","Parameters","a - The first axuielement to compare. b - The second axuielement to compare.","Returns","true if a is above or to the left of b in the UI, false otherwise.","Notes","1. If both elements intersect vertically by more than 50% their heights, they are considered to be on the same line. 2. If not on the same line, the element whose bottom edge is highest is before the other. 3. If they are both still equal, the left-most element is before the other. 4. If they are both still equal, the shortest element is before the other. 5. If they are both still equal, the narrowest element is before the other."]},{"l":"topToBottom","p":["Signature","cp.fn.ax.topToBottom(a, b) - boolean","Type","Function","Description","Returns true if element a is above element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is above b.","Notes"]},{"l":"topToBottomBaseAligned","p":["Signature","cp.fn.ax.topToBottomBaseAligned(a, b) - boolean","Type","Function","Description","Returns true if the base of element a is above the base of element b, based on linear vertical alignment. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is above b.","Notes","Two elements are considered to be aligned if the intersection of the height is at least 50% of the height of both elements."]},{"l":"uielement","p":["Signature","cp.fn.ax.uielement(uivalue) - axuielement | nil","Type","Function","Description","Returns the axuielement for the given uivalue.","Parameters","uivalue - The value to get the axuielement from.","Returns","The axuielement for the given value or nil.","Notes","If the value is an axuielement, it is returned. If the value is a table with a callable UI field, the UI field is called and the result is returned. If the value is callable, it is called and the result is returned. Otherwise, nil is returned."]},{"l":"uielementList","p":["Signature","cp.fn.ax.uielementList(value) - table of axuielement | nil","Type","Function","Description","Returns the axuielement list for the given value, if available.","Parameters","value - The value to get the axuielement list from.","Returns","The axuielement list for the given value or nil.","Notes","If the value is a table with a UI field, the UI field is called and the result is returned if it is a list. If the value is callable (i.e. a function), it is called and the result is returned if it is a list. If the value is a table, it is returned. Otherwise, nil is returned."]}],[{"i":"cpfnprop","l":"cp.fn.prop","p":["A module of free-standing functions for working with cp.prop values."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","mutate"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"mutate","p":["Signature","cp.fn.prop.mutate(getFn[, setFn]) - function(prop) - cp.prop","Type","Function","Description","A function combinator which returns a function that receives a cp.prop and creates a mutated cp.prop based on the getFn and setFn provided.","Parameters","getFn - A function that receives the current value and returns the modified value of the prop. setFn - (optional) A function that receives the modified value, along with the current value of the prop and returns a original value of the prop.","Returns","A cp.prop that is the result of the mutation.","Notes","Unlike cp.prop:mutate(...), the getFn receives the actual current value when called, rather than the cp.prop itself, and no additional parameters. Also unlike cp.prop:mutate(...), the setFn is called with the mutated value and the current value, rather than the cp.prop itself, and no additional parameters."]}],[{"i":"cpfnstring","l":"cp.fn.string","p":["String-related functional programming helpers."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","isEmpty","match"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"isEmpty","p":["Signature","cp.fn.string.isEmpty(str) - boolean","Type","Function","Description","Checks if the string is empty.","Parameters","str - The string to check.","Returns","true if the string is empty, false otherwise.","Notes"]},{"l":"match","p":["Signature","cp.fn.string.match(pattern) - function(str) - ...","Type","Function","Description","Creates a function that matches the given pattern. Any groups in the pattern will be returned as multiple values.","Parameters","pattern - The pattern to match.","Returns","A function that takes a string and returns the matches.","Notes"]}],[{"i":"cpfntable","l":"cp.fn.table","p":["Table-related functions."]},{"l":"API Overview","p":["call","Constants- Useful values which cannot be changed","copy","filter","first","firstMatching","flatten","Functions- API calls offered directly by the extension","get","hasAtLeast","hasAtMost","hasExactly","hasLessThan","hasMoreThan","hasValue","imap","isEmpty","isNotEmpty","last","map","matchesExactItems","mutate","set","size","sort","split","this","zip","zipAll"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"this","p":["Signature","cp.fn.table.this - table","Type","Constant","Description","A table which can have any named property key, which will be a function combinator that expects to receive a table and returns the value at the specified key. These are essentially equivalent statements: cp.fn.table.this.key and cp.fn.table.get key."]},{"l":"Functions"},{"l":"call","p":["Signature","cp.fn.table.call(name, ...) - function(table) - ...","Type","Function","Description","Calls a function on a table with the specified name. Any additional arguments are passed to the function.","Parameters","name - The name of the function to call.... - Any additional arguments to pass to the function.","Returns","The function that will accept a table and call the function with the specified name.","Notes"]},{"l":"copy","p":["Signature","cp.fn.table.copy(table) - table","Type","Function","Description","Performs a shallow copy of the specified table using pairs.","Parameters","table - The table to copy.","Returns","A copy of the table.","Notes"]},{"l":"filter","p":["Signature","cp.fn.table.filter([predicate]) - function(table) - table","Type","Function","Description","Returns a function that filters a table using the given predicate. If the predicate is not provided, the original table will be returned unchanged.","Parameters","predicate - A function that takes a value and returns true if the value should be included in the filtered table.","Returns","A function that takes a table and returns a filtered table.","Notes"]},{"l":"first","p":["Signature","cp.fn.table.first(table) - any | nil","Type","Function","Description","Returns the first value in the table.","Parameters","table - The table to get the first value from.","Returns","The first value in the table. May be nil.","Notes"]},{"l":"firstMatching","p":["Signature","cp.fn.table.firstMatching(predicate) - function(table) - any | nil","Type","Function","Description","Returns a function that will return the first value in the table that matches the predicate.","Parameters","predicate - A function that will be passed each value in the table. If it returns true, the value will be returned.","Returns","A function that will return the first value in the table that matches the predicate. May be nil.","Notes"]},{"l":"flatten","p":["Signature","cp.fn.table.flatten(t) - table","Type","Function","Description","Flattens a table.","Parameters","t - The table to flatten.","Returns","A new table with all values flattened.","Notes","This function will not flatten nested tables. If the table has an n field, it will be used as the length, instead of #t."]},{"l":"get","p":["Signature","cp.fn.table.get(key) - function(table) - any","Type","Function","Description","Returns a function that returns the value at the specified key in a table.","Parameters","key - The key to get the value for.","Returns","A function that takes a table and returns the value at the specified key.","Notes"]},{"l":"hasAtLeast","p":["Signature","cp.fn.table.hasAtLeast(count) - function(table) - boolean","Type","Function","Description","Returns a function that checks if the table has at least the given number of items.","Parameters","count - The number of items to check for.","Returns","A function that takes a table and returns true if the table has at least the given number of items, otherwise false.","Notes"]},{"l":"hasAtMost","p":["Signature","cp.fn.table.hasAtMost(count) - function(table) - boolean","Type","Function","Description","Returns a function that checks if the table has at most the given number of items.","Parameters","count - The number of items to check for.","Returns","A function that takes a table and returns true if the table has at most the given number of items, otherwise false.","Notes"]},{"l":"hasExactly","p":["Signature","cp.fn.table.hasExactly(count) - function(table) - boolean","Type","Function","Description","Returns a function that checks if the table has exactly the given number of items.","Parameters","count - The number of items to check for.","Returns","A function that takes a table and returns true if the table has exactly the given number of items, otherwise false.","Notes"]},{"l":"hasLessThan","p":["Signature","cp.fn.table.hasLessThan(count) - function(table) - boolean","Type","Function","Description","Returns a function that checks if the table has less than the given number of items.","Parameters","count - The number of items to check for.","Returns","A function that takes a table and returns true if the table has less than the given number of items, otherwise false.","Notes"]},{"l":"hasMoreThan","p":["Signature","cp.fn.table.hasMoreThan(count) - function(table) - boolean","Type","Function","Description","Returns a function that checks if the table has more than the given number of items.","Parameters","count - The number of items to check for.","Returns","A function that takes a table and returns true if the table has more than the given number of items, otherwise false.","Notes"]},{"l":"hasValue","p":["Signature","cp.fn.table.hasValue(key[, predicate]) - function(table) - boolean","Type","Function","Description","Returns a function that checks if the table has a value at the specified key. If a predicate is provided, the value is checked using the predicate.","Parameters","key - The value to check for. predicate - An optional predicate to use to check the value.","Returns","A function that takes a table and returns true if the table has the given value, otherwise false.","Notes"]},{"l":"imap","p":["Signature","cp.fn.table.imap(fn, values) - table of any | ...","Type","Function","Description","Maps a function over a table using ipairs. The function is passed the current value and the key.","Parameters","fn - The function to map. values - The table or list of arguments to map over.","Returns","A table or list of the results of the function.","Notes","If the values are a table, the results will be a table. Otherwise, the results will be a vararg list."]},{"l":"isEmpty","p":["Signature","cp.fn.table.isEmpty(table) - boolean","Type","Function","Description","Returns true if the table is empty.","Parameters","table - The table to check.","Returns","true if the table is empty, otherwise false.","Notes"]},{"l":"isNotEmpty","p":["Signature","cp.fn.table.isNotEmpty(table) - boolean","Type","Function","Description","Returns true if the table is not empty.","Parameters","table - The table to check.","Returns","true if the table is not empty, otherwise false.","Notes"]},{"l":"last","p":["Signature","cp.fn.table.last(table) - any | nil","Type","Function","Description","Returns the last value in the table.","Parameters","table - The table to get the last value from.","Returns","The last value in the table. May be nil.","Notes"]},{"l":"map","p":["Signature","cp.fn.table.map(fn, t) - table of any","Type","Function","Description","Maps a function over a table using pairs. The function is passed the current value and the key.","Parameters","fn - The function to map. t - The table arguments to map over.","Returns","A table with the values updated via the function.","Notes"]},{"l":"matchesExactItems","p":["Signature","cp.fn.table.matchesExactItems(...) - function(table) - boolean","Type","Function","Description","Returns a function that will return true if the table exactly the number of items that match the provided list of predicates.","Parameters","... - A list of predicates.","Returns","A function that will return true if the table exactly the number of items that match the provided list of predicates.","Notes"]},{"l":"mutate","p":["Signature","cp.fn.table.mutate(key) - function(fn) - function(table) - table","Type","Function","Description","Returns a function that accepts an immutible transformer function, which returns another function that accepts a table. When called, it will apply the transformation to the named key in the table.","Parameters","key - The key to set.","Returns","A function.","Notes","The returned function will mutate the table passed in, as well as returning it. Example usage: fn.table.mutate(foo)(function(value) return value + 1 end)({value = 1})"]},{"l":"set","p":["Signature","cp.fn.table.set(key, value) - function(table) - table","Type","Function","Description","Returns a function that accepts a table and sets the value at the specified key.","Parameters","key - The key to set. value - The value to set.","Returns","A function.","Notes"]},{"l":"size","p":["Signature","cp.fn.table.size(t) - number","Type","Function","Description","Returns the size of the table.","Parameters","t - The table to get the size of.","Returns","The size of the table.","Notes"]},{"l":"sort","p":["Signature","cp.fn.table.sort(...) - function(table) - table","Type","Function","Description","A combinator that returns a function that accepts a table and returns a new table, sorted with the compare functions.","Parameters","... - The list of compare functions to use, in order.","Returns","A function.","Notes","The compare functions should take two arguments and return true if the first argument is less than the second. The returned result will be a shallow copy of the original in a new table. The original table will not be modified. If no compare functions are provided, the table will be sorted \"natural\" sorting order ( a b). Example usage: fn.table.sort(function(a, b) return a b end)({1, 2, 3})"]},{"l":"split","p":["Signature","cp.fn.table.split(predicate) - function(table) - table of tables, table","Type","Function","Description","Returns a function that accepts a table and splits it into multiple tables whenever it encounters a value that matches the predicate. The final table is a list containing each table that was split, followed by a table containing the splitter values.","Parameters","predicate - A function that will be passed each value in the table. If it returns true, the value will be returned.","Returns","A function that accepts a table to split and returns a table of tables, followed by a table of splitter values","Notes"]},{"l":"zip","p":["Signature","cp.fn.table.zip(lists) - table | ...","Type","Function","Description","Zips a series of lists together, returning a list combining the values from the provided lists. The returned list will have the same length as the shortest list. Each sub-list will contain the values from the corresponding list in the argument list.","Parameters","lists - A table or list of lists.","Returns","A function which returns a list combining the values from the provided lists.","Notes","If a table is provided, a table is returned. If a vararg is provided, a vararg is returned."]},{"l":"zipAll","p":["Signature","cp.fn.table.zipAll(lists) - function","Type","Function","Description","Zips a series of lists together, returning a list of lists. The returned list will have the same length as the longest list. Each sub-list will contain the values from the corresponding list in the argument list.","Parameters","lists - A table or list of lists.","Returns","A list of lists.","Notes"]}],[{"i":"cpfnvalue","l":"cp.fn.value","p":["A collection of functions for working with values."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","default","filter","is","map","matches"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"default","p":["Signature","cp.fn.value.default(...) - function(...) - ...","Type","Function","Description","A combinator that takes a list of default values and returns a function that accepts a list of values and returns the same number of values, with either the value passed in or the default value if that value is nil.","Parameters","... - A list of default values.","Returns","A function that accepts a list of values and returns the same number of values, with either the value passed in or the default value if that value is nil.","Notes","Example: cp.fn.value.default(1, 2, 3)(5, nil, 6) -- returns 5, 2, 6"]},{"l":"filter","p":["Signature","cp.fn.value.filter(predicate, ...) - function(value) - value | nil","Type","Function","Description","Filters a value using a list of predicates which must all be true to succeed.","Parameters","predicate - A function that takes a value and returns true or false.... - Optional additional predicates which must all be true to succeed.","Returns","A function that takes a value and returns the value if the predicates all return true, otherwise nil.","Notes"]},{"l":"is","p":["Signature","cp.fn.value.is(other) - function(value) - boolean","Type","Function","Description","Returns a function that returns true if the value is equal to the other value. If other is a function, then it will be called with no arguments and the result will be compared.","Parameters","other - A value or a function that returns a value.","Returns","A function that takes a value and returns true if the value is equal to the other value, otherwise false.","Notes"]},{"l":"map","p":["Signature","cp.fn.value.map(mapper) - function(value) - any | nil","Type","Function","Description","If the value is not nil, then it will be passed to the mapper function and the result returned.","Parameters","mapper - A function that takes a value and returns a value.","Returns","A function that takes a value and returns the result of the mapper function, or nil if the value is nil.","Notes"]},{"l":"matches","p":["Signature","cp.fn.value.matches(predicate, ...) - function(value) - boolean","Type","Function","Description","Returns a function that returns true if the value matches the predicates.","Parameters","predicate - A function that takes a value and returns true or false.... - Optional additional predicates which must all be true to succeed.","Returns","A function that takes a value and returns true if the value matches the all predicates, otherwise false.","Notes"]}],[{"i":"cphighland2","l":"cp.highland2","p":["Highland 2 support."]},{"l":"Submodules","p":["cp.highland2.Document","cp.highland2.Sidebar","cp.highland2.app"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","documents","focusedDocument"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"documents","p":["Signature","cp.highland2.documents cp.prop: table of cp.highland2.Document","Type","Field","Description","The list of Documents currently open."]},{"l":"focusedDocument","p":["Signature","cp.highland2.focusedDocument cp.prop: cp.highland2.Document","Type","Field","Description","The currently-focused Document, if applicable."]}],[{"i":"cphighland2app","l":"cp.highland2.app","p":["The cp.app for Highland 2."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cphighland2document","l":"cp.highland2.Document","p":["Highland 2 Document Window extension."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Fields- Variables which can only be accessed from an object returned by a constructor","documentPath","doShow","revisionMode","sidebar","splitter","sprint","templatePicker","text","themePicker"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.highland2.Document.matches(element) - boolean","Type","Function","Description","Checks if the element is a Document.","Parameters","element - The element to check.","Returns","true if the element matches, false otherwise.","Notes"]},{"l":"Fields"},{"l":"documentPath","p":["Signature","cp.highland2.Document:documentPath() - cp.prop string; live","Type","Field","Description","The current path for the document."]},{"l":"doShow","p":["Signature","cp.highland2.Document.doShow cp.rx.go.Statement","Type","Field","Description","A Statement that will show the Document when run."]},{"l":"revisionMode","p":["Signature","cp.highland2.Document.revisionMode cp.ui.Button","Type","Field","Description","The Revision Mode button."]},{"l":"sidebar","p":["Signature","cp.highland2.Document.sidebar cp.highland2.Sidebar","Type","Field","Description","The Sidebar."]},{"l":"splitter","p":["Signature","cp.highland2.Document.splitter cp.ui.Splitter","Type","Field","Description","The Splitter."]},{"l":"sprint","p":["Signature","cp.highland2.Document.sprint cp.ui.Button","Type","Field","Description","The Sprint button."]},{"l":"templatePicker","p":["Signature","cp.highland2.Document.templatePicker cp.ui.Button","Type","Field","Description","The Template Picker button."]},{"l":"text","p":["Signature","cp.highland2.Document.text cp.ui.TextArea","Type","Field","Description","The TextArea containing the document text."]},{"l":"themePicker","p":["Signature","cp.highland2.Document.themePicker cp.ui.Button","Type","Field","Description","The Theme Picker button."]}],[{"i":"cphighland2sidebar","l":"cp.highland2.Sidebar","p":["Represents the sidebar for a document opened in Highland."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","document","doHide","doShow"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"document","p":["Signature","cp.highland2.Sidebar.document cp.highland2.Document","Type","Field","Description","The Document this Sidebar belongs to."]},{"l":"doHide","p":["Signature","cp.highland2.Sidebar.doHide cp.rx.go.Statement","Type","Field","Description","A Statement that will attempt to hide the Sidebar, if possible."]},{"l":"doShow","p":["Signature","cp.highland2.Sidebar.doShow cp.rx.go.Statement","Type","Field","Description","A Statement that will attempt to show the Sidebar, if possible."]}],[{"i":"cpi18nlanguage","l":"cp.i18n.language","p":["Provides the set of ISO 693-1/2/3 language codes and names. The return value can be iterated as a list, or you can find a specific language by either its two-character code ( alpha2), English-based three-character code ( alpha3B), local name, or English name.","For example:","This will return a table containing the following:","alpha2- The 2-character language code (eg. \"en\", \"fr\").","alpha3- The 3-character language code (eg. \"eng\", \"fra\").","alpha3B- The 3-character English-derived language code (eg. \"eng\", \"fre\").","alpha3T- The 3-character local-language-derived code (eg. \"eng\", \"fra\").","localName- The name in the local language (eg. \"English\", \"Français\").","name- The name in English (eg. \"English\", \"French\").","Notes: This data was adapted from arnubol's code under an MIT license."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpi18nlanguageid","l":"cp.i18n.languageID","p":["As per Apple's documentation, a language ID is a code which identifies either a language used across multiple regions, a dialect from a specific region, or a script used in multiple regions. See the parse function for details.","When you parse a code with the forCode function, it will result in a table that contains a reference to the approprate cp.i18n.language table, and up to one of either the matching cp.i18n.region or cp.i18n.script tables. These contain the full details for each language/regin/script, as appropriate.","You can also convert the resulting table back to the code via tostring, or the code method."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","parse","Constructors- API calls which return an object, typically one that offers API methods","forCode","forLocaleID","forParts","Fields- Variables which can only be accessed from an object returned by a constructor","code","language","region","script","Methods- API calls which can only be made on an object returned by a constructor","toLocaleID"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.i18n.languageID.is(thing) - boolean","Type","Function","Description","Checks if the thing is a languageID instance.","Parameters","thing - the thing to check.","Returns","true if the thing is a languageID, otherwise false.","Notes"]},{"l":"parse","p":["Signature","cp.i18n.languageID.parse(code) - string, string, string","Type","Function","Description","Parses a language ID. into three possible string components","Parameters","code - The language ID code. Eg. \"en-AU\".","Returns","language - The two-character lower-case alpha language code. script - the four-character mixed-case alpha script code. region - The two-character upper-case alpha region code.","Notes","Parses a language ID into three possible string components:** The ISO 693-1 language code** The ISO 15924 script code** The ISO 3166-1 region code This is one of the following patterns:** [language]- eg. en, or fr. The covers the language across all languages and scripts.** [language]-[script]- eg. \"az-Arab\" for Azerbaijani in Arabic script, \"az-Latn\" for Azerbaijani in Latin script.** [language]-[region]- eg. \"en-AU\" for Australian English, \"fr-CA\" for Canadian French, etc. It will then return the matched component in three return values: language, script, region. If a script is specified, the region will be nil. Eg.: lua/lililocal lang, scrpt, rgn, scrpt = languageID.parse(en-AU) -- results in en, nil, AU/lili"]},{"l":"Constructors"},{"l":"forCode","p":["Signature","cp.i18n.languageID.forCode(code) - cp.i18n.languageID, string","Type","Constructor","Description","Creates, or retrieves from the cache, a languageID instance for the specified code.","Parameters","code - The language ID code.","Returns","The matching languageID, or nil if the language ID couldn't be found. The error message, or nil if there was no problem.","Notes","If the code can't be parsed, or if the actual language/region/script codes don't exist, nil is returned."]},{"l":"forLocaleID","p":["Signature","cp.i18n.languageID.forLocaleID(code[, prioritiseScript]) - cp.i18n.languageID, string","Type","Constructor","Description","Creates, or retrieves from the cache, a languageID instance for the specified cp.i18n.localeID.","Parameters","locale - The localeID to convert prioritiseScript - If set to true and the locale has both a region and script then the script code will be used.","Returns","The languageID for the locale, or nil The error message if there was a problem.","Notes","Language IDs can only have either a script or a region, so if the locale has both, this will priortise the region by default. You can set prioritiseScript to true to use script instead. If only one or the other is set in the locale, prioritiseScript is ignored."]},{"l":"forParts","p":["Signature","cp.i18n.languageID.forParts(languageCode[, scriptCode[, regionCode]]) - cp.i18n.languageID","Type","Constructor","Description","Returns a languageID with the specified parts.","Parameters","languageCode - Language code scriptCode - Optional Script code regionCode - Optional Region Code","Returns","A cp.i18n.languageID object.","Notes"]},{"l":"Fields"},{"l":"code","p":["Signature","cp.i18n.languageID.code string","Type","Field","Description","The language ID code."]},{"l":"language","p":["Signature","cp.i18n.languageID.language cp.i18n.language","Type","Field","Description","The matching language details."]},{"l":"region","p":["Signature","cp.i18n.languageID.region cp.i18n.region","Type","Field","Description","The matching region details, if appropriate. Will be nil if no region was specified in the code."]},{"l":"script","p":["Signature","cp.i18n.languageID.script cp.i18n.script","Type","Field","Description","The matching script details, if appropriate. Will be nil if no script was specified in the code."]},{"l":"Methods"},{"l":"toLocaleID","p":["Signature","cp.i18n.languageID:toLocaleID() - cp.i18n.localeID","Type","Method","Description","Returns the cp.i18n.localeID equivalent for this languageID.","Parameters","None","Returns","The matching localeID.","Notes"]}],[{"i":"cpi18nlocaleid","l":"cp.i18n.localeID","p":["As per Apple's documentation, a locale ID is a code which identifies either a language used across multiple regions, a dialect from a specific region, a script used in multiple regions, or a combination of all three. See the parse function for details.","When you parse a code with the forCode function, it will result in a table that contains a reference to the approprate cp.i18n.language table, and any specified cp.i18n.region or cp.i18n.script tables. These contain the full details for each language/regin/script, as appropriate.","You can also convert the resulting table back to the code via tostring, or the code method."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","parse","Constructors- API calls which return an object, typically one that offers API methods","forCode","Fields- Variables which can only be accessed from an object returned by a constructor","code","language","localName","name","region","script","Methods- API calls which can only be made on an object returned by a constructor","matches"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.i18n.localeID.is(other) - boolean","Type","Function","Description","Checks if the other is a localeID.","Parameters","other - the other value to check.","Returns","true if it is a cp.i18n.locale, otherwise false.","Notes"]},{"l":"parse","p":["Signature","cp.i18n.localeID.parse(code) - string, string, string","Type","Function","Description","This function will first attempt to determine the language, script and region by using hs.host.locale.details(). If that fails, it will use Lua patterns as described below.","Parameters","code - The locale ID code. Eg. \"en_AU\".","Returns","language - The two-character lower-case alpha language code. region - The two-character upper-case alpha region code. script - the four-character mixed-case alpha script code.","Notes","This function will first attempt to determine the language, script and region by using hs.host.locale.details(). If that fails, it will use Lua patterns as described below. Parses a language ID into three possible string components:** The ISO 693-1 language code** The ISO 15924 script code** The ISO 3166-1 region code This is one of the following patterns:** [language]- eg. en, or fr. This covers the language across all languages and scripts. We also allow the full name (eg. \"English\" or \"French\") since this seems common in Apple's I18N management.** [language]_[region]- eg. \"en_AU\" for Australian English, \"fr_CA\" for Canadian French, etc.** [language]-[script]- eg. \"az-Arab\" for Azerbaijani in Arabic script, \"az-Latn\" for Azerbaijani in Latin script.** [language]-[script]_[region]- eg. \"en-Latin-AU\" It will then return the matched component in three return values: language, script, region. If a region is specified, the script will be nil. Eg.: lua/lililocal lang, scrpt, rgn = localeID.parse(en_AU) -- results in en, nil, AU/lili"]},{"l":"Constructors"},{"l":"forCode","p":["Signature","cp.i18n.localeID.forCode(code) - cp.i18n.localeID or nil","Type","Constructor","Description","Creates, or retrieves from the cache, a localeID instance for the specified code.","Parameters","code - The language ID code.","Returns","The matching langaugeID, or nil.","Notes","If the code can't be parsed, or if the actual language/region/script codes don't exist, nil is returned."]},{"l":"Fields"},{"l":"code","p":["Signature","cp.i18n.localeID.code string","Type","Field","Description","The locale ID code."]},{"l":"language","p":["Signature","cp.i18n.localeID.language cp.i18n.language","Type","Field","Description","The matching language details."]},{"l":"localName","p":["Signature","cp.i18n.localeID.localName string","Type","Field","Description","The local name in it's own language."]},{"l":"name","p":["Signature","cp.i18n.localeID.name string","Type","Field","Description","The locale name in English."]},{"l":"region","p":["Signature","cp.i18n.localeID.region cp.i18n.region","Type","Field","Description","The matching region details, if appropriate. Will be nil if no region was specified in the code."]},{"l":"script","p":["Signature","cp.i18n.localeID.script cp.i18n.script","Type","Field","Description","The matching script details, if appropriate. Will be nil if no script was specified in the code."]},{"l":"Methods"},{"l":"matches","p":["Signature","cp.i18n.localeID:matches(otherLocale) - number","Type","Method","Description","This compares the otherLocale to this locale and returns a number indicating the 'strength' of the match.","Parameters","otherLocale - The other locale to compare to.","Returns","A number from 0 to 3 indicating the match strength.","Notes","It will be a value between 0 and 3. The script and region in any locale are optional, and if they are not provided, they are considered \"open\" and will match with another locale which has the script or region defined. However, it is considered to be a weaker match. For example: lua/lililocal l = localeID.forCode/lililocal en, en_AU, en_Latn, en_Latn_AU, en_NZ, de = l(en), l(en_AU), l(en-Latn), l(en-Latn_AU), l(en_NZ), l(de)/lili/lilien:matches(de) == 0 -- no match - different language/lili/lilien:matches(en) == 3 -- language, script, and region match exactly/lilien:matches(en_AU) == 2.5 -- language and script match, region half-match with one side open./lilien:matches(en_Latn) == 2.5 -- language and region match, script half-match with one side open./lilien:matches(en_Latn_AU) == 2 -- language matches, two half-matches for script and region./lili/lilien_AU:matches(en_AU) == 3 -- exact match/lilien_AU:matches(en) == 2.5 -- language and script match, region half-match with a `nil` on one side./lilien_AU:matches(en_NZ) == 2 -- language and script match, but no match between specific regions./lilien_AU:matches(en_Latn_AU) == 2.5 -- language and region match exactly, and the optional `script` value is different./lili The higher the match value, the closer they are to matching. If selecting a from multiple locales which match you will generally want the highest-ranking match."]}],[{"i":"cpi18nregion","l":"cp.i18n.region","p":["Provides the set of ISO 3166-1 region codes and names. The return value can be iterated as a list, or you can find a specific region by either its upper-case two-character code ( alpha2), three-character numeric code ( numeric3), or English name ( name).","For example:","This will return a table containing the following:","alpha2- The 2-character region code, upper-case (eg. \"AU\", \"FR\").","name- The name in English (eg. \"Australia\", \"France\").","Notes: This data was adapted from the datahub.io list released under a Public Domain license."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpi18nscript","l":"cp.i18n.script","p":["Provides the set of ISO 15924 language scripts. The return value can be iterated as a list, or you can find a specific language by either its four-character code ( alpha4), three-character numeric code ( numeric3), local name, or English name.","For example:","This will return a table containing the following:","alpha4- The 4-character script code (eg. \"Hani\", \"Arab\").","date- The YYYY-MM-DD date the script was added.","name- The name in English (eg. \"Arabic\", \"Afaka\").","numeric3- The 3-character language code (eg. \"500\", \"050\").","pva- The Property Value Alias. Not available on all scripts.","Notes: This data was adapted from wooorm's code under an MIT license."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpidle","l":"cp.idle","p":["This library allows tasks to be queue for execution when the computer has been idle for a specified amount of time. 'Idle' is defined as no keyboard or mouse movement."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","queue"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"queue","p":["Signature","cp.idle.queue(idleSeconds, actionFn[, retryOnError]) - nothing","Type","Function","Description","Adds an action to the idle queue, which will be run after the the computer has been idle for at least the specified number of seconds. It may be longer, if other items are on the queue, or if other tasks are running in the application.","Parameters","idleSeconds- The number of seconds of idle time must have elapsed run the action actionFn- The function to execute retryOnError- Optional. If set to true, the action will try running again if there is an error.","Returns","Nothing","Notes"]}],[{"i":"cpids","l":"cp.ids","p":["Allows managing values/IDs which can vary between versions."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","new","Methods- API calls which can only be made on an object returned by a constructor","currentVersion","load","of","ofCurrent","previousVersion","versions"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"new","p":["Signature","cp.ids.new(path[, currentVersionFn]) - cp.ids","Type","Function","Description","Creates a new ids instance with the specified path to the version files and a function to find the current version, if appropriate.","Parameters","path- The path to the version files. currentVersionFn- An optional function that will return the current version as a string or semver.","Returns","A new cp.ids instance.","Notes"]},{"l":"Methods"},{"l":"currentVersion","p":["Signature","cp.ids:currentVersion() - semver","Type","Method","Description","Returns the current version number for the IDs library. May be nil.","Parameters","None","Returns","A semver with the version number or nil if none is available.","Notes"]},{"l":"load","p":["Signature","cp.ids:load([version]) - table","Type","Method","Description","Loads and caches IDs for the given version. It will search through previous versions, with each subsequent version file overriding the previous version's value, if present.","Parameters","version - The version number you want to load as a string (i.e. \"10.4.0\"). If not provided, the current version is loaded.","Returns","A table containing all the IDs","Notes"]},{"l":"of","p":["Signature","cp.ids:of(version, subset) - function","Type","Method","Description","Returns a function which can be called to retrieve a specific value for the specified version.","Parameters","version - The version number you want to load as a string (i.e. \"10.4.0\") subset - A string containing the subset of data you want to load","Returns","A function that will return the value of the specified subset ID for the specified version.","Notes","For example: lua/lililocal id = ids:of(10.4.0, CommandEditor)/liliprint bar = ..id(bar)/lili"]},{"l":"ofCurrent","p":["Signature","cp.ids:ofCurrent(subset) - function","Type","Method","Description","Returns a function which can be called with an ID to retrieve a specific value for the current version.","Parameters","subset - A string containing the subset of data you want to load","Returns","A function that will return the value of the specified subset ID for the current version.","Notes"]},{"l":"previousVersion","p":["Signature","cp.ids:previousVersion([version]) - semver","Type","Method","Description","Returns the previous version number that has stored IDs.","Parameters","version - The version number you want to load as a string (i.e. \"10.4.0\") or a semver, or nil to use the current version.","Returns","A semver instance for the previous version.","Notes"]},{"l":"versions","p":["Signature","cp.ids:versions() - table","Type","Method","Description","Returns a table of versions.","Parameters","None","Returns","A table of semver objects.","Notes"]}],[{"i":"cpinterpolate","l":"cp.interpolate","p":["Provides a function that will interpolate values into a string. It also augments the standard string to override the \"mod\" (%) operator so that any string can be easily interpolated, like so:"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpis","l":"cp.is","p":["A simple class that lets you test if a value is a particular type. Notes: for best performance, assign the specific checks you want to use to local functions. Eg:","You can also get functions that negate the functions below by calling is.nt.XXX(...)(read: \"isn't XXX\"). The individual functions are not documented, but all will work as expected. Eg:","They can also be assigned directly to local values for better performance:"]},{"l":"API Overview","p":["blank","boolean","callable","falsey","fn","Functions- API calls offered directly by the extension","instance","list","nothing","number","object","something","string","table","truthy","userdata"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"blank","p":["Signature","cp.is.blank(value) - boolean","Type","Function","Description","Check if the value is a blank string value - either nil or tostring(value) == .","Parameters","value - the value to check.","Returns","true if it matches, false if not.","Notes"]},{"l":"boolean","p":["Signature","cp.is.boolean(value) - boolean","Type","Function","Description","Check if the value is a function.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"callable","p":["Signature","cp.is.callable(value) - boolean","Type","Function","Description","Check if the value is a callable - either a function or a table with __call in it's metatable hierarchy.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"falsey","p":["Signature","cp.is.falsey(value) - boolean","Type","Function","Description","Check if the value is a falsey value. A value is considered to be falsey if it is nil or false.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"fn","p":["Signature","cp.is.fn(value) - boolean","Type","Function","Description","Check if the value is a function.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"instance","p":["Signature","cp.is.instance(value, class) - boolean","Type","Function","Description","Check if the value is an instance of the provided class table. It is considered an instance if the class is either the value itself, or is the __index or __class field of the metatable.","Parameters","value - the value to check class - the class table to check","Returns","true if it is an instance.","Notes"]},{"l":"list","p":["Signature","cp.is.list(value) - boolean","Type","Function","Description","Check if the value is a list.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"nothing","p":["Signature","cp.is.nothing(value) - boolean","Type","Function","Description","Check if the value is nil.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"number","p":["Signature","cp.is.number(value) - boolean","Type","Function","Description","Check if the value is a number.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"object","p":["Signature","cp.is.object(value) - boolean","Type","Function","Description","Check if the value is a object.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"something","p":["Signature","cp.is.something(value) - boolean","Type","Function","Description","Check if the value is not nil.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"string","p":["Signature","cp.is.string(value) - boolean","Type","Function","Description","Check if the value is a string.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"table","p":["Signature","cp.is.table(value) - boolean","Type","Function","Description","Check if the value is a table.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"truthy","p":["Signature","cp.is.truthy(value) - boolean","Type","Function","Description","Check if the value is a truthy value. A value is considered to be truthy if it is not nil nor false.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]},{"l":"userdata","p":["Signature","cp.is.userdata(value) - boolean","Type","Function","Description","Check if the value is a userdata object.","Parameters","value - the value to check","Returns","true if it matches, false if not.","Notes"]}],[{"i":"cpjson","l":"cp.json","p":["A collection of handy JSON tools."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","decode","encode","prop","read","write"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"decode","p":["Signature","cp.json.decode(jsonString) - table","Type","Function","Description","Decodes JSON into a table","Parameters","jsonString - A string containing some JSON data","Returns","A table representing the supplied JSON data","Notes","This is useful for retrieving some of the more complex lua table structures as a persistent setting (see hs.settings)"]},{"l":"encode","p":["Signature","cp.json.encode(val[, prettyprint]) - string","Type","Function","Description","Encodes a table as JSON","Parameters","val - A table containing data to be encoded as JSON prettyprint - An optional boolean, true to format the JSON for human readability, false to format the JSON for size efficiency. Defaults to false","Returns","A string containing a JSON representation of the supplied table","Notes","This is useful for storing some of the more complex lua table structures as a persistent setting (see hs.settings)"]},{"l":"prop","p":["Signature","cp.json.prop(path, folder, filename, defaultValue[, errorCallbackFn]) - cp.prop","Type","Function","Description","Returns a cp.prop instance for a JSON file.","Parameters","path - The path to the JSON folder (i.e. \"~/Library/Caches\") folder - The folder containing the JSON file (i.e. \"Final Cut Pro\") filename - The filename of the JSON file (i.e. \"Test.json\") defaultValue - The default value if the JSON file doesn't exist yet. errorCallbackFn - An optional function that's triggered if something goes wrong.","Returns","A cp.prop instance.","Notes","The optional errorCallbackFn should accept one parameter, a string with the error message."]},{"l":"read","p":["Signature","cp.json.read(path) - table | nil","Type","Function","Description","Attempts to read the specified path as a JSON file. If the file cannot be found, nil is returned. If the file is not a JSON file, an error will occur.","Parameters","path - The JSON file path.","Returns","The JSON file converted into table, or nil.","Notes"]},{"l":"write","p":["Signature","cp.json.write(path, data) - boolean","Type","Function","Description","Writes data to a JSON file.","Parameters","path - The path to where you want to save the JSON file. data - A table containing data to be encoded as JSON.","Returns","true if successfully saved, otherwise false.","Notes"]}],[{"i":"cpjust","l":"cp.just","p":["This module provides functions to help with performing tasks which may be delayed, up to a finite number of loops."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","doUntil","doWhile","wait"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"doUntil","p":["Signature","cp.just.doUntil(actionFn[, timeout[, frequency]]) - value","Type","Function","Description","Performs an action function, looping until the result of the function evaluates to true(or a non-nil value). It will halt after the timeout in seconds after checking every frequency seconds.","Parameters","actionFn- a fuction which is called on each loop. It should return a 'truthy' value. timeout- (optional) the number of seconds after which we will give up. Defaults to 1 second. frequency- (optional) the amount of time in seconds between checks. Defaults to 1 millisecond.","Returns","The last return value of the action function.","Notes"]},{"l":"doWhile","p":["Signature","cp.just.doWhile(actionFn[, timeout[, frequency]]) - value","Type","Function","Description","Performs an 'action' function, looping while the result of the function evaluates to true. It will halt after timeout seconds, checking with the specified frequency.","Parameters","actionFn- a fuction which is called on each loop. It should return a 'truthy' value. timeout- (optional) the number of seconds after which we will give up. Defaults to 1 second. frequency- (optional) the time between checks. Defaults to 1 millisecond.","Returns","The last return value of the action function.","Notes"]},{"l":"wait","p":["Signature","cp.just.wait(periodInSeconds) - nil","Type","Function","Description","Pauses the application for the specified number of seconds.","Parameters","periodInSeconds - the number of seconds to pause for.","Returns","None","Notes"]}],[{"i":"cplazy","l":"cp.lazy","p":["cp.lazy is a middleclass\"mix-in\" that allows for simple specification of \"lazy-loaded\" values and functions in class definitions.","Some values and function results in classes are only created once, and may never be created, depending on what happens in the class's lifetime.","In these cases, it is useful to have the value created on demand, rather than when the instance is initialised.","For methods, this can be done like so with standard Lua code:","For values, it is much trickier, and involves overriding the metatable.__init function. Which is what this mix-in does for you. It allows you to provide a factory function which will be called just once in the object's lifetime, and the result is stored for future calls.","To create a lazy function or method, do the following:","To create a lazy value, it's the same, except applied to the value table:","Note that it is a 'method' function, so you can use self to refer to the specific instance that the result will be applied to. The factory function is also passed the key value the result is getting applied to as the next parameter, so you can do something like this:","The expensiveLookup function would only get called once for each method, caching the result for future calls.","You can also create cp.prop values:","The returned cp.prop will be automatically bound to the new instance and labeled with the key (\"enabled\" in the example above).","You can also create statement methods or values, which expect a cachable cp.rx.go.Statement value to be returned. The Statement will automatically be labeled with the \"class:method\" name for debugging purposes.","For example:"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cplocalized","l":"cp.localized","p":["Helps look up localized names for folders."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","getLocalizedName"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"getLocalizedName","p":["Signature","cp.localized.getLocalizedName(path[, locale]) - string, string","Type","Function","Description","Returns the localized name for the path in the specified locale. If all else fails, the original folder name is returned. The 'unlocalized' folder name is returned as the second value, without .localized at the end, if it was present.","Parameters","path- The full path to the folder locale- The locale to retrieve the name for.","Returns","The localized name, or name if not available. The original name, minus .localized","Notes","This function will automatically convert a colon to a dash when localising."]}],[{"i":"cpnib","l":"cp.nib","p":["Provides support for NIB files."]},{"l":"Submodules","p":["cp.nib.archiver","cp.nib.type","cp.nib.types"]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","fromBytes"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"fromBytes","p":["Signature","cp.nib.fromBytes(data) - table | nil, string","Type","Method","Description","Unarchives the given string of bytes into a table, if it is a valid NIBArchive.","Parameters","data - The string of bytes to unarchive.","Returns","The table containing the unarchived data, or nil if the archive is not a valid NIBArchive. The string error message, if any.","Notes"]}],[{"i":"cpnibarchiver","l":"cp.nib.archiver","p":["Provides support for loading NIB files stored in the NIBArchive format."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","SIGNATURE","Functions- API calls offered directly by the extension","isSupported","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","fromFile"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"SIGNATURE","p":["cp.nib.archiver.SIGNATURE - string","Type","Constant","Description","Marks the data stream as an NIBArchive."]},{"l":"Functions"},{"l":"isSupported","p":["Signature","cp.nib.archiver.isSupported(data) - boolean","Type","Function","Description","Checks if the given data is an NIBArchive.","Parameters","data - The data to check.","Returns","true if the data is an NIBArchive, false otherwise.","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.nib.archiver.new(decoders) - cp.nib.archiver","Type","Constructor","Description","Creates a new cp.nib.archiver instance, with the specified list of decoders.","Parameters","decoders - The list of cp.nib.decoder functions to use.","Returns","The new cp.nib.archiver instance.","Notes"]},{"l":"Methods"},{"l":"fromFile","p":["Signature","cp.nib.archiver.fromFile(filename) - table | nil, string","Type","Method","Description","Attempts to read the specified filename and unarchives it into a table, if it is a valid NIBArchive.","Parameters","filename - The string of the file to read.","Returns","A table containing the archive data, or nil if the file could not be read. The string error message, if any.","Notes"]}],[{"i":"cpnibtypensstring","l":"cp.nib.type.NSString","p":["A metatype for unarchived NSString objects."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpnibtypes","l":"cp.nib.types","p":["A registry of supported object types for unarchived values."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cppattern","l":"cp.pattern","p":["Contains pattern matching utility functions."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","doesMatch"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"doesMatch","p":["Signature","cp.pattern.doesMatch(value, searchString[, options]) - boolean","Type","Function","Description","Checks if the provided value matches the search string, given the provided options.","Parameters","value - The value to check. searchString - The string values to match. options - The table of options.","Returns","true if the value matches the search string","Notes","Supported options: caseSensitive - If true, the case in the search string must match the value. exact - If true, the search string must match exactly somewhere within the value. If false, words separated by spaces can appear anywhere in the value. wholeWords - If true, either the whole string (if exact is true) or each word (if exact is false) must match at word boundaries."]}],[{"i":"cpplist","l":"cp.plist","p":["Reads & Writes plist data."]},{"l":"Submodules","p":["cp.plist.archiver","cp.plist.plistParser"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","base64ToTable","binaryFileToTable","binaryFileToXML","binaryToTable","fileToTable","isBinaryPlist","isBinaryPlistFile","isPlist","isPlistFile","isXMLPlist","isXMLPlistFile","xmlFileToTable","xmlToTable"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"base64ToTable","p":["Signature","cp.plist.base64ToTable(base64Data) - table | nil, string","Type","Function","Description","Converts base64 encoded Property List string into a Table.","Parameters","base64Data - Binary data encoded in base64 as a string","Returns","A table of the plist data A error message as string if an error occurs","Notes"]},{"l":"binaryFileToTable","p":["Signature","cp.plist.binaryFileToTable(plistFileName) - table | nil, string","Type","Function","Description","Converts the data from a Binary File into a LUA Table.","Parameters","plistFileName - Path & Filename of the Binary File","Returns","data - A table of plist data, or nil if there was a problem. err - The error message, or nil if there were no problems.","Notes"]},{"l":"binaryFileToXML","p":["Signature","cp.plist.binaryFileToXML(plistFileName) - string | nil, string","Type","Function","Description","Converts the data from a Binary plist File into XML as a string.","Parameters","plistFileName - Path & Filename of the Binary File","Returns","data - A string of XML data err - The error message, or nil if there were no problems.","Notes"]},{"l":"binaryToTable","p":["Signature","cp.plist.binaryToTable(binaryData) - table | nil, string","Type","Function","Description","Converts Binary Data into a LUA Table.","Parameters","binaryData - Binary data","Returns","data - A string of XML data err - The error message, or nil if there were no problems.","Notes"]},{"l":"fileToTable","p":["Signature","cp.plist.fileToTable(plistFileName) - table | nil, string","Type","Function","Description","Converts plist data from a binary or XML file into a LUA Table.","Parameters","plistFileName - Path & Filename of the XML File","Returns","data - A table of plist data, or nil if there was a problem. err - The error message, or nil if there were no problems.","Notes","It will check the file prior to loading to determine which type it is. If you know which type of file you're dealing with in advance, you can use cp.plist.xmlFileToTable() or hs.plist.binaryFileToTable() instead."]},{"l":"isBinaryPlist","p":["Signature","cp.plist.isBinaryPlist(data) - boolean","Type","Function","Description","Checks if the provided data is a binary plist.","Parameters","data - The data to check","Returns","true if it is a binary plist, false otherwise.","Notes"]},{"l":"isBinaryPlistFile","p":["Signature","cp.plist.isBinaryPlistFile(plistList) - boolean","Type","Function","Description","Returns true if plistList is a binary plist file otherwise false.","Parameters","plistList - Path to the file","Returns","Boolean","Notes"]},{"l":"isPlist","p":["Signature","cp.plist.isPlist(data) - boolean","Type","Function","Description","Checks if the data is either a binary or XML plist data string.","Parameters","data - The data to check","Returns","true if the data is a plist, false otherwise.","Notes"]},{"l":"isPlistFile","p":["Signature","cp.plist.isPlistFile(plistFileName) - boolean","Type","Function","Description","Checks if the provided file is a binary or XML plist file.","Parameters","plistFileName - Path & Filename of the XML File","Returns","true if it is a binary or XML plist file, false otherwise.","Notes"]},{"l":"isXMLPlist","p":["Signature","cp.plist.isXMLPlist(data) - boolean","Type","Function","Description","Checks if the provided data is an XML plist.","Parameters","data - The data to check","Returns","true if it is an XML plist, false otherwise.","Notes","This will only check if it is an XML file, it does not check the actual format is correct."]},{"l":"isXMLPlistFile","p":["Signature","cp.plist.isXMLPlistFile(plistList) - boolean","Type","Function","Description","Returns true if plistList is (probably) an XML plist file otherwise false.","Parameters","plistList - Path to the file","Returns","Boolean","Notes"]},{"l":"xmlFileToTable","p":["Signature","cp.plist.xmlFileToTable(plistFileName) - table | nil, string","Type","Function","Description","Converts XML data from a file into a LUA Table.","Parameters","plistFileName - Path & Filename of the XML File","Returns","data - A table of plist data, or nil if there was a problem. err - The error message, or nil if there were no problems.","Notes"]},{"l":"xmlToTable","p":["Signature","cp.plist.xmlToTable(plistXml) - table | nil, string","Type","Function","Description","Converts an XML plist string into a LUA Table.","Parameters","plistXml - The XML string","Returns","data - A table of plist data, or nil if there was a problem. err - The error message, or nil if there were no problems.","Notes"]}],[{"i":"cpplistarchiver","l":"cp.plist.archiver","p":["Supports 'defrosting' a table which is made up from an 'NSKeyArchiver' record."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","isPlist","unarchive","unarchiveBase64","unarchiveFile"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"isPlist","p":["Signature","cp.plist.archiver.isPlist(data) - boolean","Type","Function","Description","Checks if the given data is a supported plist.","Parameters","data - The data to check.","Returns","true if the data is a supported plist, false otherwise.","Notes"]},{"l":"unarchive","p":["Signature","cp.plist.archiver.unarchive(archive, defrostFn) - table | nil, string","Type","Function","Description","Unarchives a LUA table which was archived into a plist using the NSKeyedArchiver.","Parameters","archive- the table containing the archive plist as a table defrostFn- (optional) a function which will be passed an object with a '$class' entry","Returns","The unarchived plist table","Notes","A 'defrost' function can be provided, which will be called whenever a table with a '$class' structure is present. It will receive the table and the classname and should either return a modified value if the class was handled, or nil if it was unable to handle the class. Eg:/lili local result = archiver.unarchive(archiveData, function(frozen, classname)/lili if classname == XXMyClass then/lili return MyClass:new(frozen.foo, frozen.bar)/lili end/lili return nil/lili end)/lili"]},{"l":"unarchiveBase64","p":["Signature","cp.plist.archiver.unarchiveBase64(base64data, defrostFn) - table | nil, string","Type","Function","Description","Unarchives a Base64 encoded string which was archived into a plist using the NSKeyedArchiver.","Parameters","base64data- the file containing the archive plist defrostFn- (optional) a function which will be passed an object with a '$class' entry","Returns","The unarchived plist.","Notes","A 'defrost' function can be provided, which will be called whenever a table with a '$class' structure is present. It will receive the table and the classname and should either return a modified value if the class was handled, or nil if it was unable to handle the class. Eg:/lili local result = archiver.unarchiveFile(filename, function(frozen, classname)/lili if classname == XXMyClass then/lili return MyClass:new(frozen.foo, frozen.bar)/lili end/lili return nil/lili end)/lili"]},{"l":"unarchiveFile","p":["Signature","cp.plist.archiver.unarchiveFile(filename, defrostFn) - table | nil, string","Type","Function","Description","Unarchives a plist file which was archived into a plist using the NSKeyedArchiver.","Parameters","filename- the file containing the archive plist defrostFn- (optional) a function which will be passed an object with a '$class' entry","Returns","The unarchived plist.","Notes","A 'defrost' function can be provided, which will be called whenever a table with a '$class' structure is present. It will receive the table and the classname and should either return a modified value if the class was handled, or nil if it was unable to handle the class. Eg:/lili local result = archiver.unarchiveFile(filename, function(frozen, classname)/lili if classname == XXMyClass then/lili return MyClass:new(frozen.foo, frozen.bar)/lili end/lili return nil/lili end)/lili"]}],[{"i":"cpplistplistparser","l":"cp.plist.plistParser","p":["plistParser ( https://codea.io/talk/discussion/1269/code-plist-parser) version 1.01","based on an XML parser by Roberto Ierusalimschy at: lua-users.org/wiki/LuaXml","Takes a string-ified .plist file as input, and outputs a table. Nested dictionaries and arrays are parsed into subtables. Table structure will match the structure of the .plist file","Usage:"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpplugins","l":"cp.plugins","p":["This is a simple plugin manager."]},{"l":"Functions","p":["It has a few core functions:"]},{"i":"pluginsinit","l":"plugins.init(...)","p":["This function will load all enabled plugins in the specified 'parent' folders. For example:","This will load all plugins in the current user's Library/Application Support/CommandPost/Plugins folder."]},{"i":"cppluginsgetpluginmoduleid","l":"cp.plugins.getPluginModule(id)","p":["Once the plugins have been loaded, the module can be accessed by their ID via the getPluginModule(id) function. It will return the module returned by the plugin's init function. This can also be done via the default function for the library. Eg:"]},{"l":"Plugin Modules","p":["Plugins typically have two parts:","The plugin table, which defines details about the plugin, and","The module, or result, which could be anything, which is returned from the init function.","A plugin file should return a plugin table that allows the plugin to be initialised. The table will look something like this:","As you can see above, plugin module can have a few simple functions and properties. The key ones are:"]},{"i":"pluginid","l":"plugin.id","p":["This is a unique ID for the plugin. It is used to load the plugin externally, as well as to define dependencies between plugins."]},{"i":"plugingroup","l":"plugin.group","p":["This is the group ID for the plugin. This is used to group plugins visually in the Properties panel for Plugins."]},{"i":"pluginrequired","l":"plugin.required","p":["This optional property can be specified for plugins which should never be disabled. This should only be set for plugins which will break the application if disabled."]},{"i":"plugindependencies","l":"plugin.dependencies","p":["This is a table with the list of other plugins that this plugin requires to be loaded prior to this plugin. Be careful of creating infinite loops of dependencies - we don't check for them currently!","It is defined like so:","A plugin will only have its init function called after its dependencies have successfully had their init functions called. Additionally, if a plugin has a postInit, all declared postInits for dependencies will have been called prior to the plugin's postInit function."]},{"i":"function-plugininitdependencies-environment---module","l":"function plugin.init(dependencies[, environment]) - module","p":["This function is basically required. It will be executed when the plugin is initialised. The dependencies parameter is a table containing the list of dependencies that the plugin defined via the dependencies property. The environment provides access to resources such as images, HTML files, or other lua modules that are bundled with the plugin. See Simple vs Complex Plugins below.","As you may have noted, there are two ways to specify a plugin is required. Either by simply specifying it as an 'array' item (the first example) or as a key/value (the second example). Doing the later allows you to specify an alias for the dependency, which can be used in the init(...) function, like so:"]},{"l":"Simple vs Complex Plugins","p":["There are two types of plugin structures supported. The Simple version is a single .lua file that matches the above format for plugin. The Complex version is a folder containing an init.lua file that matches the above format.","The key advantage of Complex Plugins is that the folder can contain other resources, such as images, HTML templates, or other .lua files - including 3rd-party libraries if desired. These can be accessed via two main mechanisms:","The second environment parameter in the init function. This is a cp.plugins.env table, which provides access to files and templates inside the plugin folder. See the documentation for details.","The standard require method will allow loading of *.lua files inside the plugin from the init.lua.","For example, if you have a file called foo.lua in your folder, it can be required like so:","You do not have to know anything about where the plugin folder is stored, or use the plugin ID. Just use the local file path within the plugin. If you have another file in a foo folder called bar.lua, it can be loaded via:","These modules will not be accessible to other plugins or to the main application. They are only available to code inside the plugin."]},{"l":"Submodules","p":["cp.plugins.env","cp.plugins.plugin"]},{"l":"API Overview","p":["addDependent","CACHE","Constants- Useful values which cannot be changed","disable","enable","Functions- API calls offered directly by the extension","getDependents","getPlugin","getPluginIds","getPluginModule","getPlugins","IDS","init","initPlugin","initPlugins","isDisabled","loadComplexPlugin","loadDependencies","loadSimplePlugin","postInitPlugin","postInitPlugins","scanDirectory","SETTINGS_DISABLED","Variables- Configurable values","watchPluginPaths"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"CACHE","p":["Signature","cp.plugins.CACHE - table","Type","Constant","Description","Plugin Cache"]},{"l":"SETTINGS_DISABLED","p":["Signature","cp.plugins.SETTINGS_DISABLED - string","Type","Constant","Description","Plugin Disabled Code"]},{"l":"Variables"},{"l":"IDS","p":["Signature","cp.plugins.IDS - table","Type","Variable","Description","Plugin Status Codes"]},{"i":"functions-1","l":"Functions"},{"l":"addDependent","p":["Signature","cp.plugins.addDependent(id, dependentPlugin) - none","Type","Function","Description","Adds the dependentPlugin as a dependent of the plugin with the specified id.","Parameters","id- The plugin package ID. dependentPlugin- The plugin which is a dependent","Returns","None","Notes"]},{"l":"disable","p":["Signature","cp.plugins.disable(...) - boolean, string","Type","Function","Description","Disabled the plugin(s) with the specified IDs and reloads the application.","Parameters","...- The list of plugin package IDs.","Returns","true if the plugin was disabled, or false if any of the plugins failed. If disabling failed, the first ID that failed is returned as the second value.","Notes"]},{"l":"enable","p":["Signature","cp.plugins.enable(...) - boolean, string","Type","Function","Description","Enables the plugin with the specified ID, and reloads the application.","Parameters","...- The plugin package ID.","Returns","true if the plugins had been disabled and are now enabled. If enabling failed, the plugin ID which could not be enabled is returned as the second value.","Notes"]},{"l":"getDependents","p":["Signature","cp.plugins.getDependents(pluginId)","Type","Function","Description","Retrieves the list of dependent plugins for the specified plugin id.","Parameters","id- The plugin ID.","Returns","The table of dependents.","Notes"]},{"l":"getPlugin","p":["Signature","cp.plugins.getPlugin(id) - plugin","Type","Function","Description","Retrieves a plugin from the cache by ID.","Parameters","id - The ID of the plugin you want to get","Returns","The plugin","Notes"]},{"l":"getPluginIds","p":["Signature","cp.plugins.getPluginIds() - table","Type","Function","Description","Retrieves an array of the loaded plugin IDs.","Parameters","None","Returns","the list of plugin IDs.","Notes"]},{"l":"getPluginModule","p":["Signature","cp.plugins.getPluginModule(id) - value","Type","Function","Description","Returns an initialised plugin result with the specified id.","Parameters","id- The plugin package ID.","Returns","the result of the plugin's init(...) function call.","Notes"]},{"l":"getPlugins","p":["Signature","cp.plugins.getPlugins() - table","Type","Function","Description","Retrieves an array of details about the set of loaded plugins.","Parameters","None","Returns","the list of plugins.","Notes"]},{"l":"init","p":["Signature","cp.plugins.init(paths) - cp.plugins","Type","Function","Description","Initialises the plugin loader to look in the specified file paths for plugins.","Parameters","paths- An array of paths to search for plugins in.","Returns","cp.plugins- The module.","Notes","Plugins in earlier packages will take precedence over those in later paths, if there are duplicates. Eg: lua/liliplugins.init({~/Library/Application Support/CommandPost/Plugins})/lili"]},{"l":"initPlugin","p":["Signature","cp.plugins.initPlugin(id) - module","Type","Function","Description","Initialises a specific plugin with the specified path.","Parameters","id- The LUA package to look in","Returns","the result of the plugin's init(...) function call.","Notes","The plugin will only be loaded once, and the result of its init(...) function will be cached for future calls. Eg:/liliplugins.initPlugin(cp.plugins.test.helloworld)/lili"]},{"l":"initPlugins","p":["Signature","cp.plugins.initPlugins() - none","Type","Function","Description","Initialises all registered plugins.","Parameters","None","Returns","Notes"]},{"l":"isDisabled","p":["Signature","cp.plugins.isDisabled(id) - boolean","Type","Function","Description","Checks if the specified plugin ID is disabled. Plugins are enabled by default.","Parameters","id- The plugin package ID.","Returns","true if the plugin is disabled.","Notes"]},{"l":"loadComplexPlugin","p":["Signature","cp.plugins.loadComplexPlugin(path) - plugin","Type","Function","Description","Loads a 'complex' plugin, which is a folder containing an init.lua file.","Parameters","path- The plugin package ID.","Returns","true if the plugin is successfully post-initialised.","Notes","Complex plugins can also have other resources, accessible via an cp.plugins.env parameter passed to the init() function. For example, an image stored in the images folder inside the plugin can be accessed via: lua/lilifunction plugin.init(dependencies, env)/lili local imagePath = env:pathToAbsolute(image/example.jpg)/liliend/lili"]},{"l":"loadDependencies","p":["Signature","cp.plugins.loadDependencies(plugin) - table","Type","Function","Description","Loads the list of dependencies for the provided plugin.","Parameters","plugin- The plugin object","Returns","an array of the dependencies required by the plugin, or nil if any could not be loaded.","Notes"]},{"l":"loadSimplePlugin","p":["Signature","cp.plugins.loadSimplePlugin(id) - plugin","Type","Function","Description","Loads a 'simple' plugin, where it is defined by a single LUA script.","Parameters","path- The plugin package ID.","Returns","true if the plugin is successfully post-initialised.","Notes"]},{"l":"postInitPlugin","p":["Signature","cp.plugins.postInitPlugin(id) - boolean","Type","Function","Description","Runs any post-initialisation functions declared for the specified plugin ID. Any dependencies will be post-initialised prior to the plugin being post-initialised.","Parameters","id- The plugin package ID.","Returns","true if the plugin is successfully post-initialised.","Notes"]},{"l":"postInitPlugins","p":["Signature","cp.plugins.postInitPlugins() - none","Type","Function","Description","Performs any post-initialisation required for plugins.","Parameters","None","Returns","Notes"]},{"l":"scanDirectory","p":["Signature","cp.plugins.scanDirectory(directoryPath) - cp.plugins","Type","Function","Description","Scans the specified directory and loads any plugins in the directory, along with any in sub-directories.","Parameters","directoryPath- The path to the directory to scan.","Returns","boolean - true if the path was loaded successfully, false if there were any issues.","Notes","Plugins can be simple or complex. Simple plugins are a single *.lua file, not named init.lua. Complex plugins are folders containing an init.lua file."]},{"l":"watchPluginPaths","p":["Signature","cp.plugins.watchPluginPaths() - none","Type","Function","Description","Watches the plugin paths for changes and reloads the application if any change.","Parameters","None","Returns","Notes"]}],[{"i":"cppluginsenv","l":"cp.plugins.env","p":["Provides access to resources in the plugin environment. In generally, this will be files stored in a Complex Plugin's folder."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","compileTemplate","pathToAbsolute","pathToURL","readResource","renderTemplate"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","cp.plugins.env.new(rootPath) - cp.plugins.env","Type","Constructor","Description","Creates a new env pointing at the specified root folder path.","Parameters","rootPath the path to the plugin's root folder.","Returns","The new env instance.","Notes"]},{"l":"Methods"},{"l":"compileTemplate","p":["Signature","cp.plugins.env:compileTemplate(view[, layout]) - function","Type","Method","Description","Compiles a Resty Template within the context of the plugin. The view may be a resource path pointing at a template file in the plugin, or may be raw template markup. The layout is an optional path/template for a layout template. See the Resty Template documentation for details.","Parameters","view- The local path inside the plugin to the template file, or raw template markup. layout- The local path inside the plugin to the layout file.","Returns","A function which will render the template.","Notes","It returns a function which can have a model table passed in which will provide variables/functions/etc that the template can access while rendering. The function can be reused multiple times with different context values."]},{"l":"pathToAbsolute","p":["Signature","cp.plugins.env:pathToAbsolute(resourcePath) - string","Type","Method","Description","Returns the absolute path to the file referred to by the relative resource path. If an image is stored as images/my.jpg in the plugin, the resource path will be images/my.jpg. The result will be the full path to that file. If the file cannot be found in the plugin, it will look in the cp/resources/assets folder for globally-shared resources.","Parameters","resourcePath- The local path to the resource inside the plugin.","Returns","The absolute path to the resource, or nil if it does not exist.","Notes"]},{"l":"pathToURL","p":["Signature","cp.plugins.env:pathToURL(resourcePath) - string","Type","Method","Description","Returns an absolute file:// URL to the file referred to by the relative resource path. If an image is stored as images/my.jpg in the plugin, the resource path will be images/my.jpg. The result will be a URL to that file. If the file cannot be found in the plugin, it will look in the cp/resources/assets folder for globally-shared resources.","Parameters","resourcePath- The local path to the resource inside the plugin.","Returns","The absolute URL to the resource, or nil if it does not exist.","Notes"]},{"l":"readResource","p":["Signature","cp.plugins.env:readResource(resourcePath) - string","Type","Method","Description","Reads the contents of the resource at the specified resource path. This is returned as a string of data (which may or may not be an actual readable string, depending on the source content).","Parameters","resourcePath- The local path to the resource inside the plugin.","Returns","The contents of the resouce, or nil if the file does not exist.","Notes"]},{"l":"renderTemplate","p":["Signature","cp.plugins.env:renderTemplate(view[, model[, layout]]) - string","Type","Method","Description","Renders a Resty Template within the context of the plugin. The view may be a resource path pointing at a template file in the plugin, or may be raw template markup. The layout is an optional path/template for a layout template. See the Resty Template documentation for details.","Parameters","view- The local path inside the plugin to the template file, or raw template markup. model- The model which provides variables/functions/etc to the template. layout- The local path inside the plugin to the layout file.","Returns","A function which will render the template.","Notes","The model is a table which will provide variables/functions/etc that the template can access while rendering."]}],[{"i":"cppluginsplugin","l":"cp.plugins.plugin","p":["CommandPost Plugin."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpprop","l":"cp.prop","p":["This is a utility library for helping keep track of single-value property states. Each property provides access to a single value. Must be readable, but may be read-only. It works by creating a table which has a get and (optionally) a set function which are called when changing the state."]},{"i":"features","l":"Features:"},{"l":"1. Callable","p":["A prop can be called like a function once created. Eg:"]},{"l":"2. Togglable","p":["A prop comes with toggling built in - as long as the it has a set function. Continuing from the last example:","Note: Toggling a non-boolean value will flip it to nil and a subsequent toggle will make it true. See the toggle method for more details."]},{"l":"3. Watchable","p":["Interested parties can 'watch' the prop value to be notified of changes. Again, continuing on:","This will also work on AND and [OR][#or] properties. Any changes from component properties will trigger a notification."]},{"l":"4. Observable","p":["Similarly, you can 'observe' a prop as a cp.rx.Observer by calling the observe method:","These will never emit an onError or onComplete message, just onNext with either nil or the current value as it changes."]},{"l":"5. Combinable","p":["We can combine or modify properties with AND/OR and NOT operations. The resulting values will be a live combination of the underlying prop values. They can also be watched, and will be notified when the underlying prop values change. For example:","You can also use non-boolean properties. Any non- nil value is considered to be true."]},{"l":"6. Immutable","p":["If appropriate, a prop may be immutable. Any prop with no set function defined is immutable. Examples are the prop.AND and prop.OR instances, since modifying combinations of values doesn't really make sense.","Additionally, an immutable wrapper can be made from any prop value via either prop.IMMUTABLE(...) or calling the myValue:IMMUTABLE() method.","Note that the underlying prop value(s) are still potentially modifiable, and any watchers on the immutable wrapper will be notified of changes. You just can't make any changes directly to the immutable property instance.","For example:"]},{"l":"7. Bindable","p":["A property can be bound to an 'owning' table. This table will be passed into the get and set functions for the property if present. This is mostly useful if your property depends on internal instance values of a table. For example, you might want to make a property work as a method instead of a function:","To use a prop as a method, you need to attach it to the owning table, like so:","You can also use the prop.bind function to bind multple properties at once:","The prop.extend function will also bind any cp.prop values it finds:","The bound owner is passed in as the last parameter of the get and set functions."]},{"l":"8. Extendable","p":["A common use case is using metatables to provide shared fields and methods across multiple instances. A typical example might be:","If we want to make the name a property, we might try creating a bound property like this:","Unfortunately, this doesn't work as expected:","The fix is to use prop.extend when creating the new person. Rewrite person.new like so:","Now, this will work as expected:","The prop.extend function will set the source table as a metatable of the target, as well as binding any bound props that are in the source to target."]},{"l":"Tables","p":["Because tables are copied by reference rather than by value, changes made inside a table will not necessarily trigger an update when setting a value with an updated table value. By default, tables are simply passed in and out without modification. You can nominate for a property to make copies of tables (not userdata) when getting or setting, which effectively isolates the value being stored from outside modification. This can be done with the deepTable and shallowTable methods. Below is an example of them in action:","So, a little bit tricky. The general rule of thumb is:","If working with immutable objects, use the default value value copy, which preserves the original.","If working with an array of immutible objects, use the shallow table copy.","In most other cases, use a deep table copy."]},{"l":"API Overview","p":["ABOVE","AND","ATLEAST","ATMOST","BELOW","bind","cached","clear","clone","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","deepTable","EQ","extend","FALSE","Fields- Variables which can only be accessed from an object returned by a constructor","FROM","Functions- API calls offered directly by the extension","get","hasWatchers","id","IMMUTABLE","is","ISNOT","label","mainWindow","Methods- API calls which can only be made on an object returned by a constructor","mirror","monitor","mutable","mutate","NEQ","new","NIL","NOT","OR","owner","preWatch","set","shallowTable","THIS","toggle","toObservable","TRUE","unwatch","update","value","watch","wrap"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"NIL","p":["Signature","cp.prop.NIL - cp.prop","Type","Constant","Description","Returns a cp.prop which will always be nil.","Parameters","None","Returns","a new cp.prop instance with a value of nil."]},{"l":"Functions"},{"l":"bind","p":["Signature","cp.prop.bind(owner[, relaxed]) - function","Type","Function","Description","This provides a utility function for binding multiple properties to a single owner in a simple way.","Parameters","owner - The owner table to bind the properties to. relaxed - If true, then non- cp.prop fields will be ignored. Otherwise they generate an error.","Returns","A function which should be called, passing in a table of key/value pairs which are string/ cp.prop value.","Notes","If you are binding multiple cp.prop values that are dependent on other cp.prop values on the same owner (e.g. via mutate or a boolean join), you will have to break it up into multiple prop.bind(...) {...} calls, so that the dependent property can access the bound property. If a cp.prop provided as bindings already has a bound owner, it will be wrapped instead of bound directly. To use, do something like this: lua/lililocal o = {}/liliprop.bind(o) {/lili foo = prop.TRUE(),/lili bar = prop.THIS(Hello world),/lili}/lili This is equivalent to the following: lua/lililocal o = {}/lilio.foo = prop.TRUE():bind(o):label(foo)/lili-- alternately.../liliprop.THIS(Hello world):bind(o, bar)/lili It has the added benefit of checking that the target properties ('foo' and 'bar' in this case) have not already been assigned a value."]},{"l":"extend","p":["Signature","cp.prop.extend(target, source) - table","Type","Function","Description","Makes the target extend the source. It will copy all bound properties on the source table into the target, rebinding it to the target table. Other keys are inherited via the metatable.","Parameters","target- The target to extend source- The source to extend from","Returns","The target, now extending the source.","Notes"]},{"l":"is","p":["Signature","cp.prop.is(value) - boolean","Type","Function","Description","Checks if the value is an instance of a cp.prop.","Parameters","value- The value to check.","Returns","true if the value is an instance of cp.prop.","Notes"]},{"l":"Constructors"},{"l":"AND","p":["Signature","cp.prop.AND(...) - cp.prop","Type","Constructor","Description","Returns a new cp.prop which will be true if all cp.prop instances passed into the function return a truthy value.","Parameters","...- The list of cp.prop instances to 'AND' together.","Returns","a cp.prop instance.","Notes","The value of this instance will resolve by lazily checking the value of the contained cp.prop instances in the order provided. The first falsy value will be returned. Otherwise the last truthy value is returned. The instance is immutable. Once you have created an 'AND', you cannot 'OR' as a method. Eg, this will fail: prop.TRUE():AND(prop:FALSE()):OR(prop.TRUE()). This is to avoid ambiguity as to whether the 'AND' or 'OR' takes precedence. Is it (true and false) or true or true and (false or true)?. To combine 'AND' and 'OR' values, group them together when combining. Eg:(true and false) or true: prop.OR( prop.TRUE():AND(prop.FALSE()), prop.TRUE() ) true and (false or true): prop.TRUE():AND( prop.FALSE():OR(prop.TRUE()) )"]},{"l":"FALSE","p":["Signature","cp.prop.FALSE() - cp.prop","Type","Constructor","Description","Returns a new cp.prop which will cache internally, initially set to false.","Parameters","None","Returns","a cp.prop instance defaulting to false.","Notes"]},{"l":"FROM","p":["Signature","cp.prop.FROM(value) -- cp.prop","Type","Constructor","Description","Creates a new prop value, with the provided value.","Parameters","value- The value to use.","Returns","The new cp.prop instance.","Notes","If it's already a cp.prop, it will be returned directly. If it's a function, it will be treated as a get function. Otherwise, it will be returned as THIS"]},{"l":"IMMUTABLE","p":["Signature","cp.prop.IMMUTABLE(propValue) -- cp.prop","Type","Constructor","Description","Returns a new cp.prop instance which will not allow the wrapped value to be modified.","Parameters","propValue- The cp.prop value to wrap.","Returns","a new cp.prop instance which cannot be modified.","Notes","The original propValue can still be modified (if appropriate) and watchers of the immutable value will be notified when it changes."]},{"l":"new","p":["Signature","cp.prop.new(getFn, setFn, cloneFn) -- cp.prop","Type","Constructor","Description","Creates a new prop value, with the provided get and set functions.","Parameters","getFn- The function that will get called to retrieve the current value. setFn- (optional) The function that will get called to set the new value. cloneFn- (optional) The function that will get called when cloning the property.","Returns","The new cp.prop instance.","Notes","getFn signature: function([owner]) - anything owner- If this is attached as a method, the owner table is passed in. setFn signature: function(newValue[, owner]) newValue- The new value to store. owner- If this is attached as a method, the owner table is passed in. cloneFn signature: function(prop) - new cp.prop This can also be executed by calling the module directly. E.g. require('cp.prop')(myGetFunction)"]},{"l":"NOT","p":["Signature","cp.prop.NOT(propValue) - cp.prop","Type","Constructor","Description","Returns a new cp.prop which negates the provided propValue.","Parameters","propValue- Another cp.prop instance.","Returns","a cp.prop instance negating the propValue.","Notes","If the propValue is mutable, you can set the NOT property value and the underlying value will be set to the negated value. Be aware that the same negation rules apply when setting as when getting. Values are negated as follows: boolean- Switch between true and false nil- Switches to true- Switches to nil."]},{"l":"OR","p":["Signature","cp.prop.OR(...) - cp.prop","Type","Constructor","Description","Returns a new cp.prop which will return the first 'truthy' value provided by one of the provided properties. Otherwise, returns the last 'falsy' value.","Parameters","...- The list of cp.prop instances to 'OR' together.","Returns","a cp.prop instance.","Notes","The value of this instance will resolve by lazily checking the value of the contained cp.prop instances in the order provided. If any return true, no further instances will be checked. The instance is immutable, since there is no realy way to flip the component values of an 'OR' in a way that makes sense. Once you have created an 'OR', you cannot 'AND' as a method. Eg, this will fail: prop.TRUE():OR(prop:FALSE()):AND(prop.TRUE()). This is to avoid ambiguity as to whether the 'OR' or 'AND' takes precedence. Is it (true or false) and true or true or (false and true)?. To combine 'AND' and 'OR' values, group them together when combining. Eg:(true or false) and true: prop.AND( prop.TRUE():OR(prop.FALSE()), prop.TRUE() ) true or (false and true): prop.TRUE():OR( prop.FALSE():AND(prop.TRUE()) )"]},{"l":"THIS","p":["Signature","cp.prop.THIS([initialValue]) - cp.prop","Type","Constructor","Description","Returns a new cp.prop instance which will cache a value internally. It will default to the value of the initialValue, if provided.","Parameters","initialValue- The initial value to set it to (optional).","Returns","a new cp.prop instance.","Notes"]},{"l":"TRUE","p":["Signature","cp.prop.TRUE() - cp.prop","Type","Constructor","Description","Returns a new cp.prop which will cache internally, initially set to true.","Parameters","None","Returns","a cp.prop instance defaulting to true.","Notes"]},{"l":"Fields"},{"l":"mainWindow","p":["Signature","cp.prop.mainWindow cp.prop: cp.ui.Window; read-only; live","Type","Field","Description","The main Window, or nil if none is available."]},{"l":"Methods"},{"l":"ABOVE","p":["Signature","cp.prop:ABOVE() - cp.prop boolean; read-only","Type","Method","Description","Returns a new property comparing this property to something.","Parameters","something- A value, a function or a cp.prop to compare to.","Returns","New, read-only cp.prop which will be true if this property is greater than something.","Notes"]},{"i":"and-1","l":"AND","p":["Signature","cp.prop:AND(...) - cp.prop","Type","Method","Description","Returns a new cp.prop which will be true if this and all other cp.prop instances passed into the function return true.","Parameters","...- The list of cp.prop instances to 'AND' together.","Returns","a cp.prop instance.","Notes","See the AND Function for more details"]},{"l":"ATLEAST","p":["Signature","cp.prop:ATLEAST() - cp.prop boolean; read-only","Type","Method","Description","Returns a new property comparing this property to something.","Parameters","something- A value, a function or a cp.prop to compare to.","Returns","New, read-only cp.prop which will be true if this property is less than or equal to something.","Notes"]},{"l":"ATMOST","p":["Signature","cp.prop:ATMOST() - cp.prop boolean; read-only","Type","Method","Description","Returns a new property comparing this property to something.","Parameters","something- A value, a function or a cp.prop to compare to.","Returns","New, read-only cp.prop which will be true if this property is less than or equal to something.","Notes"]},{"l":"BELOW","p":["Signature","cp.prop:BELOW() - cp.prop boolean; read-only","Type","Method","Description","Returns a new property comparing this property to something.","Parameters","something- A value, a function or a cp.prop to compare to.","Returns","New, read-only cp.prop which will be true if this property is less than something.","Notes"]},{"i":"bind-1","l":"bind","p":["Signature","cp.prop:bind(owner, [key]) - cp.prop","Type","Method","Description","Binds the property to the specified owner. Once bound, it cannot be changed.","Parameters","owner- The owner to attach to. key- If provided, the property will be bound to the specified key.","Returns","the cp.prop","Notes","Throws an error if the new owner is nil. Throws an error if the owner already has a property with the name provided in key. Throws an error if the key is not a string value. Optionally, a key can be provided which will assign the cp.prop to the owner using that key. If the cp.prop does not have a label, the key will be used as the label."]},{"l":"cached","p":["Signature","cp.prop:cached() - prop","Type","Method","Description","This can be called once to enable caching of the result inside the prop.","Parameters","None","Returns","The cp.prop instance.","Notes","This can help with performance, but if there are other ways of modifying the original value outside the prop, it will potentially return stale values. You can force a reload via the update method."]},{"l":"clear","p":["Signature","cp.prop:clear() - nil","Type","Method","Description","Clears the property. Watchers will be notified if the value has changed.","Parameters","None","Returns","nil","Notes"]},{"l":"clone","p":["Signature","cp.prop:clone() - cp.prop","Type","Method","Description","Returns a new copy of the property.","Parameters","None","Returns","New cp.prop.","Notes"]},{"l":"deepTable","p":["Signature","cp.prop:deepTable([skipMetatable]) - prop","Type","Method","Description","This can be called once to enable deep copying of table values. By default, table s are simply passed in and out. If a sub-key of a table changes, no change will be registered when setting.","Parameters","skipMetatable- If set to true, copies will not copy the metatable into the new tables.","Returns","The cp.prop instance.","Notes","See shallowTable."]},{"l":"EQ","p":["Signature","cp.prop:EQ(something) - cp.prop boolean; read-only","Type","Method","Description","Synonym for IS.","Parameters","something- A value, a function or a cp.prop to compare to.","Returns","New, read-only cp.prop which will be true if this property is equal to something.","Notes"]},{"l":"get","p":["Signature","cp.prop:get() - value","Type","Method","Description","Returns the current value of the property.","Parameters","None","Returns","The current value.","Notes"]},{"l":"hasWatchers","p":["Signature","cp.prop:hasWatchers() - boolean","Type","Method","Description","Returns true if the property has any watchers.","Parameters","None","Returns","true if any watchers have been registered.","Notes"]},{"l":"id","p":["Signature","cp.prop:id() - number","Type","Method","Description","Returns the current ID.","Parameters","None","Returns","The ID value.","Notes"]},{"i":"immutable-1","l":"IMMUTABLE","p":["Signature","cp.prop:IMMUTABLE() - cp.prop","Type","Method","Description","Returns a new cp.prop instance wrapping this property which will not allow it to be modified.","Parameters","propValue- The cp.prop value to wrap.","Returns","a new cp.prop instance which cannot be modified.","Notes","The original property can still be modified (if appropriate) and watchers of the immutable value will be notified when it changes."]},{"i":"is-1","l":"IS","p":["Signature","cp.prop:IS(something) - cp.prop boolean; read-only","Type","Method","Description","Returns a new property returning true if the value is equal to something.","Parameters","something- A value, a function or a cp.prop to compare to.","Returns","New, read-only cp.prop which will be true if this property is equal to something.","Notes"]},{"l":"ISNOT","p":["Signature","cp.prop:ISNOT(something) - cp.prop boolean; read-only","Type","Method","Description","Returns a new property returning true when this property is not equal to something.","Parameters","something- A value, a function or a cp.prop to compare to.","Returns","New, read-only cp.prop which will be true if this property is NOT equal to something.","Notes"]},{"l":"label","p":["Signature","cp.prop:label([newLabel]) - string | cp.prop","Type","Method","Description","Gets and sets the property label. This is human-readable text describing the cp.prop. It is used when converting the prop to a string, for example.","Parameters","newLabel - (optional) if provided, this will be the new label.","Returns","Either the existing label, or the cp.prop itself if a new label was provided.","Notes"]},{"l":"mirror","p":["Signature","cp.prop:mirror(otherProp) - self","Type","Method","Description","Configures this prop and the other prop to mirror each other's values. When one changes the other will change with it. Only one prop needs to mirror.","Parameters","otherProp- The other prop to mirror.","Returns","The same property.","Notes"]},{"l":"monitor","p":["Signature","cp.prop:monitor(...) - cp.prop","Type","Method","Description","Adds an uncloned watch to the otherProp which will trigger an update check in this property.","Parameters","...- a list of other cp.prop values to monitor.","Returns","cp.prop- This prop value.","Notes"]},{"l":"mutable","p":["Signature","cp.prop:mutable() - boolean","Type","Method","Description","Checks if the cp.prop can be modified.","Parameters","None","Returns","true if the value can be modified.","Notes"]},{"l":"mutate","p":["Signature","cp.prop:mutate(getFn, [setFn]) - cp.prop anything; read-only","Type","Method","Description","Returns a new property that is a mutation of the current one.","Parameters","getFn- Get function setFn- An optional set function","Returns","A new cp.prop which will return a mutation of the property value.","Notes","Watchers of the mutant will be if a change in the current prop causes the mutation to be a new value. The getFn is a function with the following signature: lua/lilifunction(original, owner, prop) -- mutantValue/lili originalProp- The original cp.prop being mutated. owner- The owner of the mutator property, if it has been bound. mutantProp- The mutant property. mutantValue- The new value based off the original. You can ignore any parameters that you don't need. Most simply use the original prop. The setFn is optional, and is a function with the following signature: lua/lilifunction(mutantValue, original, owner, prop) -- nil/lili mutantValue- The new value being sent in. originalProp- The original property being mutated. owner- The owner of the mutant property, if it has been bound. mutantProp- The mutant property. Again, you can ignore any parameters that you don't need. If you want to set a new value to the original property, you can do so. It's recommended that you use original:set(...), which will allow setting nil values. For example: lua/lilianyNumber = prop.THIS(1)/liliisEven = anyNumber:mutate(function(original) return original() % 2 == 0 end)/lili :watch(function(even)/lili if even() then/lili print even/lili else/lili print odd/lili end/lili end)/lili/liliisEven:update() -- prints odd/lilianyNumber(10) -- prints even/liliisEven() == true -- no printing/lili"]},{"l":"NEQ","p":["Signature","cp.prop:NEQ(something) - cp.prop boolean; read-only","Type","Method","Description","A synonym for ISNOT","Parameters","something- A value, a function or a cp.prop to compare to.","Returns","New, read-only cp.prop which will be true if this property is NOT equal to something.","Notes"]},{"i":"not-1","l":"NOT","p":["Signature","cp.prop:NOT() - cp.prop","Type","Method","Description","Returns a new cp.prop which negates the current value.","Parameters","None","Returns","a cp.prop instance negating the current instance.","Notes","If this property is mutable, you can set the NOT property value and this property will be set to the negated value. Be aware that the same negation rules apply when setting as when getting. Values are negated as follows:** boolean- Switch between true and false** nil- Switches to true** - Switches to nil."]},{"i":"or-1","l":"OR","p":["Signature","cp.prop:OR(...) - cp.prop","Type","Method","Description","Returns a new cp.prop which will be true if this or any cp.prop instance passed into the function returns true.","Parameters","...- The list of cp.prop instances to 'OR' together.","Returns","a cp.prop instance.","Notes","See OR Function for more details."]},{"l":"owner","p":["Signature","cp.prop:owner() - table","Type","Method","Description","If this is a 'method', return the table instance the method is attached to.","Parameters","None","Returns","The owner table, or nil.","Notes"]},{"l":"preWatch","p":["Signature","cp.prop:preWatch(preWatchFn) - cp.prop","Type","Method","Description","Adds a function which will be called once if any watchers are added to this prop.","Parameters","preWatchFn- The function to call once when the prop is watched. Has the signature function(owner, prop).","Returns","Nothing","Notes","This allows configuration, typically for watching other events, but only if anything is actually watching this property value. If the prop already has watchers, this function will be called imediately."]},{"l":"set","p":["Signature","cp.prop:set(newValue) - value","Type","Method","Description","Sets the property to the specified value. Watchers will be notified if the value has changed.","Parameters","newValue- The new value to set. May be nil.","Returns","The current value of the prop. May not be the same as newValue.","Notes"]},{"l":"shallowTable","p":["Signature","cp.prop:shallowTable(skipMetatable) - prop","Type","Method","Description","This can be called once to enable shallow cloning of table values. By default, table s are simply passed in and out. If a sub-key of a table changes, no change will be registered when setting.","Parameters","None","Returns","The cp.prop instance.","Notes","See deepTable."]},{"l":"toggle","p":["Signature","cp.prop:toggle() - boolean | nil","Type","Method","Description","Toggles the current value.","Parameters","None","Returns","The new value.","Notes","If the value is immutable, an error will be thrown. If you toggle a non-boolean parameter twice, it will end up set to true. Values are modified as follows:** boolean- Switch between true and false** nil- Switches to true** - Switches to nil."]},{"l":"toObservable","p":["Signature","cp.prop:toObservable() - cp.rx.Observable","Type","Method","Description","Returns the cp.rx.Observable for the property. This will emit onNext() events with the current value whenever the cp.prop is updated. Any new subscriptions will receive the most recent value immediately.","Parameters","None","Returns","The Observable instance for the property.","Notes","It will only emit onNext events, never an onError or onCompleted event. This will trigger an update each time it is called."]},{"l":"unwatch","p":["Signature","cp.prop:unwatch(watchFn) - boolean","Type","Method","Description","Removes the specified watch method as a watcher, if present.","Parameters","watchFn- The original watch function to remove. Must be the same instance that was added.","Returns","true if the function was watching and successfully removed, otherwise false.","Notes","An example of adding and removing a watch: lua/lililocal prop, watcher = prop.TRUE():watch(function(value) print tostring(value) end)/liliprop:unwatch(watcher) == true/lili"]},{"l":"update","p":["Signature","cp.prop:update() - value","Type","Method","Description","Forces an update of the property and notifies any watchers if it has changed.","Parameters","None","Returns","The current value of the property.","Notes"]},{"l":"value","p":["Signature","cp.prop:value([newValue]) - value","Type","Method","Description","Returns the current value of the cp.prop instance. If a newValue is provided, and the instance is mutable, the value will be updated and the new value is returned. If it is not mutable, an error will be thrown.","Parameters","newValue- The new value to set the instance to.","Returns","The current boolean value.","Notes","If you need to set the property to nil, use the set method, otherwise it will be ignored. This method can also be called directly on the property, like so: lua/lililocal foo = prop.TRUE()/lilifoo() == foo:value()/lili"]},{"l":"watch","p":["Signature","cp.prop:watch(watchFn, notifyNow, uncloned) - cp.prop, function","Type","Method","Description","Adds the watch function to the value. When the value changes, watchers are notified by calling the function.","Parameters","watchFn- The watch function, with the signature function(newValue, owner). notifyNow- The function will be triggered immediately with the current state. Defaults to false. uncloned- If true, the watch function will not be attached to any clones of this prop.","Returns","cp.prop- The same cp.prop instance function- The watch function, which can be passed to unwatch to stop watching.","Notes","You can watch immutable values. Wrapped cp.prop instances may not be immutable, and any changes to them will cause watchers to be notified up the chain. The function should have the following signature: lua/lilifunction(value, owner, prop)/lili value- The new value of the property owner- The property owner. May be nil. prop- The property itself."]},{"l":"wrap","p":["Signature","cp.prop:wrap([owner[, key]]) - cp.prop anything","Type","Method","Description","Returns a new property that wraps this one. It will be able to get and set the same as this, and changes to this property will trigger updates in the wrapper.","Parameters","owner- (optional) If provided, the wrapper will be bound to the specified owner. key- (optional) If provided, the wrapper will be assigned to the owner with the specified key.","Returns","A new cp.prop which wraps this property.","Notes"]}],[{"i":"cpprotect","l":"cp.protect","p":["Utility function for protecting a table from being modified."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpresult","l":"cp.result","p":["Represents the result of an operation which may end in success or failure. If it is a success, a value is typically provided. If it is a failure, a message is typically provided.","Using this type allows for more structured checking when performing an operation which may fail in a number of ways, rather than just calling error and crashing out. For example:","Of course, simply checking the result and throwing an error is a common case, so you can achieve the same result like so:","If you want to perform other tasks, check for .failure or .success and perform the appropriate response."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","failure","from","okValue","success","valueErr","Methods- API calls which can only be made on an object returned by a constructor","get","log"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.result.is(value) - boolean","Type","Function","Description","Checks if the value is an instance of a cp.result.","Parameters","value- The value to check.","Returns","true if the value is an instance of cp.result.","Notes"]},{"l":"Constructors"},{"l":"failure","p":["Signature","cp.result.failure(message) - result","Type","Constructor","Description","Creates a new failure result, with the specified error message.","Parameters","message - Error message","Returns","A new result","Notes"]},{"l":"from","p":["Signature","cp.result.from(value, err) - result","Type","Constructor","Description","Provides a simple wrapper for the common value, err pattern of function error handling in Lua. If the err value is not nil, it will result in a failure, otherwise the value is passed to a success.","Parameters","value - The value if successful. err - The error message if there was a failure.","Returns","A result.success or result.failure.","Notes"]},{"l":"okValue","p":["Signature","cp.result.okValue(ok, value) - result","Type","Constructor","Description","Provides a simple wrapper for the common ok, value|err pattern of function error handling in Lua. If ok is true, value is the successful result, otherwise value is the error message.","Parameters","ok - if true, the operation was successful. value - ok is true, the successful value, otherwise the error message.","Returns","A result.success or result.failure.","Notes"]},{"l":"success","p":["Signature","cp.result.success(value) - result","Type","Constructor","Description","Creates a new success result, with the specified value.","Parameters","value - The specified value","Returns","A new result","Notes"]},{"l":"valueErr","p":["Signature","cp.result.valueErr(value, err) - result","Type","Constructor","Description","Provides a simple wrapper for the common value, err pattern of function error handling in Lua. If the err is not nil it will result in a failure with the message, otherwise the value is passed to a success.","Parameters","value - The value if successful. err - The error message if there was a failure.","Returns","A result.success or result.failure.","Notes"]},{"l":"Methods"},{"l":"get","p":["Signature","cp.result:get() - anything","Type","Method","Description","Gets the successful value, or throws an error with the provided message.","Parameters","None","Returns","The value if it was a success, otherwise throws an error.","Notes"]},{"l":"log","p":["Signature","cp.result:log([context]) - cp.result","Type","Method","Description","Logs the result to either the default channel (if success) or error channel (if failure), with the context string (if provided).","Parameters","context - A string that provides context for the logged value.","Returns","The same cp.result instance.","Notes"]}],[{"i":"cprx","l":"cp.rx","p":["Reactive Extensions for Lua.","RxLua gives Lua the power of Observables, which are data structures that represent a stream of values that arrive over time. They're very handy when dealing with events, streams of data, asynchronous requests, and concurrency.","Originally forked from: https://github.com/bjornbytes/rxlua","MIT License: https://github.com/bjornbytes/RxLua/blob/master/LICENSE"]},{"l":"Submodules","p":["cp.rx.AsyncSubject","cp.rx.BehaviorSubject","cp.rx.CooperativeScheduler","cp.rx.ImmediateScheduler","cp.rx.Observable","cp.rx.Observer","cp.rx.Reference","cp.rx.RelaySubject","cp.rx.Subject","cp.rx.TimeoutScheduler","cp.rx.go"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cprxasyncsubject","l":"cp.rx.AsyncSubject","p":["AsyncSubjects are subjects that produce either no values or a single value. If multiple values are produced via onNext, only the last one is used. If onError is called, then no value is produced and onError is called on any subscribed Observers. If an Observer subscribes and the AsyncSubject has already terminated, the Observer will immediately receive the value or the error."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","create","Methods- API calls which can only be made on an object returned by a constructor","onCompleted","onError","onNext","subscribe"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"create","p":["Signature","cp.rx.AsyncSubject.create() - cp.rx.AsyncSubject","Type","Constructor","Description","Creates a new AsyncSubject.","Parameters","None","Returns","The new AsyncSubject.","Notes"]},{"l":"Methods"},{"l":"onCompleted","p":["Signature","cp.rx.AsyncSubject:onCompleted() - nil","Type","Method","Description","Signal to all Observers that the AsyncSubject will not produce any more values.","Parameters","None","Returns","Notes"]},{"l":"onError","p":["Signature","cp.rx.AsyncSubject:onError(message) - nil","Type","Method","Description","Signal to all Observers that an error has occurred.","Parameters","message - A string describing what went wrong.","Returns","None","Notes"]},{"l":"onNext","p":["Signature","cp.rx.AsyncSubject:onNext(...) - nil","Type","Method","Description","Pushes zero or more values to the AsyncSubject.","Parameters","... - The values to send.","Returns","None","Notes"]},{"l":"subscribe","p":["Signature","cp.rx.AsyncSubject:subscribe(onNext, onError, onCompleted) - cp.rx.Reference","Type","Method","Description","Creates a new Observer and attaches it to the AsyncSubject.","Parameters","onNext","observer - A function called when the AsyncSubject produces a value or an existing Observer to attach to the AsyncSubject. onError - A function called when the AsyncSubject terminates due to an error. onCompleted - A funtion called when the AsyncSubject completes normally.","Returns","The Reference.","Notes"]}],[{"i":"cprxbehaviorsubject","l":"cp.rx.BehaviorSubject","p":["A Subject that tracks its current value. Provides an accessor to retrieve the most recent pushed value, and all subscribers immediately receive the latest value."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","create","getValue","onNext","subscribe"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"create","p":["Signature","cp.rx.BehaviorSubject.create(...) - cp.rx.BehaviorSubject","Type","Method","Description","Creates a new BehaviorSubject.","Parameters","... - The initial values.","Returns","The new BehaviorSubject.","Notes"]},{"l":"getValue","p":["Signature","cp.rx.BehaviorSubject:getValue() - anything","Type","Method","Description","Returns the last value emitted by the BehaviorSubject, or the initial value passed to the constructor if nothing has been emitted yet.","Parameters","None","Returns","The last value.","Notes","You can also call the BehaviorSubject as a function to retrieve the value. E.g. mySubject()."]},{"l":"onNext","p":["Signature","cp.rx.BehaviorSubject:onNext(...) - nil","Type","Method","Description","Pushes zero or more values to the BehaviorSubject. They will be broadcasted to all Observers.","Parameters","... - The values to send.","Returns","None","Notes"]},{"l":"subscribe","p":["Signature","cp.rx.BehaviorSubject:subscribe(observer, onError, onCompleted) - cp.rx.Reference","Type","Method","Description","Creates a new Observer and attaches it to the BehaviorSubject. Immediately broadcasts the most recent value to the Observer.","Parameters","observer - The Observer subscribing, or the function called when the BehaviorSubject produces a value. onError - A function called when the BehaviorSubject terminates due to an error. onCompleted - A function called when the BehaviorSubject completes normally.","Returns","The Reference","Notes"]}],[{"i":"cprxcooperativescheduler","l":"cp.rx.CooperativeScheduler","p":["Manages Observables using coroutines and a virtual clock that must be updated manually."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","create","Methods- API calls which can only be made on an object returned by a constructor","isEmpth","schedule","update"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"create","p":["Signature","cp.rx.CooperativeScheduler.create([currentTime]) - cp.rx.CooperativeScheduler","Type","Constructor","Description","Creates a new CooperativeScheduler.","Parameters","currentTime - A time to start the scheduler at. Defaults to 0.","Returns","The new CooperativeScheduler.","Notes"]},{"l":"Methods"},{"l":"isEmpth","p":["Signature","cp.rx.CooperativeScheduler:isEmpth() - cp.rx.CooperativeScheduler","Type","Method","Description","Returns whether or not the CooperativeScheduler's queue is empty.","Parameters","None","Returns","true if the scheduler is empty, otherwise false.","Notes"]},{"l":"schedule","p":["Signature","cp.rx.CooperativeScheduler:schedule(action[, delay]) - cp.rx.Reference","Type","Method","Description","Schedules a function to be run after an optional delay. Returns a Reference that will stop the action from running.","Parameters","action - The function to execute. Will be converted into a coroutine. The coroutine may yield execution back to the scheduler with an optional number, which will put it to sleep for a time period. delay - Delay execution of the action by a virtual time period. Defaults to 0.","Returns","The Reference.","Notes"]},{"l":"update","p":["Signature","cp.rx.CooperativeScheduler:update(delta) - nil","Type","Method","Description","Triggers an update of the CooperativeScheduler. The clock will be advanced and the scheduler will run any coroutines that are due to be run.","Parameters","delta - An amount of time to advance the clock by. It is common to pass in the time in seconds or milliseconds elapsed since this function was last called. Defaults to 0.","Returns","None","Notes"]}],[{"i":"cprxgo","l":"cp.rx.go","p":["Defines Statements to make processing of cp.rx.Observable values in ways that are more familiar to synchronous programmers.","A common activity is to perform some tasks, wait for the results and do some more work with those results.","Lets say you want to calculate the price of an item that is in US Dollars (USD) and output it in Australian Dollars (AUD). We have anItem that will return an Observable that fetches the item price, and an exchangeRate function that will fetch the current exchange rate for two currencies.","Using reactive operators, you could use the zip function to achieve this:","The final subscription will only be executed once both the priceInUSD() and exchangeRate(...) push a value. It will continue calling it while both keep producing values, but will complete if any of them complete.","Using the Given statement it would look like this:","For more information on using and creating statements, see the Statements documentation."]},{"l":"Submodules","p":["cp.rx.go.Do","cp.rx.go.Done","cp.rx.go.First","cp.rx.go.Given","cp.rx.go.If","cp.rx.go.Last","cp.rx.go.List","cp.rx.go.Require","cp.rx.go.Retry","cp.rx.go.SetProp","cp.rx.go.Statement","cp.rx.go.Throw","cp.rx.go.WaitUntil"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cprxgodo","l":"cp.rx.go.Do","p":["A Statement that will execute the provided resolvable values. This will resolve the provided values into Observables and pass on the first result of each to the next stage as individual parameters. This will continue until one of the Observables has completed, at which point other results from values are ignored.","For example:","This will result in:","For more power, you can add a Then to futher modify the results, or chain other operations."]},{"l":"Submodules","p":["cp.rx.go.Do.Then"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","Do","Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Do","p":["Signature","cp.rx.go.Do(...) - Do","Type","Constructor","Description","Begins the definition of a Do Statement.","Parameters","... - the list of resolvable values to evaluate.","Returns","A new Do Statement instance.","Notes"]},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.Do:Then(...) - Do.Then","Type","Method","Description","Call this to define what will happen once the Do values resolve successfully. The parameters can be any 'resolvable' type.","Parameters","... - The list of resolvable values to process for each Do result.","Returns","The Then Statement.Modifier.","Notes"]}],[{"i":"cprxgodothen","l":"cp.rx.go.Do.Then","p":["A Statement.Modifier of Do that defines what happens after the Do values resolve.","For example:","If a parameter is a function, it will be passed the results of the previous Do or Then parameters."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.Do.Then:Then(...) - Do.Then","Type","Method","Description","Allows another set of resolvables to be processed after a Then has resolved.","Parameters","... - The list of resolvable values to process.","Returns","Another Do.Then instance.","Notes"]}],[{"i":"cprxgodone","l":"cp.rx.go.Done","p":["A Statement that will complete without sending any values.","Example:"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","Done"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Done","p":["Signature","cp.rx.go.Done() - Done","Type","Constructor","Description","Creates a new Done Statement that will complete without sending any values.","Parameters","None","Returns","The Statement which will complete immediately.","Notes"]}],[{"i":"cprxgofirst","l":"cp.rx.go.First","p":["Extends: Statement","A Statement that will complete after the first result resolves."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","First"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"First","p":["Signature","cp.rx.go.First(resolvable) - First","Type","Constructor","Description","Creates a new First Statement that will return the first value from the resolvable and complete.","Parameters","resolvable - a resolvable value, of which the first result will be returned.","Returns","The Statement which will return the first value when executed.","Notes","Example: lua/liliFirst(someObservable)/lili"]}],[{"i":"cprxgogiven","l":"cp.rx.go.Given","p":["A Statement that will execute the provided resolvable values. This will resolve the provided values into Observables and pass on the first result of each to the next stage as individual parameters. This will continue until one of the Observables has completed, at which point other results from values are ignored."]},{"l":"Submodules","p":["cp.rx.go.Given.Then"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","Given","Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Given","p":["Signature","cp.rx.go.Given(...) - Given","Type","Constructor","Description","Begins the definition of a Given Statement.","Parameters","... - the list of resolvable values to evaluate.","Returns","A new Given Statement instance.","Notes","This will resolve the provided values into Observable s and pass on the first result of each to the next stage as individual parameters. This will continue until one of the Observables has completed, at which point other results from values are ignored. For example: lua/liliGiven(Observable.of(1, 2, 3), Observable.of(a, b))/lili:Now(function(number, letter) print(tostring(number)..letter))/lili This will result in:/lili1a/lili2b/lili For more power, you can add a Then to futher modify the results, or chain other operations. See the Given.Then documentation for details."]},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.Given:Then(...) - Given.Then","Type","Method","Description","Call this to define what will happen once the Given values resolve successfully.","Parameters","... - The list of resolveable values to process for each Given result.","Returns","The Then Statement.Modifier.","Notes","The parameters can be any 'resolvable' type. If a parameter is a function, it will be passed the results of the previous Given or Then parameters. For example: lua/liliGiven(anObservable, anotherObservable)/lili:Then(function(aResult, anotherResult)/lili doSomethingWith(aResult, anotherResult)/lili return true/liliend)/lili"]}],[{"i":"cprxgogiventhen","l":"cp.rx.go.Given.Then","p":["A Statement.Modifier of Given that defines what happens after the Given values resolve.","For example:"]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.Given.Then:Then(...) - Given.Then","Type","Method","Description","Allows another set of resolvables to be processed after a Then has resolved.","Parameters","... - The list of resolvable values to process.","Returns","Another Given.Then instance.","Notes"]}],[{"i":"cprxgoif","l":"cp.rx.go.If","p":["A Statement that will check if a resolvable matches a predicate, then executes other resolvables."]},{"l":"Submodules","p":["cp.rx.go.If.Are","cp.rx.go.If.AreNot","cp.rx.go.If.Is","cp.rx.go.If.IsNot","cp.rx.go.If.Matches","cp.rx.go.If.Then"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","If","Methods- API calls which can only be made on an object returned by a constructor","Are","AreNot","Is","IsNot","Matches","Then"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"If","p":["Signature","cp.rx.go.If(value) - If","Type","Constructor","Description","Creates a new If Statement which will check the first result of value.","Parameters","value - a resolvable value that will be checked.","Returns","The Statement instance which will check if the resolvable matches the requirement.","Notes","By default, it will check if the value is truthy- not nil and not false. Other checks can be specified via the If:Is/IsNot/Matches methods. If the check passes, the If:Then(...) method is processed. If not, the Otherwise method can specify other resolvables to execute instead. Example: lua/liliIf(someObservable):Is(true):Then(/lili function() ... end/lili):Otherwise(/lili function() ... end/lili)/lili"]},{"l":"Methods"},{"l":"Are","p":["Signature","cp.rx.go.If:Are(value) - If.Are","Type","Method","Description","Specifies the value to check.","Parameters","value - The value to wait for.","Returns","The Are Statement.Modifier.","Notes"]},{"l":"AreNot","p":["Signature","cp.rx.go.If:AreNot(value) - If.AreNot","Type","Method","Description","Specifies the value to check.","Parameters","value - The value to not match.","Returns","The AreNot Statement.Modifier.","Notes"]},{"l":"Is","p":["Signature","cp.rx.go.If:Is(value) - If.Is","Type","Method","Description","Specifies the value to check.","Parameters","value - The value to check for.","Returns","The Is Statement.Modifier.","Notes"]},{"l":"IsNot","p":["Signature","cp.rx.go.If:IsNot(value) - If.IsNot","Type","Method","Description","Specifies the value to not match.","Parameters","value - The value to check for.","Returns","The IsNot Statement.Modifier.","Notes"]},{"l":"Matches","p":["Signature","cp.rx.go.If:Matches(predicate) - If.Matches","Type","Method","Description","Specifies the predicate function that will check the value results.","Parameters","predicate - The function that will get called to determine if it has been found.","Returns","The Matches Statement.Modifier.","Notes","Example: lua/liliIf(someObservable):Matches(function(value) return value % 2 == 0 end):Then(doSomething())/lili"]},{"l":"Then","p":["Signature","cp.rx.go.If:Then(...) - If.Then","Type","Method","Description","Call this to define what will happen if value resolves successfully.","Parameters","... - The list of resolveable values to process for the successful If result.","Returns","The Then Statement.Modifier.","Notes","The parameters can be any resolvable type. For example: lua/liliIf(anObservable)/lili:Then(function(aResult)/lili doSomethingWith(aResult, anotherResult)/lili return true/liliend)/lili"]}],[{"i":"cprxgoifare","l":"cp.rx.go.If.Are","p":["A [Statement.Modifier] of If that sets the values to match."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.If.Are:Then(...) - If.Then","Type","Method","Description","Specifies what happens after the If test passes.","Parameters","... - The list of resolvable items to process.","Returns","An If.Then instance.","Notes"]}],[{"i":"cprxgoifarenot","l":"cp.rx.go.If.AreNot","p":["A Statement.Modifier for If that sets the values to not match."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.If.AreNot:Then(...) - If.Then","Type","Method","Description","Specifies what happens after the If test passes.","Parameters","... - The list of resolvable items to process.","Returns","An If.Then instance.","Notes"]}],[{"i":"cprxgoifis","l":"cp.rx.go.If.Is","p":["A Statement.Modifier for If that sets a specific value to match."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.If.Is:Then(...) - If.Then","Type","Method","Description","Specifies what happens after the If test passes.","Parameters","... - The list of resolvable items to process.","Returns","An If.Then instance.","Notes"]}],[{"i":"cprxgoifisnot","l":"cp.rx.go.If.IsNot","p":["A Statement.Modifier for If that sets a specific value to not match."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.If.IsNot:Then(...) - If.Then","Type","Method","Description","Specifies what happens after the If test passes.","Parameters","... - The list of resolvable items to process.","Returns","An If.Then instance.","Notes"]}],[{"i":"cprxgoifmatches","l":"cp.rx.go.If.Matches","p":["A Statement.Modifier for If that sets a predicate check values against."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.If.Matches:Then(...) - If.Then","Type","Method","Description","Specifies what happens after the If test passes.","Parameters","... - The list of resolvable items to process.","Returns","An If.Then instance.","Notes"]}],[{"i":"cprxgoifthen","l":"cp.rx.go.If.Then","p":["A Statement.Modifier that defines what happens when an If matches."]},{"l":"Submodules","p":["cp.rx.go.If.Then.Otherwise"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Then","Methods- API calls which can only be made on an object returned by a constructor","Otherwise"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"Then","p":["Signature","cp.rx.go.If.Then cp.rx.go.Statement.Modifier","Type","Constant","Description","This is a configuration of SetProp, which should be created via SetProp:To(value)"]},{"l":"Methods"},{"l":"Otherwise","p":["Signature","cp.rx.go.If.Then:Otherwise(...) - If.Then.Otherwise","Type","Method","Description","Call this to define what will happen if value doesn't resolve successfully.","Parameters","... - The list of resolveable values to process for the unsuccessful If result.","Returns","The Then Statement.Modifier.","Notes","The parameters can be any resolvable type. For example: lua/liliIf(anObservable)/lili:Then(function(aResult)/lili doSomethingWith(aResult, anotherResult)/lili return true/liliend)/lili:Otherwise(false)/lili"]},{"i":"then-1","l":"Then","p":["Signature","cp.rx.go.If.Then:Then(...) - If.Then","Type","Method","Description","Each Then can have a subsequent Then which will be executed after the previous one resolves.","Parameters","... - The list of resolvable values to process for the sucessful If result.","Returns","A new If.Then instance.","Notes"]}],[{"i":"cprxgoifthenotherwise","l":"cp.rx.go.If.Then.Otherwise","p":["A Statement.Modifier of If, which should be created via If:Then(...):Otherwise(...)."]},{"l":"Submodules","p":["cp.rx.go.If.Then.Otherwise.Then"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cprxgoifthenotherwisethen","l":"cp.rx.go.If.Then.Otherwise.Then","p":["Each Otherwise can have a subsequent Then which will be executed after the previous one resolves."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.If.Then.Otherwise.Then:Then(...) - If.Then.Otherwise.Then","Type","Method","Description","Specifies additional resolvables to resolve after the previous Then.","Parameters","... - The list of resolvable values.","Returns","The new Then instance.","Notes"]}],[{"i":"cprxgolast","l":"cp.rx.go.Last","p":["A Statement that will complete after the only the last result resolves."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","Last"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Last","p":["Signature","cp.rx.go.Last(resolvable) - Last","Type","Constructor","Description","Creates a new Last Statement that will return the first value from the resolvable and complete.","Parameters","resolvable - a resolvable value, of which the first result will be returned.","Returns","The Statement which will return the first value when executed.","Notes","Example: lua/liliLast(someObservable)/lili"]}],[{"i":"cprxgolist","l":"cp.rx.go.List","p":["Extends: Statement","A Statement that will loop through a table as a list from item 1 to the table length."]},{"l":"Submodules","p":["cp.rx.go.List.Sorted","cp.rx.go.List.SortedBy"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","List","Methods- API calls which can only be made on an object returned by a constructor","Sorted","SortedBy"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"List","p":["Signature","cp.rx.go.List(values) - List","Type","Constructor","Description","Creates a new List Statement that will loop through the provided table as a list.","Parameters","values - a table value, or a function which returns a table.","Returns","The Statement which will return the first value when executed.","Notes","Example: lua/liliList(someTable)/lili"]},{"l":"Methods"},{"l":"Sorted","p":["Signature","cp.rx.go.List:Sorted() - List.Sorted","Type","Method","Description","Indicates the List should be sorted by its natural order before being sent out individually.","Parameters","None","Returns","The Sorted Statement.Modifier.","Notes","For example: lua/liliSort(9,2,5):Sorted()/lili"]},{"l":"SortedBy","p":["Signature","cp.rx.go.List:SortedBy(...) - List.SortedBy","Type","Method","Description","Indicates the List should be sorted by the provided function.","Parameters","None","Returns","The SortedBy Statement.Modifier.","Notes","For example: lua/liliSort(9,2,5):SortedBy(function(a, b) return b a)/lili"]}],[{"i":"cprxgolistsorted","l":"cp.rx.go.List.Sorted","p":["A Statement.Modifier that specifies the list should be sorted by its 'natural' order - that is a b."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Sorted"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"Sorted","p":["Signature","cp.rx.go.List.Sorted cp.rx.go.Statement.Modifier","Type","Constant","Description","This is a configuration of List, which should be created via List:Sorted()."]}],[{"i":"cprxgolistsortedby","l":"cp.rx.go.List.SortedBy","p":["A Statement.Modifier that specifies the list should be sorted by the specified function."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","SortedBy"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"SortedBy","p":["Signature","cp.rx.go.List.SortedBy cp.rx.go.Statement.Modifier","Type","Constant","Description","This is a configuration of List, which should be created via List:SortedBy(...)."]}],[{"i":"cprxgorequire","l":"cp.rx.go.Require","p":["A Statement that will require that the resolvable value matches a predicate, and if not, it will send an error."]},{"l":"Submodules","p":["cp.rx.go.Require.Are","cp.rx.go.Require.AreNot","cp.rx.go.Require.Is","cp.rx.go.Require.IsNot","cp.rx.go.Require.Matches"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","OrThrow","Functions- API calls offered directly by the extension","Require","Methods- API calls which can only be made on an object returned by a constructor","Are","AreNot","Is","IsNot","Matches"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"OrThrow","p":["Signature","cp.rx.go.Require.OrThrow cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets the message to throw if the requirement is not met."]},{"l":"Functions"},{"l":"Require","p":["Signature","cp.rx.go.Require(requirement) - Require","Type","Function","Description","Creates a new Require Statement with the specified requirement.","Parameters","requirement - a resolvable value that will be checked.","Returns","The Statement instance which will check if the requirement matches the requirement.","Notes","By default, it will require that all items in the requirement are not nil and completed. This is most useful with Given, allowing retrieval and checking of values before continuing. Example: lua/liliGiven(/lili Require(someObservable):Is(2):OrThrow(Must be 2)/lili):Then(function(someValue)/lili -- do stuff with `someValue`/lili):Now()/lili"]},{"l":"Methods"},{"l":"Are","p":["Signature","cp.rx.go.Require:Are(value) - Require.Are","Type","Method","Description","Specifies the value to check.","Parameters","value - The value that all results from the requirement must match.","Returns","The Are Statement.Modifier.","Notes"]},{"l":"AreNot","p":["Signature","cp.rx.go.Require:AreNot(value) - Require.AreNot","Type","Method","Description","Specifies the value to check.","Parameters","value - The value that all results from the requirement must match.","Returns","The AreNot Statement.Modifier.","Notes"]},{"l":"Is","p":["Signature","cp.rx.go.Require:Is(value) - Require.Is","Type","Method","Description","Specifies the value to check.","Parameters","value - The value that all results from the requirement must match.","Returns","The Is Statement.Modifier.","Notes"]},{"l":"IsNot","p":["Signature","cp.rx.go.Require:IsNot(value) - Require.IsNot","Type","Method","Description","Specifies the value to check.","Parameters","value - The value that all results from the requirement must not match.","Returns","The IsNot Statement.Modifier.","Notes"]},{"l":"Matches","p":["Signature","cp.rx.go.Require:Matches(predicate) - Require.Matches","Type","Method","Description","Specifies the predicate to check.","Parameters","value - The value that all results from the requirement must not match.","Returns","The Matches Statement.Modifier.","Notes","Example: lua/liliRequire(someObservable):Matches(function(value) return value % 2 == 0 end)/lili"]},{"i":"orthrow-1","l":"OrThrow","p":["Signature","cp.rx.go.Require:OrThrow(message) - Require.OrThrow","Type","Method","Description","Specifies the message to throw if the requirement is not met.","Parameters","message - The string to throw when there is an error.","Returns","The OrThrow Statement.Modifier.","Notes"]}],[{"i":"cprxgorequireare","l":"cp.rx.go.Require.Are","p":["Specifies that the Require d values Are a specific value."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Are","Methods- API calls which can only be made on an object returned by a constructor","OrThrow"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"Are","p":["Signature","cp.rx.go.Require.Are cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets a specific value all values from the requirement must match."]},{"l":"Methods"},{"l":"OrThrow","p":["Signature","cp.rx.go.Require.Are:OrThrow(...) - Require.OrThrow","Type","Method","Description","Specifies what is thrown if the Require test fails.","Parameters","... - The list of resolvable items to process.","Returns","A Require.OrThrow instance.","Notes"]}],[{"i":"cprxgorequirearenot","l":"cp.rx.go.Require.AreNot","p":["Specifies that the Require d values AreNot a specific value."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","AreNot","Methods- API calls which can only be made on an object returned by a constructor","OrThrow"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"AreNot","p":["Signature","cp.rx.go.Require.AreNot cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets a specific value all values from the requirement must not match."]},{"l":"Methods"},{"l":"OrThrow","p":["Signature","cp.rx.go.Require.AreNot:OrThrow(...) - Require.OrThrow","Type","Method","Description","Specifies what is thrown if the Require test fails.","Parameters","... - The list of resolvable items to process.","Returns","A Require.OrThrow instance.","Notes"]}],[{"i":"cprxgorequireis","l":"cp.rx.go.Require.Is","p":["Specifies that the Require d value Is a specific value."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Is","Methods- API calls which can only be made on an object returned by a constructor","OrThrow"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"Is","p":["Signature","cp.rx.go.Require.Is cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets a specific value all values from the requirement must match."]},{"l":"Methods"},{"l":"OrThrow","p":["Signature","cp.rx.go.Require.Is:OrThrow(...) - Require.OrThrow","Type","Method","Description","Specifies what is thrown if the Require test fails.","Parameters","... - The list of resolvable items to process.","Returns","A Require.OrThrow instance.","Notes"]}],[{"i":"cprxgorequireisnot","l":"cp.rx.go.Require.IsNot","p":["Specifies that the Require d value IsNot a specific value."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","IsNot","Methods- API calls which can only be made on an object returned by a constructor","OrThrow"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"IsNot","p":["Signature","cp.rx.go.Require.IsNot cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets a specific value all values from the requirement must not match."]},{"l":"Methods"},{"l":"OrThrow","p":["Signature","cp.rx.go.Require.IsNot:OrThrow(...) - Require.OrThrow","Type","Method","Description","Specifies what is thrown if the Require test fails.","Parameters","... - The list of resolvable items to process.","Returns","A Require.OrThrow instance.","Notes"]}],[{"i":"cprxgorequirematches","l":"cp.rx.go.Require.Matches","p":["Specifies that the Require d value Matches a function predicate."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Matches","Methods- API calls which can only be made on an object returned by a constructor","OrThrow"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"Matches","p":["Signature","cp.rx.go.Require.Matches cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets a predicate function that checks values from the requirement."]},{"l":"Methods"},{"l":"OrThrow","p":["Signature","cp.rx.go.Require.Matches:OrThrow(...) - Require.OrThrow","Type","Method","Description","Specifies what is thrown if the Require test fails.","Parameters","... - The list of resolvable items to process.","Returns","A Require.OrThrow instance.","Notes"]}],[{"i":"cprxgoretry","l":"cp.rx.go.Retry","p":["Extends: Statement","A Statement that will retry the contained statement if there is an error. It can be limited to a set number of retries, and have a delay added between retries."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","DelayedBy","UpTo","Constructors- API calls which return an object, typically one that offers API methods","Retry","Methods- API calls which can only be made on an object returned by a constructor"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DelayedBy","p":["Signature","cp.rx.go.Retry.DelayedBy cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets the delay between retries."]},{"l":"UpTo","p":["Signature","cp.rx.go.Retry.UpTo cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets the number of times to retry."]},{"l":"Constructors"},{"l":"Retry","p":["Signature","cp.rx.go.Retry(resolvable) - Retry","Type","Constructor","Description","Creates a new Retry Statement that will retry the resolveable if it emits an error.","Parameters","resolvable - a resolvable value, which will be retried if it sends an error signal.","Returns","The Statement.","Notes","Example: lua/liliRetry(someObservable)/lili"]},{"l":"Methods"},{"i":"delayedby-1","l":"DelayedBy","p":["Signature","cp.rx.go.Retry:DelayedBy(milliseconds[, scheduler]) - Retry.DelayedBy","Type","Method","Description","Specify a time in millieconds to delay by.","Parameters","milliseconds - The amount of time do delay between retries. scheduler - The scheduler to use. Defaults to cp.rx.util.defaultScheduler().","Returns","The DelayedBy Statement.Modifier.","Notes"]},{"i":"upto-1","l":"UpTo","p":["Signature","cp.rx.go.Retry:UpTo(count) - Retry.UpTo","Type","Method","Description","Specifies the number of times to retry up to.","Parameters","count - The number of times to retry.","Returns","The UpTo Statement.Modifier.","Notes"]}],[{"i":"cprxgosetprop","l":"cp.rx.go.SetProp","p":["A Statement that will update a cp.prop value, then optionally execute other resolvables, and optionally reset the cp.prop to its previous value. This is useful for simply changing a cp.prop value without requiring a custom function(), but is extra useful when you only want to temporarily change the value."]},{"l":"Submodules","p":["cp.rx.go.SetProp.To"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","SetProp","Methods- API calls which can only be made on an object returned by a constructor","To"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"SetProp","p":["Signature","cp.rx.go.SetProp(theProp) - SetProp","Type","Constructor","Description","Creates a new SetProp Statement which will update the provided cp.prop value to the specified To value.","Parameters","theProp - The cp.prop which will be updated.","Returns","The SetProp Statement.","Notes","It can then optionally execute some other statements and finally, reset the property to its original value. Example: lua/lililocal myProp = prop.VALUE(foo)/liliSetProp(myProp):To(bar):Then(/lili function() ... end/lili):ThenReset()/lili"]},{"l":"Methods"},{"l":"To","p":["Signature","cp.rx.go.SetProp:To(value) - SetProp.To","Type","Method","Description","Call this to define what value to set the property to. If it is a function or other \"callable\" table, it will be called with no parameters to get the actual stored value. If it is any other value, it will be set as is.","Parameters","value - The value or \"callable\" to update the prop to.","Returns","The SetProp.To Statement.Modifier.","Notes","For example: lua/liliSetProp(foo):To(bar) -- will always set to bar/liliSetProp(modDate):To(os.time) -- will set to the current value returned by `os.time()` every time it's executed./lili"]}],[{"i":"cprxgosetpropto","l":"cp.rx.go.SetProp.To","p":["A Statement.Modifier that defines what value to set a cp.prop to."]},{"l":"Submodules","p":["cp.rx.go.SetProp.To.Then"]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","Then"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"Then","p":["Signature","cp.rx.go.SetProp.To:Then(...) - SetProp.To.Then","Type","Method","Description","Each Then can have a subsequent Then which will be executed after the previous one resolves.","Parameters","... - The list of resolvable values to process for the SetProp.To result.","Returns","A new SetProp.To.Then instance.","Notes"]}],[{"i":"cprxgosetproptothen","l":"cp.rx.go.SetProp.To.Then","p":["A Statement.Modifier that defines what happens when after SetProp.To is executed."]},{"l":"Submodules","p":["cp.rx.go.SetProp.To.Then.ThenReset"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Then","Methods- API calls which can only be made on an object returned by a constructor","ThenReset"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"Then","p":["Signature","cp.rx.go.SetProp.To.Then cp.rx.go.Statement.Modifier","Type","Constant","Description","This is a configuration of SetProp.To, which should be created via SetProp:To(...):Then(...)."]},{"l":"Methods"},{"l":"ThenReset","p":["Signature","cp.rx.go.SetProp.To.Then:ThenReset(...) - SetProp.To.Then.ThenReset","Type","Method","Description","Call this to have the cp.prop get reset to its original value after the Then resolvables have resolved.","Parameters","... - The list of resolveable values to process for the successful If result.","Returns","The Then Statement.Modifier.","Notes","For example: lua/lililocal foo = prop.THIS(foo)/liliSetProp(foo):To(bar) -- `foo` is updated to bar/lili:Then(function(aResult)/lili doSomethingWith(aResult, anotherResult)/lili return true/liliend)/lili:ThenReset() -- `foo` is back to foo now/lili"]}],[{"i":"cprxgosetproptothenthenreset","l":"cp.rx.go.SetProp.To.Then.ThenReset","p":["A Statement.Modifier that specifies that the cp.prop is reset to its original value once execution completes."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","ThenReset"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"ThenReset","p":["Signature","cp.rx.go.SetProp.To.Then.ThenReset cp.rx.go.Statement.Modifier","Type","Constant","Description","This is a configuration of SetProp.To.Then, which should be created via SetProp:To(...):Then(...):ThenReset()."]}],[{"i":"cprxgostatement","l":"cp.rx.go.Statement","p":["A Statement is defined to enable processing of asynchronous resolvable values such as cp.rx.Observable values.","To define a new Statement, you call the named constructor, assigning the result to a constant value and calling the define method."]},{"l":"Definine a new Statement","p":["To define a new Statement implementation, we use the Statement.named constructor. This gives us a Statement.Definition which allows us to set the rules for the statement before finally \"defining\" it.","Statements may have an onInit, and must have an onObservable provided, and then the define method must be called.","For example, the First statement is defined like so:","Once you've defined a statement, you then execute it by calling the statement directly, passing in any parameters.","For example:","This will output:","The Observable as passed to the onInit function handler as the second parameter. context is always the first parameter, followed by any values passed to the constructor call.","The onObservable function handler is called once the statement is actually executing, typically by calling the Now or After methods.","It is recommended that any conversion of input parameters are converted to Observable s as late as possible, typically in the onObservable function handler. Otherwise, input values may get resolved before the user intends."]},{"l":"Submodules","p":["cp.rx.go.Statement.Definition","cp.rx.go.Statement.Modifier"]},{"l":"API Overview","p":["After","Catch","Constructors- API calls which return an object, typically one that offers API methods","Debug","defaultObserverFactory","Finally","fullName","Functions- API calls offered directly by the extension","is","Label","Methods- API calls which can only be made on an object returned by a constructor","name","named","Now","ThenDelay","ThenYield","TimeoutAfter","toObservable","toObservables"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"defaultObserverFactory","p":["Signature","cp.rx.go.Statement.defaultObserverFactory([factoryFn]) - nil","Type","Function","Description","Gets/sets the factory function which creates a new Observer for Statements which are executed without one being provided. By default, an Observer which only outputs errors via the standard error function is provided.","Parameters","factoryFn - if provided, replaces the current default factory function.","Returns","A new Observer, or the previous factory function if a new one was provided.","Notes","The factory function has no arguments provided and must return a new Observer instance."]},{"l":"is","p":["Signature","cp.rx.go.Statement.is(thing) - boolean","Type","Function","Description","Checks if the thing is a Statement.","Parameters","thing - The thing to test.","Returns","true if the thing is a Statement.","Notes"]},{"l":"toObservable","p":["Signature","cp.rx.go.Statement.toObservable(thing[, params]) - cp.rx.Observable","Type","Function","Description","Converts the thing into an Observable.","Parameters","thing - The thing to convert. params - Optional table list to pass as parameters for the thing if it's a function.","Returns","The Observable.","Notes","It converts the following: Observable- Returned unchanged. cp.rx.go.Statement- Returns the result of the toObservable() method. Note: this will cancel any scheduled executions for the Statement. cp.prop- Returns the cp.prop:toObservable() value. function- Executes the function, passing in the params as a list of values, returning the results converted to an Observable. Other values - Returned via Observable.of(thing). Note that with functions, the function is not executed immediately, but it will be passed the params as a list when the resulting Observable is subscribed to. For example: lua/lili-- set up the function/lilimultiply = toObservable(function(one, two) return onetwo end, {2, 3})/lili-- nothing has happened yet/lilimultiply:subscribe(function(result) print(result) end)/lili-- now the function has been executed/lili This results in printing 6."]},{"l":"toObservables","p":["Signature","cp.rx.go.Statement.toObservables(things[, params]) - table","Type","Function","Description","Converts a list of things into a list of Observables of those things.","Parameters","things - a table list of things to convert to Observables. params - an optional table list of parameters to pass to any function things.","Returns","A table list of the things, converted to Observable.","Notes","For example: lua/liliresult = toObservables({1, 2, 3})/lilifor _,o in ipairs(results) do/lili o:subscribe(function(x) print x end)/liliend/lili/liliIf any of the things are `function`s, then the `params` table is unpacked to a list/liliand passed into the function when it is called. For example:/lili/lili lua toObservables({function(x) return x2 end}, {3}):subscribe(function(x) print end) -- outputs 6``` Any type supported by toObservable can be included in the things array."]},{"l":"Constructors"},{"l":"named","p":["Signature","cp.rx.go.Statement.named(name) - Statement.Definition","Type","Constructor","Description","Starts the definition of a new Statement with the specified names.","Parameters","name - The name of the Statement.","Returns","A Statement.Definition.","Notes"]},{"l":"Methods"},{"l":"After","p":["Signature","cp.rx.go.Statement:After(millis[, observer][, scheduler]) - nil","Type","Method","Description","Requests the statement to be executed after the specified amount of time in seconds.","Parameters","millis - The number of milliseconds to delay the execution. observer - The observer to subscribe to the final result. scheduler - (optional) the cp.rx.Scheduler to use. Uses the cp.rx.util.defaultScheduler() if none is provided.","Returns","Nothing.","Notes"]},{"l":"Catch","p":["Signature","cp.rx.go.Statement:Catch(handler) - cp.rx.go.Statement","Type","Method","Description","Assigns a handler which will be applied at the end of the Statement.","Parameters","handler - The handler function","Returns","The same Statement.","Notes","The function will receive the error signal and the returned value will be pass onwards."]},{"l":"Debug","p":["Signature","cp.rx.go.Statement:Debug([label]) - Statement","Type","Method","Description","Indicates that the results of the Statement should be output to the Error Log.","Parameters","label - If specified, this is output in the log.","Returns","The same Statement instance.","Notes"]},{"l":"Finally","p":["Signature","cp.rx.go.Statement:Finally(handler) - Statement","Type","Method","Description","Provides a function handler to get called when the statement is done, either via an onError or onComplete signal.","Parameters","handler - The handler function.","Returns","The same Statement instance.","Notes","The original signal will be passed on without modification. This will trigger after any Catch handler, so will be affected by the results of that."]},{"l":"fullName","p":["Signature","cp.rx.go.Statement:fullName()","Type","Method","Description","Returns the Statement's full name.","Parameters","None","Returns","The full Statement name.","Notes"]},{"l":"Label","p":["Signature","cp.rx.go.Statement:Label(label) - Statement","Type","Method","Description","Sets the custom label for the Statement. This will be used instead of the name when outputting it as a string if set. Defaults to nil.","Parameters","label - Optional new value for the label. If provided, the Statement is returned.","Returns","The Statement if a new lable is specified, otherwise the current label value.","Notes"]},{"l":"name","p":["Signature","cp.rx.go.Statement:name()","Type","Method","Description","Returns the Statement name.","Parameters","None","Returns","The Statement name.","Notes"]},{"l":"Now","p":["Signature","cp.rx.go.Statement:Now([observer]) - nil","Type","Method","Description","Executes the statment immediately.","Parameters","observer - An observer to watch the resulting Observable. Defaults to the default observer factory.","Returns","Nothing.","Notes"]},{"l":"ThenDelay","p":["Signature","cp.rx.go.Statement:ThenDelay(millis) - cp.rx.go.Statement","Type","Method","Description","Indicates that there will be a delay after this statement by the specified number of millis. This will happen after any TimeoutAfter/ Catch/ Debug actions.","Parameters","millis - the amount of time to delay, in millisecods.","Returns","The same Statement.","Notes"]},{"l":"ThenYield","p":["Signature","cp.rx.go.Statement:ThenYield() - cp.rx.go.Statement","Type","Method","Description","Indicates that the Statement will \"yield\" to allow other pending operations to happen, then pick up as soon as possible afterwards. This will happen after any TimeoutAfter/ Catch/ Debug actions.","Parameters","None","Returns","The same Statement.","Notes"]},{"l":"TimeoutAfter","p":["Signature","cp.rx.go.Statement:TimeoutAfter(millis[, next][, scheduler]) - cp.rx.go.Statement","Type","Method","Description","Indicates that this statement should time out after the specified number of milliseconds.","Parameters","millis - A number or a function returning the number of milliseconds to wait before timing out. next - Optional string or resolvable value indicating how to handle it. scheduler - The cp.rx.Scheduler to use when timing out. Defaults to cp.rx.defaultScheduler().","Returns","The same Statement.","Notes","This can be called multiple times before the statement is executed, and the most recent configuration will be used at that time. The next value may be either a string to send as the error, or a resolvable value to pass on instead of failing. If nothing is provided, a default error message is output."]},{"i":"toobservable-1","l":"toObservable","p":["Signature","cp.rx.go.Statement:toObservable([preserveTimer]) - cp.rx.Observable","Type","Method","Description","Returns a new Observable instance for the Statement. Unless preserveTimer is true, this will cancel any scheduled execution of the statement via After","Parameters","preserveTimer - If a timer has been set via After, don't cancel it. Defaults to false.","Returns","The Observable.","Notes"]}],[{"i":"cprxgostatementdefinition","l":"cp.rx.go.Statement.Definition","p":["A Statement is defined before being executable. A definition is initiated with the Statement:modifier(...) method."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Methods- API calls which can only be made on an object returned by a constructor","define","onInit","onObservable"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.rx.go.Statement.Definition.is(thing) - boolean","Type","Function","Description","Checks if the thing is an instance of Statement.Definition.","Parameters","thing - The thing to check.","Returns","true if the thing is a Statement.Definition.","Notes"]},{"l":"Methods"},{"l":"define","p":["Signature","cp.rx.go.Statement.Definition:define() - Statement","Type","Method","Description","Completes the definition of the Statement.","Parameters","None","Returns","The new Statement.","Notes"]},{"l":"onInit","p":["Signature","cp.rx.go.Statement.Definition:onInit(initFn) - Statement.Definition","Type","Method","Description","Defines the function which will be called to initialise the context.","Parameters","initFn - The init function.","Returns","The Statement Definition","Notes","* The function will be passed the context table as the first parameter, and any other parameters passed to the statement follow."]},{"l":"onObservable","p":["Signature","cp.rx.go.Statement.Definition:onObservable(observableFn) - Statement.Definition","Type","Method","Description","Defines the function which will be called to create the Observable for the Statement. The function will be passed the context table and must return an Observable.","Parameters","observableFn - The observable creator function.","Returns","The Statement.Definition","Notes"]}],[{"i":"cprxgostatementmodifier","l":"cp.rx.go.Statement.Modifier","p":["A Statement.Modifier is an extension to a Statement that provides additional configuration details. They are initiated via the modifier method of a defined Statement.","All Statement.Modifier instances will also have the methods defined by Statement."]},{"l":"Submodules","p":["cp.rx.go.Statement.Modifier.Definition"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Methods- API calls which can only be made on an object returned by a constructor","context","toObservable"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.rx.go.Statement.Modifier.is(thing) - boolean","Type","Function","Description","Checks if the thing is a Statement.Modifier.","Parameters","thing - The thing to check.","Returns","true if the thing is a Statement.Modifier.","Notes"]},{"l":"Methods"},{"l":"context","p":["Signature","cp.rx.go.Statement.Modifier:context() - table","Type","Method","Description","Returns the context table for the Statement.Modifier.","Parameters","None","Returns","The context table.","Notes","The context is shared between the Statement and all Statement.Modifiers when being executed."]},{"l":"toObservable","p":["Signature","cp.rx.go.Statement.Modifier:toObservable() - cp.rx.Observable","Type","Method","Description","Creates a new Observable instance for the current configuration.","Parameters","None","Returns","The new Observable instance.","Notes"]}],[{"i":"cprxgostatementmodifierdefinition","l":"cp.rx.go.Statement.Modifier.Definition","p":["A Statement.Modifier is defined before being executable. It is an extension of Statement.Definition and inherits all of it's methods also."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Methods- API calls which can only be made on an object returned by a constructor","define"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.rx.go.Statement.Modifier.Definition.is(thing) - boolean","Type","Function","Description","Checks if the thing is a Statement.Modifier.Definition.","Parameters","thing - The thing to check.","Returns","true if the thing is a Statement.Modifier.Definition.","Notes"]},{"l":"Methods"},{"l":"define","p":["Signature","cp.rx.go.Statement.Modifier.Definition:define()","Type","Method","Description","Defines the Statement.Modifier.","Parameters","None","Returns","The new Statement.Modifier definition.","Notes"]}],[{"i":"cprxgothrow","l":"cp.rx.go.Throw","p":["A Statement that will throw the provided message.","Example:"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","Throw"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Throw","p":["Signature","cp.rx.go.Throw([message[, ...]]) - Throw","Type","Constructor","Description","Creates a new Throw Statement that will throw the message when executed.","Parameters","message - The optional message to return. May contain string.format tokens... - The optional list of parameters to inject into the message.","Returns","The Statement which will send the provided error message.","Notes"]}],[{"i":"cprxgowaituntil","l":"cp.rx.go.WaitUntil","p":["A Statement that will wait for the first value from a resolveable that matches the predicate."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Are","AreNot","Is","IsNot","Matches","Constructors- API calls which return an object, typically one that offers API methods","WaitUntil","Methods- API calls which can only be made on an object returned by a constructor"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"Are","p":["Signature","cp.rx.go.WaitUntil.Are cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets the values to match."]},{"l":"AreNot","p":["Signature","cp.rx.go.WaitUntil.AreNot cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets a value to skip over."]},{"l":"Is","p":["Signature","cp.rx.go.WaitUntil.Is cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets a specific value to wait for."]},{"l":"IsNot","p":["Signature","cp.rx.go.WaitUntil.IsNot cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets a value that is skipped over."]},{"l":"Matches","p":["Signature","cp.rx.go.WaitUntil.Matches cp.rx.go.Statement.Modifier","Type","Constant","Description","A Statement.Modifier that sets a predicate check values against."]},{"l":"Constructors"},{"l":"WaitUntil","p":["Signature","cp.rx.go.WaitUntil(requirement) - WaitUntil","Type","Constructor","Description","Creates a new WaitUntil Statement with the specified requirement.","Parameters","requirement - a resolvable value that will be checked.","Returns","The Statement instance which will check if the resolvable matches the requirement.","Notes","By default, it will wait until the value is truthy- not nil and not false. Example: lua/liliWaitUntil(someObservable):Is(true)/lili"]},{"l":"Methods"},{"i":"are-1","l":"Are","p":["Signature","cp.rx.go.WaitUntil:Are(value) - WaitUntil.Are","Type","Method","Description","Specifies the value to check.","Parameters","value - The value to wait for.","Returns","The Are Statement.Modifier.","Notes"]},{"i":"arenot-1","l":"AreNot","p":["Signature","cp.rx.go.WaitUntil:AreNot(value) - WaitUntil.AreNot","Type","Method","Description","Specifies the value to skip over.","Parameters","value - The value to skip over.","Returns","The AreNot Statement.Modifier.","Notes"]},{"i":"is-1","l":"Is","p":["Signature","cp.rx.go.WaitUntil:Is(value) - WaitUntil.Is","Type","Method","Description","Specifies the value to check.","Parameters","value - The value to wait for.","Returns","The Is Statement.Modifier.","Notes"]},{"i":"isnot-1","l":"IsNot","p":["Signature","cp.rx.go.WaitUntil:IsNot(value) - WaitUntil.IsNot","Type","Method","Description","Specifies the value to skip.","Parameters","value - The value to skip over.","Returns","The IsNot Statement.Modifier.","Notes"]},{"i":"matches-1","l":"Matches","p":["Signature","cp.rx.go.WaitUntil:Matches(predicate) - WaitUntil.Matches","Type","Method","Description","Specifies the predicate function that will check the requirement results.","Parameters","predicate - The function that will get called to determine if it has been found.","Returns","The Matches Statement.Modifier.","Notes","* Example: lua/liliWaitUntil(someObservable):Matches(function(value) return value % 2 == 0 end)/lili"]}],[{"i":"cprximmediatescheduler","l":"cp.rx.ImmediateScheduler","p":["Schedules Observables by running all operations immediately."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","create","Methods- API calls which can only be made on an object returned by a constructor","schedule"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"create","p":["Signature","cp.rx.ImmediateScheduler.create() - cp.rx.ImmediageScheduler","Type","Constructor","Description","Creates a new ImmediateScheduler.","Parameters","None","Returns","The new ImmediateScheduler.","Notes"]},{"l":"Methods"},{"l":"schedule","p":["Signature","cp.rx.ImmediateScheduler:schedule(action) - cp.rx.Reference","Type","Method","Description","Schedules a function to be run on the scheduler. It is executed immediately.","Parameters","action - The function to execute.","Returns","The Reference.","Notes"]}],[{"i":"cprxobservable","l":"cp.rx.Observable","p":["Observables push values to Observers."]},{"l":"API Overview","p":["all","average","buffer","catch","combineLatest","compact","concat","Constructors- API calls which return an object, typically one that offers API methods","contains","count","create","debounce","defaultIfEmpty","defer","delay","distinct","distinctUntilChanged","dump","elementAt","empty","filter","finalize","find","first","firstEmitting","flatMap","flatMapLatest","flatten","fromCoroutine","fromFileByLine","fromRange","fromTable","Functions- API calls offered directly by the extension","ignoreElements","is","last","map","max","merge","Methods- API calls which can only be made on an object returned by a constructor","min","never","next","of","partition","pluck","reduce","reject","replicate","retry","retryWithDelay","sample","scan","skip","skipLast","skipUntil","skipWhile","startWith","subscribe","sum","switch","switchIfEmpty","take","takeLast","takeUntil","takeWhile","tap","throw","timeout","unpack","unwrap","with","zip"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.rx.Observable.is(thing) - boolean","Type","Function","Description","Checks if the thing is an instance of Observable.","Parameters","thing - The thing to check.","Returns","true if the thing is an Observable.","Notes"]},{"l":"Constructors"},{"l":"create","p":["Signature","cp.rx.Observable.create(onSubscription) - cp.rx.Observable","Type","Constructor","Description","Creates a new Observable.","Parameters","onSubscription - The reference function that produces values.","Returns","The new Observable.","Notes"]},{"l":"defer","p":["Signature","cp.rx.Observable.defer(fn) - cp.rx.Observable","Type","Constructor","Description","Creates an Observable that executes the function to create a new Observable each time an Observer subscribes.","Parameters","fn - A function that returns an Observable.","Returns","The new Observable.","Notes"]},{"l":"empty","p":["Signature","cp.rx.Observable.empty() - cp.rx.Observable","Type","Constructor","Description","Returns an Observable that immediately completes without producing a value.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"firstEmitting","p":["Signature","cp.rx.Observable.firstEmitting(...) - cp.rx.Observer","Type","Constructor","Description","Given a set of Observables, produces values from only the first one to produce a value or complete.","Parameters","... - list of Observables","Returns","The new Observable.","Notes"]},{"l":"fromCoroutine","p":["Signature","cp.rx.Observable.fromCoroutine(fn, scheduler) - cp.rx.Observable","Type","Constructor","Description","Creates an Observable that produces values when the specified coroutine yields.","Parameters","fn - A coroutine or function to use to generate values. Note that if a coroutine is used, the values it yields will be shared by all subscribed Observers(influenced by the Scheduler), whereas a new coroutine will be created for each Observer when a function is used. scheduler - The scheduler","Returns","The new Observable.","Notes"]},{"l":"fromFileByLine","p":["Signature","cp.rx.Observable.fromFileByLine(filename) - cp.rx.Observable","Type","Constructor","Description","Creates an Observable that produces values from a file, line by line.","Parameters","filename - The name of the file used to create the Observable.","Returns","The new Observable.","Notes"]},{"l":"fromRange","p":["Signature","cp.rx.Observable.fromRange(initial[, limit[, step]]) - cp.rx.Observable","Type","Constructor","Description","Creates an Observable that produces a range of values in a manner similar to a Lua for loop.","Parameters","initial - The first value of the range, or the upper limit if no other arguments are specified. limit - The second value of the range. Defaults to no limit. step - An amount to increment the value by each iteration. Defaults to 1.","Returns","The new Observable.","Notes"]},{"l":"fromTable","p":["Signature","cp.rx.Observable.fromTable(t, iterator, keys) - cp.rx.Observable","Type","Constructor","Description","Creates an Observable that produces values from a table.","Parameters","t - The table used to create the Observable. iterator - An iterator used to iterate the table, e.g. pairs or ipairs. Defaults to pairs. keys - If true, also emit the keys of the table. Defaults to false.","Returns","The new Observable.","Notes"]},{"l":"never","p":["Signature","cp.rx.Observable.never() - cp.rx.Observable","Type","Constructor","Description","Returns an Observable that never produces values and never completes.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"of","p":["Signature","cp.rx.Observable.of(...) - cp.rx.Observable","Type","Constructor","Description","Creates an Observable that produces a set of values.","Parameters","... - The list of values to send as individual onNext values.","Returns","The new Observable.","Notes"]},{"l":"replicate","p":["Signature","cp.rx.Observable.replicate(value[, count]) - cp.rx.Observable","Type","Constructor","Description","Creates an Observable that repeats a value a specified number of times.","Parameters","value - The value to repeat. count - The number of times to repeat the value. If left unspecified, the value is repeated an infinite number of times.","Returns","The new Observable.","Notes"]},{"l":"throw","p":["Signature","cp.rx.Observable.throw(message, ...) - cp.rx.Observable","Type","Constructor","Description","Returns an Observable that immediately produces an error.","Parameters","message - The message to send.... - The additional values to apply to the message, using string.format syntax.","Returns","The new Observable.","Notes"]},{"l":"zip","p":["Signature","cp.rx.Observable.zip(...) - cp.rx.Observable","Type","Constructor","Description","Returns an Observable that merges the values produced by the source Observables by grouping them by their index. The first onNext event contains the first value of all of the sources, the second onNext event contains the second value of all of the sources, and so on. onNext is called a number of times equal to the number of values produced by the Observable that produces the fewest number of values.","Parameters","... - The Observables to zip.","Returns","The new Observable.","Notes"]},{"l":"Methods"},{"l":"all","p":["Signature","cp.rx.Observable:all(predicate) - cp.rx.Observable","Type","Method","Description","Determine whether all items emitted by an Observable meet some criteria.","Parameters","predicate - The predicate used to evaluate objects. Defaults to the identity.","Returns","A new Observable.","Notes"]},{"l":"average","p":["Signature","cp.rx.Observable:average() - cp.rx.Observable","Type","Method","Description","Returns an Observable that produces the average of all values produced by the original.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"buffer","p":["Signature","cp.rx.Observable:buffer(size) - cp.rx.Observable","Type","Method","Description","Returns an Observable that buffers values from the original and produces them as multiple values.","Parameters","size - The size of the buffer.","Returns","The new Observable.","Notes"]},{"l":"catch","p":["Signature","cp.rx.Observable:catch(handler) - cp.rx.Observable","Type","Method","Description","Returns an Observable that intercepts any errors from the previous and replace them with values produced by a new Observable.","Parameters","handler - An Observable or a function that returns an Observable to replace the source Observable in the event of an error.","Returns","The new Observable.","Notes"]},{"l":"combineLatest","p":["Signature","cp.rx.Observable:combineLatest(...) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that runs a combinator function on the most recent values from a set of Observables whenever any of them produce a new value. The results of the combinator function are produced by the new Observable.","Parameters","... - One or more Observables to combine. A combinator is a function that combines the latest result from each Observable and returns a single value.","Returns","The new Observable.","Notes"]},{"l":"compact","p":["Signature","cp.rx.Observable:compact() - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the values of the first with falsy values removed.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"concat","p":["Signature","cp.rx.Observable:concat(...) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the values produced by all the specified Observables in the order they are specified.","Parameters","... - The list of Observables to concatenate.","Returns","The new Observable.","Notes"]},{"l":"contains","p":["Signature","cp.rx.Observable:contains(value) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces a single boolean value representing whether or not the specified value was produced by the original.","Parameters","value - The value to search for. == is used for equality testing.","Returns","The new Observable.","Notes"]},{"l":"count","p":["Signature","cp.rx.Observable:count([predicate]) - cp.rx.Observable","Type","Method","Description","Returns an Observable that produces a single value representing the number of values produced by the source value that satisfy an optional predicate.","Parameters","predicate - The predicate function used to match values.","Returns","The new Observable.","Notes"]},{"l":"debounce","p":["Signature","cp.rx.Observable:debounce(time[, scheduler]) - cp.rx.Observable","Type","Method","Description","Returns an Observable that mirrors the source Observable, except that it drops items emitted by the source that are followed by newer items before a timeout value expires on a specified Scheduler. The timer resets on each emission.","Parameters","time - The number of milliseconds. scheduler - The scheduler. If not specified, it will use the [defaultScheduler](cp.rx.util#defaultScheduler].","Returns","The new Observable.","Notes"]},{"l":"defaultIfEmpty","p":["Signature","cp.rx.Observable:defaultIfEmpty(...)","Type","Method","Description","Returns a new Observable that produces a default set of items if the source Observable produces no values.","Parameters","... - Zero or more values to produce if the source completes without emitting anything.","Returns","The new Observable.","Notes"]},{"l":"delay","p":["Signature","cp.rx.Observable:delay(time, scheduler) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the values of the original delayed by a time period.","Parameters","time - An amount in milliseconds to delay by, or a function which returns this value. scheduler - The Scheduler to run the Observable on. If not specified, it will use the [defaultScheduler](cp.rx.util#defaultScheduler].","Returns","The new Observable.","Notes"]},{"l":"distinct","p":["Signature","cp.rx.Observable:distinct() - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the values from the original with duplicates removed.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"distinctUntilChanged","p":["Signature","cp.rx.Observable:distinctUntilChanged([comparator]) - cp.rx.Observable","Type","Method","Description","Returns an Observable that only produces values from the original if they are different from the previous value.","Parameters","comparator - A function used to compare 2 values. If unspecified, == is used.","Returns","The new Observable","Notes"]},{"l":"dump","p":["Signature","cp.rx.Observable:dump(name, formatter)","Type","Method","Description","Subscribes to this Observable and prints values it produces.","Parameters","name - Prefixes the printed messages with a name. formatter - A function that formats one or more values to be printed. Defaults to tostring.","Returns","A Reference for the subscription.","Notes"]},{"l":"elementAt","p":["Signature","cp.rx.Observable:elementAt(index) - cp.rx.Observable","Type","Method","Description","Returns an Observable that produces the n th element produced by the source Observable.","Parameters","index - The index of the item, with an index of 1 representing the first.","Returns","The new Observable.","Notes"]},{"l":"filter","p":["Signature","cp.rx.Observable:filter(predicate) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that only produces values of the first that satisfy a predicate.","Parameters","predicate - The predicate function used to filter values.","Returns","The new Observable.","Notes"]},{"l":"finalize","p":["Signature","cp.rx.Observable:finalize(handler) - cp.rx.Observable","Type","Method","Description","Returns an Observable that mirrors the source Observable, but will call a specified function when the source terminates on complete or error.","Parameters","handler - The handler function to call when onError/ onCompleted occurs.","Returns","The new Observable.","Notes"]},{"l":"find","p":["Signature","cp.rx.Observable:find(predicate) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the first value of the original that satisfies a predicate.","Parameters","predicate - The predicate function used to find a value.","Returns","The new Observable.","Notes"]},{"l":"first","p":["Signature","cp.rx.Observable:first() - cp.rx.Observable","Type","Method","Description","Returns a new Observable that only produces the first result of the original. If no values are produced, an error is thrown.","Parameters","None","Returns","The new Observable.","Notes","This is similar to [#next], but will throw an error if no onNext signal is sent before onCompleted."]},{"l":"flatMap","p":["Signature","cp.rx.Observable:flatMap(callback) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that transform the items emitted by an Observable into Observables, then flatten the emissions from those into a single Observable.","Parameters","callback - The function to transform values from the original Observable.","Returns","The new Observable.","Notes"]},{"l":"flatMapLatest","p":["Signature","cp.rx.Observable:flatMapLatest([callback]) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that uses a callback to create Observables from the values produced by the source, then produces values from the most recent of these Observables.","Parameters","callback - The function used to convert values to Observables. Defaults to the identity function.","Returns","The new Observable.","Notes"]},{"l":"flatten","p":["Signature","cp.rx.Observable:flatten()","Type","Method","Description","Returns a new Observable that subscribes to the Observables produced by the original and produces their values.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"ignoreElements","p":["Signature","cp.rx.Observable:ignoreElements() - cp.rx.Observable","Type","Method","Description","Returns an Observable that terminates when the source terminates but does not produce any elements.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"last","p":["Signature","cp.rx.Observable:last() - cp.rx.Observable","Type","Method","Description","Returns a new Observable that only produces the last result of the original.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"map","p":["Signature","cp.rx.Observable:map(callback) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the values of the original transformed by a function.","Parameters","callback - The function to transform values from the original Observable.","Returns","The new Observable.","Notes"]},{"l":"max","p":["Signature","cp.rx.Observable:max() - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the maximum value produced by the original.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"merge","p":["Signature","cp.rx.Observable:merge(...) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the values produced by all the specified Observables in the order they are produced.","Parameters","... - One or more Observables to merge.","Returns","The new Observable.","Notes"]},{"l":"min","p":["Signature","cp.rx.Observable:min() - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the minimum value produced by the original.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"next","p":["Signature","cp.rx.Observable:next() - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces at most the first result from the original and then completes. Will not send an error if zero values are sent.","Parameters","None","Returns","Notes","This is similar to [#first], but will not throw an error if no onNext signal is sent before onCompleted."]},{"l":"partition","p":["Signature","cp.rx.Observable:partition(predicate) - cp.rx.Observable, cp.rx.Observable","Type","Method","Description","Returns two Observables: one that produces values for which the predicate returns truthy for, and another that produces values for which the predicate returns falsy.","Parameters","predicate - The predicate function used to partition the values.","Returns","The 'truthy' Observable. The 'falsy' Observable.","Notes"]},{"l":"pluck","p":["Signature","cp.rx.Observable:pluck(...) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces values computed by extracting the given keys from the tables produced by the original.","Parameters","... - The key to extract from the table. Multiple keys can be specified to recursively pluck values from nested tables.","Returns","The new Observable.","Notes"]},{"l":"reduce","p":["Signature","cp.rx.Observable:reduce(accumulator[, seed]) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces a single value computed by accumulating the results of running a function on each value produced by the original Observable.","Parameters","accumulator - Accumulates the values of the original Observable. Will be passed the return value of the last call as the first argument and the current values as the rest of the arguments. seed - An optional value to pass to the accumulator the first time it is run.","Returns","The new Observable.","Notes"]},{"l":"reject","p":["Signature","cp.rx.Observable:reject(predicate) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces values from the original which do not satisfy a predicate.","Parameters","predicate - The predicate function used to reject values.","Returns","The new Observable.","Notes"]},{"l":"retry","p":["Signature","cp.rx.Observable:retry([count]) - cp.rx.Observable","Type","Method","Description","Returns an Observable that restarts in the event of an error.","Parameters","count - The maximum number of times to retry. If left unspecified, an infinite number of retries will be attempted.","Returns","The new Observable.","Notes"]},{"l":"retryWithDelay","p":["Signature","cp.rx.Observable:retryWithDelay(count[, delay[, scheduler]]) - cp.rx.Observable","Type","Method","Description","Returns an Observable that restarts in the event of an error.","Parameters","count - The maximum number of times to retry. If left unspecified, an infinite number of retries will be attempted. delay - The function returning or a number representing the delay in milliseconds or a function. If left unspecified, defaults to 1000 ms (1 second). scheduler - The Scheduler to use. If not specified, it will use the [defaultScheduler](cp.rx.util#defaultScheduler].","Returns","The new Observable.","Notes"]},{"l":"sample","p":["Signature","cp.rx.Observable:sample(sampler) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces its most recent value every time the specified observable produces a value.","Parameters","sampler - The Observable that is used to sample values from this Observable.","Returns","The new Observable.","Notes"]},{"l":"scan","p":["Signature","cp.rx.Observable:scan(accumulator, seed) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces values computed by accumulating the results of running a function on each value produced by the original Observable.","Parameters","accumulator - Accumulates the values of the original Observable. Will be passed the return value of the last call as the first argument and the current values as the rest of the arguments. Each value returned from this function will be emitted by the Observable. seed - A value to pass to the accumulator the first time it is run.","Returns","The new Observable.","Notes"]},{"l":"skip","p":["Signature","cp.rx.Observable:skip([n]) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that skips over a specified number of values produced by the original and produces the rest.","Parameters","n - The number of values to ignore. Defaults to 1.","Returns","The new Observable","Notes"]},{"l":"skipLast","p":["Signature","cp.rx.Observable:skipLast(count) - cp.rx.Observable","Type","Method","Description","Returns an Observable that omits a specified number of values from the end of the original Observable.","Parameters","count - The number of items to omit from the end.","Returns","The new Observable.","Notes"]},{"l":"skipUntil","p":["Signature","cp.rx.Observable:skipUntil(other) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that skips over values produced by the original until the specified Observable produces a value.","Parameters","other - The Observable that triggers the production of values.","Returns","The new Observable.","Notes"]},{"l":"skipWhile","p":["Signature","cp.rx.Observable:skipWhile(predicate) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that skips elements until the predicate returns falsy for one of them.","Parameters","predicate - The predicate function used to continue skipping values.","Returns","The new Observable.","Notes"]},{"l":"startWith","p":["Signature","cp.rx.Observable:startWith(...) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces the specified values followed by all elements produced by the source Observable.","Parameters","values - The values to produce before the Observable begins producing values normally.","Returns","The new Observable.","Notes"]},{"l":"subscribe","p":["Signature","cp.rx.Observable:subscribe(observer [, onError[, onCompleted]]) - cp.rx.Reference","Type","Method","Description","Shorthand for creating an Observer and passing it to this Observable's subscription function.","Parameters","observer - Either an Observer or a function to be called when the Observable produces a value. onError - A function to be called when the Observable terminates due to an error. onCompleted - A 'function` to be called when the Observable completes normally.","Returns","A Reference which can be used to cancel the subscription.","Notes"]},{"l":"sum","p":["Signature","cp.rx.Observable:sum() - cp.rx.Observable","Type","Method","Description","Returns an Observable that produces a single value representing the sum of the values produced by the original.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"switch","p":["Signature","cp.rx.Observable:switch() - cp.rx.Observable","Type","Method","Description","Given an Observable that produces Observables, returns an Observable that produces the values produced by the most recently produced Observable.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"switchIfEmpty","p":["Signature","cp.rx.Observable:switchIfEmpty(alternate) - cp.rx.Observable","Type","Method","Description","Switch to an alternate Observable if this one sends an onCompleted without any onNext s.","Parameters","alternate - An Observable to switch to if this does not send any onNext values before the onCompleted.","Returns","The new Observable.","Notes"]},{"l":"take","p":["Signature","cp.rx.Observable:take([n]) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that only produces the first n results of the original.","Parameters","n - The number of elements to produce before completing. Defaults to 1.","Returns","The new Observable.","Notes"]},{"l":"takeLast","p":["Signature","cp.rx.Observable:takeLast(count) - cp.rx.Observable","Type","Method","Description","Returns an Observable that produces a specified number of elements from the end of a source Observable.","Parameters","count - The number of elements to produce.","Returns","The new Observable.","Notes"]},{"l":"takeUntil","p":["Signature","cp.rx.Observable:takeUntil(other) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that completes when the specified Observable fires.","Parameters","other - The Observable that triggers completion of the original.","Returns","The new Observable.","Notes"]},{"l":"takeWhile","p":["Signature","cp.rx.Observable:takeWhile(predicate) - cp.rx.Observable","Type","Method","Description","Returns a new Observable that produces elements until the predicate returns falsy.","Parameters","predicate - The predicate function used to continue production of values.","Returns","The new Observable.","Notes"]},{"l":"tap","p":["Signature","cp.rx.Observable:tap(onNext[, onError[, onCompleted]]) - cp.rx.Observable","Type","Method","Description","Runs a function each time this Observable has activity. Similar to subscribe but does not create a subscription.","Parameters","onNext - Run when the Observable produces values. onError - Run when the Observable encounters a problem. onCompleted - Run when the Observable completes.","Returns","The new Observable.","Notes"]},{"l":"timeout","p":["Signature","cp.rx.Observable:timeout(timeInMs, next[, scheduler]) - cp.rx.Observable","Type","Method","Description","Returns an Observable that will emit an error if the specified time is exceded since the most recent next value.","Parameters","timeInMs - The time in milliseconds to wait before an error is emitted. next - If a string, it will be sent as an error. If an Observable, switch to that Observable instead of sending an error. scheduler - The scheduler to use. If not specified, it will use the [defaultScheduler](cp.rx.util#defaultScheduler].","Returns","The new Observable.","Notes"]},{"l":"unpack","p":["Signature","cp.rx.Observable:unpack() - cp.rx.Observable","Type","Method","Description","Returns an Observable that unpacks the tables produced by the original.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"unwrap","p":["Signature","cp.rx.Observable:unwrap() - cp.rx.Observable","Type","Method","Description","Returns an Observable that takes any values produced by the original that consist of multiple return values and produces each value individually.","Parameters","None","Returns","The new Observable.","Notes"]},{"l":"with","p":["Signature","cp.rx.Observable:with(...) - cp.rx.Observable","Type","Method","Description","Returns an Observable that produces values from the original along with the most recently produced value from all other specified Observables. Note that only the first argument from each source Observable is used.","Parameters","... - The Observables to include the most recent values from.","Returns","The new Observable.","Notes"]}],[{"i":"cprxobserver","l":"cp.rx.Observer","p":["Observers are simple objects that receive values from Observables."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","create","Methods- API calls which can only be made on an object returned by a constructor","onCompleted","onError","onNext"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.rx.Observer.is(thing) - boolean","Type","Function","Description","Tests if the thing is an Observer.","Parameters","thing - The thing to test.","Returns","true if the thing is an Observer, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"create","p":["Signature","cp.rx.Observer.create(onNext, onError, onCompleted) - cp.rx.Observer","Type","Constructor","Description","Creates a new Observer.","Parameters","onNext - Called when the Observable produces a value. onError - Called when the Observable terminates due to an error. onCompleted - Called when the Observable completes normally.","Returns","The new Observer.","Notes"]},{"l":"Methods"},{"l":"onCompleted","p":["Signature","cp.rx.Observer:onCompleted() - nil","Type","Method","Description","Notify the Observer that the sequence has completed and will produce no more values.","Parameters","None","Returns","Nothing","Notes"]},{"l":"onError","p":["Signature","cp.rx.Observer:onError(message) - nil","Type","Method","Description","Notify the Observer that an error has occurred.","Parameters","message - A string describing what went wrong.","Returns","Nothing","Notes"]},{"l":"onNext","p":["Signature","cp.rx.Observer:onNext(...) - nil","Type","Method","Description","Pushes zero or more values to the Observer.","Parameters","... - The list of values to send.","Returns","Nothing","Notes"]}],[{"i":"cprxreference","l":"cp.rx.Reference","p":["A handle representing the link between an Observer and an Observable, as well as any work required to clean up after the Observable completes or the Observer cancels."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","create","Methods- API calls which can only be made on an object returned by a constructor","cancel"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"create","p":["Signature","cp.rx.Reference.create(action) - cp.rx.Reference","Type","Constructor","Description","Creates a new Reference.","Parameters","action - The action to run when the reference is canceld. It will only be run once.","Returns","the Reference.","Notes"]},{"l":"Methods"},{"l":"cancel","p":["Signature","cp.rx.Reference:cancel() - nil","Type","Method","Description","Unsubscribes the reference, performing any necessary cleanup work.","Parameters","None","Returns","Nothing","Notes"]}],[{"i":"cprxrelaysubject","l":"cp.rx.RelaySubject","p":["A Subject that provides new Observers with some or all of the most recently produced values upon reference."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","create","Methods- API calls which can only be made on an object returned by a constructor","onNext","subscribe"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"create","p":["Signature","cp.rx.RelaySubject.create([n]) - cp.rx.RelaySubject","Type","Constructor","Description","Creates a new ReplaySubject.","Parameters","bufferSize - The number of values to send to new subscribers. If nil, an infinite buffer is used (note that this could lead to memory issues).","Returns","The new `ReplaySubject.","Notes"]},{"l":"Methods"},{"l":"onNext","p":["Signature","cp.rx.RelaySubject:onNext(...) - nil","Type","Method","Description","Pushes zero or more values to the ReplaySubject. They will be broadcasted to all Observers.","Parameters","... - The values to send.","Returns","None","Notes"]},{"l":"subscribe","p":["Signature","cp.rx.RelaySubject:subscribe([observer [, onError[, onCompleted]]]) - cp.rx.Reference","Type","Method","Description","Creates a new Observer and attaches it to the ReplaySubject. Immediately broadcasts the most recent contents of the buffer to the Observer.","Parameters","observer - Either an Observer, or a function to call when the ReplaySubject produces a value. onError - A function to call when the ReplaySubject terminates due to an error. onCompleted - A function to call when the ReplaySubject completes normally.","Returns","The Reference.","Notes"]}],[{"i":"cprxsubject","l":"cp.rx.Subject","p":["Subjects function both as an Observer and as an Observable. Subjects inherit all Observable functions, including subscribe. Values can also be pushed to the Subject, which will be broadcasted to any subscribed Observers."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","create","Methods- API calls which can only be made on an object returned by a constructor","onCompleted","onError","onNext","subscribe"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"create","p":["Signature","cp.rx.Subject.create() - cp.rx.Subject","Type","Constructor","Description","Creates a new Subject.","Parameters","None","Returns","The Subject.","Notes"]},{"l":"Methods"},{"l":"onCompleted","p":["Signature","cp.rx.Subject:onCompleted() - nil","Type","Method","Description","Signal to all Observers that the Subject will not produce any more values.","Parameters","None","Returns","Notes"]},{"l":"onError","p":["Signature","cp.rx.Subject:onError(message) - nil","Type","Method","Description","Signal to all Observers that an error has occurred.","Parameters","message - A string describing what went wrong.","Returns","None","Notes"]},{"l":"onNext","p":["Signature","cp.rx.Subject:onNext(...) - nil","Type","Method","Description","Pushes zero or more values to the Subject. They will be broadcasted to all Observers.","Parameters","... - The values to send.","Returns","None","Notes"]},{"l":"subscribe","p":["Signature","cp.rx.Subject:subscribe(observer[, onError[, onCompleted]]) - cp.rx.Reference","Type","Method","Description","Creates a new Observer and attaches it to the Subject.","Parameters","observer - Either an Observer, or a function called when the Subject produces a value. onError - A function called when the Subject terminates due to an error. onCompleted - A function called when the Subject completes normally.","Returns","The Reference","Notes"]}],[{"i":"cprxtimeoutscheduler","l":"cp.rx.TimeoutScheduler","p":["A scheduler that uses the hs.timer library to schedule events on an event loop."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","create","schedule","stopAll"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"create","p":["Signature","cp.rx.TimeoutScheduler.create() - cp.rx.TimeoutScheduler","Type","Method","Description","Creates a new TimeoutScheduler.","Parameters","None","Returns","The new TimeoutScheduler.","Notes"]},{"l":"schedule","p":["Signature","cp.rx.TimeoutScheduler:schedule(action[, delay]) - cp.rx.TimeoutScheduler","Type","Method","Description","Schedules an action to run at a future point in time.","Parameters","action - The action to run. delay - The delay, in milliseconds. Defaults to 0.","Returns","The Reference.","Notes"]},{"l":"stopAll","p":["Signature","cp.rx.TimeoutScheduler:stopAll() - nil","Type","Method","Description","Stops all future timers from running and clears them.","Parameters","None","Returns","Notes"]}],[{"i":"cpsourcewatcher","l":"cp.sourcewatcher","p":["Watches folders for specific file extensions and reloads the app if they change."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","filesChanged","matchesExtensions","new","start","stop","watchPath"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"filesChanged","p":["Signature","cp.sourcewatcher:filesChanged(files, flagTables) - boolean","Type","Method","Description","Checks that the file that triggered the Path Watcher matches the extension given.","Parameters","files- Table of files to check as strings flagTables- Table of flagTables (see: hs.pathwatcher.new)","Returns","None","Notes"]},{"l":"matchesExtensions","p":["Signature","cp.sourcewatcher:matchesExtensions(file) - boolean","Type","Method","Description","Checks that the file that triggered the Path Watcher matches the extension given.","Parameters","file- The file as string","Returns","A boolean value","Notes"]},{"l":"new","p":["Signature","cp.sourcewatcher.new(extensions) - sourcewatcher","Type","Method","Description","Creates a new sourcewatcher instance.","Parameters","extensions- Extensions","Returns","A sourcewatcher instance","Notes"]},{"l":"start","p":["Signature","cp.sourcewatcher:start() - none","Type","Method","Description","Starts a Source Watcher.","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","cp.sourcewatcher:stop() - none","Type","Method","Description","Stops a Source Watcher.","Parameters","None","Returns","Notes"]},{"l":"watchPath","p":["Signature","cp.sourcewatcher:watchPath(path) - sourcewatcher","Type","Method","Description","Watches a path.","Parameters","path- The path you want to watch as a string.","Returns","sourcewatcher","Notes"]}],[{"i":"cpspec","l":"cp.spec","p":["An synchronous/asynchronous test library for Lua.","This library uses a syntax similar to Ruby RSpec or Mocha.js."]},{"l":"Simple Synchronous Test","p":["To create a test, create a new file ending with _spec.lua. For example, simple_spec.lua:","It can be run from the Debug Console like so:","It will report something like this:"]},{"l":"Simple Synchronous Failure","p":["If a test fails, it gives a report of where it failed, and if provided, the related message:","This will result in something like this:","You can then check the line that failed and resolve the issue."]},{"l":"Simple Asynchronous Test","p":["Performing an asynchronous test is only a little more complicated. We'll modify our simple_spec.lua to use of the Run.This instance available to every test:","Other than using hs.timer to actually make this asynchronous, the key additions here are:","this:wait(5): Tells the test that it is asynchronous, and to wait 5 seconds before timing out.","this:done(): Called inside the asynchronous function to indicate that it's complete.","Asycnchronous (and synchronous) tests can also be terminated by a failed assert, an error or a call to this:fail(...) or this:abort(...)"]},{"l":"Multiple tests","p":["Most things you're testing will require more than a single test. For this, We use Specification, most simply via the describe function:","This will now run two tests, and report something like this:"]},{"l":"Data-driven Testing","p":["When testing a feature, there are often multiple variations you want to test, and repeating individual tests can get tedious.","This is a great place to use the where feature. Our previous test can become something like this:","Other variations can be added easily by adding more rows."]},{"l":"Running Multiple Specs","p":["As shown above, you can run a single spec like so:","You can also run that spec an all other specs under the same path by adding .* to the end.","Or run every spec in your system like so:"]},{"l":"Submodules","p":["cp.spec.DefaultHandler","cp.spec.Definition","cp.spec.Error","cp.spec.Handled","cp.spec.Handler","cp.spec.Message","cp.spec.Report","cp.spec.Run","cp.spec.Scenario","cp.spec.Specification","cp.spec.TestCase","cp.spec.TestSuite","cp.spec.Where","cp.spec.expect"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","describe","find","it","setSearchPath","spec","test"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"describe","p":["Signature","cp.spec.describe(name) - function(definitions) - cp.spec.Specification","Type","Function","Description","Returns a function which will accept a list of test definitions, or a table of definitions.","Parameters","name - The name of the test suite.","Returns","A function that must be called with the set of definitions or suites to run.","Notes"]},{"l":"find","p":["Signature","cp.spec.find(idPattern) - cp.spec.Definition","Type","Function","Description","Attempts to find specs that match the provided ID pattern.","Parameters","idPattern - the ID pattern","Returns","The spec or nil and an error message.","Notes","Essentially, this is a standard require id/path to the spec file, with an optional * at the end to indicate that all specs available under that path should be loaded. Eg. \"foo.bar\" will find the specific spec at foo/bar_spec.lua or foo/bar/._spec.lua, or if those don't exist it will see if there is a foo/bar_test.lua or foo/bar/._test.lua and load that via test instead. However, if the pattern is \"foo.bar.*\", it will not only look for those specs, but will also check under that folder for other _spec.lua or _test.lua files to add to the collection to run."]},{"l":"it","p":["Signature","cp.spec.it(name[, ...]) - cp.spec.Scenario","Type","Function","Description","Returns an Scenario with the specified name and optional doingFn function. If the function is not provided, it must be done via the doing method prior to running.","Parameters","name - The name of the scenario. doingFn - (optional) The function to call when doing the operation. Will be passed the Run.This instance for the definition.","Returns","A cp.spec.Scenario object","Notes","See doing for more details regarding the function."]},{"l":"setSearchPath","p":["Signature","cp.spec.setSearchPath(path) - none","Type","Function","Description","Sets the path that will be used to search for spec files with the spec my.extension call. By default it will search the current package path. If specified, it will also search the provided path.","Parameters","path - The path to search for spec files. Set to nil to only search the default package path.","Returns","None","Notes"]},{"l":"spec","p":["Signature","cp.spec(id) - cp.spec.Definition","Type","Function","Description","This will search the package path (and specPath, if set) for _spec.lua files.","Parameters","id - the path ID for the spec. Eg. \"cp.app\"","Returns","The Definition, or throws an error.","Notes","It will first look for a file ending with _spec.lua, then will look for a file named _spec.lua in the folder. For example, if you run require cp.spec foo.bar, it will first look for foo/bar_spec.lua, then foo/bar/_spec.lua. This gives flexibility for extensions that are organised as single files or as folders."]},{"l":"test","p":["Signature","cp.spec.test(id) - cp.spec.Definition","Type","Function","Description","Attempts to load a cp.test with the specified ID, converting it to a cp.spec Definition. This can then be run like any other spec.","Parameters","id - The cp.test ID (eg. cp.app).","Returns","The Definition or throws an error if it can't be found.","Notes"]}],[{"i":"cpspecdefaulthandler","l":"cp.spec.DefaultHandler","p":["Default implementation of Handler, which outputs via the standard print function."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","aborted","failed","filter","printf","printSpacer","start","stop","summary","waiting"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"aborted","p":["Signature","cp.spec.DefaultHandler:aborted(run, msg)","Type","Method","Description","Prints an \"[ABORT]\" message.","Parameters","run - the run msg - the message string.","Returns","None","Notes"]},{"l":"failed","p":["Signature","cp.spec.DefaultHandler:failed(run, msg) - none","Type","Method","Description","Prints a \"[FAIL]\" message.","Parameters","run - the run msg - the message string.","Returns","None","Notes"]},{"l":"filter","p":["Signature","cp.spec.DefaultHandler:filter(run, msg) - none","Type","Method","Description","Prints a \"[FILTER]\" message.","Parameters","run - the run msg - the message string.","Returns","None","Notes"]},{"l":"printf","p":["Signature","cp.spec.DefaultHandler:printf(test, ...)","Type","Method","Description","Prints a spacer (if not the first line), followed by the text, optionally formatted with the provided parameters.","Parameters","text - The message to print.... - The parameters to interpolate into the text message.","Returns","None","Notes"]},{"l":"printSpacer","p":["Signature","cp.spec.DefaultHandler:printSpacer()","Type","Method","Description","Prints a blank line if this is not the first time it has been called.","Parameters","None","Returns","Notes"]},{"l":"start","p":["Signature","cp.spec.DefaultHandler:start(run, msg)","Type","Method","Description","If the handler or run is verbose, prints a \"[PASS]\" message.","Parameters","run - the run msg - the message string.","Returns","None","Notes"]},{"l":"stop","p":["Signature","cp.spec.DefaultHandler:stop(run)","Type","Method","Description","If the handler or run is verbose, prints a \"[STOP]\" message.","Parameters","run - the run","Returns","None","Notes"]},{"l":"summary","p":["Signature","cp.spec.DefaultHandler:summary(run, report) - none","Type","Method","Description","If the handler or run is verbose, prints a \"[RESULT]\" message.","Parameters","run - the run report - the report","Returns","None","Notes"]},{"l":"waiting","p":["Signature","cp.spec.DefaultHandler:waiting(run, timeout) - none","Type","Method","Description","Prints a \"[WAIT]\" message with the timeout value..","Parameters","run - run timeout - timeout","Returns","None","Notes"]}],[{"i":"cpspecdefinition","l":"cp.spec.Definition","p":["A Definition is a superclass for a \"runnable\" specification. It doesn't do anything itself, but provides a common ancestor for all implementation classes like Specification and Scenario."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","Definition","Methods- API calls which can only be made on an object returned by a constructor","run"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.spec.Definition.is(instance) - boolean","Type","Function","Description","Called as a method, this will check if the provided object is an instance of this class.","Parameters","instance - The instance to check.","Returns","true if the instance is an instance of this class.","Notes"]},{"l":"Constructors"},{"l":"Definition","p":["Signature","cp.spec.Definition(name[, doing]) - cp.spec.Definition","Type","Constructor","Description","Creates a new test definition.","Parameters","name - The name doing - doing","Returns","cp.spec.Definition object","Notes"]},{"l":"Methods"},{"l":"run","p":["Signature","cp.spec.Definition:run([...]) - cp.spec.Run","Type","Method","Description","Runs the definition with the specified filter string, function or table of string s and function s. The Run will have already started with the provided filter.","Parameters","... - (optional) The list of filters to apply to any child definitions.","Returns","The Run.","Notes"]}],[{"i":"cpspecerror","l":"cp.spec.Error","p":["Provides an Error message, which can be thrown via the error function."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.spec.Error.is(other) - boolean","Type","Function","Description","Checks if the other is an instance of the Error class.","Parameters","other - An object to check","Returns","A boolean","Notes"]}],[{"i":"cpspecexpect","l":"cp.spec.expect","p":["Provides a way of checking values match expected results. At it's core, it uses assert to make the check.","For example:"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpspechandled","l":"cp.spec.Handled","p":["An synchronous/asynchronous test library for Lua."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.spec.Handled.is(other) - boolean","Type","Function","Description","Checks if the other is an instance of the Handled class.","Parameters","other - An object to check.","Returns","A boolean.","Notes"]}],[{"i":"cpspechandler","l":"cp.spec.Handler","p":["Subclasses of this can customise how reports are handled. All methods do nothing.","See DefaultHandler."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","default","Constructors- API calls which return an object, typically one that offers API methods","Handler","Methods- API calls which can only be made on an object returned by a constructor","aborted","checkVerbose","failed","filter","passed","start","stop","summary","verbose","waiting"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"default","p":["Signature","cp.spec.Handler.default([handler]) - cp.spec.Handler","Type","Function","Description","Gets and sets the current default Handler implementation. This is used when processing test runs.","Parameters","handler - (optional) when provided, sets the default to the specified handler.","Returns","The current Handler implementation.","Notes"]},{"l":"Constructors"},{"l":"Handler","p":["Signature","cp.spec.Handler() - cp.spec.Handler","Type","Constructor","Description","Creates a new Handler","Parameters","None","Returns","Notes"]},{"l":"Methods"},{"l":"aborted","p":["Signature","cp.spec.Handler:aborted(run, msg) - none","Type","Method","Description","Call to indicate the run has had an abort.","Parameters","run - The test run. msg - The message.","Returns","None","Notes"]},{"l":"checkVerbose","p":["Signature","cp.spec.Handler:checkVerbose(run) - boolean","Type","Method","Description","Indicates if either the handler or the individual Run is \"verbose\". If so, more messages may be output by the handler.","Parameters","run","Returns","None","Notes"]},{"l":"failed","p":["Signature","cp.spec.Handler:failed(run, msg) - none","Type","Method","Description","Call to indicate the run has failed.","Parameters","run - The test run. msg - The message.","Returns","None","Notes"]},{"l":"filter","p":["Signature","cp.spec.Handler:filter(run, msg) - none","Type","Method","Description","Call to indicate the run is running due to being filtered.","Parameters","run - The test run. msg - The message.","Returns","None","Notes"]},{"l":"passed","p":["Signature","cp.spec.Handler:passed(run) - none","Type","Method","Description","Call to indicate the run has passed.","Parameters","run - The test run.","Returns","None","Notes"]},{"l":"start","p":["Signature","cp.spec.Handler:start(run) - none","Type","Method","Description","Call to indicate the run has started.","Parameters","run - The test run.","Returns","None","Notes"]},{"l":"stop","p":["Signature","cp.spec.Handler:stop(run) - none","Type","Method","Description","Call to indicate the run has completed.","Parameters","run - The test run.","Returns","None","Notes"]},{"l":"summary","p":["Signature","cp.spec.Handler:summary(run, report) - none","Type","Method","Description","Call to indicate the run has passed with the given report.","Parameters","run - The test run. report - The test reports.","Returns","None","Notes"]},{"l":"verbose","p":["Signature","cp.spec.Handler:verbose([isVerbose]) - self","Type","Method","Description","Indicate that the handler is (or is not) verbose. If not provided, this is set to true.","Parameters","isVerbose - (optional) If set to false, the handler will not be verbose. Defaults to true.","Returns","The Handler instance, for chaining.","Notes"]},{"l":"waiting","p":["Signature","cp.spec.Handler:waiting(run, timeout) - none","Type","Method","Description","Call to indicate that the run is waiting asynchronously.","Parameters","run - The test run. timeout - The timeout, in seconds.","Returns","None","Notes"]}],[{"i":"cpspecmessage","l":"cp.spec.Message","p":["Provides an Message message, which can be thrown via the error function."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","Message","Methods- API calls which can only be made on an object returned by a constructor","traceback"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.spec.Message.is(other) - boolean","Type","Function","Description","Checks if the other is an instance of the Message class.","Parameters","other - The object to compare","Returns","A boolean","Notes"]},{"l":"Constructors"},{"l":"Message","p":["Signature","cp.spec.Message(message)","Type","Constructor","Description","Creates a new Message message.","Parameters","message - the message to send.","Returns","A new message.","Notes"]},{"l":"Methods"},{"l":"traceback","p":["Signature","cp.spec.Message:traceback()","Type","Method","Description","Stores the debug.traceback result at the present time. Can be retrieved via stacktrace","Parameters","None","Returns","Notes"]}],[{"i":"cpspecreport","l":"cp.spec.Report","p":["The results of a test run."]},{"l":"API Overview","p":["aborted","aborts","add","Constructors- API calls which return an object, typically one that offers API methods","failed","failures","Fields- Variables which can only be accessed from an object returned by a constructor","Methods- API calls which can only be made on an object returned by a constructor","passed","passes","Report","run","start","startTime","stop","stopTime","summary","totalTime","waiting"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Report","p":["Signature","cp.spec.Report(run) - cp.spec.Report","Type","Constructor","Description","Creates a new test report.","Parameters","run","Returns","A new cp.spec.Report object","Notes"]},{"l":"Fields"},{"l":"aborts","p":["Signature","cp.spec.Report.aborts number","Type","Field","Description","The number of aborts in the run."]},{"l":"failures","p":["Signature","cp.spec.Report.failures number","Type","Field","Description","The number of failures in the run."]},{"l":"passes","p":["Signature","cp.spec.Report.passes number","Type","Field","Description","The number of passes in the run."]},{"l":"run","p":["Signature","cp.spec.Report.run cp.spec.Run","Type","Field","Description","The run the reports are for."]},{"l":"startTime","p":["Signature","cp.spec.Report.startTime number","Type","Field","Description","The number of seconds since epoch when the test started, or nil if not started yet."]},{"l":"stopTime","p":["Signature","cp.spec.Report.stopTime number","Type","Field","Description","The number of seconds since epoch when the tests stopped, or nil if not stopped yet."]},{"l":"totalTime","p":["Signature","cp.spec.Report.totalTime number","Type","Field","Description","The number of seconds the run took (may be decimal), or nil if the test hasn't run."]},{"l":"Methods"},{"l":"aborted","p":["Signature","cp.spec.Report:aborted(message)","Type","Method","Description","Records an abort, with the specified message.","Parameters","message - The related message to output.","Returns","None","Notes"]},{"l":"add","p":["Signature","cp.spec.Report:add(otherReport) - nil","Type","Method","Description","Adds the passes/failures/aborts from the other report into this one.","Parameters","otherReport - The other report to add.","Returns","None","Notes"]},{"l":"failed","p":["Signature","cp.spec.Report:failed(message)","Type","Method","Description","Records a fail, with the specified message.","Parameters","message - The related message to output.","Returns","None","Notes"]},{"l":"passed","p":["Signature","cp.spec.Report:passed([message])","Type","Method","Description","Records a pass, with the specified message.","Parameters","message - an optional additional message to output.","Returns","None","Notes"]},{"l":"start","p":["Signature","cp.spec.Report:start() - nil","Type","Method","Description","Logs the start time.","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","cp.spec.Report:stop() - nil","Type","Method","Description","Logs the end time.","Parameters","None","Returns","Notes"]},{"l":"summary","p":["Signature","cp.spec.Report:summary()","Type","Method","Description","Summarise the reports.","Parameters","None","Returns","Notes"]},{"l":"waiting","p":["Signature","cp.spec.Report:waiting(timeout)","Type","Method","Description","Records that a run is waiting for up to the specified amount of time.","Parameters","timeout - The timeout to wait for, in seconds.","Returns","None","Notes"]}],[{"i":"cpspecrun","l":"cp.spec.Run","p":["An individual run of a test Definition or Specification."]},{"l":"Submodules","p":["cp.spec.Run.This"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","debug","expectAbort","expectFail","Fields- Variables which can only be accessed from an object returned by a constructor","isDebugging","isExpectingAbort","isExpectingFail","log","Methods- API calls which can only be made on an object returned by a constructor","onBefore","onBfter","onRunning","parent","phase","report","result","Run","shared","source","verbose"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Run","p":["Signature","cp.spec.Run(name, source) - cp.spec.Run","Type","Constructor","Description","Creates a new test run.","Parameters","name - The name of the run. source - The object (typically a Definition) that initiated the run.","Returns","cp.spec.Run","Notes"]},{"l":"Fields"},{"l":"phase","p":["Signature","cp.spec.Run.phase cp.spec.Run.phase","Type","Field","Description","The current phase of the run."]},{"l":"report","p":["Signature","cp.spec.Run.report cp.spec.Report","Type","Field","Description","The reports of the run."]},{"l":"result","p":["Signature","cp.spec.Run.result cp.spec.Run.result","Type","Field","Description","The current result. Defaults to Run.result.passing."]},{"l":"shared","p":["Signature","cp.spec.Run.shared table","Type","Field","Description","The set of data shared by all phases of the Run. Data from parent Runs will also be available."]},{"l":"source","p":["Signature","cp.spec.Run.source","Type","Field","Description","The object that initiated the run. Typically a Definition."]},{"l":"Methods"},{"l":"debug","p":["Signature","cp.spec.Run:debug() - cp.spec.Run","Type","Method","Description","Enables debugging on this Run. Any calls to [#log] will be output to the console.","Parameters","None","Returns","The same Run instance.","Notes"]},{"l":"expectAbort","p":["Signature","cp.spec.Run:expectAbort([messagePattern]) - Run","Type","Method","Description","Indicates that this spec is expecting an abort/ error to occur.","Parameters","messagePattern - The pattern to check the fail message against. If not provided, any message will match.","Returns","The same Run instance.","Notes","When this is expected, it doesn't log the problem as a 'fail'. In fact, if the it doesn't occur at some point during the run, it will raise a failure at the end of the run. The messagePattern can be used to ensure it's the fail you expect. This should be called before the actual abort/ error would occur."]},{"l":"expectFail","p":["Signature","cp.spec.Run:expectFail([messagePattern]) - Run","Type","Method","Description","Indicates that this spec is expecting an assert/fail to occur.","Parameters","messagePattern - The pattern to check the fail message against. If not provided, any message will match.","Returns","The same Run instance.","Notes","When this is expected, it doesn't log the problem as a 'fail'. In fact, if the fail doesn't occur, it will raise a failure at the end of the run. The messagePattern can be used to ensure it's the fail you expect. This should be called before the actual assert/fail would occur."]},{"l":"isDebugging","p":["Signature","cp.spec.Run:isDebugging() - boolean","Type","Method","Description","Checks if debug has been enabled on this or any parent Run.","Parameters","None","Returns","A boolean","Notes"]},{"l":"isExpectingAbort","p":["Signature","cp.spec.Run:isExpectingAbort() - boolean, string or nil","Type","Method","Description","Checks if the run is expecting a abort/error to occur. If so, it will return the expected message pattern as the second value, if specified.","Parameters","None","Returns","boolean - true, if a fail is expected. string - the message pattern, if specified.","Notes"]},{"l":"isExpectingFail","p":["Signature","cp.spec.Run:isExpectingFail() - boolean, string or nil","Type","Method","Description","Checks if the run is expecting a fail to occur. If so, it will return the expected message pattern, if specified.","Parameters","None","Returns","boolean - true, if a fail is expected. string - the message pattern, if specified.","Notes"]},{"l":"log","p":["Signature","cp.spec.Run:log(message[, ...])","Type","Method","Description","When the current Run is in debug mode, output the message to the console.","Parameters","message - the text message to output.... - optional parameters, to be injected into the message, ala string.format.","Returns","None","Notes"]},{"l":"onBefore","p":["Signature","cp.spec.Run:onBefore(actionFn) - self","Type","Method","Description","Adds a callback function to run prior to executing the actual test.","Parameters","actionFn - The function to run, passed this Run.This as the first parameter.","Returns","self","Notes"]},{"l":"onBfter","p":["Signature","cp.spec.Run:onBfter(actionFn) - self","Type","Method","Description","Adds a callback function to run after to executing the actual test, pass or fail.","Parameters","actionFn - The function to run, passed this Run as the first parameter.","Returns","self","Notes"]},{"l":"onRunning","p":["Signature","cp.spec.Run:onRunning(actionFn) - self","Type","Method","Description","Adds a callback function to run during the test.","Parameters","runningFn - The function to run, passed Run.This as the first parameter.","Returns","self","Notes"]},{"l":"parent","p":["Signature","cp.spec.Run:parent([parent]) - cp.spec.Run","Type","Method","Description","Gets and/or sets the parent Run for this run.","Parameters","parent - (optional) If set, will set the parent Run.","Returns","The current parent Run.","Notes","If a parent is provided and there is already another Run set as a parent, an error is thrown."]},{"l":"verbose","p":["Signature","cp.spec.Run:verbose([isVerbose]) - boolean | self","Type","Method","Description","Either sets the verbose value and returns itself for further chaining, or returns the current verbose status.","Parameters","isVerbose - (optional) if true or false will update the verbose status and return this Run.","Returns","The current verbose status, or this Run if isVerbose is provided.","Notes"]}],[{"i":"cpspecrunthis","l":"cp.spec.Run.This","p":["A token passed to test functions to allow them to indicate if a test run will complete asynchronously."]},{"l":"API Overview","p":["abort","cleanup","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","defaultTimeout","done","expectAbort","expectFail","fail","Functions- API calls offered directly by the extension","isActive","isDone","isWaiting","log","Methods- API calls which can only be made on an object returned by a constructor","prepare","run","state","This","toObserver","wait"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"state","p":["Signature","cp.spec.Run.This.state","Type","Constant","Description","A collection of states that a Run.This can be in.","Notes","States include: running - The Run is currently running and will terminate at the end of the function (synchrnonous). waiting - The Run is waiting, and will terminate when done() is called. (asynchronous). done - The Run is done."]},{"l":"Functions"},{"l":"defaultTimeout","p":["Signature","cp.spec.Run.This.defaultTimeout([timeout]) - number","Type","Function","Description","Gets and/or sets the default timeout for asynchronous tests. Defaults to 60 seconds.","Parameters","timeout - (optional) the new timeout, in seconds.","Returns","The current default timeout, in seconds.","Notes"]},{"l":"Constructors"},{"l":"This","p":["Signature","cp.spec.Run.This(run, actionFn, index) - cp.spec.Run.This","Type","Constructor","Description","Creates a new Run.This instance for a Run.","Parameters","run - The Run. actionFn - The action function to execute. index - The index of the action in the current phase.","Returns","The new Run.This.","Notes"]},{"l":"Methods"},{"l":"abort","p":["Signature","cp.spec.Run.This:abort([message]) - boolean","Type","Method","Description","Indicates the stage has aborted.","Parameters","message - The optional message to output.","Returns","A boolean","Notes"]},{"l":"cleanup","p":["Signature","cp.spec.Run.This:cleanup()","Type","Method","Description","Cleans up This after a step.","Parameters","None","Returns","Notes"]},{"l":"done","p":["Signature","cp.spec.Run.This:done()","Type","Method","Description","Indicates that the test is completed.","Parameters","None","Returns","Notes"]},{"l":"expectAbort","p":["Signature","cp.spec.Run.This:expectAbort([messagePattern]) - Run.This","Type","Method","Description","Indicates that this spec is expecting an abort/ error to occur.","Parameters","messagePattern - The pattern to check the fail message against. If not provided, any message will match.","Returns","The same Run.This instance.","Notes","When this is expected, it doesn't log the problem as a 'fail'. In fact, if the it doesn't occur at some point during the run, it will raise a failure at the end of the run. The messagePattern can be used to ensure it's the fail you expect. This should be called before the actual abort/ error would occur."]},{"l":"expectFail","p":["Signature","cp.spec.Run.This:expectFail([messagePattern]) - Run.This","Type","Method","Description","Indicates that this spec is expecting an assert/fail to occur.","Parameters","messagePattern - The pattern to check the fail message against. If not provided, any message will match.","Returns","The same Run.This instance.","Notes","When this is expected, it doesn't log the problem as a 'fail'. In fact, if the fail doesn't occur, it will raise a failure at the end of the run. The messagePattern can be used to ensure it's the fail you expect. This should be called before the actual assert/fail would occur."]},{"l":"fail","p":["Signature","cp.spec.Run.This:fail([message]) - boolean","Type","Method","Description","Indicates the run has failed.","Parameters","message - The optional message to output.","Returns","A boolean","Notes"]},{"l":"isActive","p":["Signature","cp.spec.Run.This:isActive() - boolean","Type","Method","Description","Checks if the this is in an active state - either running or waiting.","Parameters","None","Returns","true if isActive.","Notes"]},{"l":"isDone","p":["Signature","cp.spec.Run.This:isDone() - boolean","Type","Method","Description","Returns true if this is done.","Parameters","None","Returns","A boolean","Notes"]},{"l":"isWaiting","p":["Signature","cp.spec.Run.This:isWaiting() - boolean","Type","Method","Description","Checks if the Run is waiting for this execution to complete via the done method.","Parameters","None","Returns","true if the waiting.","Notes"]},{"l":"log","p":["Signature","cp.spec.Run.This:log(message[, ...])","Type","Method","Description","When the current Run is in debug mode, output the message to the console.","Parameters","message - the text message to output.... - optional parameters, to be injected into the message, ala string.format.","Returns","None","Notes"]},{"l":"prepare","p":["Signature","cp.spec.Run.This:prepare()","Type","Method","Description","Prepares this to run.","Parameters","None","Returns","Notes"]},{"l":"run","p":["Signature","cp.spec.Run.This:run() - cp.spec.Run","Type","Method","Description","Returns the current Run","Parameters","None","Returns","Notes"]},{"l":"toObserver","p":["Signature","cp.spec.Run.This:toObserver([onNext[, onError[, onCompleted]]) - cp.rx.Observer","Type","Method","Description","Creates an Observer.","Parameters","onNext - The next handler. onError - The error handler. onCompleted - The completed handler.","Returns","cp.rx.Observer","Notes","If the onNext/ onError/ onCompleted functions are not provided, then it will provide defaults. onNext will be logged, onError will throw an error, and onCompleted will trigger done."]},{"l":"wait","p":["Signature","cp.spec.Run.This:wait([timeout]) - none","Type","Method","Description","Indicates that the test is continuing asynchronously, and will be completed by calling done.","Parameters","timeout - (optional) The number of seconds to wait before timing out.","Returns","None","Notes","If not provided, Run.This.defaultTimeout() is used."]}],[{"i":"cpspecscenario","l":"cp.spec.Scenario","p":["A Definition which describes a specific scenario.","A Scenario is most typically created via the it function, like so:","Scenarios can be run asynchronously via the Run.This instance passed to the doing function. To indicate a scenario is asynchronous, call this:wait(), then call this:done(), to indicate it has completed. Any assert call which fails will result in the run failing, and stop at that point.","For example:","Definitions can also be data-driven, via the where method:","This will do a run for each variation and interpolate the value into the run name for each.","Note:\"where\" parameters will not override built-in functions and fields in the this instance (such as \"async\" or \"done\") so ensure that you pick names that don't clash."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","Scenario","Methods- API calls which can only be made on an object returned by a constructor","doing","run","where"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"Scenario","p":["Signature","cp.spec.Scenario(name[, testFn]) - cp.spec.Scenario","Type","Constructor","Description","Creates a new Scenario with the specified name.","Parameters","name - The name of the scenario. testFn - (optional) The function which performs the test for in the scenario.","Returns","The new Scenario.","Notes","If the testFn is not provided here, it must be done via the doing method prior to running, an error will occur."]},{"l":"Methods"},{"l":"doing","p":["Signature","cp.spec.Scenario:doing(actionFn) - self","Type","Method","Description","Specifies the function for the definition.","Parameters","testFn - The function that will do the test.","Returns","The same Definition.","Notes"]},{"l":"run","p":["Signature","cp.spec.Scenario:run(...) - cp.spec.Run","Type","Method","Description","Runs the scenario.","Parameters","... - The list of filters. The first one will be compared to this scenario to determine it should be run.","Returns","cp.spec.Run object","Notes"]},{"l":"where","p":["Signature","cp.spec.Scenario:where(data) - cp.spec.Where","Type","Method","Description","Specifies a table of data that will be iterated through as multiple Runs, one row at a time.","Parameters","data - The data table.","Returns","The Where.","Notes","The first row should be all strings, which will be the name of the parameter. Subsequent rows are the values for those rows."]}],[{"i":"cpspecspecification","l":"cp.spec.Specification","p":["A Specification is a list of definitions which will be run in sequence, and the results are collated. It is often created via the describe function.","Example usage:"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","Specification","Methods- API calls which can only be made on an object returned by a constructor","onAfterEach","onBeforeEach","run","with"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.spec.Specification.is(instance) - boolean","Type","Function","Description","Checks if the instance is an instance of Specification.","Parameters","instance - The instance to check","Returns","true if it's a Specification instance.","Notes"]},{"l":"Constructors"},{"l":"Specification","p":["Signature","cp.spec.Specification(name) - cp.spec.Specification","Type","Constructor","Description","Creates a new test suite.","Parameters","name - The name os the specification.","Returns","A cp.spec.Specification object","Notes"]},{"l":"Methods"},{"l":"onAfterEach","p":["Signature","cp.spec.Specification:onAfterEach(afterEachFn) - cp.spec.Specification","Type","Method","Description","Specifies a function to execute after each of the contained specifications is run. The function will be passed the Run.This for the current Run.","Parameters","afterEachFn - The function to run after each child runs.","Returns","The same cp.spec.Specification instance.","Notes"]},{"l":"onBeforeEach","p":["Signature","cp.spec.Specification:onBeforeEach(beforeEachFn) - cp.spec.Specification","Type","Method","Description","Specifies a function to execute before each of the contained specifications is run. The function will be passed the Run.This for the current Run.","Parameters","beforeEachFn - The function to run before each child runs.","Returns","The same cp.spec.Specification instance.","Notes"]},{"l":"run","p":["Signature","cp.spec.Specification:run() - cp.spec.Run","Type","Method","Description","Runs the specification, returning the Run instance, already running.","Parameters","None","Returns","The Run instance.","Notes"]},{"l":"with","p":["Signature","cp.spec.Specification:with(...) - self","Type","Method","Description","Adds the provided definitions to the suite. May also pass a single table containing a list of definitions.","Parameters","... - the definitions to add.","Returns","The same Specification instance, with the definitions added.","Notes"]}],[{"i":"cpspectestcase","l":"cp.spec.TestCase","p":["Wraps cp.test into a subclass of Scenario."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpspectestsuite","l":"cp.spec.TestSuite","p":["Test Suite."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpspecwhere","l":"cp.spec.Where","p":["Created via Scenario:where(...).","Extends Definition"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpstrings","l":"cp.strings","p":["Provides strings from (potentially) multiple sources, with support for loading from multiple languages.","This will load the file for the specified language (replacing ${language} with en in the path) and return the value. Notes: This will load the file on each request. To have values cached, use the cp.strings module and specify a plist as a source."]},{"l":"Submodules","p":["cp.strings.source"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","context","find","findAllKeys","findInSources","findKeys","findKeysInSources","from","fromPlist"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","cp.strings.new(context) - cp.strings","Type","Constructor","Description","Creates a new strings instance. You should add sources with the from or fromPlist methods.","Parameters","context - The initial context.","Returns","The new cp.strings","Notes"]},{"l":"Methods"},{"l":"context","p":["Signature","cp.strings:context([context]) - table | self","Type","Method","Description","Gets or sets a context to be set for the strings. This typically includes a language, which provides the default language code, but may have other source-specific properties. Calling this method may may clear caches, etc.","Parameters","context - A table with values which may be used by the source.","Returns","If a new context is provided, the cp.string.source is returned, otherwise the current context table is returned.","Notes","For example: lua/lilistring:context({language = fr}) -- set the default language to French./lili"]},{"l":"find","p":["Signature","cp.strings:find(key[, context[, quiet]) - string | nil","Type","Method","Description","Searches for the specified key, caching the result when found.","Parameters","key- The key to retrieve from the file. context- Optional table with additional/alternate context. quiet- Optional boolean, defaults to false. If true, no warnings are logged for missing keys.","Returns","The value of the key, or nil if not found.","Notes"]},{"l":"findAllKeys","p":["Signature","cp.strings:findAllKeys([context]) - table","Type","Method","Description","Searches for all keys in all sources, with the given context.","Parameters","context - The intial context to use.","Returns","The array of keys, or {} if not found.","Notes"]},{"l":"findInSources","p":["Signature","cp.strings:findInSources(key[, context[, quiet]]) - string | nil","Type","Method","Description","Searches directly in the sources for the specified key.","Parameters","key- The key to retrieve from the file. context- Optional table with additional/alternate context. quiet- Optional boolean, defaults to false. If true, no warnings are logged for missing keys.","Returns","The value of the key, or nil if not found.","Notes"]},{"l":"findKeys","p":["Signature","cp.strings:findKeys(value[, context]) - string | nil","Type","Method","Description","Searches for the list of keys with a matching value, in the specified language.","Parameters","value - The value to search for. context - The language code to look for (e.g. en, or fr).","Returns","The array of keys, or {} if not found.","Notes","Not recommended in production code, as it will potentially be very inefficient."]},{"l":"findKeysInSources","p":["Signature","cp.strings:findKeysInSources(value[, context]) - string | nil","Type","Method","Description","Searches directly in the sources for the specified key value pattern.","Parameters","value- The value to search for. context- Optional additional context for the request.","Returns","The array of keys, or {} if not found.","Notes"]},{"l":"from","p":["Signature","cp.strings:from(source) - cp.strings","Type","Method","Description","Adds the source to the strings sources.","Parameters","source- The source to add.","Returns","The current cp.strings instance.","Notes"]},{"l":"fromPlist","p":["Signature","cp.strings:fromPlist(pathPattern) - cp.strings","Type","Method","Description","Convenience method for adding a plist source to the strings instance.","Parameters","pathPattern- The path to load from. May contain a special ${language} marker which will be replace with the provided langauge when searching.","Returns","The current cp.strings instance.","Notes"]}],[{"i":"cpstringssourceplist","l":"cp.strings.source.plist","p":["Loads strings from a plist with allowing for a given language variation. Eg:","This will load the file for the specified language (replacing ${language} with en in the path) and return the value. Notes: This will load the file on each request. To have values cached, use the cp.strings module and specify a plist as a source."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","defaultCacheSeconds","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","context","find","findKeys","loadFile","pathToAbsolute","reset"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"defaultCacheSeconds","p":["Signature","cp.strings.source.plist.defaultCacheSeconds","Type","Constant","Description","The default number of seconds to cache results."]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.strings.source.plist.new(pathPattern[, cacheSeconds]) - source","Type","Constructor","Description","Creates a new cp.strings source that loads strings from a plist file.","Parameters","pathPattern- The path to load from. May contain a special ${language} marker which will be replace with the provided langauge when searching. cacheSeconds- (optional) How long in seconds to keep the loaded values cached in memory. Defaults to defaultCacheSeconds","Returns","The new plist source instance.","Notes"]},{"l":"Methods"},{"l":"context","p":["Signature","cp.strings.source.plist:context([context]) - table | self","Type","Method","Description","Gets or sets a context to be set for the source. This typically includes a language, which provides the default language code, but may have other source-specific properties. Calling this method may may clear caches, etc.","Parameters","context - A table with values which may be used by the source.","Returns","If a new context is provided, the cp.string.source is returned, otherwise the current context table is returned.","Notes","For example: lua/lilimySource:context({language = fr}) -- set the default language to French./lili"]},{"l":"find","p":["Signature","cp.strings.source.plist:find(key[, context]) - string","Type","Method","Description","Finds the specified key value in the plist, if the plist can be found, and contains matching key value.","Parameters","key- The key to retrieve from the file. context- Optional table with additional/alternate context. It will be added to the current context temporarily.","Returns","The value of the key, or nil if not found.","Notes"]},{"l":"findKeys","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | cp.strings.source.plist:findKeys(pattern) - {string} | | Type | Method | | Description | Finds the array of keys who's value matches the pattern in this table. It will check that the pattern matches the beginning of the value. | | Parameters | pattern - The string pattern to match./li/ul | | **Returns** | ulliThe array of keys, or ` if none were fround | | Notes | |"]},{"l":"loadFile","p":["Signature","cp.strings.source.plist:loadFile([context]) - string","Type","Method","Description","Loads the plist file for the specified context, returning the value as a table.","Parameters","context- The context to determine the absolute path with. This will be added to any values provided in the default context.","Returns","The table for the specified language, or nil if the file doesn't exist.","Notes"]},{"l":"pathToAbsolute","p":["Signature","cp.strings.source.plist:pathToAbsolute([context]) - string","Type","Method","Description","Finds the abolute path to the plist represented by this source for the specified langauge, or nil if it does not exist.","Parameters","context- The context to determine the absolute path with. This will be added to any values provided in the default context.","Returns","The path to the file, or nil if not found.","Notes"]},{"l":"reset","p":["Signature","cp.strings.source.plist:reset() - cp.strings","Type","Method","Description","Clears any stored key values.","Parameters","None","Returns","The current cp.strings instance.","Notes"]}],[{"i":"cpstringssourcetable","l":"cp.strings.source.table","p":["Loads strings from provided tables, allowing for a given language variation. Eg:","This will load the file for the specified language (replacing ${language} with en in the path) and return the value. Notes: This will load the file on each request. To have values cached, use the cp.strings module and specify a plist as a source."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","add","context","find"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","cp.strings.source.table.new(context) - source","Type","Constructor","Description","Creates a new cp.strings source that loads strings from a plist file.","Parameters","None","Returns","The new plist source instance.","Notes"]},{"l":"Methods"},{"l":"add","p":["Signature","cp.strings.source.table:add(keyValues) - self","Type","Method","Description","Adds the specified table of key values in the specified language code.","Parameters","keyValues- The table of key/value pairs to define.","Returns","The cp.string.source.","Notes"]},{"l":"context","p":["Signature","cp.strings.source.table:context([context]) - table | self","Type","Method","Description","Gets or sets a context to be set for the source. This typically includes a language, which provides the default language code, but may have other source-specific properties. Calling this method may may clear caches, etc.","Parameters","context - A table with values which may be used by the source.","Returns","If a new context is provided, the cp.string.source is returned, otherwise the current context table is returned.","Notes","For example: lua/lilimySource:context({language = fr}) -- set the default language to French./lili"]},{"l":"find","p":["Signature","cp.strings.source.table:find(key) - string","Type","Method","Description","Finds the specified key value in the plist file for the specified optional context, if the plist can be found, and contains matching key value.","Parameters","key- The key to retrieve the value for.","Returns","The value of the key, or nil if not found.","Notes"]}],[{"i":"cptest","l":"cp.test","p":["CommandPost Test Scripts."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cptext","l":"cp.text","p":["This module provides support for loading, manipulating, and comparing unicode text data. It works by storing characters with their Unicode 'codepoint value. In practice, this means that every character is a 64-bit integer, so a text value will use substantially more memory than the equivalent encoded string` value.","The advantages of text over string representations for Unicode are:","comparisons, equality checks, etc. actually work for Unicode text and are not encoding-dependent.","direct access to codepoint values.","The advantages of string representations for Unicode are:","compactness.","reading/writing to files via the standard io library."]},{"l":"Strings and Unicode","p":["LUA has limited built-in support for Unicode text. string values are \"8-bit clean\", which means it is an array of 8-bit characters. This is also how binary data from files is usually loaded, as 8-bit 'bytes'. Unicode characters can be up to 32-bits, so there are several standard ways to represent Unicode characters using 8-bit characters. Without going into detail, the most common encodings are called 'UTF-8' and 'UTF-16'. There are two variations of 'UTF-16', depending on the hardware architecture, known as 'big-endian' and 'little-endian'.","The built-in functions for string, such as match, gsub and even len will not work as expected when a string contains Unicode text. As such, this library fills some of the gaps for common operations when working with Unicode text."]},{"l":"Examples","p":["You can convert to and from string and text values like so:","Note that text values are not in any specific encoding, since they are stored as 64-bit integer code-points rather than 8-bit characers."]},{"l":"Submodules","p":["cp.text.matcher"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","encoding","Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","char","fromCodepoints","fromFile","fromString","Methods- API calls which can only be made on an object returned by a constructor","encode","find","len","match","sub"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"encoding","p":["Signature","cp.text.encoding","Type","Constant","Description","The list of supported encoding formats.","Notes","The list of supported encoding formats:** utf8- UTF-8. The most common format on the web, backwards compatible with ANSI/ASCII.** utf16le- UTF-16 (little-endian). Commonly used in Windows and Mac text files.** utf16be- UTF-16 (big-endian). Alternate 16-bit format, common on Linux and PowerPC-based architectures."]},{"l":"Functions"},{"l":"is","p":["Signature","cp.text.is(value) - boolean","Type","Function","Description","Checks if the provided value is a text instance.","Parameters","value- The value to check","Returns","true if the value is a text instance.","Notes"]},{"l":"Constructors"},{"l":"char","p":["Signature","cp.text.char(...) - text","Type","Constructor","Description","Returns the list of one or more codepoint items into a text value, concatenating the results.","Parameters","...- The list of codepoint integers.","Returns","The cp.text value for the list of codepoint values.","Notes"]},{"l":"fromCodepoints","p":["Signature","cp.text.fromCodepoints(codepoints[, i[, j]]) - text","Type","Constructor","Description","Returns a new text instance representing the specified array of codepoints. Since i and j default to the first and last indexes of the array, simply passing in the array will convert all codepoints in that array.","Parameters","codepoints- The array of codepoint integers. i- The starting index to read from codepoints. Defaults to 1. j- The ending index to read from codepoints. Default to -1.","Returns","A new text instance.","Notes","You can use a negative value for i and j. If so, it will count back from then end of the codepoints array. If the codepoint array begins with a Byte-Order Marker (BOM), the BOM is skipped in the resulting text."]},{"l":"fromFile","p":["Signature","cp.text.fromFile(path[, encoding]) - text","Type","Constructor","Description","Returns a new text instance representing the text loaded from the specified path. If no encoding is specified, it will attempt to determine the encoding from a leading Byte-Order Marker (BOM). If none is present, it defaults to UTF-8.","Parameters","value- The value to turn into a unicode text instance. encoding- One of the falues from text.encoding: utf8, utf16le, or utf16be. Defaults to utf8.","Returns","A new text instance.","Notes"]},{"l":"fromString","p":["Signature","cp.text.fromString(value[, encoding]) - text","Type","Constructor","Description","Returns a new text instance representing the string value of the specified value. If no encoding is specified, it will attempt to determine the encoding from a leading Byte-Order Marker (BOM). If none is present, it defaults to UTF-8.","Parameters","value- The value to turn into a unicode text instance. encoding- One of the falues from text.encoding: utf8, utf16le, or utf16be. Defaults to utf8.","Returns","A new text instance.","Notes","Calling text(value) is the same as calling text.fromString(value, text.encoding.utf8), so simple text can be initialized via local x = text foo when the .lua file's encoding is UTF-8."]},{"l":"Methods"},{"l":"encode","p":["Signature","cp.text:encode([encoding]) - string","Type","Method","Description","Returns the text as an encoded string value.","Parameters","encoding- The encoding to use when converting. Defaults to cp.text.encoding.utf8.","Returns","Notes"]},{"l":"find","p":["Signature","cp.text:find(pattern [, init [, plain]])","Type","Method","Description","Looks for the first match of pattern in the string value. If it finds a match, then find returns the indices of value where this occurrence starts and ends; otherwise, it returns nil. A third, optional numerical argument init specifies where to start the search; its default value is 1 and can be negative. A value of true as a fourth, optional argument plain turns off the pattern matching facilities, so the function does a plain \"find substring\" operation, with no characters in pattern being considered \"magic\". Note that if plain is given, then init must be given as well.","Parameters","pattern- The pattern to find. init- The index to start matching from. Defaults to 1. plain- If true, the pattern is treated as plain text.","Returns","the start index, the end index, followed by any captures","Notes","If the pattern has captures, then in a successful match the captured values are also returned, after the two indices."]},{"l":"len","p":["Signature","cp.text:len() - number","Type","Method","Description","Returns the number of codepoints in the text.","Parameters","None","Returns","The number of codepoints.","Notes"]},{"l":"match","p":["Signature","cp.text:match(pattern[, start]) - ...","Type","Method","Description","Looks for the first match of the pattern in the text value. If it finds one, then match returns the captures from the pattern; otherwise it returns nil. If pattern specifies no captures, then the whole match is returned. A third, optional numerical argument init specifies where to start the search; its default value is 1 and can be negative.","Parameters","pattern- The text pattern to process. start- If specified, indicates the starting position to process from. Defaults to 1.","Returns","The capture results, the whole match, or nil.","Notes"]},{"l":"sub","p":["Signature","cp.text:sub(i [, j]) - cp.text","Type","Method","Description","Returns the substring of this text that starts at i and continues until j; i and j can be negative.","Parameters","i - See above j - See above","Returns","None","Notes","If j is absent, then it is assumed to be equal to -1(which is the same as the string length). In particular, the call cp.text:sub(1,j) returns a prefix of s with length j, and cp.text:sub(-i)(for a positive i) returns a suffix of s with length i."]}],[{"i":"cptextmatcher","l":"cp.text.matcher","p":["Adapted from 'utf8.lua' ( https://github.com/Stepets/utf8.lua)","Copyright (c) 2006-2007, Kyle Smith All rights reserved.","Contributors: Alimov Stepan David Peterson","Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:","THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","matcher","Methods- API calls which can only be made on an object returned by a constructor","find","gmatch","gsub","match"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"matcher","p":["Signature","cp.text.matcher(pattern[, plain]) - cp.text.matcher","Type","Constructor","Description","Returns a matcher for the specified pattern. This follows the conventions of the standard LUA Patterns API. This will return a reusable, compiled parser for the given pattern.","Parameters","pattern- The pattern to parse plain- If true, the pattern is not parsed and the provided text must match exactly.","Returns","New cp.text.matcher for the pattern.","Notes"]},{"l":"Methods"},{"l":"find","p":["Signature","cp.text.matcher:find(value[, start]) - number, number, ...","Type","Method","Description","Processes the text, returning the start position, the end position, followed by any capture group values.","Parameters","value- The cp.text value to process. start- If specified, indicates the starting position to process from. Defaults to 1.","Returns","The start position for the match, end position, and the list of capture group values.","Notes"]},{"l":"gmatch","p":["Signature","cp.text.matcher:gmatch(value) - function","Type","Method","Description","Returns an iterator function that, each time it is called, returns the next captures from pattern over string s. If pattern specifies no captures, then the whole match is produced in each call.","Parameters","value- The cp.text value to process.","Returns","The iterator function.","Notes"]},{"l":"gsub","p":["Signature","cp.text.matcher:gsub(value, repl, limit) - text, number","Type","Method","Description","Returns a copy of value in which all (or the first n, if given) occurrences of the pattern have been replaced by a replacement string specified by repl, which can be text, a string, a table, or a function. gsub also returns, as its second value, the total number of matches that occurred.","Parameters","value- The text or string value to process. repl- The replacement text/string/table/function limit- The maximum number of times to do the replacement. Defaults to unlimited.","Returns","text- The text value with replacements. number- The number of matches that occurred.","Notes","If repl is text or a string, then its value is used for replacement. The character % works as an escape character: any sequence in repl of the form %n, with n between 1 and 9, stands for the value of the n-th captured substring (see below). The sequence %0 stands for the whole match. The sequence %% stands for a single %. If repl is a table, then the table is queried for every match, using the first capture as the key; if the pattern specifies no captures, then the whole match is used as the key. If repl is a function, then this function is called every time a match occurs, with all captured substrings passed as arguments, in order; if the pattern specifies no captures, then the whole match is passed as a sole argument. If the value returned by the table query or by the function call is a string or a number, then it is used as the replacement string; otherwise, if it is false or nil, then there is no replacement (that is, the original match is kept in the string)."]},{"l":"match","p":["Signature","cp.text.matcher:match(value[, start]) - ...","Type","Method","Description","Looks for the first match of the pattern in the string value. If it finds one, then match returns the captures from the pattern; otherwise it returns nil. If pattern specifies no captures, then the whole match is returned. A third, optional numerical argument init specifies where to start the search; its default value is 1 and can be negative.","Parameters","value- The cp.text value to process. start- If specified, indicates the starting position to process from. Defaults to 1.","Returns","The capture results, the whole match, or nil.","Notes"]}],[{"i":"cptimeflicks","l":"cp.time.flicks","p":["Provides support for measuring time in flicks, a base unit of time useful for working with media, such as video or audio files.","From the Flicks GitHub project:","A flick (frame-tick) is a very small unit of time. It is 1/705600000 of a second, exactly.","1 flick = 1/705600000 second","This unit of time is the smallest time unit which is LARGER than a nanosecond, and can in integer quantities exactly represent a single frame duration for 24 Hz, 25 Hz, 30 Hz, 48 Hz, 50 Hz, 60 Hz, 90 Hz, 100 Hz, 120 Hz, and also 1/1000 divisions of each, as well as a single sample duration for 8 kHz, 16 kHz, 22.05 kHz, 24 kHz, 32 kHz, 44.1 kHz, 48 kHz, 88.2 kHz, 96 kHz, and 192kHz, as well as the NTSC frame durations for 24 * (1000/1001) Hz, 30 * (1000/1001) Hz, 60 * (1000/1001) Hz, and 120 * (1000/1001) Hz.","That above was one hell of a run-on sentence, but it's strictly and completely correct in its description of the unit.","This makes flicks suitable for use via std::chrono::duration and std::ratio for doing timing work against the system high resolution clock, which is in nanoseconds, but doesn't get slightly out of sync when doing common frame rates.","We also support some common audio sample rates as well. This list is not exhaustive, but covers the majority of digital audio formats. They are 8kHz, 16kHz, 22.05kHz, 24kHz, 32kHz, 44.1kHz, 48kHz, 88.2kHz, 96kHz, and 192kHz.","Though it is not part of the design criteria, 144 Hz, which some newer monitors refresh at, does work correctly with flicks.","NTSC IS NOT EXPLICITLY SUPPORTED IN ALL OF ITS SUBTLE NUANCES, BUT: The NTSC variations (~ 23.976, ~ 29.97, etc) are approximately defined as 24 * 1000/1001 and 30 * 1000/1001, etc. These can be represented exactly in flicks, but 1/1000 divisions are not available.","Many folks online have pointed out that NTSC technically has a variable frame rate, and that this is handled correctly in other media playback libraries such as QuickTime. The goal of flicks is to provide a simple, convenient std::chrono::duration to work with when writing code that works with simulation and time in media, but not explicitly to handle complex variable-rate playback scenarios. So we'll stick with the 1000/1001 approximations, and leave it at that!"]},{"l":"Details","p":["100 fps frame: 7056000 flicks","120 fps frame: 5880000 flicks","16000 fps frame: 44100 flicks","192000 fps frame: 3675 flicks","22050 fps frame: 32000 flicks","24 fps frame: 29400000 flicks","24000 fps frame: 29400 flicks","25 fps frame: 28224000 flicks","30 fps frame: 23520000 flicks","32000 fps frame: 22050 flicks","44100 fps frame: 16000 flicks","48 fps frame: 14700000 flicks","48000 fps frame: 14700 flicks","50 fps frame: 14112000 flicks","60 fps frame: 11760000 flicks","8000 fps frame: 88200 flicks","88200 fps frame: 8000 flicks","90 fps frame: 7840000 flicks","96000 fps frame: 7350 flicks"]},{"i":"ntsc","l":"NTSC:","p":["24 * 1000/1001 (~ 23.976) fps frame: 29429400 flicks","30 * 1000/1001 (~ 29.97) fps frame: 23543520 flicks","60 * 1000/1001 (~ 59.94) fps frame: 11771760 flicks","120 * 1000/1001 (~ 119.88) fps frame: 5885880 flicks"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","Functions- API calls offered directly by the extension","is","Methods- API calls which can only be made on an object returned by a constructor","new","parse","perFrame100","perFrame120","perFrame120NTSC","perFrame24","perFrame24NTSC","perFrame25","perFrame30","perFrame30NTSC","perFrame44100","perFrame48","perFrame48000","perFrame50","perFrame60","perFrame60NTSC","perFrame90","perHour","perMinutes","perSecond","toFrames","toSeconds","toTimecode"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"perFrame100","p":["Signature","cp.time.flicks.perFrame100","Type","Constant","Description","The number of flicks in 1 frame at 100 fps."]},{"l":"perFrame120","p":["Signature","cp.time.flicks.perFrame120","Type","Constant","Description","The number of flicks in 1 frame at 120 fps."]},{"l":"perFrame120NTSC","p":["Signature","cp.time.flicks.perFrame120NTSC","Type","Constant","Description","An approximate for flicks in 1 frame at 120 fps in NTSC, a.k.a. ~ 119.88 fps."]},{"l":"perFrame24","p":["Signature","cp.time.flicks.perFrame24","Type","Constant","Description","The number of flicks in 1 frame at 24 fps."]},{"l":"perFrame24NTSC","p":["Signature","cp.time.flicks.perFrame24NTSC","Type","Constant","Description","An approximate for flicks in 1 frame at 24 fps in NTSC, a.k.a. 23.976 fps."]},{"l":"perFrame25","p":["Signature","cp.time.flicks.perFrame25","Type","Constant","Description","The number of flicks in 1 frame at 25 fps."]},{"l":"perFrame30","p":["Signature","cp.time.flicks.perFrame30","Type","Constant","Description","The number of flicks in 1 frame at 30 fps."]},{"l":"perFrame30NTSC","p":["Signature","cp.time.flicks.perFrame30NTSC","Type","Constant","Description","An approximate for flicks in 1 frame at 30 fps in NTSC, a.k.a. 29.97 fps."]},{"l":"perFrame44100","p":["Signature","cp.time.flicks.perFrame44100","Type","Constant","Description","The number of flicks in 1 frame at 44100 fps, a.k.a. 44.1 Hz."]},{"l":"perFrame48","p":["Signature","cp.time.flicks.perFrame48","Type","Constant","Description","The number of flicks in 1 frame at 48 fps."]},{"l":"perFrame48000","p":["Signature","cp.time.flicks.perFrame48000","Type","Constant","Description","The number of flicks in 1 frame at 44100 fps, a.k.a. 48 Hz."]},{"l":"perFrame50","p":["Signature","cp.time.flicks.perFrame50","Type","Constant","Description","The number of flicks in 1 frame at 50 fps."]},{"l":"perFrame60","p":["Signature","cp.time.flicks.perFrame60","Type","Constant","Description","The number of flicks in 1 frame at 60 fps."]},{"l":"perFrame60NTSC","p":["Signature","cp.time.flicks.perFrame60NTSC","Type","Constant","Description","An approximate for flicks in 1 frame at 60 fps in NTSC, a.k.a. 59.94 fps."]},{"l":"perFrame90","p":["Signature","cp.time.flicks.perFrame90","Type","Constant","Description","The number of flicks in 1 frame at 90 fps."]},{"l":"perHour","p":["Signature","cp.time.flicks.perHour","Type","Constant","Description","The number of flicks in 1 hour."]},{"l":"perMinutes","p":["Signature","cp.time.flicks.perMinutes","Type","Constant","Description","The number of flicks in 1 minute."]},{"l":"perSecond","p":["Signature","cp.time.flicks.perSecond","Type","Constant","Description","The number of flicks in 1 second."]},{"l":"Functions"},{"l":"is","p":["Signature","cp.time.flicks.is(thing) - boolean","Type","Function","Description","Checks if the thing is a flicks instance.","Parameters","thing - the thing to check","Returns","true if the thingis a flicks instance, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | cp.time.flicks.new(value) - flicks | | Type | Constructor | | Description | Creates a new flicks instance. By default, the unit is in flicks, but can be set as a different unit using the flicks.perXXXconstants. | | **Parameters** | ullivalue - the base value to set to/li/ul | | **Returns** | ullithe newflicks` instance | | Notes | For example:lua/lililocal oneFlick = flicks.new(1)/lililocal oneSecond = flicks.new(1flicks.perSecond)/lili |"]},{"l":"parse","p":["Signature","cp.time.flicks.parse(timecodeString, framerate) - flicks","Type","Constructor","Description","Attempts to parse the timecode string value with the specified framerate.","Parameters","timecodeString - The timecode as a string. framerate - The number of frames per second.","Returns","a new flicks instance for the timecode.","Notes","The timecode can match the folowing patterns: HH:MM:SS:FF HH:MM:SS;FF HHMMSSFF The characters above match to H ours, M inutes S econds and F rames, respectively. For example, a timecode of 1 hour, 23 minutes, 45 seconds and 12 frames could be expressed as: 01:23:45:12 01:23:45;12 01234512 Times with a value of zero from left to right may be omitted. After the first non-zero value, all other numbers including framesmust always be expressed, even if they are zero. So, if your timecode is 1 minute 30 seconds, you could use: 1:30:00 1:30;00 13000 You can also put numbers up to 99 in each block. So, another way of expressing 1 minute 30 seconds is: 90:00 90;00 9000"]},{"l":"Methods"},{"l":"toFrames","p":["Signature","cp.time.flicks:toFrames(framerate) -- number","Type","Method","Description","Converts the flicks into a number for the specific framerate.","Parameters","None","Returns","the number of frames","Notes"]},{"l":"toSeconds","p":["Signature","cp.time.flicks:toSeconds() - number","Type","Method","Description","Converts the flicks into a decimal value of the number of seconds it represents.","Parameters","None","Returns","the number of seconds","Notes"]},{"l":"toTimecode","p":["Signature","cp.time.flicks:toTimecode(framerate[, delimeter]) - string","Type","Method","Description","Converts the flicks into a string of the format \"HH[:]MM[:]SS[:;]FF\", with hours, minutes and frames listed respectively.","Parameters","framerate - the framerate to use when calculating frames per second. delimeter - either nil(default), \":\", or \";\".","Returns","String of the timecode.","Notes","By default, there will be no delimiter. If you provide \":\" then all delimiters will be colons. If you provide \";\" then the final delimiter will be a semic-colon, all others will be colons."]}],[{"i":"cptools","l":"cp.tools","p":["A collection of handy miscellaneous tools for Lua development."]},{"l":"API Overview","p":["appleScriptViaTask","between","camelCase","centre","characterToPercentEncodedString","cleanupButtonText","contentsInsideBrackets","convertSingleHexStringToDecimalString","desktopPath","dirFiles","doesDirectoryExist","doesFileExist","doubleLeftClick","encodeURI","encodeURIComponent","endsWith","ensureDirectoryExists","escapeTilda","exactMatch","executeWithAdministratorPrivileges","fileLinesBackward","findCommonWordWithinTwoStrings","firstToUpper","Functions- API calls offered directly by the extension","getEmail","getExternalDevices","getFileExtensionFromPath","getFilenameFromPath","getFullname","getKeysSortedByValue","getmacOSVersion","getModelName","getRAMSize","getScreenshotsAsBase64","getThunderboltDevices","getUSBDevices","getVRAMSize","hexStringToString","iconFallback","incrementFilename","incrementFilenameInPath","isColor","isImage","isNumberString","isOffScreen","keyStroke","leftClick","lines","lower","macOSVersion","mergeTable","ninjaDoubleClick","ninjaMouseAction","ninjaMouseClick","ninjaRightMouseClick","numberToWord","optionPressed","playErrorSound","pressSystemKey","readFromFile","removeFilenameFromPath","removeFromTable","replace","rescale","rightClick","rmdir","round","safeFilename","secureInputApplicationTitle","shiftPressed","spairs","split","splitOnColumn","startsWith","stringMaxLength","stringToHexString","tableContains","tableCount","tableFilter","tableMatch","toRegionalNumber","toRegionalNumberString","trim","unescape","upper","urlQueryStringDecode","urlToFilename","volumeFormat","writeToFile"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"appleScriptViaTask","p":["Signature","cp.tools.appleScriptViaTask(script) - none","Type","Function","Description","Triggers an AppleScript command via hs.task to avoid potential memory leaks in hs.osascript.applescript.","Parameters","script - A single line AppleScript.","Returns","None","Notes"]},{"l":"between","p":["Signature","cp.tools.between(value, min, max) - boolean","Type","Function","Description","Is a value between the minimum and the maximum value?","Parameters","value - the value to check min - the minimum value max - the maximum value","Returns","A boolean","Notes"]},{"l":"camelCase","p":["Signature","cp.tools.camelCase(str) - string","Type","Function","Description","Converts the supplied string to camelcase.","Parameters","str - The string you want to manipulate","Returns","A string","Notes"]},{"l":"centre","p":["Signature","cp.tools.centre(frame) - hs.geometry point","Type","Function","Description","Gets the centre point of a frame.","Parameters","frame - an hs.geometry rect","Returns","A hs.geometry point","Notes"]},{"l":"characterToPercentEncodedString","p":["Signature","cp.tools.characterToPercentEncodedString(input) - string","Type","Function","Description","Encodes a character as a percent encoded string.","Parameters","input - The string to process","Returns","A string","Notes"]},{"l":"cleanupButtonText","p":["Signature","cp.tools.cleanupButtonText(value) - string","Type","Function","Description","Removes the … symbol and multiple >'s from a string.","Parameters","value - A string","Returns","A cleaned string","Notes"]},{"l":"contentsInsideBrackets","p":["Signature","cp.tools.contentsInsideBrackets(value) - string | nil","Type","Function","Description","Gets the contents of any text inside the first bracket set.","Parameters","value - The string to process","Returns","The contents as a string or nil","Notes"]},{"l":"convertSingleHexStringToDecimalString","p":["Signature","cp.tools.convertSingleHexStringToDecimalString(hex) - string","Type","Function","Description","Converts a single hex string (i.e. \"3\") to a binary string (i.e. \"0011\")","Parameters","hex - A single string character","Returns","A four character string","Notes"]},{"l":"desktopPath","p":["Signature","cp.tools.desktopPath() - string","Type","Function","Description","Gets the users Desktop Path","Parameters","None","Returns","The path as a string.","Notes"]},{"l":"dirFiles","p":["Signature","cp.tools.dirFiles(path) - table","Type","Function","Description","Gets all the files in a directory","Parameters","path - A path as string","Returns","A table containing filenames as strings, or nil followed by the error message if an error occurs.","Notes"]},{"l":"doesDirectoryExist","p":["Signature","cp.tools.doesDirectoryExist(path) - boolean","Type","Function","Description","Returns whether or not a directory exists.","Parameters","path - Path to the directory","Returns","true if the directory exists otherwise false","Notes"]},{"l":"doesFileExist","p":["Signature","cp.tools.doesFileExist(path) - boolean","Type","Function","Description","Returns whether or not a file exists.","Parameters","path - Path to the file","Returns","true if the file exists otherwise false","Notes"]},{"l":"doubleLeftClick","p":["Signature","cp.tools.doubleLeftClick(point[, delay]) - none","Type","Function","Description","Performs a Left Mouse Double Click.","Parameters","point - A point-table containing the absolute x and y co-ordinates to move the mouse pointer to delay - The optional delay between multiple mouse clicks","Returns","None","Notes"]},{"l":"encodeURI","p":["Signature","cp.tools.encodeURI(input) - string","Type","Function","Description","Replaces all characters (except for those listed in the notes) with the appropriate UTF-8 escape sequences.","Parameters","input - The string to process","Returns","A string","Notes","Except these characters: ; , / ? : @ & = + $ # alphabetic, decimal digits, - _ . ! ~' ( )"]},{"l":"encodeURIComponent","p":["Signature","cp.tools.encodeURIComponent(input) - string","Type","Function","Description","Escapes all characters (except for those listed in the notes) with the appropriate UTF-8 escape sequences.","Parameters","input - The string to process","Returns","A string","Notes","Except these characters: alphabetic, decimal digits, - _ . ! ~' ( )"]},{"l":"endsWith","p":["Signature","cp.tools.endsWith(str, ending) - boolean","Type","Function","Description","Checks to see if str has the same ending as ending.","Parameters","str - String to analysis ending - End of string to compare against","Returns","table","Notes"]},{"l":"ensureDirectoryExists","p":["Signature","cp.tools.ensureDirectoryExists(rootPath, ...) - string | nil","Type","Function","Description","Ensures all steps on a provided path exist. If not, attempts to create them. If it fails, nil is returned.","Parameters","rootPath- The root path...- The list of path steps to create","Returns","The full path, if it exists, or nil if unable to create the directory for some reason.","Notes"]},{"l":"escapeTilda","p":["Signature","cp.tools.escapeTilda(input) - string","Type","Function","Description","Escapes a tilda.","Parameters","input - The string you want to escape.","Returns","A new string or \"\" if no input is supplied.","Notes"]},{"l":"exactMatch","p":["Signature","cp.tools.exactMatch(value, pattern, plain, ignoreCase) - boolean","Type","Function","Description","Compares two strings to see if they're an exact match.","Parameters","value - The first string pattern - The second string, including any patterns plain - Whether or not to ignore patterns. Defaults to false. ignoreCase - Ignore the case of the value & pattern.","Returns","true if there's an exact match, otherwise false.","Notes"]},{"l":"executeWithAdministratorPrivileges","p":["Signature","cp.tools.executeWithAdministratorPrivileges(input[, stopOnError]) - boolean or string","Type","Function","Description","Executes a single or multiple shell commands with Administrator Privileges.","Parameters","input - either a string or a table of strings of commands you want to execute stopOnError - an optional variable that stops processing multiple commands when an individual commands returns an error","Returns","true if successful, false if cancelled and a string if there's an error.","Notes"]},{"l":"fileLinesBackward","p":["Signature","cp.tools.fileLinesBackward(filename) - function","Type","Function","Description","An iterator function that reads a file backwards.","Parameters","filename - The file to open in read only mode","Returns","An iterator function","Notes","This is similar to io.lines, but works in reverse. Example Usage: for line in cp.tools.fileLinesBackward(file) do print(line) end"]},{"l":"findCommonWordWithinTwoStrings","p":["Signature","cp.tools.findCommonWordWithinTwoStrings(a, b) - string","Type","Function","Description","Finds a common word within two strings.","Parameters","a - The first string b - The second string","Returns","The first common word that's found or nil if something goes wrong.","Notes"]},{"l":"firstToUpper","p":["Signature","cp.tools.firstToUpper(str) - string","Type","Function","Description","Makes the first letter of a string uppercase.","Parameters","str - The string you want to manipulate","Returns","A string","Notes"]},{"l":"getEmail","p":["Signature","cp.tools.getEmail() - string","Type","Function","Description","Returns the current users Email, otherwise an empty string.","Parameters","None","Returns","String","Notes"]},{"l":"getExternalDevices","p":["Signature","cp.tools.getExternalDevices() - string","Type","Function","Description","Returns a string of USB & Thunderbolt Devices.","Parameters","None","Returns","String","Notes"]},{"l":"getFileExtensionFromPath","p":["Signature","cp.tools.getFileExtensionFromPath(input) - string","Type","Function","Description","Gets the file extension from a path.","Parameters","input - The path","Returns","A string of the file extension.","Notes"]},{"l":"getFilenameFromPath","p":["Signature","cp.tools.getFilenameFromPath(input[, removeExtension]) - string","Type","Function","Description","Gets the filename component of a path.","Parameters","input - The path removeExtension - (optional) set to true if the file extension should be removed","Returns","A string of the filename.","Notes"]},{"l":"getFullname","p":["Signature","cp.tools.getFullname() - string","Type","Function","Description","Returns the current users Full Name, otherwise an empty string.","Parameters","None","Returns","String","Notes"]},{"l":"getKeysSortedByValue","p":["Signature","cp.tools.getKeysSortedByValue(tbl, sortFunction) - table","Type","Function","Description","Sorts table keys by a value","Parameters","tbl - the table you want to sort sortFunction - the function you want to use to sort the table","Returns","A sorted table","Notes"]},{"l":"getmacOSVersion","p":["Signature","cp.tools.getmacOSVersion() - string","Type","Function","Description","Returns the macOS Version in the format that Apple's Feedback Form expects.","Parameters","None","Returns","The macOS version as a string or \"\" if unknown.","Notes"]},{"l":"getModelName","p":["Signature","cp.tools.getModelName() - string","Type","Function","Description","Returns Model Name of Hardware.","Parameters","None","Returns","String","Notes"]},{"l":"getRAMSize","p":["Signature","cp.tools.getRAMSize() - string","Type","Function","Description","Returns RAM Size in a format Apple's Feedback form expects.","Parameters","None","Returns","The RAM size as a string, or \"\" if unknown.","Notes"]},{"l":"getScreenshotsAsBase64","p":["Signature","cp.tools.getScreenshotsAsBase64() - table","Type","Function","Description","Captures all available screens and saves them as base64 encodes in a table.","Parameters","None","Returns","A table containing base64 images of all available screens.","Notes"]},{"l":"getThunderboltDevices","p":["Signature","cp.tools.getThunderboltDevices() - string","Type","Function","Description","Returns a string of Thunderbolt Devices.","Parameters","None","Returns","String","Notes"]},{"l":"getUSBDevices","p":["Signature","cp.tools.getUSBDevices() - string","Type","Function","Description","Returns a string of USB Devices.","Parameters","None","Returns","String","Notes"]},{"l":"getVRAMSize","p":["Signature","cp.tools.getVRAMSize() - string","Type","Function","Description","Returns the VRAM size in format suitable for Apple's Final Cut Pro feedback form or \"\" if unknown.","Parameters","None","Returns","String","Notes"]},{"l":"hexStringToString","p":["Signature","cp.tools.hexStringToString(value) - string","Type","Function","Description","Converts a hex string to a string.","Parameters","value - The string to convert","Returns","A string","Notes"]},{"l":"iconFallback","p":["Signature","cp.tools.iconFallback(paths) - string","Type","Function","Description","Excepts one or more paths to an icon, checks to see if they exist (in the order that they're given), and if none exist, returns the CommandPost icon path.","Parameters","paths - One or more paths to an icon","Returns","A string","Notes"]},{"l":"incrementFilename","p":["Signature","cp.tools.incrementFilename(value) - string","Type","Function","Description","Increments the filename.","Parameters","value - A string","Returns","A string","Notes"]},{"l":"incrementFilenameInPath","p":["Signature","cp.tools.incrementFilenameInPath(path) - string","Type","Function","Description","Increments the filename as it appears in a path.","Parameters","path - A path to a file.","Returns","A string","Notes"]},{"l":"isColor","p":["Signature","cp.tools.isColor(object) - boolean","Type","Function","Description","Is the supplied object an hs.drawing.color?","Parameters","object - An object to check","Returns","A boolean","Notes"]},{"l":"isImage","p":["Signature","cp.tools.isImage(object) - boolean","Type","Function","Description","Is the supplied object an hs.image?","Parameters","object - An object to check","Returns","A boolean","Notes"]},{"l":"isNumberString","p":["Signature","cp.tools.isNumberString(value) - boolean","Type","Function","Description","Returns whether or not value is a number string.","Parameters","value - the string you want to check","Returns","true if value is a number string, otherwise false.","Notes"]},{"l":"isOffScreen","p":["Signature","cp.tools.isOffScreen(rect) - boolean","Type","Function","Description","Determines if the given rect is off screen or not.","Parameters","rect - the rect you want to check","Returns","true if offscreen otherwise false","Notes"]},{"l":"keyStroke","p":["Signature","cp.tools.keyStroke(modifiers, character, app, proper) - none","Type","Function","Description","Generates and emits a single keystroke event pair for the supplied keyboard modifiers and character to the application.","Parameters","modifiers - A table containing the keyboard modifiers to apply (\"fn\", \"ctrl\", \"alt\", \"cmd\" or \"shift\") character - A string containing a character to be emitted app - The optional hs.application you want to target proper - Use the \"proper\" method as per Apple's documentation (defaults to false)","Returns","None","Notes"]},{"l":"leftClick","p":["Signature","cp.tools.leftClick(point[, delay, clickNumber]) - none","Type","Function","Description","Performs a Left Mouse Click.","Parameters","point - A point-table containing the absolute x and y co-ordinates to move the mouse pointer to delay - The optional delay between multiple mouse clicks clickNumber - The optional number of times you want to perform the click.","Returns","None","Notes"]},{"l":"lines","p":["Signature","cp.tools.lines(string) - table | nil","Type","Function","Description","Splits a string containing multiple lines of text into a table.","Parameters","string - the string you want to process","Returns","A table or nil if the parameter is not a string.","Notes"]},{"l":"lower","p":["Signature","cp.tools.lower(str) - string","Type","Function","Description","Converts the supplied string to lowercase.","Parameters","str - The string you want to manipulate","Returns","A string","Notes"]},{"l":"macOSVersion","p":["Signature","cp.tools.macOSVersion() - string","Type","Function","Description","Returns a the macOS Version as a single string.","Parameters","None","Returns","A string containing the macOS version","Notes"]},{"l":"mergeTable","p":["Signature","cp.tools.mergeTable(target, ...) - table","Type","Function","Description","Merges multiple tables into a target table.","Parameters","target - The target table... - Any other tables you want to merge into target","Returns","Table","Notes"]},{"l":"ninjaDoubleClick","p":["Signature","cp.tools.ninjaDoubleClick(point[, delay]) - none","Type","Function","Description","Performs a mouse double click, but returns the mouse to the original position without the users knowledge.","Parameters","point - A point-table containing the absolute x and y co-ordinates to move the mouse pointer to delay - The optional delay between multiple mouse clicks","Returns","None","Notes"]},{"l":"ninjaMouseAction","p":["Signature","cp.tools.ninjaMouseAction(point, fn) - none","Type","Function","Description","Moves the mouse to a point, performs a function, then returns the mouse to the original point.","Parameters","point - A point-table containing the absolute x and y co-ordinates to move the mouse pointer to fn - A function you want to perform","Returns","None","Notes"]},{"l":"ninjaMouseClick","p":["Signature","cp.tools.ninjaMouseClick(point[, delay]) - none","Type","Function","Description","Performs a mouse click, but returns the mouse to the original position without the users knowledge.","Parameters","point - A point-table containing the absolute x and y co-ordinates to move the mouse pointer to delay - The optional delay between multiple mouse clicks","Returns","None","Notes"]},{"l":"ninjaRightMouseClick","p":["Signature","cp.tools.ninjaRightMouseClick(point[, delay]) - none","Type","Function","Description","Performs a right mouse click, but returns the mouse to the original position without the users knowledge.","Parameters","point - A point-table containing the absolute x and y co-ordinates to move the mouse pointer to delay - The optional delay between multiple mouse clicks","Returns","None","Notes"]},{"l":"numberToWord","p":["Signature","cp.tools.numberToWord(number) - string","Type","Function","Description","Converts a number to a string (i.e. 1 becomes \"One\").","Parameters","number - A whole number between 0 and 10","Returns","A string","Notes"]},{"l":"optionPressed","p":["Signature","cp.tools.optionPressed() - boolean","Type","Function","Description","Is the Option Key being pressed?","Parameters","None","Returns","true if the option key is being pressed, otherwise false.","Notes"]},{"l":"playErrorSound","p":["Signature","cp.tools.playErrorSound() - none","Type","Function","Description","Plays the \"Funk\" error sound.","Parameters","None","Returns","Notes"]},{"l":"pressSystemKey","p":["Signature","cp.tools.pressSystemKey(key) - none","Type","Function","Description","Virtually presses a system key.","Parameters","key - The key to use.","Returns","Supported key values are: SOUND_UP SOUND_DOWN MUTE BRIGHTNESS_UP BRIGHTNESS_DOWN CONTRAST_UP CONTRAST_DOWN POWER LAUNCH_PANEL VIDMIRROR PLAY EJECT NEXT PREVIOUS FAST REWIND ILLUMINATION_UP ILLUMINATION_DOWN ILLUMINATION_TOGGLE CAPS_LOCK HELP NUM_LOCK","Notes"]},{"l":"readFromFile","p":["Signature","cp.tools.readFromFile(path) - string","Type","Function","Description","Read data from file.","Parameters","path - The path of where you want to load the file.","Returns","None","Notes"]},{"l":"removeFilenameFromPath","p":["Signature","cp.tools.removeFilenameFromPath(string) - string","Type","Function","Description","Removes the filename from a path.","Parameters","string - The path","Returns","A string of the path without the filename.","Notes"]},{"l":"removeFromTable","p":["Signature","cp.tools.removeFromTable(table, element) - table","Type","Function","Description","Removes a string from a table of strings","Parameters","table - the table you want to check element - the string you want to remove","Returns","A table","Notes"]},{"l":"replace","p":["Signature","cp.tools.replace(textValue, old, new) - string","Type","Function","Description","A find and replace feature that doesn't use patterns.","Parameters","textValue - The string you want to process old - The string you want to find new - The new string you want to replace the old string with","Returns","A new string","Notes"]},{"l":"rescale","p":["Signature","cp.tools.rescale(value, inMin, inMax, outMin, outMax) - number | nil","Type","Function","Description","Takes an input, rescales it, and provides a new output.","Parameters","value - The value you want to process as a number inMin - The minimum value of the input as a number inMax - The maximum value of the input as a number outMin - The minimum value of the output as a number outMax - The maximum value of the output as a number","Returns","The rescaled value as a number or nil.","Notes"]},{"l":"rightClick","p":["Signature","cp.tools.rightClick(point[, delay, clickNumber]) - none","Type","Function","Description","Performs a Right Mouse Click.","Parameters","point - A point-table containing the absolute x and y co-ordinates to move the mouse pointer to delay - The optional delay between multiple mouse clicks clickNumber - The optional number of times you want to perform the click.","Returns","None","Notes"]},{"l":"rmdir","p":["Signature","cp.tools.rmdir(path[, recursive]) - true | nil, err","Type","Function","Description","Attempts to remove the directory at the specified path, optionally removing any contents recursively.","Parameters","path- The absolute path to remove recursive- If true, the contents of the directory will be removed first.","Returns","true if successful, or nil, err if there was a problem.","Notes"]},{"l":"round","p":["Signature","cp.tools.round(num, numDecimalPlaces) - number","Type","Function","Description","Rounds a number to a set number of decimal places","Parameters","num - The number you want to round numDecimalPlaces - How many numbers of decimal places (defaults to 0)","Returns","A rounded number","Notes"]},{"l":"safeFilename","p":["Signature","cp.tools.safeFilename(value[, defaultValue]) - string","Type","Function","Description","Returns a Safe Filename.","Parameters","value - a string you want to make safe defaultValue - the optional default filename to use if the value is not valid","Returns","A string of the safe filename","Notes","Returns \"filename\" is both value and defaultValue are nil."]},{"l":"secureInputApplicationTitle","p":["Signature","cp.tools.secureInputApplicationTitle() - string","Type","Function","Description","Gets the title of the first application that has 'Secure Input' enabled.","Parameters","None","Returns","The application title or nil if secure input is not enabled or failed to get a title.","Notes"]},{"l":"shiftPressed","p":["Signature","cp.tools.shiftPressed() - boolean","Type","Function","Description","Is the Shift Key being pressed?","Parameters","None","Returns","true if the shift key is being pressed, otherwise false.","Notes"]},{"l":"spairs","p":["Signature","cp.tools.spairs(t, order) - function","Type","Function","Description","A customised version of pairs, called spairs because it iterates over the table in a sorted order.","Parameters","t - The table to process order - The function of how to sort the table.","Returns","A iterator function.","Notes","Author: Michal Kottman Example Usage: lua/lili for k,v in cp.tools.spairs(theTableToSort, function(t,a,b) return t[b] t[a] end) do/lili print(k,v)/lili end/lili"]},{"l":"split","p":["Signature","cp.tools.split(str, pat) - table","Type","Function","Description","Splits a string with a pattern.","Parameters","str - The string to split pat - The pattern","Returns","Table","Notes"]},{"l":"splitOnColumn","p":["Signature","cp.tools.splitOnColumn() - string","Type","Function","Description","Splits a string on a column.","Parameters","Input","Returns","String","Notes"]},{"l":"startsWith","p":["Signature","cp.tools.startsWith(value, startValue) - boolean","Type","Function","Description","Checks to see if a string starts with a value.","Parameters","value - The value to check startValue - The value to look for","Returns","true if value starts with the startValue, otherwise false","Notes"]},{"l":"stringMaxLength","p":["Signature","cp.tools.stringMaxLength(string, maxLength[, optionalEnd]) - string","Type","Function","Description","Trims a string based on a maximum length.","Parameters","string - The string maxLength - The length of the string as a number optionalEnd - A string that is applied to the end of the input string if the input string is larger than the maximum length.","Returns","A string","Notes"]},{"l":"stringToHexString","p":["Signature","cp.tools.stringToHexString(value) - string","Type","Function","Description","Converts a string to a hex string.","Parameters","value - The string to convert","Returns","A hex string","Notes"]},{"l":"tableContains","p":["Signature","cp.tools.tableContains(table, element) - boolean","Type","Function","Description","Does a element exist in a table?","Parameters","table - the table you want to check element - the element you want to check for","Returns","Boolean","Notes"]},{"l":"tableCount","p":["Signature","cp.tools.tableCount(table) - number","Type","Function","Description","Returns how many items are in a table.","Parameters","table - The table you want to count.","Returns","The number of items in the table.","Notes","If something other than a table is supplied, this function will return 0."]},{"l":"tableFilter","p":["Signature","cp.tools.tableFilter(t, matchFn) - table","Type","Function","Description","Efficiently filters out all elements from the table t which to not match the matchFn.","Parameters","t - The table to filter. matchFn - A function which will receive the table, the current index, and the target index.","Returns","The same table, updated.","Notes","This will modify the original table."]},{"l":"tableMatch","p":["Signature","cp.tools.tableMatch(t1, t2[, ignoreMetatable]) - boolean","Type","Function","Description","Compares two tables.","Parameters","t1 - The first table. t2 - The second table. ignoreMetatable - A boolean that determines whether or not we should ignore the metatable.","Returns","true if t1 and t2 are identical, otherwise false.","Notes"]},{"l":"toRegionalNumber","p":["Signature","cp.tools.toRegionalNumber(value) - number | nil","Type","Function","Description","Takes a string and converts it into a number, with the correct regional decimal separator.","Parameters","value - The value you want to process as a string.","Returns","The value as a number or nil.","Notes"]},{"l":"toRegionalNumberString","p":["Signature","cp.tools.toRegionalNumberString(value) - string | nil","Type","Function","Description","Takes a number and converts it into a string, with the correct regional decimal separator.","Parameters","value - The value you want to process as a number.","Returns","The value as a number or nil.","Notes"]},{"l":"trim","p":["Signature","cp.tools.trim(string) - string","Type","Function","Description","Trims the whitespaces from a string","Parameters","string - the string you want to trim","Returns","A trimmed string","Notes"]},{"l":"unescape","p":["Signature","cp.tools.unescape(str) - string","Type","Function","Description","Removes any URL encoding in the provided string.","Parameters","str - the string to decode","Returns","A string with all \"+\" characters converted to spaces and all percent encoded sequences converted to their ASCII equivalents.","Notes"]},{"l":"upper","p":["Signature","cp.tools.upper(str) - string","Type","Function","Description","Converts the supplied string to uppercase.","Parameters","str - The string you want to manipulate","Returns","A string","Notes"]},{"l":"urlQueryStringDecode","p":["Signature","cp.tools.urlQueryStringDecode() - string","Type","Function","Description","Decodes a URL Query String","Parameters","None","Returns","Decoded URL Query String as string","Notes"]},{"l":"urlToFilename","p":["Signature","cp.tools.urlToFilename(url) - string","Type","Function","Description","Converts a URL to a filename.","Parameters","url - The URL.","Returns","The filename.","Notes"]},{"l":"volumeFormat","p":["Signature","cp.tools.volumeFormat(path) - string","Type","Function","Description","Gives you the file system volume format of a path.","Parameters","path - the path you want to check as a string","Returns","The NSURLVolumeLocalizedFormatDescriptionKey as a string, otherwise nil.","Notes"]},{"l":"writeToFile","p":["Signature","cp.tools.writeToFile(path, data) - none","Type","Function","Description","Write data to a file at a given path.","Parameters","path - The path to the file you want to write to. data - The data to write to the file.","Returns","None","Notes"]}],[{"i":"cpuialert","l":"cp.ui.Alert","p":["Alert UI Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","cp.ui.Alert:new(app) - Alert","Type","Constructor","Description","Creates a new Alert instance. It will automatically search the parent's children for Alerts.","Parameters","parent - The parent object.","Returns","A new Browser object.","Notes"]}],[{"i":"cpuiaxutils","l":"cp.ui.axutils","p":["Utility functions to support hs.axuielement."]},{"l":"Submodules","p":["cp.ui.axutils.compare","cp.ui.axutils.match"]},{"l":"API Overview","p":["cache","childAtIndex","childFromBottom","childFromLeft","childFromRight","childFromTop","childInColumn","childIndex","childMatching","children","childrenAbove","childrenBelow","childrenInColumn","childrenInLine","childrenInNextLine","childrenMatching","childrenWith","childrenWithRole","childWith","childWithDescription","childWithID","childWithRole","childWithTitle","Functions- API calls offered directly by the extension","hasAttributeValue","hasChild","isValid","prop","snapshot","valueOf","withAttributeValue","withRole","withTitle","withValue"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"cache","p":["Signature","cp.ui.axutils.cache(source, key, finderFn[, verifyFn]) - axuielement","Type","Function","Description","Checks if the cached value at the source[key] is a valid axuielement. If not it will call the provided finderFn() function (with no arguments), cache the result and return it.","Parameters","source - the table containing the cache key - the key the value is cached under finderFn - the function which will return the element if not found.[verifyFn] - an optional function which will check the cached element to verify it is still valid.","Returns","The valid cached value.","Notes","If the optional verifyFn is provided, it will be called to check that the cached value is still valid. It is passed a single parameter (the axuielement) and is expected to return true or false."]},{"l":"childAtIndex","p":["Signature","cp.ui.axutils.childAtIndex(element, index, compareFn[, matcherFn]) - axuielement","Type","Function","Description","Searches for the child element which is at number index when sorted using the compareFn.","Parameters","element - the axuielement or array of axuielements index - the index number of the child to find. compareFn - a function to compare the elements. matcherFn - an optional function which is passed each child and returns true if the child should be processed.","Returns","The child, or nil if the index is larger than the number of children.","Notes"]},{"l":"childFromBottom","p":["Signature","cp.ui.axutils.childFromBottom(element, index, matcherFn) - axuielement","Type","Function","Description","Searches for the child element which is at number index when sorted bottom-to-top.","Parameters","element - the axuielement or array of axuielements index - the index number of the child to find. matcherFn - an optional function which is passed each child and returns true if the child should be processed.","Returns","The child, or nil if the index is larger than the number of children.","Notes"]},{"l":"childFromLeft","p":["Signature","cp.ui.axutils.childFromLeft(element, index[, matcherFn]) - axuielement","Type","Function","Description","Searches for the child element which is at number index when sorted left-to-right.","Parameters","element - the axuielement or array of axuielements index - the index number of the child to find. matcherFn - an optional function which is passed each child and returns true if the child should be processed.","Returns","The child, or nil if the index is larger than the number of children.","Notes"]},{"l":"childFromRight","p":["Signature","cp.ui.axutils.childFromRight(element, index[, matcherFn]) - axuielement","Type","Function","Description","Searches for the child element which is at number index when sorted right-to-left.","Parameters","element - the axuielement or array of axuielements index - the index number of the child to find. matcherFn - an optional function which is passed each child and returns true if the child should be processed.","Returns","The child, or nil if the index is larger than the number of children.","Notes"]},{"l":"childFromTop","p":["Signature","cp.ui.axutils.childFromTop(element, index[, matcherFn]) - axuielement","Type","Function","Description","Searches for the child element which is at number index when sorted top-to-bottom.","Parameters","element - the axuielement or array of axuielements index - the index number of the child to find. matcherFn - an optional function which is passed each child and returns true if the child should be processed.","Returns","The child, or nil if the index is larger than the number of children.","Notes"]},{"l":"childInColumn","p":["Signature","cp.ui.axutils.childInColumn(element, role, startIndex, childIndex) - table | nil","Type","Function","Description","Finds the children for an element, then checks to see if they match the supplied role. It then compares the vertical position data of all matching children and returns an element defined by the childIndex, which lines up vertially with the element defined by the startIndex.","Parameters","element - The element to retrieve the children from. role - The required role as a string. startIndex - A number which defines the index of the first element to use. childIndex - A number which defines the index of the element to return.","Returns","The axuielement if it matches, otherwise nil.","Notes"]},{"l":"childIndex","p":["Signature","cp.ui.axutils.childIndex(element) - number or nil","Type","Function","Description","Finds the index of the specified child element, if it is present. If not, nil is returned.","Parameters","element - The axuielement to find the index of.","Returns","The index ( 1 or higher) of the element, or nil if it was not found.","Notes"]},{"l":"childMatching","p":["Signature","cp.ui.axutils.childMatching(element, matcherFn[, index]) - axuielement","Type","Function","Description","This searches for the first child of the specified element for which the provided function returns true. The function will receive one parameter - the current child.","Parameters","element - the axuielement matcherFn - the function which checks if the child matches the requirements. index - the number of matching child to return. Defaults to 1.","Returns","The first matching child, or nil if none was found","Notes"]},{"l":"children","p":["Signature","cp.ui.axutils.children(element[, compareFn]) - table","Type","Function","Description","Finds the children for the element. If it is an hs.axuielement, it will attempt to get the AXChildren attribute. If it is a table with a children function, that will get called. If no children exist, an empty table will be returned.","Parameters","element - The element to retrieve the children of. compareFn - Optional function to use to sort the order of the returned children.","Returns","a table of children","Notes"]},{"l":"childrenAbove","p":["Signature","cp.ui.axutils.childrenAbove(element, bottomElement) - table of axuielement or nil","Type","Function","Description","Finds the list of axuielement children from the element which are above the specified bottomElement. If the element is nil, nil is returned. If the topElement is nil all children are returned.","Parameters","element - The axuielement to find the children of. topElement - The axuielement that the other children must be above.","Returns","The table of axuielements that are above, or nil if the element is not available.","Notes"]},{"l":"childrenBelow","p":["Signature","cp.ui.axutils.childrenBelow(element, topElement) - table of axuielement or nil","Type","Function","Description","Finds the list of axuielement children from the element which are below the specified topElement. If the element is nil, nil is returned. If the topElement is nil all children are returned.","Parameters","element - The axuielement to find the children of. topElement - The axuielement that the other children must be below.","Returns","The table of axuielements that are below, or nil if the element is not available.","Notes"]},{"l":"childrenInColumn","p":["Signature","cp.ui.axutils.childrenInColumn(element, role, startIndex) - table | nil","Type","Function","Description","Finds the children for an element, then checks to see if they match the supplied role. It then compares the vertical position data of all matching children and returns a table with only the elements that line up to the element defined by the startIndex.","Parameters","element - The element to retrieve the children from. role - The required role as a string. startIndex - A number which defines the index of the first element to use.","Returns","The table of axuielement objects, otherwise nil.","Notes"]},{"l":"childrenInLine","p":["Signature","cp.ui.axutils.childrenInLine(element) - table | nil","Type","Function","Description","Gets a table of children that are all in the same family and line as the supplied element.","Parameters","element - The base element.","Returns","The table of axuielement objects, otherwise nil.","Notes"]},{"l":"childrenInNextLine","p":["Signature","cp.ui.axutils.childrenInNextLine(element) - table | nil","Type","Function","Description","Gets a table of children that are in the next line in relation to the supplied element. Scrollbars will be ignored.","Parameters","element - The base element.","Returns","The table of axuielement objects, otherwise nil.","Notes"]},{"l":"childrenMatching","p":["Signature","cp.ui.axutils.childrenMatching(element, matcherFn) - { axuielement }","Type","Function","Description","This searches for all children of the specified element for which the provided function returns true. The function will receive one parameter - the current child.","Parameters","element - the axuielement matcherFn - the function which checks if the child matches the requirements.","Returns","All matching children, or nil if none was found","Notes"]},{"l":"childrenWith","p":["Signature","cp.ui.axutils.childrenWith(element, name, value) - axuielement","Type","Function","Description","This searches for all children of the specified element which has an attribute with the matching name and value.","Parameters","element - the axuielement name - the name of the attribute value - the value of the attribute","Returns","All matching children, or nil if none was found","Notes"]},{"l":"childrenWithRole","p":["Signature","cp.ui.axutils.childrenWithRole(element, value) - axuielement","Type","Function","Description","This searches for all children of the specified element which has an AXRole attribute with the matching value.","Parameters","element - the axuielement value - the value of the attribute","Returns","All matching children, or nil if none was found","Notes"]},{"l":"childWith","p":["Signature","cp.ui.axutils.childWith(element, name, value) - axuielement","Type","Function","Description","This searches for the first child of the specified element which has an attribute with the matching name and value.","Parameters","element - the axuielement name - the name of the attribute value - the value of the attribute","Returns","The first matching child, or nil if none was found","Notes"]},{"l":"childWithDescription","p":["Signature","cp.ui.axutils.childWithDescription(element, value) - axuielement","Type","Function","Description","This searches for the first child of the specified element which has AXDescription with the specified value.","Parameters","element - the axuielement value - the value","Returns","The first matching child, or nil if none was found","Notes"]},{"l":"childWithID","p":["Signature","cp.ui.axutils.childWithID(element, value) - axuielement","Type","Function","Description","This searches for the first child of the specified element which has AXIdentifier with the specified value.","Parameters","element - the axuielement value - the value","Returns","The first matching child, or nil if none was found","Notes"]},{"l":"childWithRole","p":["Signature","cp.ui.axutils.childWithRole(element, value) - axuielement","Type","Function","Description","This searches for the first child of the specified element which has AXRole with the specified value.","Parameters","element - the axuielement value - the value","Returns","The first matching child, or nil if none was found","Notes"]},{"l":"childWithTitle","p":["Signature","cp.ui.axutils.childWithTitle(element, value) - axuielement","Type","Function","Description","This searches for the first child of the specified element which has AXTitle with the specified value.","Parameters","element - the axuielement value - the value","Returns","The first matching child, or nil if none was found","Notes"]},{"l":"hasAttributeValue","p":["Signature","cp.ui.axutils.hasAttributeValue(element, name, value) - boolean","Type","Function","Description","Checks to see if an element has a specific value.","Parameters","element - the axuielement name - the name of the attribute value - the value of the attribute","Returns","true if the element has the supplied attribute value, otherwise false.","Notes"]},{"l":"hasChild","p":["Signature","cp.ui.axutils.hasChild(element, matcherFn) - boolean","Type","Function","Description","Checks if the axuielement has a child that passes the matcherFn.","Parameters","element - the axuielement to check. matcherFn - the function that accepts an axuielement and returns a boolean","Returns","true if any child matches, otherwise false.","Notes"]},{"l":"isValid","p":["Signature","cp.ui.axutils.isValid(element) - boolean","Type","Function","Description","Checks if the axuilelement is still valid - that is, still active in the UI.","Parameters","element - the axuielement","Returns","true if the element is valid.","Notes"]},{"l":"prop","p":["Signature","cp.ui.axutils.prop(uiFinder, attributeName[, settable]) - cp.prop","Type","Function","Description","Creates a new cp.prop which will find the hs.axuielement via the uiFinder and get/set the value (if settable is true).","Parameters","uiFinder - the cp.prop or function which will retrieve the current hs.axuielement. attributeName - the AX atrribute name the property links to. settable - Defaults to false. If true, the property will also be settable.","Returns","The cp.prop for the attribute.","Notes","If the uiFinder is a cp.prop, it will be monitored for changes, making the resulting prop\"live\"."]},{"l":"snapshot","p":["Signature","cp.ui.axutils.snapshot(element, filename, elementFrame) - hs.image","Type","Function","Description","Takes a snapshot of the specified axuielement and returns it. If the filename is provided it also saves the file to the specified location.","Parameters","element - The axuielement to snap. filename - (optional) The path to save the image as a PNG file. elementFrame - (optional) The hs.geometry frame of what you want to capture","Returns","An hs.image file, or nil if the element could not be snapped.","Notes"]},{"l":"valueOf","p":["Signature","cp.ui.axutils.valueOf(element, name[, default]) - anything","Type","Function","Description","Returns the named AX attribute value, or the default if it is empty.","Parameters","element - the axuielement to retrieve the attribute value for. attribute - The attribute name (e.g. \"AXValue\") default - (optional) if provided, this will be returned if the attribute is nil.","Returns","The attribute value, or the default if none is found.","Notes"]},{"l":"withAttributeValue","p":["Signature","cp.ui.axutils.withAttributeValue(element, name, value) - hs.axuielement | nil","Type","Function","Description","Checks if the element has an attribute value with the specified name and value. If so, the element is returned, otherwise nil.","Parameters","element - The element to check name - The name of the attribute to check value - The value of the attribute","Returns","The axuielement if it matches, otherwise nil.","Notes"]},{"l":"withRole","p":["Signature","cp.ui.axutils.withRole(element, role) - hs.axuielement | nil","Type","Function","Description","Checks if the element has an \"AXRole\" attribute with the specified role. If so, the element is returned, otherwise nil.","Parameters","element - The element to check role - The required role","Returns","The axuielement if it matches, otherwise nil.","Notes"]},{"l":"withTitle","p":["Signature","cp.ui.axutils.withTitle(element, title) - hs.axuielement | nil","Type","Function","Description","Checks if the element has an \"AXTitle\" attribute with the specified title. If so, the element is returned, otherwise nil.","Parameters","element - The element to check title - The required title","Returns","The axuielement if it matches, otherwise nil.","Notes"]},{"l":"withValue","p":["Signature","cp.ui.axutils.withValue(element, value) - hs.axuielement | nil","Type","Function","Description","Checks if the element has an \"AXValue\" attribute with the specified value. If so, the element is returned, otherwise nil.","Parameters","element - The element to check value - The required value","Returns","The axuielement if it matches, otherwise nil.","Notes"]}],[{"i":"cpuiaxutilscompare","l":"cp.ui.axutils.compare","p":["Contains functions for comparing axuielement s."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","bottomToTop","leftToRight","rightToLeft","topToBottom"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"bottomToTop","p":["Signature","cp.ui.axutils.compare.bottomToTop(a, b) - boolean","Type","Function","Description","Returns true if element a is below element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is below b.","Notes"]},{"l":"leftToRight","p":["Signature","cp.ui.axutils.compare.leftToRight(a, b) - boolean","Type","Function","Description","Returns true if element a is left of element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is left of b.","Notes"]},{"l":"rightToLeft","p":["Signature","cp.ui.axutils.compare.rightToLeft(a, b) - boolean","Type","Function","Description","Returns true if element a is right of element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is right of b.","Notes"]},{"l":"topToBottom","p":["Signature","cp.ui.axutils.compare.topToBottom(a, b) - boolean","Type","Function","Description","Returns true if element a is above element b. May be used with table.sort.","Parameters","a - The first element b - The second element","Returns","true if a is above b.","Notes"]}],[{"i":"cpuiaxutilsmatch","l":"cp.ui.axutils.match","p":["Contains common hs.axuielement matching functions."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","emptyList","exactly","isAbove","isBelow","isLeftOf","isRightOf","role"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"emptyList","p":["Signature","cp.ui.axutils.match.emptyList(element) - function","Type","Function","Description","Returns a match function that will return true if element is an empty list, or has no children.","Parameters","element - The axuielement to check.","Returns","true if the element is an empty list.","Notes"]},{"l":"exactly","p":["Signature","cp.ui.axutils.match.exactly(value) - function","Type","Function","Description","Returns a match function that will return true if the axuielement matches the provided value exactly.","Parameters","value - The value to check for.","Returns","function(element) - boolean that checks the value matches exactly.","Notes"]},{"l":"isAbove","p":["Signature","cp.ui.axutils.match.isAbove(value) - function","Type","Function","Description","Returns a match function that will return true if the axuielement is above the provided value axuielement.","Parameters","value - The axuielement to check.","Returns","A function returning true if the element is above the provided value.","Notes"]},{"l":"isBelow","p":["Signature","cp.ui.axutils.match.isBelow(value) - function","Type","Function","Description","Returns a match function that will return true if the axuielement is below the provided value axuielement.","Parameters","value - The axuielement to check.","Returns","A function returning true if the element is below the provided value.","Notes"]},{"l":"isLeftOf","p":["Signature","cp.ui.axutils.match.isLeftOf(value) - function","Type","Function","Description","Returns a match function that will return true if the axuielement is left of the provided value axuielement.","Parameters","value - The axuielement to check.","Returns","A function returning true if the element is left of the provided value.","Notes"]},{"l":"isRightOf","p":["Signature","cp.ui.axutils.match.isRightOf(value) - function","Type","Function","Description","Returns a match function that will return true if the axuielement is right of the provided value axuielement.","Parameters","value - The axuielement to check.","Returns","A function returning true if the element is right of the provided value.","Notes"]},{"l":"role","p":["Signature","cp.ui.axutils.match.role(roleName) - function","Type","Function","Description","Returns a match function that will return true if the axuielement has the specified AXRole.","Parameters","roleName - The role to check for.","Returns","function(element) - boolean that checks the AXRole is roleName","Notes"]}],[{"i":"cpuibuilder","l":"cp.ui.Builder","p":["A utility class, which provides support for allowing creation of Element instances in a \"builder\" style.","This is useful for creating complex UI elements, such as a Table or ScrollArea, which can have custom sub-elements.","A Builder instance can be called like a function, expecting a parent and uiFinder, which are the basic values required to create a new Element instance. Specific subclasses have extra values, which a Builder can define to pass in.","For example, a Table has a headerType and rowType in its constructor, which are used to create the header and row elements when required:","However, its quite common for a ScrollArea to contain a Table, and in order to use the ScrollArea:containing(Table) method, you would have to provide a wrapper function that hard-codes the headerType and rowType values:","However, Table has its own helper method for this to make it easier to use:","Internally, the Table:withRowsOf(rowType) function returns a Builder configured to accept withRowsOf and withHeaderOf values, which are then passed to the Table constructor.","To create your own Builder instances, you can just return a new Builder, specifying the type (typically self) and the names of the constructor arguments to accept. For example:","The Builder instance can then be used to create new MyElement instances:","The order of the arguments is important, because it defines what order the constructor arguments will be passed in. For example, if we added a withRightOf method definition, it would look like this:","The withLeftOf value will still be passed to the constructor first, because it is listed first in the Builder constructor."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","build"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"build","p":["Signature","cp.ui.Builder:build(parent, uiFinder) - cp.ui.Element","Type","Method","Description","Builds a new Element instance, passing in the parent and uiFinder parameters, followed by any extra arguments that have been set, in the order passed to the constructor.","Parameters","parent - The parent Element. uiFinder - A cp.prop or axuielement that will be used to find this Element's axuielement.","Returns","A new Element instance.","Notes"]}],[{"i":"cpuibutton","l":"cp.ui.Button","p":["The Button type extends Element and includes all its methods, fields and other properties."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","Button","Fields- Variables which can only be accessed from an object returned by a constructor","title","Methods- API calls which can only be made on an object returned by a constructor","doPress","press"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Button.matches(element) - boolean","Type","Function","Description","Checks if the element is a Button, returning true if so.","Parameters","element - The hs.axuielement to check.","Returns","true if the element is a Button, or false if not.","Notes"]},{"l":"Constructors"},{"l":"Button","p":["Signature","cp.ui.Button(parent, uiFinder) - cp.ui.Button","Type","Constructor","Description","Creates a new Button instance.","Parameters","parent - The parent object. Should have a UI and isShowing field. uiFinder - A function which will return the hs.axuielement the button belongs to, or nil if not available.","Returns","The new Button instance.","Notes"]},{"l":"Fields"},{"l":"title","p":["Signature","cp.ui.Button.title cp.prop: string; read-only","Type","Field","Description","The button title, if available."]},{"l":"Methods"},{"l":"doPress","p":["Signature","cp.ui.Button:doPress() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will press the button when executed, if available at the time. If not an error is sent.","Parameters","None","Returns","The Statement which will press the button when executed.","Notes"]},{"l":"press","p":["Signature","cp.ui.Button:press() - self, boolean","Type","Method","Description","Performs a button press action, if the button is available.","Parameters","None","Returns","The Button instance. true if the button was actually pressed successfully.","Notes"]}],[{"i":"cpuicell","l":"cp.ui.Cell","p":["Represents an AXCell axuielement. This can be used directly, or can be subclassed to provide more specific access to the cell contents. It is typically used in conjunction with a container type such as Table, something like this:","This is a subclass of Element."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","with","Constructors- API calls which return an object, typically one that offers API methods","Cell","Fields- Variables which can only be accessed from an object returned by a constructor","children","childrenUI","columnIndexRange","rowIndexRange","selected","value","Methods- API calls which can only be made on an object returned by a constructor","textValueIs"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Cell.matches(element) - boolean","Type","Function","Description","Checks if the element is an AXCell.","Parameters","element - An element to check","Returns","A boolean","Notes"]},{"l":"with","p":["Signature","cp.ui.Cell:with(...) - function(parent, uiFinder) - cp.ui.Cell.Builder","Type","Function","Description","A combinator function that returns a Cell.Builder that accepts the parent and uiFinder to construct a new Cell.","Parameters","... - One or more arguments to pass to the constructor.","Returns","A Cell.Builder","Notes","For example, if a cell contains a Button, you can use cp.ui.Cell:with(Button), and it will return a Cell Builder that accepts the parent and uiFinder parameters, and whose contents is expected to be a Button. That Button instance can be accessed via the children[1] value.```"]},{"l":"Constructors"},{"l":"Cell","p":["Signature","cp.ui.Cell(parent, uiFinder[, childInits]) - Cell","Type","Constructor","Description","Creates a new Cell instance.","Parameters","parent - The parent Element. uiFinder - A cp.prop or axuielement that will be used to find this Cell's axuielement.... - The list of child Element builders to initialize.","Returns","A new Cell instance.","Notes"]},{"l":"Fields"},{"l":"children","p":["Signature","cp.ui.Cell.children table of cp.ui.Element; live?; read-only","Type","Field","Description","The list of Element s which are children of this Cell, if the childInits were provided to the constructor."]},{"l":"childrenUI","p":["Signature","cp.ui.Cell.childrenUI cp.prop: table of axuielement; read-only","Type","Field","Description","The list of axuielement s which are children of this Cell."]},{"l":"columnIndexRange","p":["Signature","cp.ui.Cell.columnIndexRange cp.prop: table; read-only","Type","Field","Description","Returns a table of {len,loc}, which indicates if the cell covers multiple columns."]},{"l":"rowIndexRange","p":["Signature","cp.ui.Cell.rowIndexRange cp.prop: table; read-only","Type","Field","Description","Returns a table of {len,loc}, which indicates if the cell covers multiple rows."]},{"l":"selected","p":["Signature","cp.ui.Cell.selected cp.prop: table","Type","Field","Description","Indicates if the cell is currently selected."]},{"l":"value","p":["Signature","cp.ui.Cell.value cp.prop: string","Type","Field","Description","The cell value, if it is a string."]},{"l":"Methods"},{"l":"textValueIs","p":["Signature","cp.ui.Cell.textValueIs(value) - boolean","Type","Method","Description","Checks if the cell's text value equals value.","Parameters","value- The text value to compare.","Returns","true if the cell text value equals the provided value.","Notes"]}],[{"i":"cpuicheckbox","l":"cp.ui.CheckBox","p":["Check Box UI Module.","This represents an hs.axuielement with a AXCheckBox role. It allows checking and modifying the checked status like so:","You can also call instances of CheckBox as a function, which will return the checked status:"]},{"l":"API Overview","p":["CheckBox","checked","click","Constructors- API calls which return an object, typically one that offers API methods","doCheck","doPress","doUncheck","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","loadLayout","matches","Methods- API calls which can only be made on an object returned by a constructor","press","saveLayout","title","toggle"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.CheckBox.matches(element) - boolean","Type","Function","Description","Checks if the provided hs.axuielement is a CheckBox.","Parameters","element - The axuielement to check.","Returns","true if it's a match, or false if not.","Notes"]},{"l":"Constructors"},{"l":"CheckBox","p":["Signature","cp.ui.CheckBox(parent, uiFinder) - cp.ui.CheckBox","Type","Constructor","Description","Creates a new CheckBox.","Parameters","parent - The parent object. uiFinder - A function which will return the hs.axuielement when available.","Returns","The new CheckBox.","Notes"]},{"l":"Fields"},{"l":"checked","p":["Signature","cp.ui.CheckBox.checked cp.prop: boolean","Type","Field","Description","Indicates if the checkbox is currently checked."]},{"l":"title","p":["Signature","cp.ui.CheckBox.title cp.prop: string; read-only","Type","Field","Description","The button title, if available."]},{"l":"Methods"},{"l":"click","p":["Signature","cp.ui.CheckBox:click() - self","Type","Method","Description","Performs a single mouse click on the checkbox.","Parameters","None","Returns","The CheckBox instance.","Notes"]},{"l":"doCheck","p":["Signature","cp.ui.CheckBox:doCheck() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will ensure the CheckBox is checked.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doPress","p":["Signature","cp.ui.CheckBox:doPress() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will press the button when executed, if available at the time. If not an error is sent.","Parameters","None","Returns","The Statement which will press the button when executed.","Notes"]},{"l":"doUncheck","p":["Signature","cp.ui.CheckBox:doUncheck() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will ensure the CheckBox is unchecked.","Parameters","None","Returns","A Statement","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.CheckBox:loadLayout(layout) - nil","Type","Method","Description","Applies the settings in the provided layout table.","Parameters","layout - The table containing layout settings. Usually created by the saveLayout method.","Returns","nil","Notes"]},{"l":"press","p":["Signature","cp.ui.CheckBox:press() - self","Type","Method","Description","Attempts to press the button. May fail if the UI is not available.","Parameters","None","Returns","The CheckBox instance.","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.CheckBox:saveLayout() - table","Type","Method","Description","Returns a table containing the layout settings for the checkbox. This table may be passed to the loadLayout method to restore the saved layout.","Parameters","None","Returns","A settings table.","Notes"]},{"l":"toggle","p":["Signature","cp.ui.CheckBox:toggle() - self","Type","Method","Description","Toggles the checked status of the button.","Parameters","None","Returns","The CheckBox instance.","Notes"]}],[{"i":"cpuicolorwell","l":"cp.ui.ColorWell","p":["UI ColorWell."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","ColorWell"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.ColorWell.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"ColorWell","p":["Signature","cp.ui.ColorWell(parent, uiFinder) - Image","Type","Constructor","Description","Creates a new ColorWell instance.","Parameters","parent - The parent object. uiFinder - A function which will return the hs.axuielement when available.","Returns","A new ColorWell object.","Notes"]}],[{"i":"cpuicolumn","l":"cp.ui.Column","p":["Represents a Column in a Table."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Fields- Variables which can only be accessed from an object returned by a constructor","index","selected","Methods- API calls which can only be made on an object returned by a constructor","rows","visibleRows"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Column.matches(element) - boolean","Type","Function","Description","Checks if the axuielement is a Column.","Parameters","element - The axuielement to check.","Returns","true if the element is a Column.","Notes"]},{"l":"Fields"},{"l":"index","p":["Signature","cp.ui.Column.index cp.prop: number; read-only","Type","Field","Description","The numeric index of this column in the overall container, with 0 being the first item."]},{"l":"selected","p":["Signature","cp.ui.Column.selected cp.prop: boolean","Type","Field","Description","Indicates if the column is currently selected. May be set."]},{"l":"Methods"},{"l":"rows","p":["Signature","cp.ui.Column:rows() - table of cp.ui.OldRow or nil","Type","Method","Description","Returns a table of Row s contained in the Column.","Parameters","None","Returns","The table, or nil if the column's UI is not available.","Notes"]},{"l":"visibleRows","p":["Signature","cp.ui.Column:visibleRows() - table of cp.ui.OldRows or nil","Type","Method","Description","Returns a table of Row s which are currently visible on screen.","Parameters","None","Returns","The table, or nil if the column's UI is not available.","Notes"]}],[{"i":"cpuicombobox","l":"cp.ui.ComboBox","p":["Combo Box Module."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Methods- API calls which can only be made on an object returned by a constructor","ComboBox"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.ComboBox.matches(element[, subrole]) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check. subrole - (optional) If provided, the field must have the specified subrole.","Returns","true if matches otherwise false","Notes"]},{"l":"Methods"},{"l":"ComboBox","p":["Signature","cp.ui.ComboBox(parent, uiFinder, listAdaptorFn [, getConvertFn[, setConvertFn]]) - ComboBox","Type","Method","Description","Creates a new ComboBox. They have a parent and a finder function.","Parameters","parent - The parent object. uiFinder - The function will return the axuielement for the ComboBox. listAdaptorFn - A function that will recieve a List and AXUIElement value and return an Element getConvertFn - (optional) If provided, will be passed the string value when returning. setConvertFn - (optional) If provided, will be passed the number value when setting.","Returns","The new ComboBox.","Notes","Additionally, an optional convert function can be provided, with the following signature: function(textValue) - anything The value will be passed to the function before being returned, if present. All values passed into value(x) will be converted to a string first via tostring. For example, to have the value be converted into a number, simply use tonumber like this: lua/lililocal numberField = ComboBox(parent, function() return ... end, tonumber, tostring)/lili"]}],[{"i":"cpuidialog","l":"cp.ui.Dialog","p":["Represents a Window which has a AXSubrole of AXDialog."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpuidisclosuretriangle","l":"cp.ui.DisclosureTriangle","p":["Disclosure Triangle UI Module.","This represents an hs.axuielement with a AXDisclosureTriangle role. It allows checking and modifying the opened status like so:","You can also call instances of DisclosureTriangle as a function, which will return the opened status:"]},{"l":"API Overview","p":["click","Constructors- API calls which return an object, typically one that offers API methods","DisclosureTriangle","doClose","doOpen","doPress","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","loadLayout","matches","Methods- API calls which can only be made on an object returned by a constructor","opened","press","saveLayout","title","toggle"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.DisclosureTriangle.matches(element) - boolean","Type","Function","Description","Checks if the provided hs.axuielement is a DisclosureTriangle.","Parameters","element - The axuielement to check.","Returns","true if it's a match, or false if not.","Notes"]},{"l":"Constructors"},{"l":"DisclosureTriangle","p":["Signature","cp.ui.DisclosureTriangle(parent, uiFinder) - cp.ui.DisclosureTriangle","Type","Constructor","Description","Creates a new DisclosureTriangle.","Parameters","parent - The parent object. uiFinder - A function which will return the hs.axuielement when available.","Returns","The new DisclosureTriangle.","Notes"]},{"l":"Fields"},{"l":"opened","p":["Signature","cp.ui.DisclosureTriangle.opened cp.prop: boolean","Type","Field","Description","Indicates if the disclosure triangle is currently opened."]},{"l":"title","p":["Signature","cp.ui.DisclosureTriangle.title cp.prop: string; read-only","Type","Field","Description","The button title, if available."]},{"l":"Methods"},{"l":"click","p":["Signature","cp.ui.DisclosureTriangle:click() - self","Type","Method","Description","Performs a single mouse click on the triangle.","Parameters","None","Returns","The DisclosureTriangle instance.","Notes"]},{"l":"doClose","p":["Signature","cp.ui.DisclosureTriangle:doClose() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will ensure the DisclosureTriangle is unopened.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doOpen","p":["Signature","cp.ui.DisclosureTriangle:doOpen() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will ensure the DisclosureTriangle is opened.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doPress","p":["Signature","cp.ui.DisclosureTriangle:doPress() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will press the button when executed, if available at the time. If not an error is sent.","Parameters","None","Returns","The Statement which will press the button when executed.","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.DisclosureTriangle:loadLayout(layout) - nil","Type","Method","Description","Applies the settings in the provided layout table.","Parameters","layout - The table containing layout settings. Usually created by the saveLayout method.","Returns","nil","Notes"]},{"l":"press","p":["Signature","cp.ui.DisclosureTriangle:press() - self","Type","Method","Description","Attempts to press the button. May fail if the UI is not available.","Parameters","None","Returns","The DisclosureTriangle instance.","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.DisclosureTriangle:saveLayout() - table","Type","Method","Description","Returns a table containing the layout settings. This table may be passed to the loadLayout method to restore the saved layout.","Parameters","None","Returns","A settings table.","Notes"]},{"l":"toggle","p":["Signature","cp.ui.DisclosureTriangle:toggle() - self","Type","Method","Description","Toggles the opened status of the button.","Parameters","None","Returns","The DisclosureTriangle instance.","Notes"]}],[{"i":"cpuielement","l":"cp.ui.Element","p":["A support class for hs.axuielement management.","See:","Button","CheckBox","MenuButton"]},{"l":"API Overview","p":["app","attributeValue","Constructors- API calls which return an object, typically one that offers API methods","defineBuilder","doFocus","doHighlight","doLayout","doPerformAction","doSetAttributeValue","doShow","Element","Fields- Variables which can only be accessed from an object returned by a constructor","focus","frame","Functions- API calls offered directly by the extension","highlight","identifier","isEnabled","isFocused","isShowing","isTypeOf","loadLayout","matches","Methods- API calls which can only be made on an object returned by a constructor","parent","performAction","position","role","saveLayout","setAttributeValue","show","size","snapshot","subrole","textValue","title","value","valueIs"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"isTypeOf","p":["Signature","cp.ui.Element:isTypeOf(thing) - boolean","Type","Function","Description","Checks if the thing is an Element. If called on subclasses, it will check if the thing is an instance of the subclass.","Parameters","thing- The thing to check","Returns","true if the thing is a Element instance.","Notes","This is a type method, not an instance method or a type function. It is called with : on the type itself, not an instance. For example Element:isTypeOf(value)"]},{"l":"matches","p":["Signature","cp.ui.Element.matches(element) - boolean","Type","Function","Description","Matches to any valid hs.axuielement. Sub-types should provide their own matches method.","Parameters","The element to check","Returns","true if the element is a valid instance of an hs.axuielement.","Notes"]},{"l":"Constructors"},{"l":"Element","p":["Signature","cp.ui.Element(parent, uiFinder) - cp.ui.Element","Type","Constructor","Description","Creates a new Element with the specified parent and uiFinder. The uiFinder may be either a function that returns an axuielement, or a cp.prop.","Parameters","parent - The parent Element (may be nil) uiFinder - The function or prop that actually provides the current axuielement instance.","Returns","The new Element instance.","Notes"]},{"l":"Fields"},{"l":"frame","p":["Signature","cp.ui.Element.frame cp.prop: table; read-only; live?","Type","Field","Description","Returns the table containing the x, y, w, and h values for the Element frame, or nil if not available."]},{"l":"identifier","p":["Signature","cp.ui.Element.identifier cp.prop: string; read-only","Type","Field","Description","Returns the AX identifier for the element."]},{"l":"isEnabled","p":["Signature","cp.ui.Element.isEnabled cp.prop: boolean; read-only","Type","Field","Description","Returns true if the Element is visible and enabled."]},{"l":"isFocused","p":["Signature","cp.ui.Element.isFocused cp.prop: boolean; read-only?; live?","Type","Field","Description","Returns true if the AXFocused attribute is true. Not always a reliable way to determine focus however."]},{"l":"isShowing","p":["Signature","cp.ui.Element.isShowing cp.prop: boolean; read-only; live?","Type","Field","Description","If true, the Element is showing on screen."]},{"l":"position","p":["Signature","cp.ui.Element.position cp.prop: table; read-only; live?","Type","Field","Description","Returns the table containing the x and y values for the Element frame, or nil if not available."]},{"l":"role","p":["Signature","cp.ui.Element.role cp.prop: string; read-only","Type","Field","Description","Returns the AX role name for the element."]},{"l":"size","p":["Signature","cp.ui.Element.size cp.prop: table; read-only; live?","Type","Field","Description","Returns the table containing the w and h values for the Element frame, or nil if not available."]},{"l":"subrole","p":["Signature","cp.ui.Element.subrole cp.prop: string; read-only","Type","Field","Description","Returns the AX subrole name for the element."]},{"l":"textValue","p":["Signature","cp.ui.Element.textValue cp.prop: string; read-only; live?","Type","Field","Description","The 'AXValue' of the element, if it is a string."]},{"l":"title","p":["Signature","cp.ui.Element.title cp.prop: string; read-only, live?","Type","Field","Description","The 'AXTitle' of the element."]},{"l":"value","p":["Signature","cp.ui.Element.value cp.prop: anything; live?","Type","Field","Description","The 'AXValue' of the element."]},{"l":"Methods"},{"l":"app","p":["Signature","cp.ui.Element:app() - App","Type","Method","Description","Returns the app instance.","Parameters","None","Returns","Notes"]},{"l":"attributeValue","p":["Signature","cp.ui.Element:attributeValue(id) - anything, true | nil, false","Type","Method","Description","Attempts to retrieve the specified AX attribute value, if the UI is available.","Parameters","id - The AX attribute to retrieve.","Returns","The current value for the attribute, or nil if the UI is not available, followed by true if the UI is present and was called.","Notes"]},{"l":"defineBuilder","p":["Signature","cp.ui.Element:defineBuilder(...) - cp.ui.Element","Type","Method","Description","Defines a new Builder class on this Element with the specified additional argument names.","Parameters","... - The names for the methods which will collect extra arguments to pass to the Element constructor.","Returns","The same Element class instance.","Notes","The order of the argument names here is the order in which they will be passed to the Element constructor, no matter what order they are called on the Builder itself. Once defined, the class can be accessed via the static Element Name.Builder of the Element subclass. For example, if you have a cp.ui.Element subclass named MyElement, with an extra alpha and beta constructor argument, you can do this: lua/lili -- The class definition/lili local MyElement = Element:subclass(cp.ui.MyElement):defineBuilder(withAlpha, withBeta)/lili -- The constructor/lili function MyElement.Builder:initialize(parent, uiFinder, alpha, beta)/lili Element.initialize(self, parent, uiFinder)/lili self.alpha = alpha/lili self.beta = beta/lili end/lili -- Create a callable `MyClass.Builder` instance/lili local myElementBuilder = MyElement:withAlpha(1):withBeta(2)/lili -- alternately, same result:/lili local myElementBuilder = MyElement:withBeta(2):withAlpha(1)/lili -- Alternately, same result:/lili local myElementBuilder = MyElement.Builder():withAlpha(1):withBeta(2)/lili -- Create an instance of `MyClass`:/lili local myElement = myElementBuilder(parent, uiFinder)/lili"]},{"l":"doFocus","p":["Signature","cp.ui.Element:doFocus() - cp.rx.go.Statement","Type","Method","Description","A Statement that attempts to set the focus on the element.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doHighlight","p":["Signature","cp.ui.Element:doHighlight([color], [duration]) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement which will attempt to highlight the Element with the specified color and duration.","Parameters","color - The hs.drawing color to use. (defaults to red) duration - The number of seconds to highlight for. (defaults to 3 seconds)","Returns","The Statement which will perform the action.","Notes"]},{"l":"doLayout","p":["Signature","cp.ui.Element:doLayout(layout) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement which will attempt to load the layout based on the parameters provided by the layout table. This table should generally be generated via the [#saveLayout] method.","Parameters","layout - a table of parameters that will be used to layout the element.","Returns","The Statement to execute.","Notes","By default, to enable backwards-compatibility, this method will simply call the [#loadLayout]. Override it to provide more optimal asynchonous behaviour if required. When subclassing, the overriding doLayout method should call the parent class's doLayout method, then process any custom values from it, like so: lua/lili function MyElement:doLayout(layout)/lili layout = layout or {}/lili return Do(Element.doLayout(self, layout))/lili :Then(function()/lili self.myConfig = layout.myConfig/lili end)/lili :Label(MyElement:doLayout)/lili end/lili"]},{"l":"doPerformAction","p":["Signature","cp.ui.Element:doPerformAction(id) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement which will attempt to perform the action with the specified id (eg. \"AXCancel\")","Parameters","id - The string for the AX action to perform.","Returns","The Statement which will perform the action.","Notes"]},{"l":"doSetAttributeValue","p":["Signature","cp.ui.Element:doSetAttributeValue(id, value) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement which will attempt to update the specified AX attribute to the new value.","Parameters","id - The string for the AX action to perform. value - The new value to set.","Returns","The Statement which will perform the action and resolve to true if the UI is available and set, otherwise false.","Notes"]},{"l":"doShow","p":["Signature","cp.ui.Element:doShow() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will ensure the Element is showing. By default, will ask the parent to show, if the parent is available.","Parameters","None","Returns","A Statement","Notes"]},{"l":"focus","p":["Signature","cp.ui.Element:focus() - self, boolean","Type","Method","Description","Attempt to set the focus on the element.","Parameters","None","Returns","self, boolean - the boolean indicates if the focus was set.","Notes"]},{"l":"highlight","p":["Signature","cp.ui.Element:highlight([color], [duration]) - cp.ui.Element","Type","Method","Description","Highlights the Element with the specified color and duration.","Parameters","color - The hs.drawing color to use. (defaults to red) duration - The number of seconds to highlight for. (defaults to 3 seconds)","Returns","the same Element instance.","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.Element:loadLayout(layout) - nil","Type","Method","Description","When called, the Element (or subclass) will attempt to load the layout based on the parameters provided by the layout table. This table should generally be generated via the [#saveLayout] method.","Parameters","layout - a table of parameters that will be used to layout the element.","Returns","None","Notes","When subclassing, the overriding loadLayout method should call the parent's loadLayout method, then process any custom values from it, like so:/lili function MyElement:loadLayout(layout)/lili Element.loadLayout(self, layout)/lili self.myConfig = layout.myConfig/lili end/lili"]},{"l":"parent","p":["Signature","cp.ui.Element:parent() - parent","Type","Method","Description","Returns the parent object.","Parameters","None","Returns","Notes"]},{"l":"performAction","p":["Signature","cp.ui.Element:performAction(id) - boolean","Type","Method","Description","Attempts to perform the specified AX action, if the UI is available.","Parameters","id - The AX action to perform.","Returns","true if the UI is available and the action was performed, otherwise false.","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.Element:saveLayout() - table","Type","Method","Description","Returns a table containing the current configuration details for this Element (or subclass).","Parameters","None","Returns","Notes","When subclassing, the overriding saveLayout method should call the parent's saveLayout method, then add values to it, like so:/lili function MyElement:saveLayout()/lili local layout = Element.saveLayout(self)/lili layout.myConfig = self.myConfig/lili return layout/lili end/lili"]},{"l":"setAttributeValue","p":["Signature","cp.ui.Element:setAttributeValue(id, value) - self, boolean","Type","Method","Description","If the UI is available, set the named AX attribute to the value.","Parameters","id - The AX id to set. value - The new value.","Returns","The Element instance, then true if the UI is available and the value was set, otherwise false.","Notes"]},{"l":"show","p":["Signature","cp.ui.Element:show() - self","Type","Method","Description","Shows the Element.","Parameters","None","Returns","self","Notes"]},{"l":"snapshot","p":["Signature","cp.ui.Element:snapshot([path]) - hs.image | nil","Type","Method","Description","Takes a snapshot of the button in its current state as a PNG and returns it. If the path is provided, the image will be saved at the specified location.","Parameters","path - (optional) The path to save the file. Should include the extension (should be .png).","Returns","The hs.image that was created.","Notes"]},{"l":"valueIs","p":["Signature","cp.ui.Element.valueIs(value) - boolean","Type","Method","Description","Checks if the current value of this element is the provided value.","Parameters","value - The value to compare to.","Returns","true if the current [#value] is equal to the provided value.","Notes"]}],[{"i":"cpuielementcache","l":"cp.ui.ElementCache","p":["Provides caching for Element subclasses that want to cache children."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","ElementCache","Methods- API calls which can only be made on an object returned by a constructor","cachedElement","cacheElement","clean","fetchElement","fetchElements","reset"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"ElementCache","p":["Signature","cp.ui.ElementCache(parent[, createFn])","Type","Constructor","Description","Creates and returns a new ElementCache, with the specified parent and function which will create new elements on demand. The createFn has the signature of function(parent, ui) - cp.ui.Element, and should take the parent provided here and the axuielement and return a new Element subclass.","Parameters","parent - the parent Element that contains the cached items. createFn - a function that will create new Element subclasses based on cached axuielement values.","Returns","The new ElementCache.","Notes"]},{"l":"Methods"},{"l":"cachedElement","p":["Signature","cp.ui.ElementCache:cachedElement(ui) - cp.ui.Element or nil","Type","Method","Description","Returns the cached Element, if it is present.","Parameters","ui - The axuielement it is linked to. If not provided, it will be fetched by calling Element:UI().","Returns","cp.ui.Element or nil","Notes"]},{"l":"cacheElement","p":["Signature","cp.ui.ElementCache:cacheElement(element[, ui]) - none","Type","Method","Description","Caches the provided Element.","Parameters","element - The Element ui - The axuielement it is linked to. If not provided, it will be fetched by calling Element:UI().","Returns","None","Notes"]},{"l":"clean","p":["Signature","cp.ui.ElementCache:clean()","Type","Method","Description","Clears the cache of any invalid (aka dead) items.","Parameters","None","Returns","Notes"]},{"l":"fetchElement","p":["Signature","cp.ui.ElementCache:fetchElement(ui) - cp.ui.Element or nil","Type","Method","Description","Retrieves the matching Element instance from the cache. If none exists and the createFn was provided in the constructor, it will be used to create a new one, which is automatically cached for future reference.","Parameters","ui - The axuielement being fetched for.","Returns","cp.ui.Element or nil","Notes"]},{"l":"fetchElements","p":["Signature","cp.ui.ElementCache:fetchElements(uis) - table of cp.ui.Elements or nil","Type","Method","Description","Fetches a list of Element instances linked to the provided axuielement list.","Parameters","uis - A table of axuielement values.","Returns","A table of Element values.","Notes","If any of the provided axuielement values are either not from the parent, or no longer valid, a nil value will be stored in the matching index. Note that in that case, this will break useage of ipairs due to leaving holes in the list."]},{"l":"reset","p":["Signature","cp.ui.ElementCache:reset() - none","Type","Method","Description","Removes all cached items from the cache.","Parameters","None","Returns","Notes"]}],[{"i":"cpuigridelement","l":"cp.ui.GridElement","p":["Abstract base class for AX elements which form a grid, such as GridElement and Outline."]},{"l":"Submodules","p":["cp.ui.GridElement.Builder","cp.ui.GridElement.OfRows"]},{"l":"API Overview","p":["columns","columnsUI","Constructors- API calls which return an object, typically one that offers API methods","doSelectRow","fetchColumn","Fields- Variables which can only be accessed from an object returned by a constructor","findCell","findColumnIndex","firstRow","Functions- API calls offered directly by the extension","GridElement","header","headerUI","lastRow","matches","Methods- API calls which can only be made on an object returned by a constructor","row","rowsUI","selectedColumns","selectedColumnsUI","selectedRows","selectedRowsUI","selectRow","selectRowAt","selectRows","visibleColumns","visibleColumnsUI","visibleRows","visibleRowsUI","visitRow","withColumnsOf","withHeaderOf","withRowsOf"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.GridElement.matches(element) - boolean","Type","Function","Description","Checks if the element is an GridElement.","Parameters","element - An element to check","Returns","A boolean","Notes"]},{"l":"withColumnsOf","p":["Signature","cp.ui.GridElement:withColumnsOf(columnInit) - cp.ui.GridElement.Builder","Type","Function","Description","Returns a new Builder for GridElement s with the specified columnInit.","Parameters","columnInit - A Column initializer.","Returns","A new Builder for GridElement s.","Notes"]},{"l":"withHeaderOf","p":["Signature","cp.ui.GridElement:withHeaderOf(headerInit) - cp.ui.GridElement.Builder","Type","Function","Description","Returns a new Builder for GridElement s with the specified headerInit.","Parameters","headerInit - A Header initializer.","Returns","A new Builder for GridElement s.","Notes"]},{"l":"withRowsOf","p":["Signature","cp.ui.GridElement:withRowsOf(...) - function(parent, uiFinder) - GridElement","Type","Function","Description","A combinator that returns a function expecting a parent and uiFinder and returns a GridElement instance, with the arguments defining the Cell instances that make up the rows of the table.","Parameters","... - One or more arguments to pass to the constructor.","Returns","A function that will return a new GridElement instance.","Notes"]},{"l":"Constructors"},{"l":"GridElement","p":["Signature","cp.ui.GridElement(parent, uiFinder, headerInit, rowInit, columnInit) - cp.ui.GridElement","Type","Constructor","Description","Creates a new GridElement instance.","Parameters","parent - The parent Element instance. uiFinder - A hs.uielement or axuielementObject that will be used to find this element. headerInit - An initializer function that will be called to create the header Element instance. rowInit - An initializer function that will be called to create each row element. columnInit - An initializer function that will be called to create each column element.","Returns","A new GridElement instance.","Notes","The headerType, rowType arguments are optional."]},{"l":"Fields"},{"l":"columns","p":["Signature","cp.ui.GridElement.columns table of cp.ui.Column; live?; read-only","Type","Field","Description","The list of Column s which are children of this GridElement."]},{"l":"columnsUI","p":["Signature","cp.ui.GridElement.columnsUI cp.prop: table of axuielement; live?; read-only","Type","Field","Description","The list of axuielement s which are children of this GridElement."]},{"l":"firstRow","p":["Signature","cp.ui.GridElement.firstRow cp.ui.Element","Type","Field","Description","An Element of the rowInit type that will always point at the first row (if available)."]},{"l":"header","p":["Signature","cp.ui.GridElement.header cp.ui.Element","Type","Field","Description","The Element representing the AXHeader of the GridElement."]},{"l":"headerUI","p":["Signature","cp.ui.GridElement.headerUI cp.prop: axuielement; read-only; live","Type","Field","Description","Returns the header UI element.","Parameters","None","Returns","The header UI element."]},{"l":"lastRow","p":["Signature","cp.ui.GridElement.lastRow cp.ui.Element","Type","Field","Description","An Element of the rowInit type that will always point at the last row (if available)."]},{"l":"rowsUI","p":["Signature","cp.ui.GridElement.rowsUI cp.prop: table of axuielement; live?; read-only","Type","Field","Description","The list of Row s which are children of this GridElement."]},{"l":"selectedColumns","p":["Signature","cp.ui.GridElement.selectedColumns table of cp.ui.Column; live?; read-only","Type","Field","Description","The list of Column s which are selected in this GridElement."]},{"l":"selectedColumnsUI","p":["Signature","cp.ui.GridElement.selectedColumnsUI cp.prop: table of axuielement; live?","Type","Field","Description","The list of axuielement AXColumn s which are selected in this GridElement."]},{"l":"selectedRows","p":["Signature","cp.ui.GridElement.selectedRows table of cp.ui.Row; live?; read-only","Type","Field","Description","The list of Row s which are selected in this GridElement."]},{"l":"selectedRowsUI","p":["Signature","cp.ui.GridElement.selectedRowsUI cp.prop: table of cp.ui.Row; live?","Type","Field","Description","The list of Row s which are selected in this GridElement."]},{"l":"visibleColumns","p":["Signature","cp.ui.GridElement.visibleColumns table of cp.ui.Column; live?; read-only","Type","Field","Description","The list of Column s which are visible in this GridElement."]},{"l":"visibleColumnsUI","p":["Signature","cp.ui.GridElement.visibleColumnsUI cp.prop: table of axuielement; live?; read-only","Type","Field","Description","The list of Column s which are visible in this GridElement."]},{"l":"visibleRows","p":["Signature","cp.ui.GridElement.visibleRows table of cp.ui.Row; live?; read-only","Type","Field","Description","The list of Row s which are visible in this GridElement."]},{"l":"visibleRowsUI","p":["Signature","cp.ui.GridElement.visibleRowsUI cp.prop: table of cp.ui.Row; live?; read-only","Type","Field","Description","The list of Row s which are visible in this GridElement."]},{"l":"Methods"},{"l":"doSelectRow","p":["Signature","cp.ui.GridElement:doSelectRow(path) - [Statement](cp.rx.go.Statement.md)","Type","Method","Description","Selects the row at the sub-level named in the path table.","Parameters","path - A table of names to navigate through to find the Row to select.","Returns","The selected Row, or nil if not found.","Notes"]},{"l":"fetchColumn","p":["Signature","cp.ui.GridElement:fetchColumn(columnsUI) - table of cp.ui.Columns","Type","Method","Description","Returns a table of the same length as columnsUI. If provided items in the table are not valid columns in this table, then nil will be put in the matching index. Note that this will break the standard #/looping behaviour for tables at that point.","Parameters","columnsUI - The list of AXColumn axuielement s to find.","Returns","A table with the same number of elements, containing the matching Column instances.","Notes"]},{"l":"findCell","p":["Signature","cp.ui.GridElement:findCell(rowNumber, columnId) - hs.axuielement| nil","Type","Method","Description","Finds a specific Cell.","Parameters","rowNumber - The row number. columnId - The Column ID.","Returns","A hs.axuielement object for the cell, or nil if the cell cannot be found.","Notes"]},{"l":"findColumnIndex","p":["Signature","cp.ui.GridElement:findColumnIndex(id) - number | nil","Type","Method","Description","Finds the Column Index based on an AXIdentifier ID.","Parameters","id - The AXIdentifier of the column index you want to find.","Returns","A column index as a number, or nil if no index can be found.","Notes"]},{"l":"row","p":["Signature","cp.ui.GridElement:row(index) - cp.ui.Element | nil","Type","Method","Description","Returns an Element at the specified index.","Parameters","index - The index of the Element to return.","Returns","The Element at the specified index.","Notes"]},{"l":"selectRow","p":["Signature","cp.ui.GridElement:selectRow(row) - nil","Type","Method","Description","Attempts to select the provided cp.ui.Row.","Parameters","row - The cp.ui.Row to select.","Returns","nil","Notes"]},{"l":"selectRowAt","p":["Signature","cp.ui.GridElement:selectRowAt(path) - cp.ui.Row","Type","Method","Description","Selects the row at the sub-level named in the path table.","Parameters","path - A table of names to navigate through to find the Row to select.","Returns","The selected Row, or nil if not found.","Notes"]},{"l":"selectRows","p":["Signature","cp.ui.GridElement:selectRows(rows) - nil","Type","Method","Description","Attempts to select the provided list of cp.ui.Row s.","Parameters","rows - The list of cp.ui.Row s to select.","Returns","nil","Notes"]},{"l":"visitRow","p":["Signature","cp.ui.GridElement:visitRow(path, actionFn) - cp.ui.Row","Type","Method","Description","Visits the row at the sub-level named in the names table, and executes the actionFn.","Parameters","names- The array of names to navigate down actionFn- A function to execute when the target row is found.","Returns","The row that was visited, or nil if not.","Notes"]}],[{"i":"cpuigridelementbuilder","l":"cp.ui.GridElement.Builder","p":["A Builder for GridElement s."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","withColumnsOf","withHeaderOf","withRowsOf"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"withColumnsOf","p":["Signature","cp.ui.GridElement.Builder:withColumnsOf(columnInit) - cp.ui.GridElement.Builder","Type","Method","Description","Adds a Column initializer to the GridElement builder.","Parameters","columnInit - A Column initializer.","Returns","The GridElement builder.","Notes"]},{"l":"withHeaderOf","p":["Signature","cp.ui.GridElement.Builder:withHeaderOf(headerInit) - cp.ui.GridElement.Builder","Type","Method","Description","Adds a Header initializer to the GridElement builder.","Parameters","headerInit - A Header initializer.","Returns","The GridElement builder.","Notes"]},{"l":"withRowsOf","p":["Signature","cp.ui.GridElement.Builder:withRowsOf(rowInit) - cp.ui.GridElement.Builder","Type","Method","Description","Adds a Row initializer to the GridElement builder.","Parameters","rowInit - A Row initializer.","Returns","The GridElement builder.","Notes"]}],[{"i":"cpuigridelementofrows","l":"cp.ui.GridElement.OfRows","p":["Processes the contents of the GridElement as a list of rows. Each of the defined Element initialisers will be used to create a cell within each Row."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","OfRows","Methods- API calls which can only be made on an object returned by a constructor","createRow","createRows"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"OfRows","p":["Signature","cp.ui.GridElement.OfRows(...) - cp.ui.GridElement.OfRows","Type","Constructor","Description","Creates a new GridElement.OfRows instance.","Parameters","... - The Cell initialisers.","Returns","A new GridElement.OfRows instance.","Notes"]},{"l":"Methods"},{"l":"createRow","p":["Signature","cp.ui.GridElement.OfRows:createRow(tbl, rowFinder) - cp.ui.Row","Type","Method","Description","Creates a new Row instance.","Parameters","tbl - The GridElement instance. rowFinder - a callable that will return the axuielementObject for the row.","Returns","The new Row instance.","Notes"]},{"l":"createRows","p":["Signature","cp.ui.GridElement.OfRows:createRows(tbl, rowsFinder) - table of cp.ui.Row","Type","Method","Description","Creates the Row s for the GridElement.","Parameters","tbl - The GridElement instance rowsFinder - a callable that will return the a table of cp.ui.Row values.","Returns","A table of Row s.","Notes"]}],[{"i":"cpuigroup","l":"cp.ui.Group","p":["UI Group."]},{"l":"Submodules","p":["cp.ui.Group.Builder"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","containing","matches","Constructors- API calls which return an object, typically one that offers API methods","Group","Fields- Variables which can only be accessed from an object returned by a constructor","children","childrenUI"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"containing","p":["Signature","cp.ui.Group:containing(...) - cp.ui.Group.Builder","Type","Function","Description","Returns a Builder with the Element initializers for the children in the group.","Parameters","... - A variable list of Element initializers, one for each child.","Returns","The Group.Builder","Notes"]},{"l":"matches","p":["Signature","cp.ui.Group.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"Group","p":["Signature","cp.ui.Group(parent, uiFinder[, contentsClass]) - Alert","Type","Constructor","Description","Creates a new Group instance.","Parameters","parent - The parent object. uiFinder - A function which will return the hs.axuielement when available.--- - Anything else","Returns","A new Group object.","Notes"]},{"l":"Fields"},{"l":"children","p":["Signature","cp.ui.Group.children table of cp.ui.Element","Type","Field","Description","Contains the list of Element children of the group."]},{"l":"childrenUI","p":["Signature","cp.ui.Group.childrenUI cp.prop: table of axuielement","Type","Field","Description","Contains the list of axuielement children of the group."]}],[{"i":"cpuigroupbuilder","l":"cp.ui.Group.Builder","p":["Defines a Group builder."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpuiimage","l":"cp.ui.Image","p":["Represents an AXImage axuielement value.","Extends Element."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Image.matches(element)","Type","Function","Description","Checks if the provided axuielement is an AXImage.","Parameters","element - The axuielement to check.","Returns","true if it is an AXImage, otherwise false.","Notes"]}],[{"i":"cpuilist","l":"cp.ui.List","p":["Represents an AXList axuielement value.","Extends Element."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","List","Methods- API calls which can only be made on an object returned by a constructor","items"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.List.matches(element)","Type","Function","Description","Checks if the provided axuielement is an AXList.","Parameters","element - The axuielement to check.","Returns","true if it is an AXList, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"List","p":["Signature","cp.ui.List(parent, uiFinder, itemAdaptorFn)","Type","Constructor","Description","Creates a new List.","Parameters","parent - The parent table. Should have a isShowing property. uiFinder - The function or cp.prop that provides the current hs.axuielement. itemAdaptorFn - Item adapter function","Returns","The new List instance.","Notes"]},{"l":"Methods"},{"l":"items","p":["Signature","cp.ui.List:items() - table of values","Type","Method","Description","Returns the children as items, as adapted by the itemAdaptor in the constructor","Parameters","None","Returns","A table","Notes"]}],[{"i":"cpuimenu","l":"cp.ui.Menu","p":["UI for AXMenus."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","Menu","Methods- API calls which can only be made on an object returned by a constructor","cancel","doCancel","doSelectItem","doSelectValue"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Menu.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"Menu","p":["Signature","cp.ui.Menu(parent, uiFinder) - Menu","Type","Constructor","Description","Creates a new Menu instance.","Parameters","parent - The parent object. uiFinder - A function which will return the hs.axuielement when available.","Returns","A new Menu object.","Notes"]},{"l":"Methods"},{"l":"cancel","p":["Signature","cp.ui.Menu:cancel() - self","Type","Method","Description","Closes a menu.","Parameters","None","Returns","Self","Notes"]},{"l":"doCancel","p":["Signature","cp.ui.Menu:doCancel(value) - cp.rx.go.Statement","Type","Method","Description","A Statement that will cancel a menu.","Parameters","None","Returns","the Statement.","Notes"]},{"l":"doSelectItem","p":["Signature","cp.ui.Menu:doSelectItem(index) - cp.rx.go.Statement","Type","Method","Description","A Statement that will select an item on the MenuButton by index.","Parameters","index - The index number of the item to match.","Returns","the Statement.","Notes"]},{"l":"doSelectValue","p":["Signature","cp.ui.Menu:doSelectValue(pattern[, altPattern]) - cp.rx.go.Statement","Type","Method","Description","A Statement that will select an item on the Menu by value.","Parameters","pattern - The pattern to match.[altPattern] - An optional alternate pattern to match if the first pattern fails.","Returns","the Statement.","Notes"]}],[{"i":"cpuimenubutton","l":"cp.ui.MenuButton","p":["Menu Button Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","doPress","doSelectItem","doSelectItemMatching","doSelectValue","doShowMenu","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getTitle","getValue","loadLayout","matches","MenuButton","menuUI","Methods- API calls which can only be made on an object returned by a constructor","press","saveLayout","selectItem","selectItemMatching","setValue","show","title","value"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.MenuButton.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"MenuButton","p":["Signature","cp.ui.MenuButton(parent, uiFinder) - MenuButton","Type","Constructor","Description","Creates a new MenuButton.","Parameters","parent - The parent object. Should have an isShowing property. uiFinder - A cp.prop or function which will return a hs.axuielement, or nil if it's not available.","Returns","Notes"]},{"l":"Fields"},{"l":"menuUI","p":["Signature","cp.ui.MenuButton.menuUI cp.prop: hs.axuielement; read-only; live?","Type","Field","Description","Returns the AXMenu for the MenuButton if it is currently visible."]},{"l":"title","p":["Signature","cp.ui.MenuButton.title cp.prop: string; read-only","Type","Field","Description","Returns the title for the MenuButton."]},{"l":"value","p":["Signature","cp.ui.MenuButton.value cp.prop: anything","Type","Field","Description","Returns or sets the current MenuButton value."]},{"l":"Methods"},{"l":"doPress","p":["Signature","cp.ui.MenuButton:doPress() - cp.rx.go.Statement","Type","Method","Description","A Statement that presses the MenuButton.","Parameters","None","Returns","The Statement","Notes"]},{"l":"doSelectItem","p":["Signature","cp.ui.MenuButton:doSelectItem(index) - cp.rx.go.Statement","Type","Method","Description","A Statement that will select an item on the MenuButton by index.","Parameters","index - The index number of the item to match.","Returns","the Statement.","Notes"]},{"l":"doSelectItemMatching","p":["Signature","cp.ui.MenuButton:doSelectItemMatching(pattern[, altPattern]) - cp.rx.go.Statement","Type","Method","Description","A Statement that will select an item on the MenuButton by pattern.","Parameters","pattern - The pattern to match.[altPattern] - An optional alternate pattern to match if the first pattern fails.","Returns","the Statement.","Notes"]},{"l":"doSelectValue","p":["Signature","cp.ui.MenuButton:doSelectValue(value) - cp.rx.go.Statement","Type","Method","Description","A Statement that will select an item on the MenuButton by value.","Parameters","value - The value of the item to match.","Returns","the Statement.","Notes"]},{"l":"doShowMenu","p":["Signature","cp.ui.MenuButton:doShowMenu() - cp.rx.go.Statement","Type","Method","Description","A Statement that presses the MenuButton if the menu is not showing.","Parameters","None","Returns","The Statement","Notes"]},{"l":"getTitle","p":["Signature","cp.ui.MenuButton:getTitle() - string | nil","Type","Method","Description","Gets the MenuButton title.","Parameters","None","Returns","The MenuButton title as string, or nil if the title cannot be determined.","Notes"]},{"l":"getValue","p":["Signature","cp.ui.MenuButton:getValue() - string | nil","Type","Method","Description","Gets the MenuButton value.","Parameters","None","Returns","The MenuButton value as string, or nil if the value cannot be determined.","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.MenuButton:loadLayout(layout) - none","Type","Method","Description","Loads a MenuButton layout.","Parameters","layout - A table containing the MenuButton layout settings - created using saveLayout.","Returns","None","Notes"]},{"l":"press","p":["Signature","cp.ui.MenuButton:press() - self","Type","Method","Description","Presses the MenuButton.","Parameters","None","Returns","self","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.MenuButton:saveLayout() - table","Type","Method","Description","Saves the current MenuButton layout to a table.","Parameters","None","Returns","A table containing the current MenuButton Layout.","Notes"]},{"l":"selectItem","p":["Signature","cp.ui.MenuButton:selectItem(index) - boolean","Type","Method","Description","Select an item on the MenuButton by index.","Parameters","index - The index of the item you want to select.","Returns","true if successfully selected, otherwise false.","Notes"]},{"l":"selectItemMatching","p":["Signature","cp.ui.MenuButton:selectItemMatching(pattern) - boolean","Type","Method","Description","Select an item on the MenuButton by pattern.","Parameters","pattern - A pattern used to select the MenuButton item.","Returns","true if successfully selected, otherwise false.","Notes"]},{"l":"setValue","p":["Signature","cp.ui.MenuButton:setValue(value) - self","Type","Method","Description","Sets the MenuButton value.","Parameters","value - The value you want to set the MenuButton to.","Returns","self","Notes"]},{"l":"show","p":["Signature","cp.ui.MenuButton:show() - self","Type","Method","Description","Show's the MenuButton.","Parameters","None","Returns","self","Notes"]}],[{"i":"cpuinotifier","l":"cp.ui.notifier","p":["Supports long-lived 'AX' notifiers. Configure the application to watch, the function that provides the axuielement and then register for the type of notification to watch, along with a function that will get triggered.","For example:"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","notifiersForBundleID","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","app","bundleID","currentElement","debugging","pid","reset","start","update","watchAll","watchFor"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"notifiersForBundleID","p":["Signature","cp.ui.notifier.notifiersForBundleID(bundleID) - table of cp.ui.notifier","Type","Function","Description","Returns the list of cp.ui.notifier instances that have been created for the specified Bundle ID.","Parameters","bundleID - The application Bundle ID being observed. E.g. \"com.apple.FinalCut\".","Returns","A table of cp.ui.notifier instances.","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.ui.notifier.new(bundleID, elementFinderFn) - cp.ui.notifier","Type","Constructor","Description","Creates a new cp.ui.notifier instance with the specified bundle ID and a function that returns the element being observed.","Parameters","bundleID - The application Bundle ID being observed. E.g. \"com.apple.FinalCut\". elementFinderFn - The function that will return the axuielement to observe.","Returns","A new cp.ui.notifier instance.","Notes","The function has a signature of function() - hs.axuielement. It simply returns the current element being observed, or nil if none is available. The function will be called multiple times over the life of the notifier."]},{"l":"Methods"},{"l":"app","p":["Signature","cp.ui.notifier:app() - hs.application","Type","Method","Description","Returns the current hs.application instance for the app this notifier tracks. May be nil if the application is not running.","Parameters","None","Returns","The running hs.application for the notifier's bundleID, or nil.","Notes"]},{"l":"bundleID","p":["Signature","cp.ui.notifier:bundleID()","Type","Method","Description","Returns the application 'bundle ID' that this notifier is tracking.","Parameters","None","Returns","The application 'bundle ID' string (e.g. \"com.apple.FinalCut\")","Notes"]},{"l":"currentElement","p":["Signature","cp.ui.notifier:currentElement() - hs.axuielement","Type","Method","Description","Returns the current axuielement being observed.","Parameters","None","Returns","The axuielement, or nil if not available.","Notes"]},{"l":"debugging","p":["Signature","cp.ui.notifier:debugging([enabled]) - boolean","Type","Method","Description","Enables/disables and reports current debugging status. When enabled, a message will be output for each known notification received.","Parameters","enabled - If true, debugging notifications will be emitted. If false, it will be disabled. If not provided, no change is made.","Returns","true if currently debugging, false otherwise.","Notes"]},{"l":"pid","p":["Signature","cp.ui.notifier:pid() - number","Type","Method","Description","Returns the PID for the application being observed, or nil if it's not running.","Parameters","None","Returns","The PID, or nil.","Notes"]},{"l":"reset","p":["Signature","cp.ui.notifier:reset() - self","Type","Method","Description","Resets the notifier","Parameters","None","Returns","Self","Notes"]},{"l":"start","p":["Signature","cp.ui.notifier:start() - self","Type","Method","Description","Stops notifying watchers when events happen.","Parameters","None","Returns","The cp.ui.notifier instance.","Notes"]},{"l":"update","p":["Signature","cp.ui.notifier:update([force]) - self","Type","Method","Description","Updates any watchers to use the current axuielement.","Parameters","force - If true, the notifier will be updated even if the element has not changed since the last update. Defaults to false.","Returns","The cp.ui.notifier instance.","Notes"]},{"l":"watchAll","p":["Signature","cp.ui.notifier:watchAll(callbackFn) - self","Type","Method","Description","Registers the callback as a watcher for all standard notifications for the current axuielement.","Parameters","callbackFn - the function to call when the notification happens.","Returns","The cp.ui.notifier instance.","Notes","This should generally just be used for debugging purposes. It's best to use watchFor[#watchFor] in most cases. The callback function should expect 3 arguments and return none. The arguments passed to the callback will be as follows: the hs.axuielement object for the accessibility element which generated the notification. a string with the notification type. A table containing key-value pairs with more information about the notification, if provided. Commonly this will be an empty table."]},{"l":"watchFor","p":["Signature","cp.ui.notifier:watchFor(notification, callbackFn) - self","Type","Method","Description","Registers a function to get called whenever the specified notification type is triggered for the current axuielement.","Parameters","notifications - The string or table of strings with the notification type(s) to watch for (e.g. \"AXValueChanged\"). callbackFn - The function to call when the matching notification is happens.","Returns","The cp.ui.notifier instance.","Notes","The callback function should expect 3 arguments and return none. The arguments passed to the callback will be as follows: the hs.axuielement object for the accessibility element which generated the notification. a string with the notification type. A table containing key-value pairs with more information about the notification, if provided. Commonly this will be an empty table."]}],[{"i":"cpuioldoutline","l":"cp.ui.OldOutline","p":["Represents an AXOutline axuielement."]},{"l":"API Overview","p":["childrenUI","columns","columnsUI","Constructors- API calls which return an object, typically one that offers API methods","createColumn","createRow","fetchColumn","fetchRow","fetchRows","filterRows","Functions- API calls offered directly by the extension","matches","Methods- API calls which can only be made on an object returned by a constructor","OldOutline","rows","rowsUI"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.OldOutline.matches(element) - boolean","Type","Function","Description","Checks if the element is an Outline.","Parameters","element - An element to check","Returns","A boolean","Notes"]},{"l":"Constructors"},{"l":"OldOutline","p":["Signature","cp.ui.OldOutline(parent, uiFinder) - cp.ui.OldOutline","Type","Constructor","Description","Creates a new Outline with the specified parent and uiFinder.","Parameters","parent - The parent instance. uiFinder - A function or a cp.prop which will return the AXOutline axuielement.","Returns","The new Outline instance.","Notes"]},{"l":"Methods"},{"l":"childrenUI","p":["Signature","cp.ui.OldOutline:childrenUI() - table","Type","Method","Description","Provides a table containing the axuielement s which are children of the outline.","Parameters","None","Returns","A table","Notes"]},{"l":"columns","p":["Signature","cp.ui.OldOutline:columns() - table of cp.ui.Columns","Type","Method","Description","Returns the list of Column s in this Outline.","Parameters","None","Returns","A table","Notes"]},{"l":"columnsUI","p":["Signature","cp.ui.OldOutline:columnsUI() - table","Type","Method","Description","Provides a table containing the axuielement s which are columns of the outline.","Parameters","None","Returns","A Table","Notes"]},{"l":"createColumn","p":["Signature","cp.ui.OldOutline:createColumn(columnUI) - cp.ui.OldColumn","Type","Method","Description","Attempts to create a new Column with the provided columnUI axuielement. If there is a problem, an error is thrown.","Parameters","columnUI - the AXColumn axuielement to create a Column for.","Returns","The Column or an error if a problem occurred.","Notes","Subclasses which want to provide a custom Column implementation should override this method."]},{"l":"createRow","p":["Signature","cp.ui.OldOutline:createRow(rowUI) - cp.ui.OldRow","Type","Method","Description","Attempts to create a new Row with the provided rowUI axuielement. If there is a problem, an error is thrown.","Parameters","rowUI - the AXRow axuielement to create a Row for.","Returns","The Row or an error if a problem occurred.","Notes","Subclasses which want to provide a custom Row implementation should override this method."]},{"l":"fetchColumn","p":["Signature","cp.ui.OldOutline:fetchColumn(columnsUI) - table of cp.ui.Columns","Type","Method","Description","Returns a table of the same length as columnsUI.","Parameters","columnsUI - The list of AXColumn axuielement s to find.","Returns","A table with the same number of elements, containing the matching Column instances.","Notes","If provided items in the table are not valid columns in this table, then nil will be put in the matching index. Note that this will break the standard #/looping behaviour for tables at that point."]},{"l":"fetchRow","p":["Signature","cp.ui.OldOutline:fetchRow(rowUI) - cp.ui.OldRow or nil","Type","Method","Description","Returns the Row that represents the provided rowUI, if it is actually present in the Outline.","Parameters","rowUI - The axuielement for the AXRow to find a Row for.","Returns","The Row, or nil if the rowUI is not in this Outline.","Notes"]},{"l":"fetchRows","p":["Signature","cp.ui.OldOutline:fetchRows(rowsUI) - table of cp.ui.OldRows","Type","Method","Description","Returns a table of the same length as rowsUI.","Parameters","rowsUI - The list of AXRow axuielement s to find.","Returns","A table with the same number of elements, containing the matching Row instances.","Notes","If provided items in the table are not valid rows in this table, then nil will be put in the matching index. Note that this will break the standard #/looping behaviour for tables at that point."]},{"l":"filterRows","p":["Signature","cp.ui.OldOutline:filterRows(matcherFn) - table of cp.ui.OldRows or nil","Type","Method","Description","Returns a table only containing Row s which pass the predicate matcherFn. The function is passed the row and returns a boolean.","Parameters","matcherFn - the function that will accept a Row and return a boolean.","Returns","A table of Row s, or nil if no UI is currently available.","Notes"]},{"l":"rows","p":["Signature","cp.ui.OldOutline:rows() - table of cp.ui.OldRow or nil","Type","Method","Description","Provides a table with the list of cp.ui.OldRow elements for the rows.","Parameters","None","Returns","A table containing the list of Row s in the Outline, or nil if the Outline is not presently available.","Notes"]},{"l":"rowsUI","p":["Signature","cp.ui.OldOutline:rowsUI() - table of axuielement","Type","Method","Description","Provides a table containing the axuielement s which are rows in the outline.","Parameters","None","Returns","A table","Notes"]}],[{"i":"cpuioldrow","l":"cp.ui.OldRow","p":["Represents an AXRow axuielement."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","OldRow","Fields- Variables which can only be accessed from an object returned by a constructor","disclosing","disclosureLevel","index","selected","Methods- API calls which can only be made on an object returned by a constructor","disclosedByRow","disclosedRows","matches"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"OldRow","p":["Signature","cp.ui.OldRow(parent, uiFinder) - cp.ui.OldRow","Type","Constructor","Description","Creates a new Row instance with the specified parent and uiFinder.","Parameters","parent - the parent Element. uiFinder - a function or cp.prop containing the axuielement","Returns","The new Row.","Notes"]},{"l":"Fields"},{"l":"disclosing","p":["Signature","cp.ui.OldRow.disclosing cp.prop: boolean","Type","Field","Description","Indicates if the Row is disclosing other Rows."]},{"l":"disclosureLevel","p":["Signature","cp.ui.OldRow.disclosureLevel cp.prop: number; read-only","Type","Field","Description","The depth of disclosure. 0 is the top level."]},{"l":"index","p":["Signature","cp.ui.OldRow.index cp.prop: number; read-only","Type","Field","Description","The numeric index of this row in the overall container, with 0 being the first item."]},{"l":"selected","p":["Signature","cp.ui.OldRow.selected cp.prop: boolean","Type","Field","Description","Indicates if the row is currently selected. May be set."]},{"l":"Methods"},{"l":"disclosedByRow","p":["Signature","cp.ui.OldRow:disclosedByRow() - cp.ui.OldRow","Type","Method","Description","The Row which is disclosing this Row.","Parameters","None","Returns","A cp.ui.OldRow object","Notes"]},{"l":"disclosedRows","p":["Signature","cp.ui.OldRow:disclosedRows() - table of cp.ui.OldRow or nil","Type","Method","Description","If available, returns a table of Row s that are disclosed by this Row. If this row is currently unavailable, nil is returned.","Parameters","None","Returns","The table of Rows, or nil.","Notes"]},{"l":"matches","p":["Signature","cp.ui.OldRow.matches(element) - boolean","Type","Method","Description","Checks if the element is a Row.","Parameters","element - the axuielement to check.","Returns","true if it matches, otherwise false.","Notes"]}],[{"i":"cpuioldtable","l":"cp.ui.OldTable","p":["Represents an AXTable in the Apple Accessibility UX API."]},{"l":"API Overview","p":["cellTextValue","cellTextValueIs","columnsUI","Constructors- API calls which return an object, typically one that offers API methods","contentUI","deselectAll","deselectRow","deselectRowAt","discloseRow","Fields- Variables which can only be accessed from an object returned by a constructor","findCellUI","findColumnIndex","findRow","Functions- API calls offered directly by the extension","horizontalScrollBarUI","is","isFocused","loadLayout","matches","matchesContent","Methods- API calls which can only be made on an object returned by a constructor","OldTable","rowsUI","saveLayout","selectAll","selectedRowsUI","selectRow","selectRowAt","showRow","showRowAt","toCSV","topRowsUI","verticalScrollBarUI","viewFrame","visitRow"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"cellTextValue","p":["Signature","cp.ui.OldTable.cellTextValue(cell) - boolean","Type","Function","Description","Returns the cell's text value.","Parameters","cell- The cell to check","Returns","The combined text value of the cell.","Notes"]},{"l":"cellTextValueIs","p":["Signature","cp.ui.OldTable.cellTextValueIs(cell, value) - boolean","Type","Function","Description","Checks if the cell's text value equals value.","Parameters","cell- The cell to check value- The text value to compare.","Returns","true if the cell text value equals the provided value.","Notes"]},{"l":"discloseRow","p":["Signature","cp.ui.OldTable.discloseRow(row) - boolean","Type","Function","Description","Discloses the row, if possible.","Parameters","row- The row to disclose","Returns","true if the row is disclosable and is now expanded.","Notes"]},{"l":"findRow","p":["Signature","cp.ui.OldTable.findRow(rows, names) - axuielement","Type","Function","Description","Finds the row at the sub-level named in the names table and returns it.","Parameters","rows- The array of rows to process. names- The array of names to navigate down","Returns","The row that was visited, or nil if not.","Notes"]},{"l":"is","p":["Signature","cp.ui.OldTable.is(thing) - boolean","Type","Function","Description","Checks if the thing is a Table.","Parameters","thing- The thing to check","Returns","true if the thing is a Table instance.","Notes"]},{"l":"matches","p":["Signature","cp.ui.OldTable.matches(element)","Type","Function","Description","Checks if the element is a valid table.","Parameters","element- The element to check.","Returns","true if it matches.","Notes"]},{"l":"matchesContent","p":["Signature","cp.ui.OldTable.matchesContent(element) - boolean","Type","Function","Description","Checks if the element is a valid table content element.","Parameters","element- The element to check","Returns","true if the element is a valid content element.","Notes"]},{"l":"visitRow","p":["Signature","cp.ui.OldTable.visitRow(rows, names) - axuielement","Type","Function","Description","Selects the row at the sub-level named in the names table.","Parameters","rows- The array of rows to process. names- The array of names to navigate down","Returns","The row that was visited, or nil if not.","Notes"]},{"l":"Constructors"},{"l":"OldTable","p":["Signature","cp.ui.OldTable(parent, uiFinder) - self","Type","Constructor","Description","Creates a new Table.","Parameters","parent- The parent object. uiFinder- A function or cp.prop which will return the axuielement that this table represents.","Returns","A new Table instance.","Notes"]},{"l":"Fields"},{"l":"contentUI","p":["Signature","cp.ui.OldTable.contentUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the axuielement that contains the actual rows."]},{"l":"horizontalScrollBarUI","p":["Signature","cp.ui.OldTable.horizontalScrollBarUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The horizontal scroll bar UI element, if present."]},{"l":"isFocused","p":["Signature","cp.ui.OldTable.isFocused cp.prop: boolean; read-only","Type","Field","Description","Returns true if the table is focused by the user."]},{"l":"verticalScrollBarUI","p":["Signature","cp.ui.OldTable.verticalScrollBarUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The vertical scroll bar UI element, if present."]},{"l":"Methods"},{"l":"columnsUI","p":["Signature","cp.ui.OldTable:columnsUI() - table of axuielements | nil","Type","Method","Description","Return a list of column headers, if present.","Parameters","None","Returns","Table of column headers. If the table is visible but no column headers are defined, an empty table is returned. If it's not visible, nil is returned.","Notes"]},{"l":"deselectAll","p":["Signature","cp.ui.OldTable:deselectAll(rowUI) - boolean","Type","Method","Description","Deselects the specified rows. If rowsUI is nil, then all rows will be deselected.","Parameters","rowUI - A table of hs.axuielement objects for the rows you want to deselect.","Returns","true if successful, otherwise false.","Notes"]},{"l":"deselectRow","p":["Signature","cp.ui.OldTable:deselectRow(rowUI) - boolean","Type","Method","Description","Deselect a specific row.","Parameters","rowUI - The hs.axuielement object of the row you want to deselect.","Returns","true if successful, otherwise false.","Notes"]},{"l":"deselectRowAt","p":["Signature","cp.ui.OldTable:deselectRowAt(index) - boolean","Type","Method","Description","Deselects a row at a specific index.","Parameters","index - The index of the row you wish to deselect.","Returns","true if successful, otherwise false.","Notes"]},{"l":"findCellUI","p":["Signature","cp.ui.OldTable:findCellUI(rowNumber, columnId) - hs.axuielement| nil","Type","Method","Description","Finds a specific Cell UI.","Parameters","rowNumber - The row number. columnId - The Column ID.","Returns","A hs.axuielement object for the cell, or nil if the cell cannot be found.","Notes"]},{"l":"findColumnIndex","p":["Signature","cp.ui.OldTable:findColumnIndex(id) - number | nil","Type","Method","Description","Finds the Column Index based on an AXIdentifier ID.","Parameters","id - The AXIdentifier of the column index you want to find.","Returns","A column index as a number, or nil if no index can be found.","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.OldTable:loadLayout(layout) - none","Type","Method","Description","Loads a Table layout.","Parameters","layout - A table containing the Table layout settings - created using cp.ui.OldTable:saveLayout().","Returns","None","Notes"]},{"l":"rowsUI","p":["Signature","cp.ui.OldTable:rowsUI([filterFn]) - table of axuielements | nil","Type","Method","Description","Returns the list of rows in the table. An optional filter function may be provided. It will be passed a single AXRow element and should return true if the row should be included.","Parameters","filterFn- An optional function that will be called to check if individual rows should be included. If not provided, all rows are returned.","Returns","Table of rows. If the table is visible but no rows match, it will be an empty table, otherwise it will be nil.","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.OldTable:saveLayout() - table","Type","Method","Description","Saves the current Table layout to a table.","Parameters","None","Returns","A table containing the current Table Layout.","Notes"]},{"l":"selectAll","p":["Signature","cp.ui.OldTable:selectAll(rowUI) - boolean","Type","Method","Description","Selects the specified rows. If rowsUI is nil, then all rows will be selected.","Parameters","rowUI - A table of hs.axuielement objects for the rows you want to select.","Returns","true if successful, otherwise false.","Notes"]},{"l":"selectedRowsUI","p":["Signature","cp.ui.OldTable:selectedRowsUI() - table of axuielements | nil","Type","Method","Description","Return a table of selected row UIs.","Parameters","None","Returns","Table of hs.axuielement objects, or nil if none could be found.","Notes"]},{"l":"selectRow","p":["Signature","cp.ui.OldTable:selectRow(rowUI) - boolean","Type","Method","Description","Select a specific row.","Parameters","rowUI - The hs.axuielement object of the row you want to select.","Returns","true if successful, otherwise false.","Notes"]},{"l":"selectRowAt","p":["Signature","cp.ui.OldTable:selectRowAt(index) - boolean","Type","Method","Description","Select a row at a specific index.","Parameters","index - The index of the row you wish to select.","Returns","true if successful, otherwise false.","Notes"]},{"l":"showRow","p":["Signature","cp.ui.OldTable:showRow(rowUI) - boolean","Type","Method","Description","Shows a specific row.","Parameters","rowUI - The hs.axuielement object of the row you want to show.","Returns","true if successful, otherwise false.","Notes"]},{"l":"showRowAt","p":["Signature","cp.ui.OldTable:showRowAt(index) - boolean","Type","Method","Description","Shows a row at a specific index.","Parameters","index - The index of the row you wish to show.","Returns","true if successful, otherwise false.","Notes"]},{"l":"toCSV","p":["Signature","cp.ui.OldTable:toCSV() - string | nil","Type","Method","Description","Gets the contents of the table and formats it as a CSV string.","Parameters","None","Returns","A string or nil if an error occurs.","Notes"]},{"l":"topRowsUI","p":["Signature","cp.ui.OldTable:topRowsUI(filterFn) - table of axuielements | nil","Type","Method","Description","Returns a list of top-level rows in the table. An optional filter function may be provided. It will be passed a single AXRow element and should return true if the row should be included.","Parameters","filterFn- An optional function that will be called to check if individual rows should be included. If not provided, all rows are returned.","Returns","Table of rows. If the table is visible but no rows match, it will be an empty table, otherwise it will be nil.","Notes"]},{"l":"viewFrame","p":["Signature","cp.ui.OldTable:viewFrame() - hs.geometry rect","Type","Method","Description","Returns the Table frame.","Parameters","None","Returns","The frame in the form of a hs.geometry rect object.","Notes"]}],[{"i":"cpuioutline","l":"cp.ui.Outline","p":["A Outline UI element. It extends GridElement, so will inherit all of its properties and methods."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Outline.matches(element) - boolean","Type","Function","Description","Checks if the element is a Outline.","Parameters","element - An axuielementObject to check.","Returns","A boolean","Notes"]}],[{"i":"cpuipopover","l":"cp.ui.Popover","p":["UI Group."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","Popover","Methods- API calls which can only be made on an object returned by a constructor","doHide","hide"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Popover.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"Popover","p":["Signature","cp.ui.Popover(parent, uiFinder) - Popover","Type","Constructor","Description","Creates a new Popover instance.","Parameters","parent - The parent object. uiFinder - A function which will return the hs.axuielement when available.","Returns","A new Popover object.","Notes"]},{"l":"Methods"},{"l":"doHide","p":["Signature","cp.ui.Popover:doHide() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement which will hide the popover.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"hide","p":["Signature","cp.ui.Popover:hide() - Popover","Type","Method","Description","Hides a popover.","Parameters","None","Returns","Self","Notes"]}],[{"i":"cpuipopupbutton","l":"cp.ui.PopUpButton","p":["Pop Up Button Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","doPress","doSelectItem","doSelectValue","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getValue","loadLayout","matches","menuUI","Methods- API calls which can only be made on an object returned by a constructor","PopUpButton","press","saveLayout","selectItem","setValue","value"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.PopUpButton.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"PopUpButton","p":["Signature","cp.ui.PopUpButton(parent, uiFinder) - cp.ui.PopUpButton","Type","Constructor","Description","Creates a new PopUpButton.","Parameters","parent - The parent table. Should have a isShowing property. uiFinder - The function or cp.prop that provides the current hs.axuielement.","Returns","The new PopUpButton instance.","Notes"]},{"l":"Fields"},{"l":"menuUI","p":["Signature","cp.ui.PopUpButton.menuUI cp.prop: hs.axuielement; read-only; live?","Type","Field","Description","Returns the AXMenu for the PopUpMenu if it is currently visible."]},{"l":"value","p":["Signature","cp.ui.PopUpButton.value cp.prop: anything; live","Type","Field","Description","Returns or sets the current PopUpButton value."]},{"l":"Methods"},{"l":"doPress","p":["Signature","cp.ui.PopUpButton:doPress() - cp.rx.go.Statement","Type","Method","Description","A Statement that presses the PopUpButton.","Parameters","None","Returns","The Statement","Notes"]},{"l":"doSelectItem","p":["Signature","cp.ui.PopUpButton:doSelectItem(index) - cp.rx.go.Statement","Type","Method","Description","A Statement that will select an item on the PopUpButton by index.","Parameters","index - The index number of the item you want to select.","Returns","the Statement.","Notes"]},{"l":"doSelectValue","p":["Signature","cp.ui.PopUpButton:doSelectValue(value, [overrideValue]) - cp.rx.go.Statement","Type","Method","Description","A Statement that will select an item on the PopUpButton by value.","Parameters","value - The value of the item to match. overrideValue - This optional value overides the above value for the initial compare as a workaround for PopUp that have titles that don't update correctly.","Returns","the Statement.","Notes"]},{"l":"getValue","p":["Signature","cp.ui.PopUpButton:getValue() - string | nil","Type","Method","Description","Gets the PopUpButton value.","Parameters","None","Returns","The PopUpButton value as string, or nil if the value cannot be determined.","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.PopUpButton:loadLayout(layout) - none","Type","Method","Description","Loads a PopUpButton layout.","Parameters","layout - A table containing the PopUpButton layout settings - created using saveLayout.","Returns","None","Notes"]},{"l":"press","p":["Signature","cp.ui.PopUpButton:press() - self","Type","Method","Description","Presses the PopUpButton.","Parameters","None","Returns","self","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.PopUpButton:saveLayout() - table","Type","Method","Description","Saves the current PopUpButton layout to a table.","Parameters","None","Returns","A table containing the current PopUpButton Layout.","Notes"]},{"l":"selectItem","p":["Signature","cp.ui.PopUpButton:selectItem(index) - self","Type","Method","Description","Select an item on the PopUpButton by index.","Parameters","index - The index of the item you want to select.","Returns","self","Notes"]},{"l":"setValue","p":["Signature","cp.ui.PopUpButton:setValue(value) - self","Type","Method","Description","Sets the PopUpButton value.","Parameters","value - The value you want to set the PopUpButton to.","Returns","self","Notes"]}],[{"i":"cpuipropertyrow","l":"cp.ui.PropertyRow","p":["Represents a single property row, typically in a Property Inspector."]},{"l":"API Overview","p":["app","children","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","doHide","doShow","extend","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","hide","intersectBuffer","isParent","label","labelKeys","labelUI","matches","Methods- API calls which can only be made on an object returned by a constructor","parent","parentUIFinder","prepareParent","propertiesUI","PropertyRow","reset","show","UI"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"intersectBuffer","p":["Signature","cp.ui.PropertyRow.intersectBuffer","Type","Constant","Description","Defines the buffer for intersections with the labelUI."]},{"l":"Functions"},{"l":"isParent","p":["Signature","cp.ui.PropertyRow.isParent(parent) - boolean","Type","Function","Description","Checks if the parent has been prepared via prepareParent.","Parameters","None","Returns","true if the parent is prepared.","Notes"]},{"l":"matches","p":["Signature","cp.ui.PropertyRow.matches(element) - boolean","Type","Function","Description","Checks if the provided axuielement could be a property row.","Parameters","element - The element to check.","Returns","true if the element could be a property row.","Notes","This does not guarantee that it is a property row element, just that it could be."]},{"l":"parentUIFinder","p":["Signature","cp.ui.PropertyRow.parentUIFinder(parent) - cp.prop","Type","Function","Description","Returns the cp.prop which finds the hs.axuielement that contains property rows from the parent. This needs to be configured first by calling the prepareParent function with the parent and finder function.","Parameters","parent - The parent which has a finder assigned.","Returns","The cp.prop which provides access to the finder, or nil.","Notes"]},{"l":"prepareParent","p":["Signature","cp.ui.PropertyRow.prepareParent(parent, uiFinder) - none","Type","Function","Description","Call this to make parent table ready to be a parent of PropertyRow s. Essentially, this lets PropertyRow instances ask the parent for the hs.axuielement that contains the property row details.","Parameters","parent - The parent table. uiFinder - The function or cp.prop which will be called to find the parent UI element. Functions will be passed the parent when being executed.","Returns","None","Notes"]},{"l":"Constructors"},{"l":"PropertyRow","p":["Signature","cp.ui.PropertyRow(parent, labelKey[, index]) - cp.ui.PropertyRow","Type","Constructor","Description","Creates a new PropertyRow with the specified parent and label key.","Parameters","parent - The parent object. labelKey - The key of the label that the row will map to. index - The row number with the same label to get. Defaults to 1.","Returns","The new PropertyRow instance.","Notes","If you have more than one row with the same label, specify the index- specifying 2 will match with the second instance, for example."]},{"l":"Fields"},{"l":"label","p":["Signature","cp.ui.PropertyRow.label cp.prop: string; read-only","Type","Field","Description","The label of the property row, in the current langauge."]},{"l":"labelUI","p":["Signature","cp.ui.PropertyRow.labelUI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the axuielement for the label UI."]},{"l":"propertiesUI","p":["Signature","cp.ui.PropertyRow.propertiesUI cp.prop: hs.axuielement; read-only","Type","Field","Description","The axuielement from the parent that contains the properties."]},{"l":"reset","p":["Signature","cp.ui.PropertyRow.reset cp.ui.Button","Type","Field","Description","The reset button for the row, which may or may not actually exist."]},{"l":"UI","p":["Signature","cp.ui.PropertyRow.UI cp.prop: hs.axuielement; read-only","Type","Field","Description","Returns the axuielement for the row."]},{"l":"Methods"},{"l":"app","p":["Signature","cp.ui.PropertyRow:app() - App","Type","Method","Description","Returns the app instance.","Parameters","None","Returns","Notes"]},{"l":"children","p":["Signature","cp.ui.PropertyRow:children() - table | nil","Type","Method","Description","Gets a table of children for the Property Row.","Parameters","None","Returns","A table of children or nil.","Notes"]},{"l":"doHide","p":["Signature","cp.ui.PropertyRow:doHide() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to hide the PropertyRow.","Parameters","None","Returns","The Statement.","Notes"]},{"l":"doShow","p":["Signature","cp.ui.PropertyRow:doShow() - cp.rx.go.Statement","Type","Method","Description","A Statement that shows the PropertyRow.","Parameters","None","Returns","self","Notes"]},{"l":"extend","p":["Signature","cp.ui.PropertyRow:extend(extendFn) - cp.ui.PropertyRow","Type","Method","Description","This method will call the provided function, passing it the current PropertyRow. This can be used to add addtional tweaks to the row, such as adding custom Elements.","Parameters","extendFn - A function that will be passed the current row.","Returns","The same PropertyRow instance.","Notes"]},{"l":"hide","p":["Signature","cp.ui.PropertyRow:hide() - self","Type","Method","Description","Hides the PropertyRow.","Parameters","None","Returns","self","Notes"]},{"l":"labelKeys","p":["Signature","cp.ui.PropertyRow:labelKeys() - string","Type","Method","Description","Gets the key of the label that the row will map to.","Parameters","None","Returns","string","Notes"]},{"l":"parent","p":["Signature","cp.ui.PropertyRow:parent() - parent","Type","Method","Description","Returns the parent object.","Parameters","None","Returns","Notes"]},{"l":"show","p":["Signature","cp.ui.PropertyRow:show() - self","Type","Method","Description","Shows the PropertyRow.","Parameters","None","Returns","self","Notes"]}],[{"i":"cpuiradiobutton","l":"cp.ui.RadioButton","p":["Radio Button Module.","This represents an hs.axuielement with a AXRadioButton role. It allows checking and modifying the checked status like so:","You can also call instances of RadioButton as a function, which will return the checked status:"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Fields- Variables which can only be accessed from an object returned by a constructor","checked","Methods- API calls which can only be made on an object returned by a constructor","doCheck","doLayout","doPress","doToggle","doUncheck","loadLayout","press","RadioButton","saveLayout","toggle"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.RadioButton.matches(element) - boolean","Type","Function","Description","Checks if the provided hs.axuielement is a RadioButton.","Parameters","element - The axuielement to check.","Returns","true if it's a match, or false if not.","Notes"]},{"l":"Fields"},{"l":"checked","p":["Signature","cp.ui.RadioButton.checked cp.prop: boolean","Type","Field","Description","Indicates if the checkbox is currently checked. May be set by calling as a function with true or false to the function."]},{"l":"Methods"},{"l":"doCheck","p":["Signature","cp.ui.RadioButton:doCheck() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will check the button value when executed, if available at the time. If not an error is sent.","Parameters","None","Returns","The Statement which will toggle the button when executed.","Notes"]},{"l":"doLayout","p":["Signature","cp.ui.RadioButton:doLayout(layout) - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will apply the layout provided, if possible.","Parameters","layout - the table containing the layout configuration. Usually created via the [#saveLayout] method.","Returns","The Statement.","Notes"]},{"l":"doPress","p":["Signature","cp.ui.RadioButton:doPress() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will press the button when executed, if available at the time. If not an error is sent.","Parameters","None","Returns","The Statement which will press the button when executed.","Notes"]},{"l":"doToggle","p":["Signature","cp.ui.RadioButton:doToggle() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will toggle the button value when executed, if available at the time. If not an error is sent.","Parameters","None","Returns","The Statement which will toggle the button when executed.","Notes"]},{"l":"doUncheck","p":["Signature","cp.ui.RadioButton:doUncheck() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will uncheck the button value when executed, if available at the time. If not an error is sent.","Parameters","None","Returns","The Statement which will toggle the button when executed.","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.RadioButton:loadLayout(layout) - nil","Type","Method","Description","Processes the layout table to restore this to match the provided layout.","Parameters","layout - the table of state values to restore to.","Returns","None","Notes"]},{"l":"press","p":["Signature","cp.ui.RadioButton:press() - self","Type","Method","Description","Attempts to press the button. May fail if the UI is not available.","Parameters","None","Returns","The RadioButton instance.","Notes"]},{"l":"RadioButton","p":["Signature","cp.ui.RadioButton(axuielement, function) - RadioButton","Type","Method","Description","Creates a new RadioButton.","Parameters","parent - The parent object. finderFn - A function which will return the hs.axuielement when available.","Returns","The new RadioButton.","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.RadioButton:saveLayout() - table","Type","Method","Description","Returns a table with the button's current state. This can be passed to [#loadLayout] later to restore the original state.","Parameters","None","Returns","The table of the layout state.","Notes"]},{"l":"toggle","p":["Signature","cp.ui.RadioButton:toggle() - self","Type","Method","Description","Toggles the checked status of the button.","Parameters","None","Returns","The RadioButton instance.","Notes"]}],[{"i":"cpuiradiogroup","l":"cp.ui.RadioGroup","p":["Represents an AXRadioGroup, providing utility methods."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","RadioGroup","Fields- Variables which can only be accessed from an object returned by a constructor","optionCount","options","optionsUI","selectedOption","Methods- API calls which can only be made on an object returned by a constructor","doNextOption","doPreviousOption","doSelectOption","nextOption","previousOption"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.RadioGroup.matches(element) - boolean","Type","Function","Description","Checks if the provided axuielement is a RadioGroup.","Parameters","element - The element to check.","Returns","true if the element is a RadioGroup.","Notes"]},{"l":"Constructors"},{"l":"RadioGroup","p":["Signature","cp.ui.RadioGroup(parent, uiFinder[, createOptionFn]) - cp.ui.RadioGroup","Type","Constructor","Description","Creates a new RadioGroup.","Parameters","parent - The parent table. uiFinder - The function which will find the axuielement representing the RadioGroup. createOptionFn - If provided a function that receives the RadioGroup and an axuielement for a given option within the group.","Returns","The new RadioGroup instance.","Notes"]},{"l":"Fields"},{"l":"optionCount","p":["Signature","cp.ui.RadioGroup.optionCount cp.prop: number; read-only","Type","Field","Description","The number of options in the group."]},{"l":"options","p":["Signature","cp.ui.RadioGroup.options table: cp.ui.Element; read-only","Type","Field","Description","A table containing cp.ui.Element available in the radio group.","Returns","The cp.prop of options."]},{"l":"optionsUI","p":["Signature","cp.ui.RadioGroup.optionsUI cp.prop: axuielement; read-only","Type","Field","Description","A cp.prop containing table of axuielement options available in the radio group.","Returns","The cp.prop of options."]},{"l":"selectedOption","p":["Signature","cp.ui.RadioGroup.selectedOption cp.prop: number","Type","Field","Description","The currently selected option number."]},{"l":"Methods"},{"l":"doNextOption","p":["Signature","cp.ui.RadioGroup:doNextOption() - cp.rx.go.Statementboolean","Type","Method","Description","A Statement that selects the next option in the group. Cycles from the last to the first option.","Parameters","None","Returns","The Statement, that resolves to true if successful or sends an error if not.","Notes"]},{"l":"doPreviousOption","p":["Signature","cp.ui.RadioGroup:doPreviousOption() - cp.rx.go.Statementboolean","Type","Method","Description","A Statement that selects the previous option in the group. Cycles from the first to the last item.","Parameters","None","Returns","The Statement, which resolves to true if successful or sends an error if not..","Notes"]},{"l":"doSelectOption","p":["Signature","cp.ui.RadioGroup:doSelectOption(index) - cp.rx.go.Statementboolean","Type","Method","Description","A Statement which will attempt to select the option at the specified index.","Parameters","index - The index to select. Must be between 1 and optionCount.","Returns","The Statement, which will resolve to true if successful or send an error if not.","Notes"]},{"l":"nextOption","p":["Signature","cp.ui.RadioGroup:nextOption() - self","Type","Method","Description","Selects the next option in the group. Cycles from the last to the first option.","Parameters","None","Returns","The RadioGroup.","Notes"]},{"l":"previousOption","p":["Signature","cp.ui.RadioGroup:previousOption() - self","Type","Method","Description","Selects the previous option in the group. Cycles from the first to the last item.","Parameters","None","Returns","The RadioGroup.","Notes"]}],[{"i":"cpuirow","l":"cp.ui.Row","p":["Represents an AXRow axuielement."]},{"l":"Submodules","p":["cp.ui.Row.Builder"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","containing","Constructors- API calls which return an object, typically one that offers API methods","Row","Fields- Variables which can only be accessed from an object returned by a constructor","childrenUI","disclosing","disclosureLevel","index","selected","Methods- API calls which can only be made on an object returned by a constructor","disclosedByRow","disclosedRows","matches"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"containing","p":["Signature","cp.ui.Row:containing(...) - cp.ui.Row.Builder","Type","Function","Description","Returns a Builder with the Element initializers for the items in the row.","Parameters","... - A variable list of Element initializers, one for each item.","Returns","The Row.Builder","Notes"]},{"l":"Constructors"},{"l":"Row","p":["Signature","cp.ui.Row(parent, uiFinder, ...) - cp.ui.Row","Type","Constructor","Description","Creates a new Row instance with the specified parent and uiFinder.","Parameters","parent - the parent Element. uiFinder - a function or cp.prop containing the axuielement... - a variable list of Element initializers, one for each item in the row.","Returns","The new Row.","Notes"]},{"l":"Fields"},{"l":"childrenUI","p":["Signature","cp.ui.Row.childrenUI cp.prop: table of axuielement","Type","Field","Description","Contains the list of axuielement children of the row."]},{"l":"disclosing","p":["Signature","cp.ui.Row.disclosing cp.prop: boolean","Type","Field","Description","Indicates if the Row is disclosing other Rows."]},{"l":"disclosureLevel","p":["Signature","cp.ui.Row.disclosureLevel cp.prop: number; read-only","Type","Field","Description","The depth of disclosure. 0 is the top level."]},{"l":"index","p":["Signature","cp.ui.Row.index cp.prop: number; read-only","Type","Field","Description","The numeric index of this row in the overall container, with 0 being the first item."]},{"l":"selected","p":["Signature","cp.ui.Row.selected cp.prop: boolean","Type","Field","Description","Indicates if the row is currently selected. May be set."]},{"l":"Methods"},{"l":"disclosedByRow","p":["Signature","cp.ui.Row:disclosedByRow() - cp.ui.Row","Type","Method","Description","The Row which is disclosing this Row.","Parameters","None","Returns","A cp.ui.Row object","Notes"]},{"l":"disclosedRows","p":["Signature","cp.ui.Row:disclosedRows() - table of cp.ui.Row or nil","Type","Method","Description","If available, returns a table of Row s that are disclosed by this Row. If this row is currently unavailable, nil is returned.","Parameters","None","Returns","The table of Rows, or nil.","Notes"]},{"l":"matches","p":["Signature","cp.ui.Row.matches(element) - boolean","Type","Method","Description","Checks if the element is a Row.","Parameters","element - the axuielement to check.","Returns","true if it matches, otherwise false.","Notes"]}],[{"i":"cpuirowbuilder","l":"cp.ui.Row.Builder","p":["Defines a Row builder."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"cpuiscrollarea","l":"cp.ui.ScrollArea","p":["A ScrollArea represents an AXScrollArea. They primarily function as a \"portal\" to view a larger area of the contained axuielement within (accessed via the AXContents attribute), and also provide access to the vertical and horizontal scroll bars (accessed via the verticalScrollBar and horizontalScrollBar properties).","The class that wraps the AXContents attribute can be provided via the contentsInit parameter in the constructor. If not provided it defaults to Element.","The ScrollArea also delegates to the contents property, so you can access any properties of the contained Element directly.","For example, if you have a ScrollArea with a contents of a TextField, you can normally access the text value via the TextField.value property. However, if you want to access the text value via the ScrollArea itself, you can do so via the ScrollArea.value property, like so:","It also has a Builder that supports customising an Element Builder to create a ScrollArea with a specified contents Element type. For example, another way to define our ScrollArea that contains a TextField is:","The main advantage of this style is that you can pass the Builder in to other Element types that require an \" Element init\" that will only be provided a parent and UI finder.","This is a subclass of Element."]},{"l":"Submodules","p":["cp.ui.ScrollArea.Builder"]},{"l":"API Overview","p":["childrenUI","Constructors- API calls which return an object, typically one that offers API methods","containing","contents","contentsUI","deselectAll","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","horizontalScrollBar","loadLayout","matches","Methods- API calls which can only be made on an object returned by a constructor","saveLayout","ScrollArea","selectAll","selectChild","selectChildAt","selectedChildrenUI","shiftHorizontalBy","shiftHorizontalTo","shiftVerticalBy","shiftVerticalTo","showChild","showChildAt","verticalScrollBar","viewFrame"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"containing","p":["Signature","cp.ui.ScrollArea:containing(elementInit) - cp.ui.ScrollArea.Builder","Type","Function","Description","A static method that returns a new ScrollArea.Builder.","Parameters","elementInit - An Element initializer.","Returns","A new ScrollArea.Builder instance.","Notes"]},{"l":"matches","p":["Signature","cp.ui.ScrollArea.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"ScrollArea","p":["Signature","cp.ui.ScrollArea(parent, uiFinder[, contentsInit]) - cp.ui.ScrollArea","Type","Constructor","Description","Creates a new ScrollArea.","Parameters","parent - The parent object. uiFinder - A function or cp.prop which will return the hs.axuielement when available. contentsInit - An optional function to initialise the contentsUI. Uses cp.ui.Element by default.","Returns","The new ScrollArea.","Notes"]},{"l":"Fields"},{"l":"contents","p":["Signature","cp.ui.ScrollArea.contents cp.ui.Element","Type","Field","Description","Returns the Element representing the ScrollArea Contents."]},{"l":"contentsUI","p":["Signature","cp.ui.ScrollArea.contentsUI cp.prop: hs.axuielement; read-only; live?","Type","Field","Description","Returns the axuielement representing the Scroll Area Contents, or nil if not available."]},{"l":"horizontalScrollBar","p":["Signature","cp.ui.ScrollArea.horizontalScrollBar cp.ui.ScrollBar","Type","Field","Description","The horizontal ScrollBar."]},{"l":"selectedChildrenUI","p":["Signature","cp.ui.ScrollArea.selectedChildrenUI cp.prop: hs.axuielement; read-only; live?","Type","Field","Description","Returns the axuielement representing the Scroll Area Selected Children, or nil if not available."]},{"l":"verticalScrollBar","p":["Signature","cp.ui.ScrollArea.verticalScrollBar cp.ui.ScrollBar","Type","Field","Description","The vertical ScrollBar."]},{"l":"viewFrame","p":["Signature","cp.ui.ScrollArea.viewFrame cp.prop:table; read-only","Type","Field","Description","A cp.prop reporting the Scroll Area frame as a table containing {x, y, w, h}."]},{"l":"Methods"},{"l":"childrenUI","p":["Signature","cp.ui.ScrollArea:childrenUI(filterFn) - hs.axuielement | nil","Type","Method","Description","Returns the list of axuielement s representing the Scroll Area Contents, sorted top-down, or nil if not available.","Parameters","filterFn - The function which checks if the child matches the requirements.","Returns","The axuielement or nil.","Notes"]},{"l":"deselectAll","p":["Signature","cp.ui.ScrollArea:deselectAll() - self","Type","Method","Description","Deselect all children in a scroll area.","Parameters","None","Returns","Self","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.ScrollArea:loadLayout(layout) - none","Type","Method","Description","Loads a Scroll Area layout.","Parameters","layout - A table containing the ScrollArea layout settings, typically created using saveLayout.","Returns","None","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.ScrollArea:saveLayout() - table","Type","Method","Description","Saves the current Scroll Area layout to a table.","Parameters","None","Returns","A table containing the current Scroll Area Layout.","Notes"]},{"l":"selectAll","p":["Signature","cp.ui.ScrollArea:selectAll(childrenUI) - self","Type","Method","Description","Select all children in a scroll area.","Parameters","childrenUI - A table of hs.axuielement objects.","Returns","Self","Notes"]},{"l":"selectChild","p":["Signature","cp.ui.ScrollArea:selectChild(childUI) - self","Type","Method","Description","Select a specific child within a Scroll Area.","Parameters","childUI - The hs.axuielement object of the child you want to select.","Returns","Self","Notes"]},{"l":"selectChildAt","p":["Signature","cp.ui.ScrollArea:selectChildAt(index) - self","Type","Method","Description","Select a child element in a Scroll Area given a specific index.","Parameters","index - The index of the child you want to select.","Returns","Self","Notes"]},{"l":"shiftHorizontalBy","p":["Signature","cp.ui.ScrollArea:shiftHorizontalBy(amount) - number","Type","Method","Description","Attempts to shift the horizontal scroll bar by the specified amount.","Parameters","amount - The amount to shift","Returns","The actual value of the horizontal scroll bar.","Notes"]},{"l":"shiftHorizontalTo","p":["Signature","cp.ui.ScrollArea:shiftHorizontalTo(value) - number","Type","Method","Description","Attempts to shift the horizontal scroll bar to the specified value.","Parameters","value - The new value (typically between 0 and 1).","Returns","The actual value of the horizontal scroll bar.","Notes"]},{"l":"shiftVerticalBy","p":["Signature","cp.ui.ScrollArea:shiftVerticalBy(amount) - number","Type","Method","Description","Attempts to shift the vertical scroll bar by the specified amount.","Parameters","amount - The amount to shift","Returns","The actual value of the vertical scroll bar.","Notes"]},{"l":"shiftVerticalTo","p":["Signature","cp.ui.ScrollArea:shiftVerticalTo(value) - number","Type","Method","Description","Attempts to shift the vertical scroll bar to the specified value.","Parameters","value - The new value (typically between 0 and 1).","Returns","The actual value of the vertical scroll bar.","Notes"]},{"l":"showChild","p":["Signature","cp.ui.ScrollArea:showChild(childUI) - self","Type","Method","Description","Show's a child element in a Scroll Area.","Parameters","childUI - The hs.axuielement object of the child you want to show.","Returns","Self","Notes"]},{"l":"showChildAt","p":["Signature","cp.ui.ScrollArea:showChildAt(index) - self","Type","Method","Description","Show's a child element in a Scroll Area given a specific index.","Parameters","index - The index of the child you want to show.","Returns","Self","Notes"]}],[{"i":"cpuiscrollareabuilder","l":"cp.ui.ScrollArea.Builder","p":["Builder class for ScrollArea."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","containing"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"containing","p":["Signature","cp.ui.ScrollArea.Builder:containing(contentBuilder) - cp.ui.ScrollArea.Builder","Type","Method","Description","Sets the content Element type/builder to the specified value.","Parameters","contentBuilder - A callable that accepts a parent and uiFinder parameter, and returns an Element instance.","Returns","The Builder instance.","Notes"]}],[{"i":"cpuiscrollbar","l":"cp.ui.ScrollBar","p":["Provides access to AXScrollBar axuielement values."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","Fields- Variables which can only be accessed from an object returned by a constructor","hidden","horizontal","HORIZONTAL_ORIENTATION","loadLayout","matches","Methods- API calls which can only be made on an object returned by a constructor","orientation","saveLayout","ScrollBar","shiftValueBy","value","vertical","VERTICAL_ORIENTATION"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"HORIZONTAL_ORIENTATION","p":["Signature","cp.ui.ScrollBar.HORIZONTAL_ORIENTATION string","Type","Constant","Description","The value for AXOrientation when it is horizontal."]},{"l":"VERTICAL_ORIENTATION","p":["Signature","cp.ui.ScrollBar.VERTICAL_ORIENTATION string","Type","Constant","Description","The value for AXOrientation when it is vertical."]},{"l":"Constructors"},{"l":"ScrollBar","p":["Signature","cp.ui.ScrollBar(parent, uiFinder) - cp.ui.ScrollBar","Type","Constructor","Description","Creates a new ScrollBar instance with the specified parent and uiFinder.","Parameters","parent - the parent object. uiFinder - a function or cp.prop that provides the AXScrollBar axuielement.","Returns","The new ScrollBar.","Notes"]},{"l":"Fields"},{"l":"hidden","p":["Signature","cp.ui.ScrollBar.hidden cp.prop: boolean; read-only, live?","Type","Field","Description","Is true if the ScrollBar is currently hidden."]},{"l":"horizontal","p":["Signature","cp.ui.ScrollBar.horizontal cp.prop: boolean; read-only","Type","Field","Description","Is true if the ScrollBar is horizontal, otherwise false."]},{"l":"orientation","p":["Signature","cp.ui.ScrollBar.orientation cp.prop: string; read-only","Type","Field","Description","The AXOrientation string."]},{"l":"value","p":["Signature","cp.ui.ScrollBar.value cp.prop: number; live?","Type","Field","Description","Is the numeric scroll value, typically between 0.0 and 1.0. May be set."]},{"l":"vertical","p":["Signature","cp.ui.ScrollBar.vertical cp.prop: boolean; read-only","Type","Field","Description","Is true if the ScrollBar is vertical, otherwise false."]},{"l":"Methods"},{"l":"loadLayout","p":["Signature","cp.ui.ScrollBar:loadLayout(layout)","Type","Method","Description","Loads the provided layout table of configuration parameters.","Parameters","layout - the table of parameters.","Returns","Notes"]},{"l":"matches","p":["Signature","cp.ui.ScrollBar.matches(element) - boolean","Type","Method","Description","Checks if the element is a ScrollBar.","Parameters","element - The axuielement being matched.","Returns","true if matches, otherwise false.","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.ScrollBar:saveLayout() - table","Type","Method","Description","Saves the ScrollBar layout configuration.","Parameters","None","Returns","a table with the configuration parameters.","Notes"]},{"l":"shiftValueBy","p":["Signature","cp.ui.ScrollBar:shiftValueBy(amount) - number","Type","Method","Description","Attempts to shift the value by the specified amount.","Parameters","amount - The amount to shift by.","Returns","The new value, or nil if not available.","Notes"]}],[{"i":"cpuisearchfield","l":"cp.ui.SearchField","p":["A TextField with a subrole of AXSearchField."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matchesSearch","Methods- API calls which can only be made on an object returned by a constructor","SearchField"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matchesSearch","p":["Signature","cp.ui.SearchField.matchesSearch(element) - boolean","Type","Function","Description","Checks to see if an element is a AXTextField with a subrole of AXSearchField.","Parameters","element - An axuielementObject to check.","Returns","true if matches, otherwise false.","Notes"]},{"l":"Methods"},{"l":"SearchField","p":["Signature","cp.ui.SearchField(parent, uiFinder[, convertFn]) - cp.ui.SearchField","Type","Method","Description","Creates a new SearchField. They have a parent and a finder function.","Parameters","parent - The parent object. uiFinder - The function will return the axuielement for the SearchField. convertFn - (optional) If provided, will be passed the string value when returning.","Returns","The new SearchField.","Notes","Additionally, an optional convert function can be provided, with the following signature: function(textValue) - anything The value will be passed to the function before being returned, if present. All values passed into value(x) will be converted to a string first via tostring. For example, to have the value be converted into a number, simply use tonumber like this: lua/lililocal numberField = SearchField(parent, function() return ... end, tonumber)/lili"]}],[{"i":"cpuisheet","l":"cp.ui.Sheet","p":["Sheet UI Module."]},{"l":"API Overview","p":["cancel","Constructors- API calls which return an object, typically one that offers API methods","containsText","default","doCancel","doDefault","doHide","doPress","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","hide","matches","Methods- API calls which can only be made on an object returned by a constructor","pressCancel","pressDefault","Sheet","title"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Sheet.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"Sheet","p":["Signature","cp.ui.Sheet(parent, uiFinder) - Sheet","Type","Constructor","Description","Creates a new Sheet instance.","Parameters","parent - The parent object. uiFinder - The UI, either a cp.prop or a function.","Returns","A new Browser object.","Notes"]},{"l":"Fields"},{"l":"cancel","p":["Signature","cp.ui.Sheet.cancel cp.ui.Button","Type","Field","Description","The cancel Button for the Sheet."]},{"l":"default","p":["Signature","cp.ui.Sheet.default cp.ui.Button","Type","Field","Description","The default Button for the Sheet."]},{"l":"title","p":["Signature","cp.ui.Sheet.title cp.prop: string","Type","Field","Description","Gets the title of the sheet."]},{"l":"Methods"},{"l":"containsText","p":["Signature","cp.ui.Sheet:containsText(value[, plain]) - boolean","Type","Method","Description","Checks if there are any child text elements containing the exact text or pattern, from beginning to end.","Parameters","textPattern - The text pattern to check. plain - If true, the text will be compared exactly, otherwise it will be considered to be a pattern. Defaults to false.","Returns","true if an element's AXValue matches the text pattern exactly.","Notes"]},{"l":"doCancel","p":["Signature","cp.ui.Sheet:doCancel() - cp.rx.go.Statement boolean","Type","Method","Description","Attempts to hide the Sheet (if visible) by pressing the Cancel button.","Parameters","None","Returns","A Statement to execute, resolving to true if the button was present and clicked, otherwise false.","Notes"]},{"l":"doDefault","p":["Signature","cp.ui.Sheet:doDefault() - cp.rx.go.Statement boolean","Type","Method","Description","Attempts to press the default Button.","Parameters","None","Returns","A Statement to execute, resolving to true if the button was present and clicked, otherwise false.","Notes"]},{"l":"doHide","p":["Signature","cp.ui.Sheet:doHide() - cp.rx.go.Statement boolean","Type","Method","Description","Attempts to hide the Sheet (if visible) by pressing the Cancel button.","Parameters","None","Returns","A Statement to execute, resolving to true if the button was present and clicked, otherwise false.","Notes"]},{"l":"doPress","p":["Signature","cp.ui.Sheet:doPress(buttonFromLeft) - cp.rx.go.Statement boolean","Type","Method","Description","Attempts to press the indicated button from left-to-right, if it can be found.","Parameters","buttonFromLeft - The number of the button from left-to-right.","Returns","a Statement to execute, resolving in true if the button was found and pressed, otherwise false.","Notes"]},{"l":"hide","p":["Signature","cp.ui.Sheet:hide() - none","Type","Method","Description","Hides the sheet by pressing the \"Cancel\" button, if it exists.","Parameters","None","Returns","Notes"]},{"l":"pressCancel","p":["Signature","cp.ui.Sheet:pressCancel() - self, boolean","Type","Method","Description","Presses the Cancel button.","Parameters","None","Returns","The Sheet object. true if successful, otherwise false.","Notes"]},{"l":"pressDefault","p":["Signature","cp.ui.Sheet:pressDefault() - self, boolean","Type","Method","Description","Presses the Default button.","Parameters","None","Returns","The Sheet object. true if successful, otherwise false.","Notes"]}],[{"i":"cpuislider","l":"cp.ui.Slider","p":["Slider Module."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","decrement","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getMaxValue","getMinValue","getValue","increment","loadLayout","matches","maxValue","Methods- API calls which can only be made on an object returned by a constructor","minValue","saveLayout","setValue","shiftValue","Slider","value"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Slider.matches(element) - boolean","Type","Function","Description","Checks if the provided hs.axuielement is a Slider.","Parameters","element - The axuielement to check.","Returns","true if it's a match, or false if not.","Notes"]},{"l":"Constructors"},{"l":"Slider","p":["Signature","cp.ui.Slider(parent, uiFinder) - cp.ui.Slider","Type","Constructor","Description","Creates a new Slider","Parameters","parent - The parent object. Should have an isShowing property. uiFinder - The function which returns an hs.axuielement for the slider, or nil.","Returns","A new Slider instance.","Notes"]},{"l":"Fields"},{"l":"maxValue","p":["Signature","cp.ui.Slider.maxValue cp.prop: number; read-only","Type","Field","Description","Gets the maximum value of the slider."]},{"l":"minValue","p":["Signature","cp.ui.Slider.minValue cp.prop: number; read-only","Type","Field","Description","Gets the minimum value of the slider."]},{"l":"value","p":["Signature","cp.ui.Slider.value cp.prop: number","Type","Field","Description","Sets or gets the value of the slider."]},{"l":"Methods"},{"l":"decrement","p":["Signature","cp.ui.Slider:decrement() - self","Type","Method","Description","Decrements the slider by one step.","Parameters","None","Returns","Self","Notes"]},{"l":"getMaxValue","p":["Signature","cp.ui.Slider:getMaxValue() - number","Type","Method","Description","Gets the maximum value of the slider.","Parameters","None","Returns","The value as a number.","Notes"]},{"l":"getMinValue","p":["Signature","cp.ui.Slider:getMinValue() - number","Type","Method","Description","Gets the minimum value of the slider.","Parameters","None","Returns","The value as a number.","Notes"]},{"l":"getValue","p":["Signature","cp.ui.Slider:getValue() - number","Type","Method","Description","Gets the value of the slider.","Parameters","None","Returns","The value of the slider as a number.","Notes"]},{"l":"increment","p":["Signature","cp.ui.Slider:increment() - self","Type","Method","Description","Increments the slider by one step.","Parameters","None","Returns","Self","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.Slider:loadLayout(layout) - none","Type","Method","Description","Loads a Slider layout.","Parameters","layout - A table containing the Slider layout settings - created using [saveLayout](#saveLayout].","Returns","None","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.Slider:saveLayout() - table","Type","Method","Description","Saves the current Slider layout to a table.","Parameters","None","Returns","A table containing the current Slider Layout.","Notes"]},{"l":"setValue","p":["Signature","cp.ui.Slider:setValue(value) - self","Type","Method","Description","Sets the value of the slider.","Parameters","value - The value you want to set the slider to as a number.","Returns","Self","Notes"]},{"l":"shiftValue","p":["Signature","cp.ui.Slider:shiftValue(value) - self","Type","Method","Description","Shifts the value of the slider.","Parameters","value - The value you want to shift the slider by as a number.","Returns","Self","Notes"]}],[{"i":"cpuisplitgroup","l":"cp.ui.SplitGroup","p":["Split Group UI. A SplitGroup is a container that can be split into multiple sections. Each section is an Element, and they are divided by a Splitter, resulting in something like { Element, Splitter, Element }."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","SplitGroup","Fields- Variables which can only be accessed from an object returned by a constructor","children","childrenUI","sections","splitters","splittersUI"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.SplitGroup.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"SplitGroup","p":["Signature","cp.ui.SplitGroup(parent, uiFinder, childInits) - cp.ui.SplitGroup","Type","Constructor","Description","Creates a new SplitGroup.","Parameters","parent - The parent object. uiFinder - The function or cp.prop which returns an hs.axuielement for the SplitGroup, or nil. childInits - A table of section-creating functions, in order, including the Splitter s.","Returns","A new SplitGroup instance.","Notes","Many childInints values can be the actual Element value (eg: TextArea), since they only require the parent and uiFinder parameters. The cp.fn.ax.init function can be useful for passing in Element types which require more than just the parent and uiFinder values. Example: `SplitGroup(parent, uiFinder, { cp.fn.ax.init(ScrollArea, cp.ui.List), cp.fn.ax.init(ScrollArea, cp.ui.TextArea) })"]},{"l":"Fields"},{"l":"children","p":["Signature","cp.ui.SplitGroup.children table: cp.ui.Element, read-only","Type","Field","Description","All children of the Split Group, based on the childInits passed to the constructor."]},{"l":"childrenUI","p":["Signature","cp.ui.SplitGroup.childrenUI cp.prop: table of axuielementObject, read-only","Type","Field","Description","The list of axuielementObject s for the sections, sorted in top-down order."]},{"l":"sections","p":["Signature","cp.ui.SplitGroup.sections table: table of cp.ui.Element, read-only","Type","Field","Description","The Sections of the SplitGroup. Each section will be a table of cp.ui.Element s."]},{"l":"splitters","p":["Signature","cp.ui.SplitGroup.splitters table: cp.ui.Splitter, read-only","Type","Field","Description","The Splitters of the SplitGroup. There will be one less splitter than there are sections."]},{"l":"splittersUI","p":["Signature","cp.ui.SplitGroup.splittersUI cp.prop: table of axuielementObject, read-only","Type","Field","Description","The list of axuielementObject s for the splitters."]}],[{"i":"cpuisplitter","l":"cp.ui.Splitter","p":["Represents an AXSplitter."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","HORIZONTAL_ORIENTATION","VERTICAL_ORIENTATION","Functions- API calls offered directly by the extension","matches","Fields- Variables which can only be accessed from an object returned by a constructor","horizontal","maxValue","minValue","nextContentsUI","orientation","previousContentsUI","vertical"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"HORIZONTAL_ORIENTATION","p":["Signature","cp.ui.Splitter.HORIZONTAL_ORIENTATION string","Type","Constant","Description","The value for AXOrientation when it is horizontal."]},{"l":"VERTICAL_ORIENTATION","p":["Signature","cp.ui.Splitter.VERTICAL_ORIENTATION string","Type","Constant","Description","The value for AXOrientation when it is vertical."]},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Splitter.matches(value) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","value - The value to check.","Returns","true if the value matches, false otherwise.","Notes"]},{"l":"Fields"},{"l":"horizontal","p":["Signature","cp.ui.Splitter.horizontal cp.prop: boolean; read-only","Type","Field","Description","Is true if the Splitter is horizontal, otherwise false."]},{"l":"maxValue","p":["Signature","cp.ui.Splitter.maxValue cp.prop: number, read-only","Type","Field","Description","The maximum value of the splitter."]},{"l":"minValue","p":["Signature","cp.ui.Splitter.minValue cp.prop: number, read-only","Type","Field","Description","The minimum value of the splitter."]},{"l":"nextContentsUI","p":["Signature","cp.ui.Splitter.nextContentsUI cp.prop: axuielementObject, read-only, live?","Type","Field","Description","The axuielementObject for the next contents of the splitter."]},{"l":"orientation","p":["Signature","cp.ui.Splitter.orientation cp.prop: string; read-only","Type","Field","Description","The AXOrientation string."]},{"l":"previousContentsUI","p":["Signature","cp.ui.Splitter.previousContentsUI cp.prop: axuielementObject, read-only, live?","Type","Field","Description","The axuielementObject for the previous contents of the splitter."]},{"l":"vertical","p":["Signature","cp.ui.Splitter.vertical cp.prop: boolean; read-only","Type","Field","Description","Is true if the Splitter is vertical, otherwise false."]}],[{"i":"cpuistatictext","l":"cp.ui.StaticText","p":["Static Text Module."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Fields- Variables which can only be accessed from an object returned by a constructor","value","Methods- API calls which can only be made on an object returned by a constructor","clear","loadLayout","saveLayout","StaticText"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.StaticText.matches(element) - boolean","Type","Function","Description","Checks if the element is a Static Text element.","Parameters","element - The axuielement to check.","Returns","If true, the element is a Static Text element.","Notes"]},{"l":"Fields"},{"l":"value","p":["Signature","cp.ui.StaticText.value cp.prop: anything","Type","Field","Description","The current value of the text field."]},{"l":"Methods"},{"l":"clear","p":["Signature","cp.ui.StaticText:clear() - self","Type","Method","Description","Clears the value of a Static Text box.","Parameters","None","Returns","Self","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.StaticText:loadLayout(layout) - none","Type","Method","Description","Loads a Static Text layout.","Parameters","layout - A table containing the Static Text layout settings - created using cp.ui.StaticText:saveLayout().","Returns","None","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.StaticText:saveLayout() - table","Type","Method","Description","Saves the current Static Text layout to a table.","Parameters","None","Returns","A table containing the current Static Text Layout.","Notes"]},{"l":"StaticText","p":["Signature","cp.ui.StaticText(parent, uiFinder[, convertFn]) - StaticText","Type","Method","Description","Creates a new StaticText. They have a parent and a finder function.","Parameters","parent - The parent object. uiFinder - The function will return the axuielement for the StaticText. convertFn - (optional) If provided, will be passed the string value when returning.","Returns","The new StaticText.","Notes","Additionally, an optional convert function can be provided, with the following signature: function(textValue) - anything The value will be passed to the function before being returned, if present. All values passed into value(x) will be converted to a string first via tostring. For example, to have the value be converted into a number, simply use tonumber like this: lua/lililocal numberField = StaticText(parent, function() return ... end, tonumber)/lili"]}],[{"i":"cpuitable","l":"cp.ui.Table","p":["A Table UI element. It extends GridElement, so will inherit all of its properties and methods."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Table.matches(element) - boolean","Type","Function","Description","Checks if the element is a Table.","Parameters","element - An axuielementObject to check.","Returns","A boolean","Notes"]}],[{"i":"cpuitextarea","l":"cp.ui.TextArea","p":["UI Text Area."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","TextArea","Fields- Variables which can only be accessed from an object returned by a constructor","value","Methods- API calls which can only be made on an object returned by a constructor","append","prepend"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.TextArea.matches(element) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check.","Returns","true if matches otherwise false","Notes"]},{"l":"Constructors"},{"l":"TextArea","p":["Signature","cp.ui.TextArea(parent, uiFinder) - TextArea","Type","Constructor","Description","Creates a new TextArea instance.","Parameters","parent - The parent object. uiFinder - A function which will return the hs.axuielement when available.","Returns","A new TextArea object.","Notes"]},{"l":"Fields"},{"l":"value","p":["Signature","cp.ui.TextArea.value cp.prop: string","Type","Field","Description","The current value of the text field."]},{"l":"Methods"},{"l":"append","p":["Signature","cp.ui.TextArea:append(moreText) - string","Type","Method","Description","Appends moreText to the end of the current value, returning the combined text value. If no text is currently set, moreText becomes the value.","Parameters","moreText - The text to add.","Returns","The combined string value.","Notes"]},{"l":"prepend","p":["Signature","cp.ui.TextArea:prepend(moreText) - string","Type","Method","Description","Appends moreText to the beginning of the current value, returning the combined text value. If no text is currently set, moreText becomes the value.","Parameters","moreText - The text to add.","Returns","The combined string value.","Notes"]}],[{"i":"cpuitextfield","l":"cp.ui.TextField","p":["Text Field Module."]},{"l":"Submodules","p":["cp.ui.TextField.Builder"]},{"l":"API Overview","p":["clear","convertingGet","convertingSet","doConfirm","doFocus","Fields- Variables which can only be accessed from an object returned by a constructor","forceFocus","Functions- API calls offered directly by the extension","getValue","loadLayout","matches","Methods- API calls which can only be made on an object returned by a constructor","saveLayout","setValue","TextField","value"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.TextField.matches(element[, subrole]) - boolean","Type","Function","Description","Checks to see if an element matches what we think it should be.","Parameters","element - An axuielementObject to check. subrole - (optional) If provided, the field must have the specified subrole.","Returns","true if matches otherwise false","Notes"]},{"l":"Fields"},{"l":"convertingGet","p":["Signature","cp.ui.TextField:convertingGet(getter) - cp.ui.TextField.Builder","Type","Field","Description","Creates a Builder that will convert the result of the TextField:value() getter to a different type.","Parameters","getter - A function that will be called to get the value from the TextField.","Returns","The TextField.Builder","Notes","The getter will be called with the string value from the TextField as its only parameter. For example, TextField:convertGet(tonumber) will use the standard tonumber function to convert the value to a number."]},{"l":"convertingSet","p":["Signature","cp.ui.TextField:convertingSet(setter) - cp.ui.TextField.Builder","Type","Field","Description","Creates a Builder that will convert the value before setting it in the TextField.","Parameters","setter - A function that will be called to set the value in the TextField.","Returns","The TextField.Builder","Notes","The setter will be called with the input value from a TextField:value(...) call as its only parameter. It should return a string to be saved into the TextField. For example, TextField:convertSet(tostring) will use the standard tostring function to convert the value to a string."]},{"l":"value","p":["Signature","cp.ui.TextField.value cp.prop: string","Type","Field","Description","The current value of the text field."]},{"l":"Methods"},{"l":"clear","p":["Signature","cp.ui.TextField:clear() - self","Type","Method","Description","Clears the value of a Text Field.","Parameters","None","Returns","Self","Notes"]},{"l":"doConfirm","p":["Signature","cp.ui.TextField:doConfirm() - cp.rx.go.Statement","Type","Method","Description","A Statement that will confirm the current text value.","Parameters","None","Returns","A Statement","Notes"]},{"l":"doFocus","p":["Signature","cp.ui.TextField:doFocus() - cp.rx.go.Statement","Type","Method","Description","A Statement that will attempt to focus on the current TextField.","Parameters","None","Returns","A Statement","Notes"]},{"l":"forceFocus","p":["Signature","cp.ui.TextField:forceFocus()","Type","Method","Description","Configures the TextField to force a focus on the field before editing. Some fields seem to require this to actually update the text value.","Parameters","None","Returns","Self","Notes"]},{"l":"getValue","p":["Signature","cp.ui.TextField:getValue() - string","Type","Method","Description","Gets the value of the Text Field.","Parameters","None","Returns","The value of the Text Field as a string.","Notes"]},{"l":"loadLayout","p":["Signature","cp.ui.TextField:loadLayout(layout) - none","Type","Method","Description","Loads a Text Field layout.","Parameters","layout - A table containing the Text Field layout settings - created using cp.ui.TextField:saveLayout().","Returns","None","Notes"]},{"l":"saveLayout","p":["Signature","cp.ui.TextField:saveLayout() - table","Type","Method","Description","Saves the current Text Field layout to a table.","Parameters","None","Returns","A table containing the current Text Field Layout.","Notes"]},{"l":"setValue","p":["Signature","cp.ui.TextField:setValue(value) - self","Type","Method","Description","Sets the value of the Text Field.","Parameters","value - The value you want to set the Text Field to as a string.","Returns","Self","Notes"]},{"l":"TextField","p":["Signature","cp.ui.TextField(parent, uiFinder, getConvertFn, setConvertFn) - TextField","Type","Method","Description","Creates a new TextField. They have a parent and a finder function.","Parameters","parent - The parent object. uiFinder - The function will return the axuielement for the TextField. getConvertFn - (optional) If provided, will be passed the string value when returning. setConvertFn - (optional) If provided, will be passed the number value when setting.","Returns","The new TextField.","Notes","Additionally, an optional convert function can be provided, with the following signature: function(textValue) - anything The value will be passed to the function before being returned, if present. All values passed into value(x) will be converted to a string first via tostring. For example, to have the value be converted into a number, simply use tonumber like this: lua/lililocal numberField = TextField(parent, function() return ... end, tonumber, tostring)/lili"]}],[{"i":"cpuitextfieldbuilder","l":"cp.ui.TextField.Builder","p":["Defines a TextField Builder."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","convertingGet","convertingSet"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"convertingGet","p":["Signature","cp.ui.TextField.Builder:convertingGet(getter) - cp.ui.TextField.Builder","Type","Method","Description","Specifies a function that will convert the result of the TextField:value() getter to a different type.","Parameters","getter - A function that will be called to get the value from the TextField.","Returns","The TextField.Builder","Notes","The getter will be called with the string value from the TextField as its only parameter."]},{"l":"convertingSet","p":["Signature","cp.ui.TextField.Builder:convertingSet(setter) - cp.ui.TextField.Builder","Type","Method","Description","Specifies a function to convert the value before setting it in the TextField.","Parameters","setter - A function that will be called to set the value in the TextField.","Returns","The TextField.Builder","Notes","The setter will be called with the input value from a TextField:value(...) call as its only parameter. It should return a string to be saved into the TextField."]}],[{"i":"cpuitoolbar","l":"cp.ui.Toolbar","p":["Toolbar Module."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","matches","Constructors- API calls which return an object, typically one that offers API methods","Toolbar","Fields- Variables which can only be accessed from an object returned by a constructor","overflowButton","selectedTitle","Methods- API calls which can only be made on an object returned by a constructor","doSelect"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"matches","p":["Signature","cp.ui.Toolbar.matches(element) - boolean","Type","Function","Description","Checks if the element is a Button, returning true if so.","Parameters","element - The hs.axuielement to check.","Returns","true if the element is a Button, or false if not.","Notes"]},{"l":"Constructors"},{"l":"Toolbar","p":["Signature","cp.ui.Toolbar(parent, uiFinder) - cp.ui.Toolbar","Type","Constructor","Description","Creates a new Toolbar instance, given the specified parent and uiFinder","Parameters","parent - The parent object. uiFinder - The cp.prop or function that finds the hs.axuielement that represents the Toolbar.","Returns","The new Toolbar instance.","Notes"]},{"l":"Fields"},{"l":"overflowButton","p":["Signature","cp.ui.Toolbar.overflowButton cp.ui.Button","Type","Field","Description","The \"overflow\" button which appears if there are more toolbar items"]},{"l":"selectedTitle","p":["Signature","cp.ui.Toolbar.selectedTitle cp.prop: string; read-only","Type","Field","Description","The title of the first selected item, if available."]},{"l":"Methods"},{"l":"doSelect","p":["Signature","cp.ui.Toolbar:doSelect(title) - Statement","Type","Method","Description","Returns a Statement that will select the toolbar item with the specified title.","Parameters","title - The title to select, if present.","Returns","A Statement that when executed returns true if the item was found and selected, otherwise false.","Notes"]}],[{"i":"cpuiwindow","l":"cp.ui.Window","p":["A Window UI element."]},{"l":"API Overview","p":["alert","close","Constructors- API calls which return an object, typically one that offers API methods","doClose","doFocus","exists","Fields- Variables which can only be accessed from an object returned by a constructor","findSectionUI","focus","focused","frame","Functions- API calls offered directly by the extension","hsWindow","id","isFullScreen","isShowing","matches","Methods- API calls which can only be made on an object returned by a constructor","minimized","notifier","position","size","snapshot","UI","visible","Window"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"findSectionUI","p":["Signature","cp.ui.Window.findSectionUI(windowUI, sectionID) - hs.axuielement","Type","Function","Description","Finds the axuielement for the specified sectionID, if present in the provided axuielement windowUI.","Parameters","windowUI - The AXWindow axuielement to search in. sectionID - The string value for the SectionUniqueID.","Returns","The matching axuielement, or nil.","Notes"]},{"l":"matches","p":["Signature","cp.ui.Window.matches(element) - boolean","Type","Function","Description","Checks if the provided element is a valid window.","Parameters","element - An element to check","Returns","A boolean","Notes"]},{"l":"Constructors"},{"l":"Window","p":["Signature","cp.ui.Window(cpApp, uiProp) - Window","Type","Constructor","Description","Creates a new Window","Parameters","cpApp- a cp.app for the application the Window belongs to. uiProp- a cp.prop that returns the hs.axuielement for the window.","Returns","A new Window instance.","Notes"]},{"l":"Fields"},{"l":"alert","p":["Signature","cp.ui.Window.alert cp.ui.Alert","Type","Field","Description","Provides access to any 'Alert' windows on the Window."]},{"l":"exists","p":["Signature","cp.ui.Window.exists cp.prop: boolean; read-only","Type","Field","Description","Returns true if the window exists. It may not be visible."]},{"l":"focused","p":["Signature","cp.ui.Window.focused cp.prop: boolean","Type","Field","Description","Is true if the window has mouse/keyboard focused."]},{"l":"frame","p":["Signature","cp.ui.Window.frame cp.prop: hs.geometry rect","Type","Field","Description","The hs.geometry rect value describing the window's position."]},{"l":"hsWindow","p":["Signature","cp.ui.Window.hsWindow cp.prop: hs.window; read-only","Type","Field","Description","The hs.window instance for the window, or nil if it can't be found."]},{"l":"id","p":["Signature","cp.ui.Window.id cp.prop: string; read-only","Type","Field","Description","The window title, or nil if the window is not currently visible."]},{"l":"isFullScreen","p":["Signature","cp.ui.Window.isFullScreen cp.prop: boolean","Type","Field","Description","Returns true if the window is full-screen."]},{"l":"isShowing","p":["Signature","cp.ui.Window.isShowing cp.prop: boolean; read-only; live?","Type","Field","Description","Indicates if the Window is currently showing on screen."]},{"l":"minimized","p":["Signature","cp.ui.Window.minimized cp.prop: boolean","Type","Field","Description","Returns true if the window exists and is minimised."]},{"l":"position","p":["Signature","cp.ui.Window.position cp.prop: table","Type","Field","Description","Gets or sets the window position"]},{"l":"size","p":["Signature","cp.ui.Window.size cp.prop: table","Type","Field","Description","Gets or sets the window size"]},{"l":"UI","p":["Signature","cp.ui.Window.UI cp.prop: hs.axuielement: read-only; live?","Type","Field","Description","The UI axuielement for the Window."]},{"l":"visible","p":["Signature","cp.ui.Window.visible cp.prop: boolean; read-only","Type","Field","Description","Returns true if the window is visible on a screen."]},{"l":"Methods"},{"l":"close","p":["Signature","cp.ui.Window:close() - boolean","Type","Method","Description","Attempts to close the window.","Parameters","None","Returns","true if the window was successfully closed.","Notes"]},{"l":"doClose","p":["Signature","cp.ui.Window:doClose() - cp.rx.go.Statement boolean","Type","Method","Description","Returns a Statement that will attempt to close the window, if it is visible.","Parameters","None","Returns","The Statement to execute, resolving to true if the window is closed successfully, or false if not.","Notes"]},{"l":"doFocus","p":["Signature","cp.ui.Window:doFocus() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement will attempt to focus on the window, if it is visible.","Parameters","None","Returns","The Statement to execute, which resolves to true if the window was successfully focused, or false if not.","Notes"]},{"i":"findsectionui-1","l":"findSectionUI","p":["Signature","cp.ui.Window:findSectionUI(sectionID) - hs.axuielement","Type","Method","Description","Looks for th section with the specified SectionUniqueID value and returns the matching axuielement value.","Parameters","sectionID - The string for the section ID.","Returns","The matching axuielement, or nil.","Notes"]},{"l":"focus","p":["Signature","cp.ui.Window:focus() - boolean","Type","Method","Description","Attempts to focus the window.","Parameters","None","Returns","true if the window was successfully focused.","Notes"]},{"l":"notifier","p":["Signature","cp.ui.Window:notifier() - cp.ui.notifier","Type","Method","Description","Returns a notifier that is tracking the application UI element. It has already been started.","Parameters","None","Returns","The notifier.","Notes"]},{"l":"snapshot","p":["Signature","cp.ui.Window:snapshot([path]) - hs.image | nil","Type","Method","Description","Takes a snapshot of the UI in its current state as a PNG and returns it. If the path is provided, the image will be saved at the specified location.","Parameters","path - (optional) The path to save the file. Should include the extension (should be .png).","Returns","The hs.image that was created, or nil if the UI is not available.","Notes"]}],[{"i":"cputf16","l":"cp.utf16","p":["A pure-LUA implementation of UTF-16 decoding"]},{"l":"Submodules","p":["cp.utf16.be","cp.utf16.le"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","char","codepoint","codes","offset"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"char","p":["Signature","cp.utf16.char(bigEndian, ...) - string","Type","Function","Description","Receives zero or more integers, converts each one to its corresponding UTF-16 byte sequence and returns a string with the concatenation of all these sequences.","Parameters","bigEndian- If true, the output will list the 'big' bytes first...- The list of UCL codepoint integers to convert.","Returns","All the codepoints converted to UTF-16, concatonated into a string.","Notes"]},{"l":"codepoint","p":["Signature","cp.utf16.codepoint(bigEndian, s [, i [, j]]) - integer...","Type","Function","Description","Returns the codepoints (as integers) from all characters in s that start between byte position i and j(both included). The default for i is 1 and for j is i. It raises an error if it meets any invalid byte sequence.","Parameters","bigEndian- (optional) If set to true, the string is encoded in 'big-endian' format. s- The string i- The starting index. Defaults to 1. j- The ending index. Defaults to i.","Returns","a list of codepoint integers for all characters in the matching range.","Notes"]},{"l":"codes","p":["Signature","cp.utf16.codes(bigEndian, s) - iterator","Type","Function","Description","Returns values so that the construction","Parameters","bigEndian- If true, the provided string is in 'big-endian' encoding. s- The string to iterate through.","Returns","An iterator","Notes","For example: lua/lili for p, c in utf16.codes(s) do body end/lili will iterate over all characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence."]},{"l":"offset","p":["Signature","cp.utf16.offset (bigEndian, s, n [, i]) - number","Type","Function","Description","Returns the position (in bytes) where the encoding of the n-th character of s(counting from position i) starts. A negative n gets characters before position i. The default for i is 1 when n is non-negative and #s + 1 otherwise, so that utf8.offset(s, -n) gets the offset of the n-th character from the end of the string. If the specified character is neither in the subject nor right after its end, the function returns nil.","Parameters","bigEndian- If true, the encoding is 'big-endian'. Defaults to false s- The string n- The character number to find. i- The initial position to start from.","Returns","The index","Notes","As a special case, when n is 0 the function returns the start of the encoding of the character that contains the i-th byte of s. This function assumes that s is a valid UTF-16 string"]}],[{"i":"cputf16be","l":"cp.utf16.be","p":["A pure-LUA implementation of UTF-16 decoding with big-endian ordering."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","char","codepoint","codes","len","offset"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"char","p":["Signature","cp.utf16.be.char(...) - string","Type","Function","Description","Receives zero or more integers, converts each one to its corresponding UTF-16 byte sequence and returns a string with the concatenation of all these sequences.","Parameters","...- The list of UCL codepoint integers to convert.","Returns","All the codepoints converted to UTF-16, concatonated into a string.","Notes"]},{"l":"codepoint","p":["Signature","cp.utf16.be.codepoint(s [, i [, j]]) - integer...","Type","Function","Description","Returns the codepoints (as integers) from all characters in s that start between byte position i and j(both included). The default for i is 1 and for j is i. It raises an error if it meets any invalid byte sequence.","Parameters","s- The string i- The starting index. Defaults to 1. j- The ending index. Defaults to i.","Returns","a list of codepoint integers for all characters in the matching range.","Notes"]},{"l":"codes","p":["Signature","cp.utf16.be.codes(s) - iterator","Type","Function","Description","Returns values so that the construction","Parameters","s- The string to iterate through.","Returns","An iterator","Notes","For example: lua/lili for p, c in utf16.codes(s) do body end/lili will iterate over all characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence."]},{"l":"len","p":["Signature","cp.utf16.be.len (s [, i [, j]]) - number | boolean, number","Type","Function","Description","Returns the number of UTF-16 characters in string s that start between positions i and j(both inclusive). The default for i is 1 and for j is -1. If it finds any invalid byte sequence, returns a false value plus the position of the first invalid byte.","Parameters","s- The UTF-16 string i- The starting index. Defaults to 1. j- The ending index. Defaults to -1.","Returns","the length, or false and the first invalid byte index.","Notes"]},{"l":"offset","p":["Signature","cp.utf16.be.offset (s, n [, i]) - number","Type","Function","Description","Returns the position (in bytes) where the encoding of the n-th character of s(counting from position i) starts. A negative n gets characters before position i. The default for i is 1 when n is non-negative and #s + 1 otherwise, so that utf8.offset(s, -n) gets the offset of the n-th character from the end of the string. If the specified character is neither in the subject nor right after its end, the function returns nil.","Parameters","s- The string n- The character number to find. i- The initial position to start from.","Returns","The index","Notes","As a special case, when n is 0 the function returns the start of the encoding of the character that contains the i-th byte of s. This function assumes that s is a valid UTF-16 string"]}],[{"i":"cputf16le","l":"cp.utf16.le","p":["A pure-LUA implementation of UTF-16 decoding with little-endian ordering."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","char","codepoint","codes","len","offset"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"char","p":["Signature","cp.utf16.le.char(...) - string","Type","Function","Description","Receives zero or more integers, converts each one to its corresponding UTF-16 byte sequence and returns a string with the concatenation of all these sequences.","Parameters","...- The list of UCL codepoint integers to convert.","Returns","All the codepoints converted to UTF-16, concatonated into a string.","Notes"]},{"l":"codepoint","p":["Signature","cp.utf16.le.codepoint(s [, i [, j]]) - integer...","Type","Function","Description","Returns the codepoints (as integers) from all characters in s that start between byte position i and j(both included). The default for i is 1 and for j is i. It raises an error if it meets any invalid byte sequence.","Parameters","s- The string i- The starting index. Defaults to 1. j- The ending index. Defaults to i.","Returns","a list of codepoint integers for all characters in the matching range.","Notes"]},{"l":"codes","p":["Signature","cp.utf16.le.codes(s) - iterator","Type","Function","Description","Returns values so that the construction","Parameters","s- The string to iterate through.","Returns","An iterator","Notes","For example: lua/lili for p, c in utf16.codes(s) do body end/lili will iterate over all characters in string s, with p being the position (in bytes) and c the code point of each character. It raises an error if it meets any invalid byte sequence."]},{"l":"len","p":["Signature","cp.utf16.len (bigEndian, s [, i [, j]]) - number | boolean, number","Type","Function","Description","Returns the number of UTF-16 characters in string s that start between positions i and j(both inclusive). The default for i is 1 and for j is -1. If it finds any invalid byte sequence, returns a false value plus the position of the first invalid byte.","Parameters","bigEndian- If true, the string is 'big-endian'. s- The UTF-16 string i- The starting index. Defaults to 1. j- The ending index. Defaults to -1.","Returns","the length, or false and the first invalid byte index.","Notes"]},{"i":"len-1","l":"len","p":["Signature","cp.utf16.le.len (s [, i [, j]]) - number | boolean, number","Type","Function","Description","Returns the number of UTF-16 characters in string s that start between positions i and j(both inclusive). The default for i is 1 and for j is -1. If it finds any invalid byte sequence, returns a false value plus the position of the first invalid byte.","Parameters","s- The UTF-16 string i- The starting index. Defaults to 1. j- The ending index. Defaults to -1.","Returns","the length, or false and the first invalid byte index.","Notes"]},{"l":"offset","p":["Signature","cp.utf16.le.offset (s, n [, i]) - number","Type","Function","Description","Returns the position (in bytes) where the encoding of the n-th character of s(counting from position i) starts. A negative n gets characters before position i. The default for i is 1 when n is non-negative and #s + 1 otherwise, so that utf8.offset(s, -n) gets the offset of the n-th character from the end of the string. If the specified character is neither in the subject nor right after its end, the function returns nil.","Parameters","s- The string n- The character number to find. i- The initial position to start from.","Returns","The index","Notes","As a special case, when n is 0 the function returns the start of the encoding of the character that contains the i-th byte of s. This function assumes that s is a valid UTF-16 string"]}],[{"i":"cpwatcher","l":"cp.watcher","p":["This extension provides support for setting up 'event watchers'.","For example, if you want to allow interested parties to watch for 'update' events, you might have something like this:","Then, your other code could get notifications like so:","Then, whenever thing.update(xxx) is called, the watcher will output New value is xxx."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","new","Methods- API calls which can only be made on an object returned by a constructor","events","getCount","notify","unwatch","watch"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"new","p":["Signature","cp.watcher.new(...) - watcher","Type","Function","Description","Constructs a new watcher instance.","Parameters","...- The list of event name strings supported by the watcher.","Returns","a new watcher instance","Notes"]},{"l":"Methods"},{"l":"events","p":["Signature","cp.watcher:events()","Type","Method","Description","Returns a list of the event names supported by this watcher.","Parameters","None","Returns","The table of event names.","Notes"]},{"l":"getCount","p":["Signature","cp.watcher:getCount()","Type","Method","Description","Returns the number of watchers currently registered.","Parameters","None","Returns","The number of watchers.","Notes"]},{"l":"notify","p":["Signature","cp.watcher:notify(type, ...) - nil","Type","Method","Description","Notifies watchers of the specified event type.","Parameters","type- The event type to notify. Must be one of the supported events....- These parameters are passed directly to the event watcher functions.","Returns","Nothing.","Notes"]},{"l":"unwatch","p":["Signature","cp.watcher:unwatch(id) - boolean","Type","Method","Description","Removes the watchers which were added with the specified ID.","Parameters","id- The unique ID returned from watch.","Returns","true if a watcher with the specified ID exists and was successfully removed.","Notes"]},{"l":"watch","p":["Signature","cp.watcher:watch(events) - id","Type","Method","Description","Adds a watcher for the specified events.","Parameters","events- A table of functions, one for each event to watch.","Returns","A unique ID that can be passed to unwatch to stop watching.","Notes"]}],[{"i":"cpwebblock","l":"cp.web.block","p":["Block."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.web.block.is(value) - boolean","Type","Function","Description","Checks if the value is an cp.web.block.","Parameters","value - the value to check","Returns","true if it is an HTML block, or false otherwise.","Notes"]}],[{"i":"cpwebgenerate","l":"cp.web.generate","p":["Functions for Generating HTML UI Items"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","button","checkbox","dropdown","heading","javascript","setWebviewLabel","text"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"button","p":["Signature","cp.web.generate.button(data, customTrigger, customWidth, customID) - string","Type","Function","Description","Generates a HTML Button","Parameters","data - Table containing the data you want to display on the Checkbox customTrigger - Custom label used for JavaScript Callback customWidth - Number to set the width of the button to customID - Overrides the random HTML ID","Returns","String containing the HTML","Notes"]},{"l":"checkbox","p":["Signature","cp.web.generate.checkbox(data, customTrigger, customID) - string","Type","Function","Description","Generates a HTML Checkbox","Parameters","data - Table containing the data you want to display on the Checkbox customTrigger - Custom label used for JavaScript Callback customID - Custom ID used for the HTML objects","Returns","String containing the HTML","Notes"]},{"l":"dropdown","p":["Signature","cp.web.generate.dropdown(title, data, customTrigger) - string","Type","Function","Description","Generates a HTML Dropdown","Parameters","title - Title to put in front of the Dropdown. Can be \"\". data - Table containing the data you want to display on the Checkbox customTrigger - Custom label used for JavaScript Callback","Returns","String containing the HTML","Notes"]},{"l":"heading","p":["Signature","cp.web.generate.heading(data) - string","Type","Function","Description","Generates a HTML Heading","Parameters","data - Table containing the data you want to display on the Checkbox","Returns","String containing the HTML","Notes"]},{"l":"javascript","p":["Signature","cp.web.generate.javascript(script, context) - cp.web.html","Type","Function","Description","Generates a HTML Heading","Parameters","data - Table containing the data you want to display on the Checkbox context - The context","Returns","String containing the HTML","Notes"]},{"l":"setWebviewLabel","p":["Signature","cp.web.generate.setWebviewLabel() - none","Type","Function","Description","Sets the WebView Label","Parameters","value - WebView Label as string","Returns","None","Notes"]},{"l":"text","p":["Signature","cp.web.generate.text(data) - string","Type","Function","Description","Generates a blank HTML","Parameters","data - Table containing the data you want to display.","Returns","String containing the HTML","Notes"]}],[{"i":"cpwebhtml","l":"cp.web.html","p":["Functions for Generating HTML markup.","This library allows the creation of 'safe' HTML using via code.","Examples:","Be aware that concatonating with \"..\" can behave unexpectedly in some cases. For example:","The Hello gets inserted into the p tag, but the name gets concatonated after the closing tag. To get the name inside the p tag, we need to put brackets around the content:","Any tag name can be generated, along with any attribute. The results are correctly escaped. There are two 'special' tag names:","CDATA- will generate a lt;![CDATA[ ... ]]gt; section with the content contained.","__- (double underscore) will generate a lt!-- ... --gt comment block."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Methods- API calls which can only be made on an object returned by a constructor","append","prepend"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.web.html.is(value) - boolean","Type","Function","Description","Checks if the value is an cp.web.html block.","Parameters","value - the value to check","Returns","true if it is an HTML block, or false otherwise.","Notes"]},{"l":"Methods"},{"l":"append","p":["Signature","cp.web.html:append(newContent[, escaped]) - self","Type","Method","Description","Appends the content. If specified, the escaped value will override any default escaping for the content type.","Parameters","newContent - The content to append to the contents of the HTML block. escaped - May be set to override default escaping for the content.","Returns","The same HTML block instance.","Notes","The newContent may be almost any value. The default handling is below:** cp.web.html instance: Any other HTML block can be added. Default escaping: false.** function: Functions will be executed every time the HTML block is converted to a string. Default escaping: whatever the default is for the returned value.** list: Tables which are lists will be iterrated and each item will be evaluated each time the HTML block is converted to a string. Default escaping: the default for each item.** everything else: Converted to a string via the tostring function. Default escaping: true."]},{"l":"prepend","p":["Signature","cp.web.html:prepend(newContent[, escaped]) - self","Type","Method","Description","Prepends the content. If specified, the escaped value will override any default escaping for the content type.","Parameters","newContent - The content to prepend to the contents of the HTML block. escaped - May be set to override default escaping for the content.","Returns","The same HTML block instance.","Notes","The newContent may be almost any value. The default handling is below:** cp.web.html instance: Any other HTML block can be added. Default escaping: false.** function: Functions will be executed every time the HTML block is converted to a string. Default escaping: whatever the default is for the returned value.** list: Tables which are lists will be iterrated and each item will be evaluated each time the HTML block is converted to a string. Default escaping: the default for each item.** everything else: Converted to a string via the tostring function. Default escaping: true."]}],[{"i":"cpwebtext","l":"cp.web.text","p":["Functions for managing text on the web."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","escapeXML","unescapeXML"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"escapeXML","p":["Signature","cp.web.text.escapeXML(s) - string","Type","Function","Description","Escapes a string","Parameters","s - The string you want to escape","Returns","The string, escaped for XML.","Notes"]},{"l":"unescapeXML","p":["Signature","cp.web.text.unescapeXML(s) - string","Type","Function","Description","Unescapes a string from XML encoding.","Parameters","s - The string you want to unescape","Returns","The string, unescaped.","Notes"]}],[{"i":"cpwebui","l":"cp.web.ui","p":["This extension contains functions which simplify the creation of standard UI events using cp.web.html as the basis. Most functions return a html element which is potentially dynamically updatable. Most values can be set using a value or a function, and if functions are provided, they are re-evaluated every time the element is generated."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","heading","img","javascript","password","select","style","template","textbox","Constructors- API calls which return an object, typically one that offers API methods","button","checkbox"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"heading","p":["Signature","cp.web.ui.heading(params) - cp.web.html","Type","Function","Description","Creates a cp.web.html element for a heading with a specific level","Parameters","params- The parameters table. Details below.","Returns","cp.web.html element representing the heading.","Notes","The params table has the following fields:** text- The string (or function) containing the text of the heading.** level- The heading level (or function) (1-7). Defaults to 3.** class- The CSS class (or function) for the heading tag."]},{"l":"img","p":["Signature","cp.web.ui.img(params) - cp.web.html","Type","Function","Description","Generates a cp.web.html img element.","Parameters","params- A table or function returning a table with the checkbox data.","Returns","A cp.web.html with the select defined.","Notes","The params table has the following supported fields:** src- The source of the image. If this points to a local file, it will be encoded as Base64.** class- A string, (or function returning a string) with the CSS class for the element.** width- The width of the image.** height- The height of the image."]},{"l":"javascript","p":["Signature","cp.web.ui.javascript(script[, context][, naked]) - cp.web.html","Type","Function","Description","Generates an HTML script element which will execute the provided JavaScript immediately.","Parameters","script - String containing the JavaScript to execute. context - (optional) Table containing any values to inject into the script. naked - (optional) If true, the javascript will be returned without a surrounding block.","Returns","a cp.web.html element representing the JavaScript block.","Notes","The script is self-contained and only has access to global variables. Any local var values will not be available to other scripts. The script will be evaluated as a resty.template, and variables can be injected from the context table. For example, this will create a script that will display an alert saying \"Hello world!\": lua/liliui.javascript([[ alert() ]], { message = Hello world!})/lili"]},{"l":"password","p":["Signature","cp.web.ui.password(params) - hs.web.html","Type","Function","Description","Creates an html element that will output a password text box.","Parameters","params- The parameters table. Details below.","Returns","cp.web.html containing the textbox.","Notes","The params table has the following supported fields:** id- The unique ID for the textbox.** name- The name of the textbox field.** class- The CSS classname.** placeholder- Placeholder text"]},{"l":"select","p":["Signature","cp.web.ui.select(params) - cp.web.html","Type","Function","Description","Generates a cp.web.html select element. The data should be a table or a function returning a table that matches the details in the notes below.","Parameters","params- A table or function returning a table with the checkbox data.","Returns","A cp.web.html with the select defined.","Notes","The params table has the following supported fields:** id- a string (or function) the unique ID for the select.** value- a string, number, or boolean (or function) with the value of the select. May be nil.** options- an array (or function returning an array) of option tables, with the following keys:*** value- the value of the option.*** label- (optional) the label for the option. If not set, the value is used.*** disabled- (optional) if the option is disabled.** required- (optional) if true, there will not be a 'blank' option at the top of the list.** blankLabel- (optional) if specified, the value will be used for the 'blank' option label."]},{"l":"style","p":["Signature","cp.web.ui.style(rules[, context]) - cp.web.html","Type","Function","Description","Generates an HTML style element which will contain the provided rules.","Parameters","rules - String containing the CSS rules. context - (optional) Table containing any values to inject into the script.","Returns","a cp.web.html element representing the JavaScript block.","Notes","The rules will be evaluated as a resty.template, and variables can be injected from the context table. For example, this will create a set of rules that injects the provided color: lua/liliui.style([[ body { color: ; } ]], { bodyColor = #FFFFFF})/lili"]},{"l":"template","p":["Signature","cp.web.ui.template(params) - hs.web.html","Type","Function","Description","Creates a html element that will execute a Resty Template.","Parameters","params- The parameters table. Details below.","Returns","cp.web.html containing the template.","Notes","The params table has the following supported fields:** view- The file path to the template, or the template content itself. Required.** context- The table containing the context to execute the template in.** unescaped- If true, the template will not be escaped before outputting."]},{"l":"textbox","p":["Signature","cp.web.ui.textbox(params) - hs.web.html","Type","Function","Description","Creates an html element that will output a text box.","Parameters","params- The parameters table. Details below.","Returns","cp.web.html containing the textbox.","Notes","The params table has the following supported fields:** id- The unique ID for the textbox.** name- The name of the textbox field.** class- The CSS classname.** placeholder- Placeholder text.** value- The default value of the textbox."]},{"l":"Constructors"},{"l":"button","p":["Signature","cp.web.ui.button(params) - cp.web.html","Type","Constructor","Description","Generates a HTML Button","Parameters","params- Table containing the data you want to display on the button.","Returns","A cp.web.ui representing the button.","Notes","The params can contain the following fields:** value- The value of the button.** label- The text label for the button. Defaults to the value if not provided.** width- The width of the button in pixels."]},{"l":"checkbox","p":["Signature","cp.web.ui.checkbox(params) - cp.web.html","Type","Constructor","Description","Generates a HTML Checkbox element.","Parameters","data - A table or function returning a table with the checkbox data.","Returns","The cp.web.ui.element.","Notes","The params table has the following supported fields:** value- a string (or function) with the value of the checkbox. If not specified, the title is used.** checked- a boolean (or function) set to true or false, depending on if the checkbox is checked.** disabled- a boolean (or function) set to true or false, depending on if the checkbox is disabled.** id- (optional) a string (or function) with the unique ID for the checkbox.** name- (optional) a unique name for the checkbox field.** class- (optional) the CSS class list."]}],[{"i":"cpwebxml","l":"cp.web.xml","p":["Functions for Generating XML markup.","This library allows the creation of 'safe' XML using via code.","Examples:","Be aware that concatonating with \"..\" can behave unexpectedly in some cases. For example:","The Hello gets inserted into the Root tag, but the name gets concatonated after the closing tag. To get the name inside the Root tag, we need to put brackets around the content:","Any tag name can be generated, along with any attribute. The results are correctly escaped. There are two 'special' tag names:","CDATA- will generate a lt;![CDATA[ ... ]]gt; section with the content contained.","__- (double underscore) will generate a lt!-- ... --gt comment block."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","cp.web.xml.is(value) - boolean","Type","Function","Description","Checks if the value is an cp.web.xml block.","Parameters","value - the value to check","Returns","true if it is an HTML block, or false otherwise.","Notes"]}],[{"i":"cpwebsocketevent","l":"cp.websocket.event","p":["The set of event types received from websocket connections."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","closed","closing","error","message","opened","opening"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"closed","p":["Signature","cp.websocket.event.closed string","Type","Constant","Description","The socket has closed."]},{"l":"closing","p":["Signature","cp.websocket.event.closing string","Type","Constant","Description","The socket is attempting to close."]},{"l":"error","p":["Signature","cp.websocket.event.error string","Type","Constant","Description","There was an error. The connection may still be open."]},{"l":"message","p":["Signature","cp.websocket.event.message string","Type","Constant","Description","The socket has sent a message."]},{"l":"opened","p":["Signature","cp.websocket.event.opened string","Type","Constant","Description","The socket has opened."]},{"l":"opening","p":["Signature","cp.websocket.event.opening string","Type","Constant","Description","The socket is attempting to open."]}],[{"i":"cpwebsocketframe","l":"cp.websocket.frame","p":["Implementation of RFC-6455, Section 5","Reads and writes data to and from websocket frame wire protocol data."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","bytesRequired","fromBuffer","fromBytes","fromHex","isValid","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","isControlFrame","isNonControlFrame","toBytes"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"bytesRequired","p":["Signature","cp.websocket.frame.bytesRequired(data) - number | nil","Type","Function","Description","Checks bytes in the data string or buffer. If it contains a valid frame header (everything up to but not including the masking key/payload) it will return the total required bytes for a valid frame, otherwise it will return nil.","Parameters","data: the string or buffer to check.","Returns","The number of bytes required based on the frame header, or nil if not enough information is available.","Notes","The data will be unmodified after returning from this function."]},{"l":"fromBuffer","p":["Signature","cp.websocket.frame.fromBuffer(buff) - result{frame:frame, bytes:number}","Type","Function","Description","Reads a Websocket Frame from the provided cp.buffer of binary data.","Parameters","buff - The cp.buffer of bytes to read from.","Returns","The a cp.result with either success and the frame of binary payload data plus the number of bytes read from the data, or failure with a message if there was an error.","Notes","If a success, the value will be a table containing the following: frame- The cp.websocket.frame value bytes- The number of bytes which were read from the buffer. If a success, the passed-in buffer will have had the bytes required for the frame removed. If a failure, the passed-in buffer will not be modified."]},{"l":"fromBytes","p":["Signature","cp.websocket.frame.fromBytes(buff) - result{frame:frame, bytes:number}","Type","Function","Description","Reads a Websocket Frame from the provided cp.buffer of binary data.","Parameters","buff - The cp.buffer of bytes to read from.","Returns","The a cp.result with either success and the frame of binary payload data plus the number of bytes read from the data, or failure with a message if there was an error.","Notes","If a success, the value will be a table containing the following: frame- The cp.websocket.frame value bytes- The number of bytes which were read from the buffer."]},{"l":"fromHex","p":["Signature","cp.websocket.frame.fromHex(value, spacer) - frame, number | nil","Type","Function","Description","Convenience function for converting \"XX XX\" strings to a binary string, then parsing it into a frame.","Parameters","value - The hex value as a string spacer - The spacer used, for example \" \" (a space)","Returns","The frame of binary payload data plus the next index number to read from the data string, or nil if the data was invalid.","Notes"]},{"l":"isValid","p":["Signature","cp.websocket.frame.isValid(data) - number","Type","Function","Description","Checks bytes in the data string or buffer contains a valid frame.","Parameters","data: the string or buffer to check.","Returns","true if the data contains both a valid frame header and sufficient bytes for the whole frame.","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","cp.websocket.frame.new(final, opcode, mask, payloadData) - cp.websocket.frame","Type","Constructor","Description","Creates a new frame instance.","Parameters","final - If true, this is the final frame for a block of data. May be the first frame. opcode - The cp.websocket.frame.opcode for the frame. mask - If true, the data will be masked. Mandatory for client-originating frames. payloadData - The string of application data to send.","Returns","The new frame instance.","Notes"]},{"l":"Methods"},{"l":"isControlFrame","p":["Signature","cp.websocket.frame:isControlFrame() - boolean","Type","Method","Description","Checks if the frame has a control frame opcode.","Parameters","None","Returns","true if this is a control frame.","Notes"]},{"l":"isNonControlFrame","p":["Signature","cp.websocket.frame:isNonControlFrame() - boolean","Type","Method","Description","Checks if the frame has a non-control frame opcode.","Parameters","None","Returns","true if this is a non-control frame.","Notes"]},{"l":"toBytes","p":["Signature","cp.websocket.frame:toBytes() - string","Type","Method","Description","Converts the frame to its byte string form.","Parameters","None","Returns","The byte string containing the frame in binary format.","Notes"]}],[{"i":"cpwebsockethttp","l":"cp.websocket.http","p":["Provides a full HTTP-based websocket implementation."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","new","Methods- API calls which can only be made on an object returned by a constructor","close","isOpen","open","send","status"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"new","p":["Signature","cp.websocket.http.new(url, callback) - object","Type","Function","Description","Creates a new websocket connection via a serial connection.","Parameters","url - The URL path to the websocket server. callback - A function that's triggered by websocket actions.","Returns","The cp.websocket object","Notes","The callback should accept two parameters. The first parameter is a cp.websocket.event value. The second parameter is a string with the received message or an error message. Given a path '/mysock' and a port of 8000, the websocket URL is as follows: ws://localhost:8000/mysock wss://localhost:8000/mysock(if SSL enabled)"]},{"l":"Methods"},{"l":"close","p":["Signature","cp.websocket.http:close() - object","Type","Method","Description","Closes a websocket connection.","Parameters","None","Returns","The cp.websocket.serial object","Notes","The status may be either closing or closed after calling this method. To be notified the close has completed, listen for the cp.websocket.event.closed event in the callback."]},{"l":"isOpen","p":["Signature","cp.websocket.http:isOpen() - boolean","Type","Method","Description","Gets whether or not the HTTP websocket is fully open.","Parameters","None","Returns","true if open, otherwise false.","Notes"]},{"l":"open","p":["Signature","cp.websocket.http:open() - cp.websocket.status","Type","Method","Description","Attempts to open a websocket connection with the configured HTTP connection.","Parameters","None","Returns","The cp.websocket.status after attempting to open.","Notes"]},{"l":"send","p":["Signature","cp.websocket.http:send(message[, isData]) - object","Type","Method","Description","Sends a message to the websocket client.","Parameters","message - A string containing the message to send. isData - An optional boolean that sends the message as binary data (defaults to true).","Returns","The cp.websocket.serial object","Notes","Forcing a text representation by setting isData to false may alter the data if it contains invalid UTF8 character sequences (the default string behavior is to make sure everything is \"printable\" by converting invalid sequences into the Unicode Invalid Character sequence)."]},{"l":"status","p":["Signature","cp.websocket.http:status() - cp.websocket.status","Type","Method","Description","Returns the current connection status.","Parameters","None","Returns","The current cp.websocket.status.","Notes"]}],[{"i":"cpwebsocketserial","l":"cp.websocket.serial","p":["A partial implementation of the websocket API communicating via serial port rather than HTTP.","It implements the same basic methods as hs.websocket, so can be dropped in as a replacement without change, other than the initial construction.","Note that it does not support any websocket extensions."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","new","Methods- API calls which can only be made on an object returned by a constructor","close","isOpen","open","send","status"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"new","p":["Signature","cp.websocket.serial.new(deviceName, baudRate, dataBits, stopBits, callback) - object","Type","Function","Description","Creates a new websocket connection via a serial connection.","Parameters","deviceName - The name of the USB Device baudRate - The connection baud rate dataBits - The data bits. stopBits - The stop bits. callback - A function that's triggered by websocket actions.","Returns","The cp.websocket object","Notes","The callback should accept two parameters. The first parameter is a cp.websocket.event value. The second parameter is a string with the received message or an error message."]},{"l":"Methods"},{"l":"close","p":["Signature","cp.websocket.serial:close() - object","Type","Method","Description","Closes a websocket connection.","Parameters","None","Returns","The cp.websocket.serial object","Notes","The status may be either closing or closed after calling this method. To be notified the close has completed, listen for the cp.websocket.event.closed event in the callback."]},{"l":"isOpen","p":["Signature","cp.websocket.serial:isOpen() - boolean","Type","Method","Description","Gets whether or not the serial websocket is fully open.","Parameters","None","Returns","true if open, otherwise false.","Notes"]},{"l":"open","p":["Signature","cp.websocket.serial:open() - cp.websocket.status","Type","Method","Description","Attempts to open a websocket connection with the configured serial connection.","Parameters","None","Returns","The cp.websocket.status after attempting to open.","Notes"]},{"l":"send","p":["Signature","cp.websocket.serial:send(message[, isData]) - object","Type","Method","Description","Sends a message to the websocket client.","Parameters","message - A string containing the message to send. isData - An optional boolean that sends the message as binary data (defaults to true).","Returns","The cp.websocket.serial object","Notes","Forcing a text representation by setting isData to false may alter the data if it contains invalid UTF8 character sequences (the default string behavior is to make sure everything is \"printable\" by converting invalid sequences into the Unicode Invalid Character sequence)."]},{"l":"status","p":["Signature","cp.websocket.serial:status() - cp.websocket.status","Type","Method","Description","Returns the current connection status.","Parameters","None","Returns","The current cp.websocket.status.","Notes"]}],[{"i":"cpwebsocketstatus","l":"cp.websocket.status","p":["A table of statuses used by both cp.websocket.serial and cp.websocket.http to describe the connection status."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","closed","closing","open","opening"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"closed","p":["Signature","cp.websocket.status.closed string","Type","Constant","Description","The socket is closed."]},{"l":"closing","p":["Signature","cp.websocket.status.closing string","Type","Constant","Description","The socket is attempting to close."]},{"l":"open","p":["Signature","cp.websocket.status.open string","Type","Constant","Description","The socket is open."]},{"l":"opening","p":["Signature","cp.websocket.status.opening string","Type","Constant","Description","The socket is attempting to open."]}],[{"l":"CommandPost"},{"l":"API Documentation","p":["A collection of useful dialog boxes, alerts and panels for user interaction.","A different approach to drawing in Hammerspoon","A generalized framework for working with OSX UI elements","A minimalistic Key-Value-Observer framework for Lua.","A module for capturing and manipulating image objects from other modules for use with hs.drawing.","A panel that allows users to select a color.","A sub module to hs.canvas which provides support for basic matrix manipulations which can be used as the values for transformation attributes in the hs.canvas module.","Access/inspect the filesystem","Allows CommandPost to respond to URLs","Base64 encoding and decoding","Battery/power information","Builds documentation support files. Still experimental.","Communicate with external devices through a serial port (most commonly RS-232).","Configure/control an Elgato Stream Deck.","Contains two low latency audio recognizers for different mouth noises, which can be used to trigger actions like scrolling or clicking.","Control Hammerspoon's dock icon","Control system power states (sleeping, preventing sleep, screen locking, etc)","Controls for Deezer music player.","Controls for iTunes music player","Controls for Spotify music player","Controls for VOX music player","Convert between key-strings and key-codes. Also provides functionality for querying and changing keyboard layouts.","Converts between GPS coordinates and more user friendly representations like an address or points of interest.","Core Hammerspoon functionality","Create and manage global keyboard shortcuts","Create and manage menubar icons","Create and manipulate toolbars which can be attached to the Hammerspoon console or hs.webview objects.","Create documentation objects for interactive help within Hammerspoon","Create, modify and inspect events for hs.eventtap","Create/manage modal keyboard shortcut environments","DEPRECATED. Primitives for drawing on the screen in various ways.","Description","Determine the machine's location and useful information about that location","Display web content in a window from Hammerspoon","Easily find hs.application and hs.window objects","Execute AppleScript code","Execute functions with various timing rules","Execute JavaScript code","Execute Open Scripting Architecture (OSA) code - AppleScript and JavaScript","Execute processes in the background and capture their output","Filter windows by application, title, location on screen and more, and easily subscribe to events on these windows","Find and publish network services advertised by multicast DNS (Bonjour) with Hammerspoon.","Functional programming utility functions","Functions providing basic support for UTF-8 encodings","Get and manipulate extended attributes for files and directories","Graphical, interactive tool for choosing/searching data","HID interface for Hammerspoon, controls and queries caps lock state","HID LED interface for Hammerspoon, controls the state of keyboard LEDs","Highlight the focused window","hs","hs.alert","hs.appfinder","hs.applescript","hs.application","hs.application.watcher","hs.audiodevice","hs.audiodevice.datasource","hs.audiodevice.watcher","hs.axuielement","hs.axuielement.axtextmarker","hs.axuielement.observer","hs.base64","hs.battery","hs.battery.watcher","hs.blackmagic","hs.bonjour","hs.bonjour.service","hs.brightness","hs.caffeinate","hs.caffeinate.watcher","hs.camera","hs.canvas","hs.canvas.matrix","hs.chooser","hs.console","hs.crash","hs.deezer","hs.dialog","hs.dialog.color","hs.distributednotifications","hs.doc","hs.doc.builder","hs.doc.hsdocs","hs.doc.markdown","hs.dockicon","hs.drawing","hs.drawing.color","hs.eventtap","hs.eventtap.event","hs.expose","hs.fnutils","hs.fs","hs.fs.volume","hs.fs.xattr","hs.geometry","hs.grid","hs.hash","hs.hid","hs.hid.led","hs.hints","hs.host","hs.host.locale","hs.hotkey","hs.hotkey.modal","hs.http","hs.httpserver","hs.httpserver.hsminweb","hs.httpserver.hsminweb.cgilua","hs.httpserver.hsminweb.cgilua.lp","hs.httpserver.hsminweb.cgilua.urlcode","hs.image","hs.inspect","hs.ipc","hs.itunes","hs.javascript","hs.json","hs.keycodes","hs.layout","hs.location","hs.location.geocoder","hs.logger","hs.math","hs.menubar","hs.messages","hs.midi","hs.milight","hs.mjomatic","hs.mouse","hs.network","hs.network.configuration","hs.network.host","hs.network.ping","hs.network.ping.echoRequest","hs.network.reachability","hs.noises","hs.notify","hs.osascript","hs.osc","hs.pasteboard","hs.pasteboard.watcher","hs.pathwatcher","hs.plist","hs.razer","hs.redshift","hs.screen","hs.screen.watcher","hs.serial","hs.settings","hs.sharing","hs.shortcuts","hs.socket","hs.socket.udp","hs.sound","hs.spaces","hs.spaces.watcher","hs.speech","hs.speech.listener","hs.spoons","hs.spotify","hs.spotlight","hs.spotlight.group","hs.spotlight.item","hs.sqlite3","hs.streamdeck","hs.styledtext","hs.tabs","hs.tangent","hs.task","hs.timer","hs.timer.delayed","hs.uielement","hs.uielement.watcher","hs.urlevent","hs.usb","hs.usb.watcher","hs.utf8","hs.vox","hs.watchable","hs.websocket","hs.webview","hs.webview.datastore","hs.webview.toolbar","hs.webview.usercontent","hs.wifi","hs.wifi.watcher","hs.window","hs.window.filter","hs.window.highlight","hs.window.layout","hs.window.switcher","hs.window.tiling","Inspect information about the machine Hammerspoon is running on","Inspect the system's camera devices","Inspect USB devices","Inspect WiFi networks","Inspect/manipulate display brightness","Inspect/manipulate pasteboards (more commonly called clipboards). Both the system default pasteboard and custom named pasteboards can be interacted with.","Inspect/manipulate the data sources of an audio device","Inspect/manipulate the position of the mouse pointer","Inspect/manipulate windows","Interact with NSDistributedNotificationCenter","Interact with OS X filesystem volumes","Interact with SQLite databases","Inverts and/or lowers the color temperature of the screen(s) on a schedule, for a more pleasant experience at night","JSON encoding and decoding","Keyboard-driven expose replacement/enhancement","List and run shortcuts from the Shortcuts app","Load/play/manipulate sound files","Manage the internal documentation web server.","Manipulate running applications","Manipulate screens (i.e. monitors)","Manipulate the system's audio devices","Markdown to HTML and plaintext conversion support used by hs.doc","MIDI Extension for Hammerspoon.","Minimalist Web Server for Hammerspoon","Module","Move/resize windows within a grid","Open Sound Control (OSC) support.","Perform HTTP requests","Place the windows of an application into tabs drawn on its titlebar","Produce human-readable representations of Lua variables (particularly tables)","Provides access to the system color lists and a wider variety of ways to represent color within Hammerspoon.","Provides Hammerspoon with the ability to create both local and remote message ports for inter-process communication.","Provides lower-level access to the ICMP Echo Request infrastructure used by the hs.network.ping module. In general, you should not need to use this module directly unless you have specific requirements not met by the hs.network.ping module and the hs.network.ping object methods.","Provides methods to list and purge the various types of data used by websites visited with hs.webview.","Provides support functions in the cgilua module for Hammerspoon Minimal Web Server Lua templates.","Razer device support.","Read and write Property List files","Represents the service records that are discovered or published by the hs.bonjour module.","Retrieve information about the user's Language and Region settings.","Send messages via iMessage and SMS Relay (note, SMS Relay requires OS X 10.10 and an established SMS Relay pairing between your Mac and an iPhone running iOS8)","Serialize simple Lua variables across Hammerspoon launches","Share items with the macOS Sharing Services under the control of Hammerspoon.","Simple controls for the MiLight LED WiFi bridge (also known as LimitlessLED and EasyBulb)","Simple HTTP server","Simple logger for debugging purposes","Simple on-screen alerts","Simple websocket client.","Some functions for manipulating the Hammerspoon console.","Specialized timer objects to coalesce processing of unpredictable asynchronous events into a single callback","Support for the Blackmagic DaVinci Resolve Speed Editor Keyboard and Editor Keyboard.","Support functions for the CGILua compatibility module for encoding and decoding URL components in accordance with RFC 3986.","Support functions for the CGILua compatibility module for including and translating Lua template pages into Lua code for execution within the Hammerspoon environment to provide dynamic content for http requests.","Switch focus with a transient per-application keyboard shortcut","Talk to custom protocols using asynchronous TCP sockets.","Talk to custom protocols using asynchronous UDP sockets.","Tangent Control Surface Extension","Tap into input events (mouse, keyboard, trackpad) for observation and possibly overriding them","This module adds support for controlling the style of the text in Hammerspoon.","This module allows Hammerspoon to preform Spotlight metadata queries.","This module allows you to access the accessibility objects of running applications, their windows, menus, and other user interface elements that support the OS X accessibility API.","This module allows you to create on screen notifications in the User Notification Center located at the right of the users screen.","This module provides a basic ping function which can test host availability. Ping is a network diagnostic tool commonly found in most operating systems which can be used to test if a route to a specified host exists and if that host is responding to network traffic.","This module provides access to the Speech Recognizer component of OS X.","This module provides access to the Speech Synthesizer component of OS X.","This module provides functions for inquiring about and monitoring changes to the network.","This module provides some basic functions for controlling macOS Spaces.","This module provides support for injecting custom JavaScript user content into your webviews and for JavaScript to post messages back to Hammerspoon.","This sub-module can be used to determine the reachability of a target host. A remote host is considered reachable when a data packet, sent by an application into the network stack, can leave the local device. Reachability does not guarantee that the data packet will actually be received by the host.","This sub-module is used to access results to a spotlightObject query which have been grouped by one or more attribute values.","This sub-module is used to access the individual results of a spotlightObject or a spotlightGroupObject.","This sub-module provides access to the current location set configuration settings in the system's dynamic store.","This sub-module provides functions for acquiring host information, such as hostnames, addresses, and reachability.","This submodule allows hs.axuielement to support using AXTextMarker and AXTextMarkerRange objects as parameters for parameterized Accessibility attributes with applications that support them.","This submodule allows you to create observers for accessibility elements and be notified when they trigger notifications. Not all notifications are supported by all elements and not all elements support notifications, so some trial and error will be necessary, but for compliant applications, this can allow your code to be notified when an application's user interface changes in some way.","tmuxomatic-like window management","Utility and management functions for Spoons","Utility object to represent points, sizes and rects in a bidimensional plane","Various features/facilities for developers who are working on Hammerspoon itself, or writing extensions for it. It is extremely unlikely that you should need any part of this extension, in a normal user configuration.","Various hashing algorithms","Various helpful mathematical functions","WARNING: EXPERIMENTAL MODULE. DO NOT USE IN PRODUCTION.","Watch for application launch/terminate events","Watch for battery/power state changes","Watch for changes to the associated wifi network","Watch for display and system sleep/wake/power events","Watch for events on certain UI elements (including windows and applications)","Watch for Pasteboard Changes.","Watch for screen layout changes","Watch for system level audio hardware events","Watch for USB device connection/disconnection events","Watch paths recursively for changes","Watches for the current Space being changed","Window layout manager","Window-based cmd-tab replacement"]}],[{"l":"hs","p":["Core Hammerspoon functionality"]},{"l":"Submodules","p":["hs.alert","hs.appfinder","hs.applescript","hs.application","hs.audiodevice","hs.axuielement","hs.base64","hs.battery","hs.blackmagic","hs.bonjour","hs.brightness","hs.caffeinate","hs.camera","hs.canvas","hs.chooser","hs.console","hs.crash","hs.deezer","hs.dialog","hs.distributednotifications","hs.doc","hs.dockicon","hs.drawing","hs.eventtap","hs.expose","hs.fnutils","hs.fs","hs.geometry","hs.grid","hs.hash","hs.hid","hs.hints","hs.host","hs.hotkey","hs.http","hs.httpserver","hs.image","hs.inspect","hs.ipc","hs.itunes","hs.javascript","hs.json","hs.keycodes","hs.layout","hs.location","hs.logger","hs.math","hs.menubar","hs.messages","hs.midi","hs.milight","hs.mjomatic","hs.mouse","hs.network","hs.noises","hs.notify","hs.osascript","hs.osc","hs.pasteboard","hs.pathwatcher","hs.plist","hs.razer","hs.redshift","hs.screen","hs.serial","hs.settings","hs.sharing","hs.shortcuts","hs.socket","hs.sound","hs.spaces","hs.speech","hs.spoons","hs.spotify","hs.spotlight","hs.sqlite3","hs.streamdeck","hs.styledtext","hs.tabs","hs.tangent","hs.task","hs.timer","hs.uielement","hs.urlevent","hs.usb","hs.utf8","hs.vox","hs.watchable","hs.websocket","hs.webview","hs.wifi","hs.window"]},{"l":"API Overview","p":["accessibilityState","accessibilityStateCallback","allowAppleScript","autoLaunch","automaticallyCheckForUpdates","cameraState","canCheckForUpdates","checkForUpdates","cleanUTF8forConsole","closeConsole","closePreferences","completionsForInputString","configdir","consoleOnTop","Constants- Useful values which cannot be changed","coroutineApplicationYield","dockIcon","dockIconClickCallback","docstrings_json_file","execute","fileDroppedToDockIconCallback","focus","Functions- API calls offered directly by the extension","getObjectMetatable","help","hsdocs","loadSpoon","menuIcon","microphoneState","open","openAbout","openConsole","openConsoleOnDockClick","openPreferences","preferencesDarkMode","printf","processInfo","rawprint","relaunch","reload","screenRecordingState","showError","shutdownCallback","textDroppedToDockIconCallback","toggleConsole","updateAvailable","uploadCrashData","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"configdir","p":["Signature","hs.configdir","Type","Constant","Description","A string containing Hammerspoon's configuration directory. Typically ~/.hammerspoon/"]},{"l":"docstrings_json_file","p":["Signature","hs.docstrings_json_file","Type","Constant","Description","A string containing the full path to the docs.json file inside Hammerspoon's app bundle. This contains the full Hammerspoon API documentation and can be accessed in the Console using help(someAPI). It can also be loaded and processed by the hs.doc extension"]},{"l":"processInfo","p":["Signature","hs.processInfo","Type","Constant","Description","A table containing read-only information about the Hammerspoon application instance currently running."]},{"l":"Variables"},{"l":"accessibilityStateCallback","p":["Signature","hs.accessibilityStateCallback","Type","Variable","Description","An optional function that will be called when the Accessibility State is changed.","Notes","The function will not receive any arguments when called. To check what the accessibility state has been changed to, you should call hs.accessibilityState from within your function."]},{"l":"completionsForInputString","p":["Signature","hs.completionsForInputString(completionWord) - table of strings","Type","Variable","Description","Gathers tab completion options for the Console window","Parameters","completionWord - A string from the Console window's input field that completions are needed for","Returns","A table of strings, each of which will be shown as a possible completion option to the user","Notes","Hammerspoon provides a default implementation of this function, which can complete against the global Lua namespace, the 'hs' (i.e. extension) namespace, and object metatables. You can assign a new function to the variable to replace it with your own variant."]},{"l":"dockIconClickCallback","p":["Signature","hs.dockIconClickCallback","Type","Variable","Description","An optional function that will be called when the Hammerspoon Dock Icon is clicked while the app is running","Notes","If set, this callback will be called regardless of whether or not Hammerspoon shows its console window in response to a click (which can be enabled/disabled via hs.openConsoleOnDockClick()"]},{"l":"fileDroppedToDockIconCallback","p":["Signature","hs.fileDroppedToDockIconCallback","Type","Variable","Description","An optional function that will be called when a files are dragged to the Hammerspoon Dock Icon or sent via the Services menu","Notes","The function should accept a single parameter, which will be a string containing the full path to the file that was dragged to the dock icon If multiple files are sent, this callback will be called once for each file This callback will be triggered when ANY file type is dragged onto the Hammerspoon Dock Icon, however certain filetypes are also processed separately by Hammerspoon. For example, hs.urlevent will be triggered when the following filetypes are dropped onto the Dock Icon: HTML Documents (.html, .htm, .shtml, .jhtml), Plain text documents (.txt, .text), Web site locations (.url), XHTML documents (.xhtml, .xht, .xhtm, .xht)."]},{"l":"shutdownCallback","p":["Signature","hs.shutdownCallback","Type","Variable","Description","An optional function that will be called when the Lua environment is being destroyed (either because Hammerspoon is exiting or reloading its config)","Notes","This function should not perform any asynchronous tasks You do not need to fastidiously destroy objects you have created, this callback exists purely for utility reasons (e.g. serialising state, destroying system resources that will not be released by normal Lua garbage collection processes, etc)"]},{"l":"textDroppedToDockIconCallback","p":["Signature","hs.textDroppedToDockIconCallback","Type","Variable","Description","An optional function that will be called when text is dragged to the Hammerspoon Dock Icon or sent via the Services menu","Notes","The function should accept a single parameter, which will be a string containing the text that was dragged to the dock icon"]},{"l":"Functions"},{"l":"accessibilityState","p":["Signature","hs.accessibilityState(shouldPrompt) - isEnabled","Type","Function","Description","Checks the Accessibility Permissions for Hammerspoon, and optionally allows you to prompt for permissions.","Parameters","shouldPrompt - an optional boolean value indicating if the dialog box asking if the System Preferences application should be opened should be presented when Accessibility is not currently enabled for Hammerspoon. Defaults to false.","Returns","True or False indicating whether or not Accessibility is enabled for Hammerspoon.","Notes","Since this check is done automatically when Hammerspoon loads, it is probably of limited use except for skipping things that are known to fail when Accessibility is not enabled. Evettaps which try to capture keyUp and keyDown events, for example, will fail until Accessibility is enabled and the Hammerspoon application is relaunched."]},{"l":"allowAppleScript","p":["Signature","hs.allowAppleScript([state]) - bool","Type","Function","Description","Set or display whether or not external Hammerspoon AppleScript commands are allowed.","Parameters","state - an optional boolean which will set whether or not external Hammerspoon's AppleScript commands are allowed.","Returns","A boolean, true if Hammerspoon's AppleScript commands are (or has just been) allowed, otherwise false.","Notes","AppleScript access is disallowed by default. However due to the way AppleScript support works, Hammerspoon will always allow AppleScript commands that are part of the \"Standard Suite\", such as name, quit, version, etc. However, Hammerspoon will only allow commands from the \"Hammerspoon Suite\" if hs.allowAppleScript() is set to true. For a full list of AppleScript Commands:- Open /Applications/Utilities/Script Editor.app- Click File Open Dictionary...- Select Hammerspoon from the list of Applications- This will now open a Dictionary containing all of the available Hammerspoon AppleScript commands. Note that strings within the Lua code you pass from AppleScript can be delimited by [[and ]] rather than normal quotes Example: lua/lili tell application Hammerspoon/lili execute lua code hs.alert([[Hello from AppleScript]])/lili end tell"]},{"l":"autoLaunch","p":["Signature","hs.autoLaunch([state]) - bool","Type","Function","Description","Set or display the \"Launch on Login\" status for Hammerspoon.","Parameters","state - an optional boolean which will set whether or not Hammerspoon should be launched automatically when you log into your computer.","Returns","True if Hammerspoon is currently (or has just been) set to launch on login or False if Hammerspoon is not.","Notes"]},{"l":"automaticallyCheckForUpdates","p":["Signature","hs.automaticallyCheckForUpdates([setting]) - bool","Type","Function","Description","Gets and optionally sets the Hammerspoon option to automatically check for updates.","Parameters","setting - an optional boolean variable indicating if Hammerspoon should (true) or should not (false) check for updates.","Returns","The current (or newly set) value indicating whether or not automatic update checks should occur for Hammerspoon.","Notes","If you are running a non-release or locally compiled version of Hammerspoon then the results of this function are unspecified."]},{"l":"cameraState","p":["Signature","hs.cameraState(shouldPrompt) - boolean","Type","Function","Description","Checks the Camera Permissions for Hammerspoon, and optionally allows you to prompt for permissions.","Parameters","shouldPrompt - an optional boolean value indicating if we should request camera access. Defaults to false.","Returns","true or false indicating whether or not Camera access is enabled for Hammerspoon.","Notes","Will always return true on macOS 10.13 or earlier."]},{"l":"canCheckForUpdates","p":["Signature","hs.canCheckForUpdates() - boolean","Type","Function","Description","Returns a boolean indicating whether or not the Sparkle framework is available to check for Hammerspoon updates.","Parameters","None","Returns","a boolean indicating whether or not the Sparkle framework is available to check for Hammerspoon updates","Notes","The Sparkle framework is included in all regular releases of Hammerspoon but not included if you are running a non-release or locally compiled version of Hammerspoon, so this function can be used as a simple test to determine whether or not you are running a formal release Hammerspoon or not."]},{"l":"checkForUpdates","p":["Signature","hs.checkForUpdates([silent]) - none","Type","Function","Description","Check for an update now, and if one is available, prompt the user to continue the update process.","Parameters","silent - An optional boolean. If true, no UI will be displayed if an update is available. Defaults to false.","Returns","None","Notes","If you are running a non-release or locally compiled version of Hammerspoon then the results of this function are unspecified."]},{"l":"cleanUTF8forConsole","p":["Signature","hs.cleanUTF8forConsole(inString) - outString","Type","Function","Description","Returns a copy of the incoming string that can be displayed in the Hammerspoon console. Invalid UTF8 sequences are converted to the Unicode Replacement Character and NULL (0x00) is converted to the Unicode Empty Set character.","Parameters","inString - the string to be cleaned up","Returns","outString - the cleaned up version of the input string.","Notes","This function is applied automatically to all output which appears in the Hammerspoon console, but not to the output provided by the hs command line tool. This function does not modify the original string - to actually replace it, assign the result of this function to the original string. This function is a more specifically targeted version of the hs.utf8.fixUTF8(...) function."]},{"l":"closeConsole","p":["Signature","hs.closeConsole()","Type","Function","Description","Closes the Hammerspoon Console window","Parameters","None","Returns","Notes"]},{"l":"closePreferences","p":["Signature","hs.closePreferences()","Type","Function","Description","Closes the Hammerspoon Preferences window","Parameters","None","Returns","Notes"]},{"l":"consoleOnTop","p":["Signature","hs.consoleOnTop([state]) - bool","Type","Function","Description","Set or display whether or not the Hammerspoon console is always on top when visible.","Parameters","state - an optional boolean which will set whether or not the Hammerspoon console is always on top when visible.","Returns","True if the console is currently set (or has just been) to be always on top when visible or False if it is not.","Notes"]},{"l":"coroutineApplicationYield","p":["Signature","hs.coroutineApplicationYield([delay])","Type","Function","Description","Yield coroutine to allow the Hammerspoon application to process other scheduled events and schedule a resume in the event application queue.","Parameters","delay- an optional number, default hs.math.minFloat, specifying the number of seconds from when this function is executed that the coroutine.resume should be scheduled for.","Returns","None","Notes","this function will return an error if invoked outside of a coroutine. unlike coroutine.yield, this function does not allow the passing of (new) information to or from the coroutine while it is running; this function is to allow long running tasks to yield time to the Hammerspoon application so other timers and scheduled events can occur without requiring the programmer to add code for an explicit resume. this function is added to the lua coroutine library as coroutine.applicationYield as an alternative name."]},{"l":"dockIcon","p":["Signature","hs.dockIcon([state]) - bool","Type","Function","Description","Set or display whether or not the Hammerspoon dock icon is visible.","Parameters","state - an optional boolean which will set whether or not the Hammerspoon dock icon should be visible.","Returns","True if the icon is currently set (or has just been) to be visible or False if it is not.","Notes","This function is a wrapper to functions found in the hs.dockicon module, but is provided here to provide an interface consistent with other selectable preference items."]},{"l":"execute","p":["Signature","hs.execute(command[, with_user_env]) - output, status, type, rc","Type","Function","Description","Runs a shell command, optionally loading the users shell environment first, and returns stdout as a string, followed by the same result codes as os.execute would return.","Parameters","command - a string containing the shell command to execute with_user_env - optional boolean argument which if provided and is true, executes the command in the users login shell as an \"interactive\" login shell causing the user's local profile (or other login scripts) to be loaded first.","Returns","output -- the stdout of the command as a string. May contain an extra terminating new-line (\\n). status -- true if the command terminated successfully or nil otherwise. type -- a string value of \"exit\" or \"signal\" indicating whether the command terminated of its own accord or if it was terminated by a signal (killed, segfault, etc.) rc -- if the command exited of its own accord, then this number will represent the exit code (usually 0 for success, not 0 for an error, though this is very command specific, so check man pages when there is a question). If the command was killed by a signal, then this number corresponds to the signal type that caused the command to terminate.","Notes","Setting with_user_env to true does incur noticeable overhead, so it should only be used if necessary (to set the path or other environment variables). Because this function returns the stdout as it's first return value, it is not quite a drop-in replacement for os.execute. In most cases, it is probable that stdout will be the empty string when status is nil, but this is not guaranteed, so this trade off of shifting os.execute's results was deemed acceptable. This particular function is most useful when you're more interested in the command's output then a simple check for completion and result codes. If you only require the result codes or verification of command completion, then os.execute will be slightly more efficient. If you need to execute commands that have spaces in their paths, use a form like: hs.execute [[/Some/Path To/An/Executable --first-arg second-arg]]"]},{"l":"focus","p":["Signature","hs.focus()","Type","Function","Description","Makes Hammerspoon the foreground app.","Parameters","None","Returns","Notes"]},{"l":"getObjectMetatable","p":["Signature","hs.getObjectMetatable(name) - table or nil","Type","Function","Description","Fetches the Lua metatable for objects produced by an extension","Parameters","name - A string containing the name of a module to fetch object metadata for (e.g. hs.screen)","Returns","The extension's object metatable, or nil if an error occurred","Notes"]},{"l":"help","p":["Signature","hs.help(identifier)","Type","Function","Description","Prints the documentation for some part of Hammerspoon's API and Lua 5.3. This function is actually sourced from hs.doc.help.","Parameters","identifier - A string containing the signature of some part of Hammerspoon's API (e.g. hs.reload)","Returns","None","Notes","This function is mainly for runtime API help while using Hammerspoon's Console You can also access the results of this function by the following methods from the console: help(\"identifier\") -- quotes are required, e.g. help(hs.reload) help.identifier.path -- no quotes are required, e.g. help.hs.reload Lua information can be accessed by using the lua prefix, rather than hs. the identifier lua._man provides the table of contents for the Lua 5.3 manual. You can pull up a specific section of the lua manual by including the chapter (and subsection) like this: lua._man._3_4_8. the identifier lua._C will provide information specifically about the Lua C API for use when developing modules which require external libraries."]},{"l":"hsdocs","p":["Signature","hs.hsdocs([identifier])","Type","Function","Description","Display's Hammerspoon API documentation in a webview browser.","Parameters","identifier - An optional string containing the signature of some part of Hammerspoon's API (e.g. hs.reload). If no string is provided, then the table of contents for the Hammerspoon documentation is displayed.","Returns","None","Notes","You can also access the results of this function by the following methods from the console: hs.hsdocs.identifier.path -- no quotes are required, e.g. hs.hsdocs.hs.reload See hs.doc.hsdocs for more information about the available settings for the documentation browser. This function provides documentation for Hammerspoon modules, functions, and methods similar to the Hammerspoon Dash docset, but does not require any additional software. This currently only provides documentation for the built in Hammerspoon modules, functions, and methods. The Lua documentation and third-party modules are not presently supported, but may be added in a future release."]},{"l":"loadSpoon","p":["Signature","hs.loadSpoon(name[, global]) - Spoon object","Type","Function","Description","Loads a Spoon","Parameters","name - The name of a Spoon (without the trailing .spoon) global - An optional boolean. If true, this function will insert the spoon into Lua's global namespace as spoon.NAME. Defaults to true.","Returns","The object provided by the Spoon (which can be ignored if you chose to make the Spoon global)","Notes","Spoons are a way of distributing self-contained units of Lua functionality, for Hammerspoon. For more information, see https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md This function will load the Spoon and call its :init() method if it has one. If you do not wish this to happen, or wish to use a Spoon that somehow doesn't fit with the behaviours of this function, you can also simply require('name') to load the Spoon If the Spoon has a :start() method you are responsible for calling it before using the functionality of the Spoon. If the Spoon provides documentation, it will be loaded by made available in hs.docs To learn how to distribute your own code as a Spoon, see https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md"]},{"l":"menuIcon","p":["Signature","hs.menuIcon([state]) - bool","Type","Function","Description","Set or display whether or not the Hammerspoon menu icon is visible.","Parameters","state - an optional boolean which will set whether or not the Hammerspoon menu icon should be visible.","Returns","True if the icon is currently set (or has just been) to be visible or False if it is not.","Notes"]},{"l":"microphoneState","p":["Signature","hs.microphoneState(shouldPrompt) - boolean","Type","Function","Description","Checks the Microphone Permissions for Hammerspoon, and optionally allows you to prompt for permissions.","Parameters","shouldPrompt - an optional boolean value indicating if we should request microphone access. Defaults to false.","Returns","true or false indicating whether or not Microphone access is enabled for Hammerspoon.","Notes","Will always return true on macOS 10.13 or earlier."]},{"l":"open","p":["Signature","hs.open(filePath)","Type","Function","Description","Opens a file as if it were opened with /usr/bin/open","Parameters","filePath - A string containing the path to a file/bundle to open","Returns","A boolean, true if the file was opened successfully, otherwise false","Notes"]},{"l":"openAbout","p":["Signature","hs.openAbout()","Type","Function","Description","Displays the OS X About panel for Hammerspoon; implicitly focuses Hammerspoon.","Parameters","None","Returns","Notes"]},{"l":"openConsole","p":["Signature","hs.openConsole([bringToFront])","Type","Function","Description","Opens the Hammerspoon Console window and optionally focuses it.","Parameters","bringToFront - if true (default), the console will be focused as well as opened.","Returns","None","Notes"]},{"l":"openConsoleOnDockClick","p":["Signature","hs.openConsoleOnDockClick([state]) - bool","Type","Function","Description","Set or display whether or not the Console window will open when the Hammerspoon dock icon is clicked","Parameters","state - An optional boolean, true if the console window should open, false if not","Returns","A boolean, true if the console window will open when the dock icon","Notes","This only refers to dock icon clicks while Hammerspoon is already running. The console window is not opened by launching the app"]},{"l":"openPreferences","p":["Signature","hs.openPreferences()","Type","Function","Description","Displays the Hammerspoon Preferences panel; implicitly focuses Hammerspoon.","Parameters","None","Returns","Notes"]},{"l":"preferencesDarkMode","p":["Signature","hs.preferencesDarkMode([state]) - bool","Type","Function","Description","Set or display whether or not the Preferences panel should display in dark mode.","Parameters","state - an optional boolean which will set whether or not the Preferences panel should display in dark mode.","Returns","A boolean, true if dark mode is enabled otherwise false.","Notes"]},{"l":"printf","p":["Signature","hs.printf(format, ...)","Type","Function","Description","Prints formatted strings to the Console","Parameters","format - A format string... - Zero or more arguments to fill the placeholders in the format string","Returns","None","Notes","This is a simple wrapper around the Lua code print(string.format(...))."]},{"l":"rawprint","p":["Signature","hs.rawprint(aString)","Type","Function","Description","The original Lua print() function","Parameters","aString - A string to be printed","Returns","None","Notes","Hammerspoon overrides Lua's print() function, but this is a reference we retain to is, should you need it for any reason"]},{"l":"relaunch","p":["Signature","hs.relaunch()","Type","Function","Description","Quits and relaunches Hammerspoon.","Parameters","None","Returns","Notes"]},{"l":"reload","p":["Signature","hs.reload()","Type","Function","Description","Reloads your init-file in a fresh Lua environment.","Parameters","None","Returns","Notes"]},{"l":"screenRecordingState","p":["Signature","hs.screenRecordingState(shouldPrompt) - isEnabled","Type","Function","Description","Checks the Screen Recording Permissions for Hammerspoon, and optionally allows you to prompt for permissions.","Parameters","shouldPrompt - an optional boolean value indicating if the dialog box asking if the System Preferences application should be opened should be presented when Screen Recording is not currently enabled for Hammerspoon. Defaults to false.","Returns","True or False indicating whether or not Screen Recording is enabled for Hammerspoon.","Notes","If you trigger the prompt and the user denies it, you cannot bring up the prompt again - the user must manually enable it in System Preferences."]},{"l":"showError","p":["Signature","hs.showError(err)","Type","Function","Description","Shows an error to the user, using Hammerspoon's Console","Parameters","err - A string containing an error message","Returns","None","Notes","This function is called whenever an (uncaught) error occurs or is thrown (via error()) The default implementation shows a notification, opens the Console, and prints the error message and stacktrace You can override this function if you wish to route errors differently (e.g. for remote systems)"]},{"l":"toggleConsole","p":["Signature","hs.toggleConsole()","Type","Function","Description","Toggles the visibility of the console","Parameters","None","Returns","Notes","If the console is not currently open, it will be opened. If it is open and not the focused window, it will be brought forward and focused. If the console is focused, it will be closed."]},{"l":"updateAvailable","p":["Signature","hs.updateAvailable() - string or false, string","Type","Function","Description","Gets the version & build number of an available update","Parameters","None","Returns","A string containing the display version of the latest release, or a boolean false if no update is available A string containing the build number of the latest release, or nil if no update is available","Notes","This is not a live check, it is a cached result of whatever the previous update check found. By default Hammerspoon checks for updates every few hours, but you can also add your own timer to check for updates more frequently with hs.checkForUpdates()"]},{"l":"uploadCrashData","p":["Signature","hs.uploadCrashData([state]) - bool","Type","Function","Description","Get or set the \"Upload Crash Data\" preference for Hammerspoon","Parameters","state - An optional boolean, true to upload crash reports, false to not","Returns","True if Hammerspoon is currently (or has just been) set to upload crash data or False otherwise","Notes","If at all possible, please do allow Hammerspoon to upload crash reports to us, it helps a great deal in keeping Hammerspoon stable Our Privacy Policy can be found here: https://www.hammerspoon.org/privacy.html"]}],[{"i":"hsalert","l":"hs.alert","p":["Simple on-screen alerts"]},{"l":"API Overview","p":["Variables- Configurable values","defaultStyle","Functions- API calls offered directly by the extension","closeAll","closeSpecific","show","showWithImage"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"defaultStyle","p":["Signature","hs.alert.defaultStyle[]","Type","Variable","Description","A table defining the default visual style for the alerts generated by this module."]},{"l":"Functions"},{"l":"closeAll","p":["Signature","hs.alert.closeAll([seconds])","Type","Function","Description","Closes all alerts currently open on the screen","Parameters","seconds - Optional number specifying the fade out duration. Defaults to fadeOutDuration value currently defined in the hs.alert.defaultStyle","Returns","None","Notes"]},{"l":"closeSpecific","p":["Signature","hs.alert.closeSpecific(uuid, [seconds])","Type","Function","Description","Closes the alert with the specified identifier","Parameters","uuid - the identifier of the alert to close seconds - Optional number specifying the fade out duration. Defaults to fadeOutDuration value currently defined in the hs.alert.defaultStyle","Returns","None","Notes","Use this function to close an alert which is indefinite or close an alert with a long duration early."]},{"l":"show","p":["Signature","hs.alert.show(str, [style], [screen], [seconds]) - uuid","Type","Function","Description","Shows a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.","Parameters","str - The string or hs.styledtext object to display in the alert style - an optional table containing one or more of the keys specified in hs.alert.defaultStyle. If str is already an hs.styledtext object, this argument is ignored. screen - an optional hs.screen userdata object specifying the screen (monitor) to display the alert on. Defaults to hs.screen.mainScreen() which corresponds to the screen with the currently focused window. seconds - The number of seconds to display the alert. Defaults to 2. If seconds is specified and is not a number, displays the alert indefinitely.","Returns","a string identifier for the alert.","Notes","For convenience, you can call this function as hs.alert(...) This function effectively calls hs.alert.showWithImage(msg, nil, ...). As such, all the same rules apply regarding argument processing"]},{"l":"showWithImage","p":["Signature","hs.alert.showWithImage(str, image, [style], [screen], [seconds]) - uuid","Type","Function","Description","Shows an image and a message in large words briefly in the middle of the screen; does tostring() on its argument for convenience.","Parameters","str - The string or hs.styledtext object to display in the alert image - The image to display in the alert style - an optional table containing one or more of the keys specified in hs.alert.defaultStyle. If str is already an hs.styledtext object, this argument is ignored. screen - an optional hs.screen userdata object specifying the screen (monitor) to display the alert on. Defaults to hs.screen.mainScreen() which corresponds to the screen with the currently focused window. seconds - The number of seconds to display the alert. Defaults to 2. If seconds is specified and is not a number, displays the alert indefinitely.","Returns","a string identifier for the alert.","Notes","The optional parameters are parsed in the order presented as follows: if the argument is a table and style has not previously been set, then the table is assigned to style if the argument is a userdata and screen has not previously been set, then the userdata is assigned to screen if duration has not been set, then it is assigned the value of the argument if all of these conditions fail for a given argument, then an error is returned The reason for this logic is to support the creation of persistent alerts as was previously handled by the module: If you specify a non-number value for seconds you will need to store the string identifier returned by this function so that you can close it manually with hs.alert.closeSpecific when the alert should be removed. Any style element which is not specified in the style argument table will use the value currently defined in the hs.alert.defaultStyle table."]}],[{"i":"hsappfinder","l":"hs.appfinder","p":["Easily find hs.application and hs.window objects","This module is deprecated; you can use hs.window.find(), hs.window.get(), hs.application.find(), hs.application.get(), hs.application:findWindow() and hs.application:getWindow() instead."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","appFromName","appFromWindowTitle","appFromWindowTitlePattern","windowFromWindowTitle","windowFromWindowTitlePattern"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"appFromName","p":["Signature","hs.appfinder.appFromName(name) - app or nil","Type","Function","Description","Finds an application by its name (e.g. \"Safari\")","Parameters","name - A string containing the name of the application to search for","Returns","An hs.application object if one can be found, otherwise nil","Notes"]},{"l":"appFromWindowTitle","p":["Signature","hs.appfinder.appFromWindowTitle(title) - app or nil","Type","Function","Description","Finds an application by its window title (e.g. \"Activity Monitor (All Processes)\")","Parameters","title - A string containing a window title of the application to search for","Returns","An hs.application object if one can be found, otherwise nil","Notes"]},{"l":"appFromWindowTitlePattern","p":["Signature","hs.appfinder.appFromWindowTitlePattern(pattern) - app or nil","Type","Function","Description","Finds an application by Lua pattern in its window title (e.g.\"Inbox %(%d+ messages.*)\")","Parameters","pattern - a Lua pattern describing a window title of the application to search for","Returns","An hs.application object if one can be found, otherwise nil","Notes","For more about Lua patterns, see http://lua-users.org/wiki/PatternsTutorial and http://www.lua.org/manual/5.2/manual.html#6.4.1"]},{"l":"windowFromWindowTitle","p":["Signature","hs.appfinder.windowFromWindowTitle(title) - win or nil","Type","Function","Description","Finds a window by its title (e.g. \"Activity Monitor (All Processes)\")","Parameters","title - A string containing the title of the window to search for","Returns","An hs.window object if one can be found, otherwise nil","Notes"]},{"l":"windowFromWindowTitlePattern","p":["Signature","hs.appfinder.windowFromWindowTitlePattern(pattern) - app or nil","Type","Function","Description","Finds a window by Lua pattern in its title (e.g.\"Inbox %(%d+ messages.*)\")","Parameters","pattern - a Lua pattern describing a window title of the window to search for","Returns","An hs.window object if one can be found, otherwise nil","Notes","For more about Lua patterns, see http://lua-users.org/wiki/PatternsTutorial and http://www.lua.org/manual/5.2/manual.html#6.4.1"]}],[{"i":"hsapplescript","l":"hs.applescript","p":["Execute AppleScript code","This module has been replaced by: hs.osascript.applescript"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"hsapplication","l":"hs.application","p":["Manipulate running applications"]},{"l":"Submodules","p":["hs.application.watcher"]},{"l":"API Overview","p":["activate","allWindows","applicationForPID","applicationsForBundleID","bundleID","Constructors- API calls which return an object, typically one that offers API methods","defaultAppForUTI","enableSpotlightForNameSearches","find","findMenuItem","findWindow","focusedWindow","frontmostApplication","Functions- API calls offered directly by the extension","get","getMenuItems","getWindow","hide","infoForBundleID","infoForBundlePath","isFrontmost","isHidden","isRunning","kill","kill9","kind","launchOrFocus","launchOrFocusByBundleID","localizationsForBundleID","localizationsForBundlePath","mainWindow","menuGlyphs","Methods- API calls which can only be made on an object returned by a constructor","name","nameForBundleID","open","path","pathForBundleID","pid","preferredLocalizationsForBundleID","preferredLocalizationsForBundlePath","runningApplications","selectMenuItem","setFrontmost","title","unhide","Variables- Configurable values","visibleWindows"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"menuGlyphs","p":["Signature","hs.application.menuGlyphs","Type","Variable","Description","A table containing UTF8 representations of the defined key glyphs used in Menus for keyboard shortcuts which are presented pictorially rather than as text (arrow keys, return key, etc.)","Notes","a __tostring metamethod is provided for this table so you can view its current contents by typing hs.application.menuGlyphs into the Hammerspoon console. This table is provided as a variable so that you can change any representation if you feel you know of a better or more appropriate one for you usage at runtime. The glyphs provided are defined in the Carbon framework headers in the Menus.h file, located (as of 10.11) at /System/Library/Frameworks/Carbon.framework/Frameworks/HIToolbox.framework/Headers/Menus.h. The following constants are defined in Menus.h, but do not seem to correspond to a visible UTF8 character or well defined representation that I could discover. If you believe that you know of a (preferably sanctioned by Apple) proper visual representation, please submit an issue detailing it at the Hammerspoon repository on GitHub. kMenuNullGlyph, 0x00, Null (always glyph 1) kMenuNonmarkingReturnGlyph, 0x0D, Nonmarking return key kMenuParagraphKoreanGlyph, 0x15, Unassigned (paragraph in Korean) kMenuTrademarkJapaneseGlyph, 0x1F, Unassigned (trademark in Japanese) kMenuAppleLogoOutlineGlyph, 0x6C, Apple logo key (outline)"]},{"l":"Functions"},{"l":"applicationForPID","p":["Signature","hs.application.applicationForPID(pid) - hs.application object or nil","Type","Function","Description","Returns the running app for the given pid, if it exists.","Parameters","pid - a UNIX process id (i.e. a number)","Returns","An hs.application object if one can be found, otherwise nil","Notes"]},{"l":"applicationsForBundleID","p":["Signature","hs.application.applicationsForBundleID(bundleID) - list of hs.application objects","Type","Function","Description","Returns any running apps that have the given bundleID.","Parameters","bundleID - An OSX application bundle identifier","Returns","A table of zero or more hs.application objects that match the given identifier","Notes"]},{"l":"defaultAppForUTI","p":["Signature","hs.application.defaultAppForUTI(uti) - string or nil","Type","Function","Description","Returns the bundle ID of the default application for a given UTI","Parameters","uti - A string containing a UTI","Returns","A string containing a bundle ID, or nil if none could be found","Notes"]},{"l":"enableSpotlightForNameSearches","p":["Signature","hs.application.enableSpotlightForNameSearches([state]) - boolean","Type","Function","Description","Get or set whether Spotlight should be used to find alternate names for applications.","Parameters","state- an optional boolean specifying whether or not Spotlight should be used to try and determine alternate application names for hs.application.find and similar functions.","Returns","the current, possibly changed, state","Notes","This setting is persistent across reloading and restarting Hammerspoon. If this was set to true and you set it to true again, it will purge the alternate name map and rebuild it from scratch. You can disable Spotlight alternate name mapping by setting this value to false or nil. If you set this to false, then the notifications indicating that more results might be possible if Spotlight is enabled will be suppressed."]},{"l":"frontmostApplication","p":["Signature","hs.application.frontmostApplication() - hs.application object","Type","Function","Description","Returns the application object for the frontmost (active) application. This is the application which currently receives input events.","Parameters","None","Returns","An hs.application object","Notes"]},{"l":"infoForBundleID","p":["Signature","hs.application.infoForBundleID(bundleID) - table or nil","Type","Function","Description","Gets the metadata of an application from its bundle identifier","Parameters","bundleID - A string containing an application bundle identifier (e.g. \"com.apple.Safari\")","Returns","A table containing information about the application, or nil if the bundle identifier could not be located","Notes"]},{"l":"infoForBundlePath","p":["Signature","hs.application.infoForBundlePath(bundlePath) - table or nil","Type","Function","Description","Gets the metadata of an application from its path on disk","Parameters","bundlePath - A string containing the path to an application bundle (e.g. \"/Applications/Safari.app\")","Returns","A table containing information about the application, or nil if the bundle could not be located","Notes"]},{"l":"launchOrFocus","p":["Signature","hs.application.launchOrFocus(name) - boolean","Type","Function","Description","Launches the app with the given name, or activates it if it's already running","Parameters","name - A string containing the name of the application to either launch or focus. This can also be the full path to an application (including the .app suffix) if you need to uniquely distinguish between applications in different locations that share the same name","Returns","True if the application was either launched or focused, otherwise false (e.g. if the application doesn't exist)","Notes","The name parameter should match the name of the application on disk, e.g. \"IntelliJ IDEA\", rather than \"IntelliJ\""]},{"l":"launchOrFocusByBundleID","p":["Signature","hs.application.launchOrFocusByBundleID(bundleID) - boolean","Type","Function","Description","Launches the app with the given bundle ID, or activates it if it's already running","Parameters","bundleID - A string containing the bundle ID of the application to either launch or focus.","Returns","True if the application was either launched or focused, otherwise false (e.g. if the application doesn't exist)","Notes","Bundle identifiers typically take the form of com.company.ApplicationName"]},{"l":"localizationsForBundleID","p":["Signature","hs.application.localizationsForBundleID(bundleID) - table or nil","Type","Function","Description","Gets a list of all the localizations contained in the bundle.","Parameters","bundleID - A string containing an application bundle identifier (e.g. \"com.apple.Safari\")","Returns","A table containing language IDs for all the localizations contained in the bundle.","Notes"]},{"l":"localizationsForBundlePath","p":["Signature","hs.application.localizationsForBundlePath(bundlePath) - table or nil","Type","Function","Description","Gets a list of all the localizations contained in the bundle.","Parameters","bundlePath - A string containing the path to an application bundle (e.g. \"/Applications/Safari.app\")","Returns","A table containing language IDs for all the localizations contained in the bundle.","Notes"]},{"l":"nameForBundleID","p":["Signature","hs.application.nameForBundleID(bundleID) - string or nil","Type","Function","Description","Gets the name of an application from its bundle identifier","Parameters","bundleID - A string containing an application bundle identifier (e.g. \"com.apple.Safari\")","Returns","A string containing the application name, or nil if the bundle identifier could not be located","Notes"]},{"l":"pathForBundleID","p":["Signature","hs.application.pathForBundleID(bundleID) - string or nil","Type","Function","Description","Gets the filesystem path of an application from its bundle identifier","Parameters","bundleID - A string containing an application bundle identifier (e.g. \"com.apple.Safari\")","Returns","A string containing the app bundle's filesystem path, or nil if the bundle identifier could not be located","Notes"]},{"l":"preferredLocalizationsForBundleID","p":["Signature","hs.application.preferredLocalizationsForBundleID(bundleID) - table or nil","Type","Function","Description","Gets an ordered list of preferred localizations contained in a bundle","Parameters","bundleID - A string containing an application bundle identifier (e.g. \"com.apple.Safari\")","Returns","A table containing language IDs for localizations in the bundle. The strings are ordered according to the user's language preferences and available localizations.","Notes"]},{"l":"preferredLocalizationsForBundlePath","p":["Signature","hs.application.preferredLocalizationsForBundlePath(bundlePath) - table or nil","Type","Function","Description","Gets an ordered list of preferred localizations contained in a bundle","Parameters","bundlePath - A string containing the path to an application bundle (e.g. \"/Applications/Safari.app\")","Returns","A table containing language IDs for localizations in the bundle. The strings are ordered according to the user's language preferences and available localizations.","Notes"]},{"l":"runningApplications","p":["Signature","hs.application.runningApplications() - list of hs.application objects","Type","Function","Description","Returns all running apps.","Parameters","None","Returns","A table containing zero or more hs.application objects currently running on the system","Notes"]},{"l":"Constructors"},{"l":"find","p":["Signature","hs.application.find(hint, exact, stringLiteral) - hs.application object(s)","Type","Constructor","Description","Finds running applications","Parameters","hint - search criterion for the desired application(s); it can be: - a pid number as per hs.application:pid()- a bundle ID string as per hs.application:bundleID()- a string pattern that matches (via string.find) the application name as per hs.application:name()(for convenience, the matching will be done on lowercased strings) - a string pattern that matches (via string.find) the application's window title per hs.window:title()(for convenience, the matching will be done on lowercased strings) exact - a boolean, true to check application names for exact matches, false to use Lua's string:find() method. Defaults to false stringLiteral - a boolean, true to interpret the hint string literally, false to interpret it as a Lua Pattern. Defaults to false.","Returns","one or more hs.application objects for running applications that match the supplied search criterion, or nil if none found","Notes","If multiple results are found, this function will return multiple values. See https://www.lua.org/pil/5.1.html for more information on how to work with this for convenience you can call this as hs.application(hint) use this function when you don't know the exact name of an application you're interested in, i.e. from the console: hs.application'term' -- hs.application: iTerm2 (0x61000025fb88) hs.application: Terminal (0x618000447588). But be careful when using it in your init.lua: terminal=hs.application'term' will assign either \"Terminal\" or \"iTerm2\" arbitrarily (or even, if neither are running, any other app with a window that happens to have \"term\" in its title); to make sure you get the right app in your scripts, use hs.application.get with the exact name: terminal=hs.application.get'Terminal' -- Terminal app, or nil if it's not running Usage:-- by pid hs.application(42):name() --> Finder-- by bundle id hs.application'com.apple.Safari':name() --> Safari-- by name hs.application'chrome':name() --> Google Chrome-- by window title hs.application'bash':name() --> Terminal"]},{"l":"get","p":["Signature","hs.application.get(hint) - hs.application object","Type","Constructor","Description","Gets a running application","Parameters","hint - search criterion for the desired application; it can be: - a pid number as per hs.application:pid()- a bundle ID string as per hs.application:bundleID()- an application name string as per hs.application:name()","Returns","an hs.application object for a running application that matches the supplied search criterion, or nil if not found","Notes","see also hs.application.find"]},{"l":"open","p":["Signature","hs.application.open(app[, wait, [waitForFirstWindow]]) - hs.application object","Type","Constructor","Description","Launches an application, or activates it if it's already running","Parameters","app - a string describing the application to open; it can be: - the application's name as per hs.application:name()- the full path to an application on disk (including the .app suffix) - the application's bundle ID as per hs.application:bundleID() wait - (optional) the maximum number of seconds to wait for the app to be launched, if not already running; if omitted, defaults to 0; if the app takes longer than this to launch, this function will return nil, but the app will still launch waitForFirstWindow - (optional) if true, additionally wait until the app has spawned its first window (which usually takes a bit longer)","Returns","the hs.application object for the launched or activated application; nil if not found","Notes","the wait parameter will block all Hammerspoon activity in order to return the application object \"synchronously\"; only use it if you a) have no time-critical event processing happening elsewhere in your init.lua and b) need to act on the application object, or on its window(s), right away when launching a \"windowless\" app (background daemon, menulet, etc.) make sure to omit waitForFirstWindow"]},{"l":"Methods"},{"l":"activate","p":["Signature","hs.application:activate([allWindows]) - bool","Type","Method","Description","Tries to activate the app (make its key window focused) and returns whether it succeeded; if allWindows is true, all windows of the application are brought forward as well.","Parameters","allWindows - If true, all windows of the application will be brought to the front. Otherwise, only the application's key window will. Defaults to false.","Returns","A boolean value indicating whether or not the application could be activated","Notes"]},{"l":"allWindows","p":["Signature","hs.application:allWindows() - list of hs.window objects","Type","Method","Description","Returns all open windows owned by the given app.","Parameters","None","Returns","A table of zero or more hs.window objects owned by the application","Notes","This function can only return windows in the current Mission Control Space; if you need to address windows across different Spaces you can use the hs.window.filter module- if Displays have separate Spaces is on(in System Preferences>Mission Control) the current Space is defined as the union of all currently visible Spaces- minimized windows and hidden windows (i.e. belonging to hidden apps, e.g. via cmd-h) are always considered to be in the current Space"]},{"l":"bundleID","p":["Signature","hs.application:bundleID() - string","Type","Method","Description","Returns the bundle identifier of the app.","Parameters","None","Returns","A string containing the bundle identifier of the application","Notes"]},{"l":"findMenuItem","p":["Signature","hs.application:findMenuItem(menuItem[, isRegex]) - table or nil","Type","Method","Description","Searches the application for a menu item","Parameters","menuItem - This can either be a string containing the text of a menu item (e.g. Messages) or a table representing the hierarchical path of a menu item (e.g. {File, Share, Messages}). In the string case, all of the application's menus will be searched until a match is found (with no specified behaviour if multiple menu items exist with the same name). In the table case, the whole menu structure will not be searched, because a precise path has been specified. isRegex - An optional boolean, defaulting to false, which is only used if menuItem is a string. If set to true, menuItem will be treated as a regular expression rather than a strict string to match against","Returns","Returns nil if the menu item cannot be found. If it does exist, returns a table with two keys: enabled - whether the menu item can be selected/ticked. This will always be false if the application is not currently focussed ticked - whether the menu item is ticked or not (obviously this value is meaningless for menu items that can't be ticked)","Notes","This can only search for menu items that don't have children - i.e. you can't search for the name of a submenu"]},{"l":"findWindow","p":["Signature","hs.application:findWindow(titlePattern) - hs.window object(s)","Type","Method","Description","Finds windows from this application","Parameters","titlePattern - a string pattern that matches (via string.find) the window title(s) as per hs.window:title()(for convenience, the matching will be done on lowercased strings)","Returns","one or more hs.window objects belonging to this application that match the supplied search criterion, or nil if none found","Notes"]},{"l":"focusedWindow","p":["Signature","hs.application:focusedWindow() - hs.window object or nil","Type","Method","Description","Returns the currently focused window of the application, or nil","Parameters","None","Returns","An hs.window object representing the window of the application that currently has focus, or nil if there are none","Notes"]},{"l":"getMenuItems","p":["Signature","hs.application:getMenuItems([fn]) - table or nil | hs.application object","Type","Method","Description","Gets the menu structure of the application","Parameters","fn - an optional callback function. If provided, the function will receive a single argument and return none.","Returns","If no argument is provided, returns a table containing the menu structure of the application, or nil if an error occurred. If a callback function is provided, the callback function will receive this table (or nil) and this method will return the application object this method was invoked on.","Notes","In some applications, this can take a little while to complete, because quite a large number of round trips are required to the source application, to get the information. When this method is invoked without a callback function, Hammerspoon will block while creating the menu structure table. When invoked with a callback function, the menu structure is built in a background thread. The table is nested with the same structure as the menus of the application. Each item has several keys containing information about the menu item. Not all keys will appear for all items. The possible keys are: AXTitle - A string containing the text of the menu item (entries which have no title are menu separators) AXEnabled - A boolean, 1 if the menu item is clickable, 0 if not AXRole - A string containing the role of the menu item - this will be either AXMenuBarItem for a top level menu, or AXMenuItem for an item in a menu AXMenuItemMarkChar - A string containing the \"mark\" character for a menu item. This is for toggleable menu items and will usually be an empty string or a Unicode tick character (✓) AXMenuItemCmdModifiers - A table containing string representations of the keyboard modifiers for the menu item's keyboard shortcut, or nil if no modifiers are present AXMenuItemCmdChar - A string containing the key for the menu item's keyboard shortcut, or an empty string if no shortcut is present AXMenuItemCmdGlyph - An integer, corresponding to one of the defined glyphs in hs.application.menuGlyphs if the keyboard shortcut is a special character usually represented by a pictorial representation (think arrow keys, return, etc), or an empty string if no glyph is used in presenting the keyboard shortcut. Using hs.inspect() on these tables, while useful for exploration, can be extremely slow, taking several minutes to correctly render very complex menus"]},{"l":"getWindow","p":["Signature","hs.application:getWindow(title) - hs.window object","Type","Method","Description","Gets a specific window from this application","Parameters","title - the desired window's title string as per hs.window:title()","Returns","the desired hs.window object belonging to this application, or nil if not found","Notes"]},{"l":"hide","p":["Signature","hs.application:hide() - boolean","Type","Method","Description","Hides the app (and all its windows).","Parameters","None","Returns","A boolean indicating whether the application was successfully hidden","Notes"]},{"l":"isFrontmost","p":["Signature","hs.application:isFrontmost() - boolean","Type","Method","Description","Returns whether the app is the frontmost (i.e. is the currently active application)","Parameters","None","Returns","True if the application is the frontmost application, otherwise false","Notes"]},{"l":"isHidden","p":["Signature","hs.application:isHidden() - boolean","Type","Method","Description","Returns whether the app is currently hidden.","Parameters","None","Returns","A boolean indicating whether the application is hidden or not","Notes"]},{"l":"isRunning","p":["Signature","hs.application:isRunning() - boolean","Type","Method","Description","Checks if the application is still running","Parameters","None","Returns","A boolean, true if the application is running, false if not","Notes","If an application is terminated and re-launched, this method will still return false, as hs.application objects are tied to a specific instance of an application (i.e. its PID)"]},{"l":"kill","p":["Signature","hs.application:kill()","Type","Method","Description","Tries to terminate the app gracefully.","Parameters","None","Returns","Notes"]},{"l":"kill9","p":["Signature","hs.application:kill9()","Type","Method","Description","Tries to terminate the app forcefully.","Parameters","None","Returns","Notes"]},{"l":"kind","p":["Signature","hs.application:kind() - number","Type","Method","Description","Identify the application's GUI state","Parameters","None","Returns","A number that is either 1 if the app is in the dock, 0 if it is not, or -1 if the application is prohibited from having GUI elements","Notes"]},{"l":"mainWindow","p":["Signature","hs.application:mainWindow() - hs.window object or nil","Type","Method","Description","Returns the main window of the given app, or nil.","Parameters","None","Returns","An hs.window object representing the main window of the application, or nil if it has no windows","Notes"]},{"l":"name","p":["Signature","hs.application:name()","Type","Method","Description","Alias for hs.application:title()","Parameters","Returns","Notes"]},{"l":"path","p":["Signature","hs.application:path() - string","Type","Method","Description","Returns the filesystem path of the app.","Parameters","None","Returns","A string containing the filesystem path of the application or nil if the path could not be determined (e.g. if the application has terminated).","Notes"]},{"l":"pid","p":["Signature","hs.application:pid() - number","Type","Method","Description","Returns the app's process identifier.","Parameters","None","Returns","The UNIX process identifier of the application (i.e. a number)","Notes"]},{"l":"selectMenuItem","p":["Signature","hs.application:selectMenuItem(menuitem[, isRegex]) - true or nil","Type","Method","Description","Selects a menu item (i.e. simulates clicking on the menu item)","Parameters","menuitem - The menu item to select, specified as either a string or a table. See the menuitem parameter of hs.application:findMenuItem() for more information. isRegex - An optional boolean, defaulting to false, which is only used if menuItem is a string. If set to true, menuItem will be treated as a regular expression rather than a strict string to match against","Returns","True if the menu item was found and selected, or nil if it wasn't (e.g. because the menu item couldn't be found)","Notes","Depending on the type of menu item involved, this will either activate or tick/untick the menu item"]},{"l":"setFrontmost","p":["Signature","hs.application:setFrontmost([allWindows]) - boolean","Type","Method","Description","Sets the app to the frontmost (i.e. currently active) application","Parameters","allWindows - An optional boolean, true to bring all windows of the application to the front. Defaults to false","Returns","A boolean, true if the operation was successful, otherwise false","Notes"]},{"l":"title","p":["Signature","hs.application:title() - string","Type","Method","Description","Returns the localized name of the app (in UTF8).","Parameters","None","Returns","A string containing the name of the application","Notes"]},{"l":"unhide","p":["Signature","hs.application:unhide() - boolean","Type","Method","Description","Unhides the app (and all its windows) if it's hidden.","Parameters","None","Returns","A boolean indicating whether the application was successfully unhidden","Notes"]},{"l":"visibleWindows","p":["Signature","hs.application:visibleWindows() - win[]","Type","Method","Description","Returns only the app's windows that are visible.","Parameters","None","Returns","A table containing zero or more hs.window objects","Notes"]}],[{"i":"hsapplicationwatcher","l":"hs.application.watcher","p":["Watch for application launch/terminate events","This module is based primarily on code from the previous incarnation of Mjolnir by Markus Engelbrecht and Steven Degutis."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","activated","deactivated","hidden","launched","launching","terminated","unhidden","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","start","stop"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"activated","p":["Signature","hs.application.watcher.activated","Type","Constant","Description","An application has been activated (i.e. given keyboard/mouse focus)"]},{"l":"deactivated","p":["Signature","hs.application.watcher.deactivated","Type","Constant","Description","An application has been deactivated (i.e. lost keyboard/mouse focus)"]},{"l":"hidden","p":["Signature","hs.application.watcher.hidden","Type","Constant","Description","An application has been hidden"]},{"l":"launched","p":["Signature","hs.application.watcher.launched","Type","Constant","Description","An application has been launched"]},{"l":"launching","p":["Signature","hs.application.watcher.launching","Type","Constant","Description","An application is in the process of being launched"]},{"l":"terminated","p":["Signature","hs.application.watcher.terminated","Type","Constant","Description","An application has been terminated"]},{"l":"unhidden","p":["Signature","hs.application.watcher.unhidden","Type","Constant","Description","An application has been unhidden"]},{"l":"Constructors"},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.application.watcher.new(fn) - watcher | | Type | Constructor | | Description | Creates an application event watcher | | Parameters | fn - A function that will be called when application events happen. It should accept three parameters: A string containing the name of the application An event type (see the constants defined above) An hs.application object representing the application, or nil if the application couldn't be found | | Returns | An hs.application.watcher object | | Notes | If the function is called with an event type of hs.application.watcher.terminated then the application name parameter will be nil and the hs.application parameter, will only be useful for getting the UNIX process ID (i.e. the PID) of the application |"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.application.watcher:start()","Type","Method","Description","Starts the application watcher","Parameters","None","Returns","The hs.application.watcher object","Notes"]},{"l":"stop","p":["Signature","hs.application.watcher:stop()","Type","Method","Description","Stops the application watcher","Parameters","None","Returns","The hs.application.watcher object","Notes"]}],[{"i":"hsaudiodevice","l":"hs.audiodevice","p":["Manipulate the system's audio devices","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"Submodules","p":["hs.audiodevice.datasource","hs.audiodevice.watcher"]},{"l":"API Overview","p":["allDevices","allInputDataSources","allInputDevices","allOutputDataSources","allOutputDevices","balance","current","currentInputDataSource","currentOutputDataSource","defaultEffectDevice","defaultInputDevice","defaultOutputDevice","findDeviceByName","findDeviceByUID","findInputByName","findInputByUID","findOutputByName","findOutputByUID","Functions- API calls offered directly by the extension","inputMuted","inputVolume","inUse","isInputDevice","isOutputDevice","jackConnected","Methods- API calls which can only be made on an object returned by a constructor","muted","name","outputMuted","outputVolume","setBalance","setDefaultEffectDevice","setDefaultInputDevice","setDefaultOutputDevice","setInputMuted","setInputVolume","setMuted","setOutputMuted","setOutputVolume","setVolume","supportsInputDataSources","supportsOutputDataSources","transportType","uid","volume","watcherCallback","watcherIsRunning","watcherStart","watcherStop"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"allDevices","p":["Signature","hs.audiodevice.allDevices() - hs.audiodevice[]","Type","Function","Description","Returns a list of all connected devices","Parameters","None","Returns","A table of zero or more audio devices connected to the system","Notes"]},{"l":"allInputDevices","p":["Signature","hs.audiodevice.allInputDevices() - audio[]","Type","Function","Description","Returns a list of all connected input devices.","Parameters","None","Returns","A table of zero or more audio input devices connected to the system","Notes"]},{"l":"allOutputDevices","p":["Signature","hs.audiodevice.allOutputDevices() - hs.audiodevice[]","Type","Function","Description","Returns a list of all connected output devices","Parameters","None","Returns","A table of zero or more audio output devices connected to the system","Notes"]},{"l":"current","p":["Signature","hs.audiodevice.current([input]) - table","Type","Function","Description","Fetch various metadata about the current default audio devices","Parameters","output - An optional boolean, true to fetch information about the default input device, false for output device. Defaults to false","Returns","A table with the following contents: lua/lili {/lili name = defaultOutputDevice():name(),/lili uid = module.defaultOutputDevice():uid(),/lili muted = defaultOutputDevice():muted(),/lili volume = defaultOutputDevice():volume(),/lili device = defaultOutputDevice(),/lili }/lili","Notes"]},{"l":"defaultEffectDevice","p":["Signature","hs.audiodevice.defaultEffectDevice() - audio or nil","Type","Function","Description","Get the currently selected sound effect device","Parameters","None","Returns","An hs.audiodevice object, or nil if no suitable device could be found","Notes"]},{"l":"defaultInputDevice","p":["Signature","hs.audiodevice.defaultInputDevice() - audio or nil","Type","Function","Description","Get the currently selected audio input device","Parameters","None","Returns","An hs.audiodevice object, or nil if no suitable device could be found","Notes"]},{"l":"defaultOutputDevice","p":["Signature","hs.audiodevice.defaultOutputDevice() - audio or nil","Type","Function","Description","Get the currently selected audio output device","Parameters","None","Returns","An hs.audiodevice object, or nil if no suitable device could be found","Notes"]},{"l":"findDeviceByName","p":["Signature","hs.audiodevice.findDeviceByName(name) - device or nil","Type","Function","Description","Find an audio device by name","Parameters","name - A string containing the name of an audio device to search for","Returns","An hs.audiodevice object or nil if the device could not be found","Notes"]},{"l":"findDeviceByUID","p":["Signature","hs.audiodevice.findDeviceByUID(uid) - device or nil","Type","Function","Description","Find an audio device by UID","Parameters","uid - A string containing the UID of an audio device to search for","Returns","An hs.audiodevice object or nil if the device could not be found","Notes"]},{"l":"findInputByName","p":["Signature","hs.audiodevice.findInputByName(name) - device or nil","Type","Function","Description","Find an audio input device by name","Parameters","name - A string containing the name of an audio input device to search for","Returns","An hs.audiodevice object or nil if the device could not be found","Notes"]},{"l":"findInputByUID","p":["Signature","hs.audiodevice.findInputByUID(uid) - device or nil","Type","Function","Description","Find an audio input device by UID","Parameters","name - A string containing the UID of an audio input device to search for","Returns","An hs.audiodevice object or nil if the device could not be found","Notes"]},{"l":"findOutputByName","p":["Signature","hs.audiodevice.findOutputByName(name) - device or nil","Type","Function","Description","Find an audio output device by name","Parameters","name - A string containing the name of an audio output device to search for","Returns","An hs.audiodevice object or nil if the device could not be found","Notes"]},{"l":"findOutputByUID","p":["Signature","hs.audiodevice.findOutputByUID(uid) - device or nil","Type","Function","Description","Find an audio output device by UID","Parameters","name - A string containing the UID of an audio output device to search for","Returns","An hs.audiodevice object or nil if the device could not be found","Notes"]},{"l":"Methods"},{"l":"allInputDataSources","p":["Signature","hs.audiodevice:allInputDataSources() - hs.audiodevice.dataSource[] or nil","Type","Method","Description","Gets all of the input data sources of an audio device","Parameters","None","Returns","A list of hs.audiodevice.dataSource objects, or nil if an error occurred","Notes"]},{"l":"allOutputDataSources","p":["Signature","hs.audiodevice:allOutputDataSources() - hs.audiodevice.dataSource[] or nil","Type","Method","Description","Gets all of the output data sources of an audio device","Parameters","None","Returns","A list of hs.audiodevice.dataSource objects, or nil if an error occurred","Notes"]},{"l":"balance","p":["Signature","hs.audiodevice:balance() - number or nil","Type","Method","Description","Get the current left/right balance of this audio device","Parameters","None","Returns","A number between 0.0 and 1.0, representing the balance (0.0 for full left, 1.0 for full right, 0.5 for center), or nil if the audio device does not support balance","Notes","The return value will be a floating point number This method will inspect the device to determine if it is an input or output device, and return the appropriate volume. For devices that are both input and output devices, see :inputVolume() and :outputVolume()"]},{"l":"currentInputDataSource","p":["Signature","hs.audiodevice:currentInputDataSource() - hs.audiodevice.dataSource object or nil","Type","Method","Description","Gets the current input data source of an audio device","Parameters","None","Returns","An hs.audiodevice.dataSource object, or nil if an error occurred","Notes","Before calling this method, you should check the result of hs.audiodevice:supportsInputDataSources()"]},{"l":"currentOutputDataSource","p":["Signature","hs.audiodevice:currentOutputDataSource() - hs.audiodevice.dataSource object or nil","Type","Method","Description","Gets the current output data source of an audio device","Parameters","None","Returns","An hs.audiodevice.dataSource object, or nil if an error occurred","Notes","Before calling this method, you should check the result of hs.audiodevice:supportsOutputDataSources()"]},{"l":"inputMuted","p":["Signature","hs.audiodevice:inputMuted() - bool or nil","Type","Method","Description","Get the Input mutedness state of the audio device","Parameters","None","Returns","True if the audio device's Input is muted. False if it's not muted, nil if it does not support muting","Notes"]},{"l":"inputVolume","p":["Signature","hs.audiodevice:inputVolume() - number or nil","Type","Method","Description","Get the current input volume of this audio device","Parameters","None","Returns","A number between 0 and 100, representing the input volume percentage, or nil if the audio device does not support input volume levels","Notes","The return value will be a floating point number"]},{"l":"inUse","p":["Signature","hs.audiodevice:inUse() - bool or nil","Type","Method","Description","Check if the audio device is in use","Parameters","None","Returns","True if the audio device is in use, False if not. nil if an error occurred.","Notes"]},{"l":"isInputDevice","p":["Signature","hs.audiodevice:isInputDevice() - boolean","Type","Method","Description","Determines if an audio device is an input device","Parameters","None","Returns","A boolean, true if the device is an input device, false if not","Notes"]},{"l":"isOutputDevice","p":["Signature","hs.audiodevice:isOutputDevice() - boolean","Type","Method","Description","Determines if an audio device is an output device","Parameters","None","Returns","A boolean, true if the device is an output device, false if not","Notes"]},{"l":"jackConnected","p":["Signature","hs.audiodevice:jackConnected() - boolean or nil","Type","Method","Description","Determines whether an audio jack (e.g. headphones) is connected to an audio device","Parameters","None","Returns","A boolean, true if a jack is connected, false if not, or nil if the device does not support jack sense","Notes"]},{"l":"muted","p":["Signature","hs.audiodevice:muted() - bool or nil","Type","Method","Description","Get the mutedness state of the audio device","Parameters","None","Returns","True if the audio device is muted, False if it is not muted, nil if it does not support muting","Notes","If a device is capable of both input and output, this method will prefer the output. See :inputMuted() and :outputMuted() for specific variants."]},{"l":"name","p":["Signature","hs.audiodevice:name() - string or nil","Type","Method","Description","Get the name of the audio device","Parameters","None","Returns","A string containing the name of the audio device, or nil if it has no name","Notes"]},{"l":"outputMuted","p":["Signature","hs.audiodevice:outputMuted() - bool or nil","Type","Method","Description","Get the Output mutedness state of the audio device","Parameters","None","Returns","True if the audio device's Output is muted. False if it's not muted, nil if it does not support muting","Notes"]},{"l":"outputVolume","p":["Signature","hs.audiodevice:outputVolume() - number or nil","Type","Method","Description","Get the current output volume of this audio device","Parameters","None","Returns","A number between 0 and 100, representing the output volume percentage, or nil if the audio device does not support output volume levels","Notes","The return value will be a floating point number"]},{"l":"setBalance","p":["Signature","hs.audiodevice:setBalance(level) - bool","Type","Method","Description","Set the balance of this audio device","Parameters","level - A number between 0.0 and 1.0, representing the balance (0.0 for full left, 1.0 for full right, 0.5 for center)","Returns","True if the balance was set, false if the audio device does not support setting a balance.","Notes","This method will inspect the device to determine if it is an input or output device, and set the appropriate volume. For devices that are both input and output devices, see :setInputVolume() and :setOutputVolume()"]},{"l":"setDefaultEffectDevice","p":["Signature","hs.audiodevice:setDefaultEffectDevice() - bool","Type","Method","Description","Selects this device as the audio output device for system sound effects","Parameters","None","Returns","True if the audio device was successfully selected, otherwise false.","Notes"]},{"l":"setDefaultInputDevice","p":["Signature","hs.audiodevice:setDefaultInputDevice() - bool","Type","Method","Description","Selects this device as the system's audio input device","Parameters","None","Returns","True if the audio device was successfully selected, otherwise false.","Notes"]},{"l":"setDefaultOutputDevice","p":["Signature","hs.audiodevice:setDefaultOutputDevice() - bool","Type","Method","Description","Selects this device as the system's audio output device","Parameters","None","Returns","True if the audio device was successfully selected, otherwise false.","Notes"]},{"l":"setInputMuted","p":["Signature","hs.audiodevice:setInputMuted(state) - bool","Type","Method","Description","Set the mutedness state of the Input of the audio device","Parameters","state - A boolean value. True to mute the device, False to unmute it","Returns","True if the device's Input mutedness state was set, or False if it does not support muting","Notes"]},{"l":"setInputVolume","p":["Signature","hs.audiodevice:setInputVolume(level) - bool","Type","Method","Description","Set the input volume of this audio device","Parameters","level - A number between 0 and 100, representing the input volume as a percentage","Returns","True if the volume was set, false if the audio device does not support setting an input volume level","Notes","The volume level is a floating point number. Depending on your audio hardware, it may not be possible to increase volume in single digit increments"]},{"l":"setMuted","p":["Signature","hs.audiodevice:setMuted(state) - bool","Type","Method","Description","Set the mutedness state of the audio device","Parameters","state - A boolean value. True to mute the device, False to unmute it","Returns","True if the device's mutedness state was set, or False if it does not support muting","Notes","If a device is capable of both input and output, this method will prefer the output. See :setInputMuted() and :setOutputMuted() for specific variants."]},{"l":"setOutputMuted","p":["Signature","hs.audiodevice:setOutputMuted(state) - bool","Type","Method","Description","Set the mutedness state of the Output of the audio device","Parameters","state - A boolean value. True to mute the device, False to unmute it","Returns","True if the device's Output mutedness state was set, or False if it does not support muting","Notes"]},{"l":"setOutputVolume","p":["Signature","hs.audiodevice:setOutputVolume(level) - bool","Type","Method","Description","Set the output volume of this audio device","Parameters","level - A number between 0 and 100, representing the output volume as a percentage","Returns","True if the volume was set, false if the audio device does not support setting an output volume level","Notes","The volume level is a floating point number. Depending on your audio hardware, it may not be possible to increase volume in single digit increments"]},{"l":"setVolume","p":["Signature","hs.audiodevice:setVolume(level) - bool","Type","Method","Description","Set the volume of this audio device","Parameters","level - A number between 0 and 100, representing the volume as a percentage","Returns","True if the volume was set, false if the audio device does not support setting a volume level.","Notes","The volume level is a floating point number. Depending on your audio hardware, it may not be possible to increase volume in single digit increments. This method will inspect the device to determine if it is an input or output device, and set the appropriate volume. For devices that are both input and output devices, see :setInputVolume() and :setOutputVolume()"]},{"l":"supportsInputDataSources","p":["Signature","hs.audiodevice:supportsInputDataSources() - boolean","Type","Method","Description","Determines whether an audio device supports input data sources","Parameters","None","Returns","A boolean, true if the device supports input data sources, false if not","Notes"]},{"l":"supportsOutputDataSources","p":["Signature","hs.audiodevice:supportsOutputDataSources() - boolean","Type","Method","Description","Determines whether an audio device supports output data sources","Parameters","None","Returns","A boolean, true if the device supports output data sources, false if not","Notes"]},{"l":"transportType","p":["Signature","hs.audiodevice:transportType() - string","Type","Method","Description","Gets the hardware transport type of an audio device","Parameters","None","Returns","A string containing the transport type, or nil if an error occurred","Notes"]},{"l":"uid","p":["Signature","hs.audiodevice:uid() - string or nil","Type","Method","Description","Get the unique identifier of the audio device","Parameters","None","Returns","A string containing the UID of the audio device, or nil if it has no UID.","Notes"]},{"l":"volume","p":["Signature","hs.audiodevice:volume() - number or nil","Type","Method","Description","Get the current volume of this audio device","Parameters","None","Returns","A number between 0 and 100, representing the volume percentage, or nil if the audio device does not support volume levels","Notes","The return value will be a floating point number This method will inspect the device to determine if it is an input or output device, and return the appropriate volume. For devices that are both input and output devices, see :inputVolume() and :outputVolume()"]},{"l":"watcherCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.audiodevice:watcherCallback(fn) - hs.audiodevice | | Type | Method | | Description | Sets or removes a callback function for an audio device watcher | | Parameters | fn - A callback function that will be called when properties of this audio device change, or nil to remove an existing callback. The function should accept four arguments: A string containing the UID of the audio device (see hs.audiodevice.findDeviceByUID()) A string containing the name of the event. Possible values are: vmvc - Volume changed mute - Mute state changed jack - Jack sense state changed (usually this means headphones were plugged/unplugged) span - Stereo pan changed diff - Device configuration changed (if you are caching audio device properties, this event indicates you should flush your cache) gone - The device's \"in use\" status changed (ie another app started using the device, or stopped using it) A string containing the scope of the event. Possible values are: glob - This is a global event pertaining to the whole device inpt - This is an event pertaining only to the input functions of the device outp - This is an event pertaining only to the output functions of the device A number containing the element of the event. Typical values are: 0 - Typically this means the Master channel 1 - Typically this means the Left channel 2 - Typically this means the Right channel | | Returns | The hs.audiodevice object | | Notes | You will receive many events to your callback, so filtering on the name/scope/element arguments is vital. For example, on a stereo device, it is not uncommon to receive a volm event for each audio channel when the volume changes, or multiple mute events for channels. Dragging a volume slider in the system Sound preferences will produce a large number of volm events. Plugging/unplugging headphones may trigger volm events in addition to jack ones, etc.If you need to use the hs.audiodevice object in your callback, use hs.audiodevice.findDeviceByUID() to obtain it fro the first callback argument |"]},{"l":"watcherIsRunning","p":["Signature","hs.audiodevice:watcherIsRunning() - boolean","Type","Method","Description","Gets the status of the hs.audiodevice object watcher","Parameters","None","Returns","A boolean, true if the watcher is running, false if not","Notes"]},{"l":"watcherStart","p":["Signature","hs.audiodevice:watcherStart() - hs.audiodevice or nil","Type","Method","Description","Starts the watcher on an hs.audiodevice object","Parameters","None","Returns","The hs.audiodevice object, or nil if an error occurred","Notes"]},{"l":"watcherStop","p":["Signature","hs.audiodevice:watcherStop() - hs.audiodevice","Type","Method","Description","Stops the watcher on an hs.audiodevice object","Parameters","None","Returns","The hs.audiodevice object","Notes"]}],[{"i":"hsaudiodevicedatasource","l":"hs.audiodevice.datasource","p":["Inspect/manipulate the data sources of an audio device","Note: These objects are obtained from the methods on an hs.audiodevice object"]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","name","setDefault"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"name","p":["Signature","hs.audiodevice.datasource:name() - string","Type","Method","Description","Gets the name of an audio device datasource","Parameters","None","Returns","A string containing the name of the datasource","Notes"]},{"l":"setDefault","p":["Signature","hs.audiodevice.datasource:setDefault() - hs.audiodevice.datasource","Type","Method","Description","Sets the audio device datasource as the default","Parameters","None","Returns","The hs.audiodevice.datasource object","Notes"]}],[{"i":"hsaudiodevicewatcher","l":"hs.audiodevice.watcher","p":["Watch for system level audio hardware events"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","isRunning","setCallback","start","stop"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"isRunning","p":["Signature","hs.audiodevice.watcher.isRunning() - boolean","Type","Function","Description","Gets the status of the audio device watcher","Parameters","None","Returns","A boolean, true if the watcher is running, false if not","Notes"]},{"l":"setCallback","p":["Signature","hs.audiodevice.watcher.setCallback(fn)","Type","Function","Description","Sets the callback function for the audio device watcher","Parameters","fn - A callback function, or nil to remove a previously set callback. The callback function should accept a single argument (see Notes below)","Returns","None","Notes","This watcher will call the callback when various audio device related events occur (e.g. an audio device appears/disappears, a system default audio device setting changes, etc) To watch for changes within an audio device, see hs.audiodevice:newWatcher() The callback function argument is a string which may be one of the following strings, but might also be a different string entirely: dIn - Default audio input device setting changed (Note that there is a space character after dIn, because these values always have to be four characters long) dOut - Default audio output device setting changed sOut - Default system audio output setting changed (i.e. the device that system sound effects use. This may also be triggered by dOut, depending on the user's settings) dev# - An audio device appeared or disappeared The callback will be called for each individual audio device event received from the OS, so you may receive multiple events for a single physical action (e.g. unplugging the default audio device will cause dOut and dev# events, and possibly sOut too) Passing nil will cause the watcher to stop if it is already running"]},{"l":"start","p":["Signature","hs.audiodevice.watcher.start()","Type","Function","Description","Starts the audio device watcher","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","hs.audiodevice.watcher.stop() - hs.audiodevice.watcher","Type","Function","Description","Stops the audio device watcher","Parameters","None","Returns","The hs.audiodevice.watcher object","Notes"]}],[{"i":"hsaxuielement","l":"hs.axuielement","p":["#object is a shortcut for #object:attributeValue(AXChildren)","Actions ( hs.axuielement:actionNames):","an accessibility error may occur","By default, hs.axuielement:allAttributeValues will not include key-value pairs for which the attribute (key) exists for the element but has no assigned value (nil) at the present time. This is because the value of nil prevents the key from being retained in the table returned. See hs.axuielement:allAttributeValues for details and a workaround.","for i,v in ipairs(object) do ... end is a shortcut for for i,v in pairs(object:attributeValue(AXChildren) or {}) do ... end","for k,v in pairs(object) do ... end is a shortcut for for k,_ in ipairs(object:attributeNames()) do local v = object:attributeValue(k) ; ... end or for k,v in pairs(object:allAttributeValues()) do ... end(though see note below)","Getting and Setting Attribute values:","If detecting accessibility errors that may occur is necessary, you must use one of the formal approaches hs.axuielement:allAttributeValues or hs.axuielement:attributeNames and hs.axuielement:attributeValue","If detecting accessibility errors that may occur is necessary, you must use the formal method hs.axuielement:attributeValue to get the \"AXChildren\" attribute.","If detecting accessibility errors that may occur is necessary, you must use the formal methods hs.axuielement:attributeValue and hs.axuielement:setAttributeValue","If you require confirmation of the change, you will need to check the value of the attribute with one of the methods described above after setting it.","In addition to the formal methods described in this documentation, dynamic methods exist for accessing element attributes and actions. These will differ somewhat between objects as the specific attributes and actions will depend upon the accessibility object's role and purpose, but the following outlines the basics.","internal logic within the receiving application may decline to accept the newly assigned value","Iteration over Attributes:","Iteration over Child Elements (AXChildren):","Note that object:attributeValue(AXChildren) may return nil if the object does not have the AXChildren attribute; the shortcut does not have this limitation.","Note that setting an attribute value is not guaranteed to work with either method:","object:attributeWithParameter(value) is a shortcut for `object:parameterizedAttributeValue(attribute, value)","object:doaction() is a shortcut for object:performAction(action)","object.attribute = value is a shortcut for object:setAttributeValue(attribute, value)","object.attribute is a shortcut for object:attributeValue(attribute)","object[i] is a shortcut for object:attributeValue(AXChildren)[i]","ParameterizedAttributes:","See hs.axuielement:parameterizedAttributeValue for a description of the return values and hs.axuielement:parameterizedAttributeNames to get a list of parameterized values that the element supports","See hs.axuielement:performAction for a description of the return values and hs.axuielement:actionNames to get a list of actions that the element supports.","the element may not be settable (surprisingly this does not return an error, even when hs.axuielement:isAttributeSettable returns false for the attribute specified)","The specific value required for a each parameterized attribute is different and is often application specific thus requiring some experimentation. Notes regarding identified parameter types and thoughts on some still being investigated will be provided in the Hammerspoon Wiki, hopefully shortly after this module becomes part of a Hammerspoon release.","This module allows you to access the accessibility objects of running applications, their windows, menus, and other user interface elements that support the OS X accessibility API.","This module works through the use of axuielementObjects, which is the Hammerspoon representation for an accessibility object. An accessibility object represents any object or component of an OS X application which can be manipulated through the OS X Accessibility API -- it can be an application, a window, a button, selected text, etc. As such, it can only support those features and objects within an application that the application developers make available through the Accessibility API."]},{"l":"Submodules","p":["hs.axuielement.axtextmarker","hs.axuielement.observer"]},{"l":"API Overview","p":["actionDescription","actionNames","actions","allAttributeValues","allDescendantElements","applicationElement","applicationElementForPID","asHSApplication","asHSWindow","attributeNames","attributes","attributeValue","attributeValueCount","buildTree","childrenWithRole","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","copy","elementAtPosition","elementSearch","Functions- API calls offered directly by the extension","isAttributeSettable","isValid","matchesCriteria","Methods- API calls which can only be made on an object returned by a constructor","orientations","parameterizedAttributeNames","parameterizedAttributes","parameterizedAttributeValue","path","performAction","pid","roles","rulerMarkers","searchCriteriaFunction","setAttributeValue","setTimeout","sortDirections","subroles","systemElementAtPosition","systemWideElement","units","windowElement"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"actions","p":["Signature","hs.axuielement.actions[]","Type","Constant","Description","A table of common accessibility object action names, provided for reference.","Notes","this table is provided for reference only and is not intended to be comprehensive. you can view the contents of this table from the Hammerspoon console by typing in hs.axuielement.actions"]},{"l":"attributes","p":["Signature","hs.axuielement.attributes[]","Type","Constant","Description","A table of common accessibility object attribute names which may be used with hs.axuielement:elementSearch or hs.axuielement:matchesCriteria as keys in the match criteria argument.","Notes","This table is provided for reference only and is not intended to be comprehensive. You can view the contents of this table from the Hammerspoon console by typing in hs.axuielement.attributes"]},{"l":"orientations","p":["Signature","hs.axuielement.orientations[]","Type","Constant","Description","A table of orientation types which may be used with hs.axuielement:elementSearch or hs.axuielement:matchesCriteria as attribute values for \"AXOrientation\" in the match criteria argument.","Notes","this table is provided for reference only and may not be comprehensive. you can view the contents of this table from the Hammerspoon console by typing in hs.axuielement.orientations"]},{"l":"parameterizedAttributes","p":["Signature","hs.axuielement.parameterizedAttributes[]","Type","Constant","Description","A table of common accessibility object parameterized attribute names, provided for reference.","Notes","this table is provided for reference only and is not intended to be comprehensive. you can view the contents of this table from the Hammerspoon console by typing in hs.axuielement.parameterizedAttributes Parameterized attributes are attributes that take an argument when querying the element. There is very little documentation available for most of these and application developers can implement their own for which we may never be able to get any documentation. This table contains parameterized attribute names that are defined within the Apple documentation and a few others that have been discovered. Documentation covering what has been discovered through experimentation about parameterized attributes is planned and should be added to the Hammerspoon wiki shortly after this module becomes part of a formal release."]},{"l":"roles","p":["Signature","hs.axuielement.roles[]","Type","Constant","Description","A table of common accessibility object roles which may be used with hs.axuielement:elementSearch or hs.axuielement:matchesCriteria as attribute values for \"AXRole\" in the match criteria argument.","Notes","this table is provided for reference only and is not intended to be comprehensive. you can view the contents of this table from the Hammerspoon console by typing in hs.axuielement.roles"]},{"l":"rulerMarkers","p":["Signature","hs.axuielement.rulerMarkers[]","Type","Constant","Description","A table of ruler marker types which may be used with hs.axuielement:elementSearch or hs.axuielement:matchesCriteria as attribute values for \"AXMarkerType\" in the match criteria argument.","Notes","this table is provided for reference only and may not be comprehensive. you can view the contents of this table from the Hammerspoon console by typing in hs.axuielement.rulerMarkers"]},{"l":"sortDirections","p":["Signature","hs.axuielement.sortDirections[]","Type","Constant","Description","A table of sort direction types which may be used with hs.axuielement:elementSearch or hs.axuielement:matchesCriteria as attribute values for \"AXSortDirection\" in the match criteria argument.","Notes","this table is provided for reference only and may not be comprehensive. you can view the contents of this table from the Hammerspoon console by typing in hs.axuielement.sortDirections"]},{"l":"subroles","p":["Signature","hs.axuielement.subroles[]","Type","Constant","Description","A table of common accessibility object subroles which may be used with hs.axuielement:elementSearch or hs.axuielement:matchesCriteria as attribute values for \"AXSubrole\" in the match criteria argument.","Notes","this table is provided for reference only and is not intended to be comprehensive. you can view the contents of this table from the Hammerspoon console by typing in hs.axuielement.subroles"]},{"l":"units","p":["Signature","hs.axuielement.units[]","Type","Constant","Description","A table of measurement unit types which may be used with hs.axuielement:elementSearch or hs.axuielement:matchesCriteria as attribute values for attributes which specify measurement unit types (e.g. \"AXUnits\", \"AXHorizontalUnits\", and \"AXVerticalUnits\") in the match criteria argument.","Notes","this table is provided for reference only and may not be comprehensive. you can view the contents of this table from the Hammerspoon console by typing in hs.axuielement.units"]},{"l":"Functions"},{"l":"searchCriteriaFunction","p":["Signature","hs.axuielement.searchCriteriaFunction(criteria) - function","Type","Function","Description","Returns a function for use with hs.axuielement:elementSearch that uses hs.axuielement:matchesCriteria with the specified criteria.","Parameters","criteria- a criteria definition as defined for the hs.axuielement:matchesCriteria method.","Returns","a function which can be used as the criteriaFunction for hs.axuielement:elementSearch.","Notes"]},{"l":"Constructors"},{"l":"applicationElement","p":["Signature","hs.axuielement.applicationElement(applicationObject) - axuielementObject","Type","Constructor","Description","Returns the top-level accessibility object for the application specified by the hs.application object.","Parameters","applicationObject- the hs.application object for the Application or a string or number which will be passed to hs.application.find to get an hs.application object.","Returns","an axuielementObject for the application specified","Notes","if applicationObject is a string or number, only the first item found with hs.application.find will be used by this function to create an axuielementObject."]},{"l":"applicationElementForPID","p":["Signature","hs.axuielement.applicationElementForPID(pid) - axuielementObject","Type","Constructor","Description","Returns the top-level accessibility object for the application with the specified process ID.","Parameters","pid- the process ID of the application.","Returns","an axuielementObject for the application specified, or nil if it cannot be determined","Notes"]},{"l":"systemElementAtPosition","p":["Signature","hs.axuielement.systemElementAtPosition(x, y | pointTable) - axuielementObject","Type","Constructor","Description","Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.","Parameters","x- the x coordinate of the screen location to test. If this parameter is provided, then the y parameter must also be provided and the pointTable parameter must not be provided. y- the y coordinate of the screen location to test. This parameter is required if the x parameter is provided. pointTable- the x and y coordinates of the screen location to test provided as a point-table, like the one returned by hs.mouse.getAbsolutePosition(a point-table is a table with key-value pairs for keys x and y). If this parameter is provided, then separate x and y parameters must not also be present.","Returns","an axuielementObject for the object at the specified coordinates, or nil if no object could be identified.","Notes","See also hs.axuielement:elementAtPosition-- this function is a shortcut for hs.axuielement.systemWideElement():elementAtPosition(...). This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location."]},{"l":"systemWideElement","p":["Signature","hs.axuielement.systemWideElement() - axuielementObject","Type","Constructor","Description","Returns an accessibility object that provides access to system attributes.","Parameters","None","Returns","the axuielementObject for the system attributes","Notes"]},{"l":"windowElement","p":["Signature","hs.axuielement.windowElement(windowObject) - axuielementObject","Type","Constructor","Description","Returns the accessibility object for the window specified by the hs.window object.","Parameters","windowObject- the hs.window object for the window or a string or number which will be passed to hs.window.find to get an hs.window object.","Returns","an axuielementObject for the window specified","Notes","if windowObject is a string or number, only the first item found with hs.window.find will be used by this function to create an axuielementObject."]},{"l":"Methods"},{"l":"actionDescription","p":["Signature","hs.axuielement:actionDescription(action) - string | nil, errString","Type","Method","Description","Returns a localized description of the specified accessibility object's action.","Parameters","action- the name of the action, as specified by hs.axuielement:actionNames.","Returns","a string containing a description of the object's action, nil if no description is available, or nil and an error string if an accessibility error occurred","Notes","The action descriptions are provided by the target application; as such their accuracy and usefulness rely on the target application's developers."]},{"l":"actionNames","p":["Signature","hs.axuielement:actionNames() - table | nil, errString","Type","Method","Description","Returns a list of all the actions the specified accessibility object can perform.","Parameters","None","Returns","an array of the names of all actions supported by the axuielementObject or nil and an error string if an accessibility error occurred","Notes","Common action names can be found in the hs.axuielement.actions table; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."]},{"l":"allAttributeValues","p":["Signature","hs.axuielement:allAttributeValues([includeErrors]) - table | nil, errString","Type","Method","Description","Returns a table containing key-value pairs for all attributes of the accessibility object.","Parameters","includeErrors- an optional boolean, default false, that specifies whether attribute names which generate an error when retrieved are included in the returned results.","Returns","a table with key-value pairs corresponding to the attributes of the accessibility object or nil and an error string if an accessibility error occurred","Notes","if includeErrors is not specified or is false, then attributes which exist for the element, but currently have no value assigned, will not appear in the table. This is because Lua treats a nil value for a table's key-value pair as an instruction to remove the key from the table, if it currently exists. To include attributes which exist but are currently unset, you need to specify includeErrors as true. attributes for which no value is currently assigned will be given a table value with the following key-value pairs:_code= -25212 error= \"Requested value does not exist\""]},{"l":"allDescendantElements","p":["Signature","hs.axuielement:allDescendantElements(callback, [withParents]) - elementSearchObject","Type","Method","Description","Query the accessibility object for all child accessibility objects and their descendants","Parameters","callback- a required function which should expect two arguments: a msg string specifying how the search ended, and a table containing the discovered descendant elements. msg will be \"completed\" when the traversal has completed normally and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information) withParents- an optional boolean, default false, indicating that the parent of objects (and their descendants) should be collected as well.","Returns","an elementSearchObject as described in hs.axuielement:elementSearch","Notes","This method is syntactic sugar for hs.axuielement:elementSearch(callback, { [includeParents = withParents] }). Please refer to hs.axuielement:elementSearch for details about the returned object and callback arguments."]},{"l":"asHSApplication","p":["Signature","hs.axuielement:asHSApplication() - hs.application object | nil","Type","Method","Description","If the element refers to an application, return an hs.application object for the element.","Parameters","None","Returns","if the element refers to an application, return an hs.application object for the element ; otherwise return nil","Notes","An element is considered an application by this method if it has an AXRole of AXApplication and has a process identifier (pid)."]},{"l":"asHSWindow","p":["Signature","hs.axuielement:asHSWindow() - hs.window object | nil","Type","Method","Description","If the element refers to a window, return an hs.window object for the element.","Parameters","None","Returns","if the element refers to a window, return an hs.window object for the element ; otherwise return nil","Notes","An element is considered a window by this method if it has an AXRole of AXWindow."]},{"l":"attributeNames","p":["Signature","hs.axuielement:attributeNames() - table | nil, errString","Type","Method","Description","Returns a list of all the attributes supported by the specified accessibility object.","Parameters","None","Returns","an array of the names of all attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred","Notes","Common attribute names can be found in the hs.axuielement.attributes tables; however, this method will list only those names which are supported by this object, and is not limited to just those in the referenced table."]},{"l":"attributeValue","p":["Signature","hs.axuielement:attributeValue(attribute) - value | nil, errString","Type","Method","Description","Returns the value of an accessibility object's attribute.","Parameters","attribute- the name of the attribute, as specified by hs.axuielement:attributeNames.","Returns","the current value of the attribute, nil if the attribute has no value, or nil and an error string if an accessibility error occurred","Notes"]},{"l":"attributeValueCount","p":["Signature","hs.axuielement:attributeValueCount(attribute) - integer | nil, errString","Type","Method","Description","Returns the count of the array of an accessibility object's attribute value.","Parameters","attribute- the name of the attribute, as specified by hs.axuielement:attributeNames.","Returns","the number of items in the value for the attribute, if it is an array, or nil and an error string if an accessibility error occurred","Notes"]},{"l":"buildTree","p":["Signature","hs.axuielement:buildTree(callback, [depth], [withParents]) - elementSearchObject","Type","Method","Description","Captures all of the available information for the accessibility object and its descendants and returns it in a table for inspection.","Parameters","callback- a required function which should expect two arguments: a msg string specifying how the search ended, and a table containing the recorded information. msg will be \"completed\" when the search has completed normally (or reached the specified depth) and will contain a string starting with \"**\" if it terminates early for some reason (see Notes: section for more information) depth- an optional integer, default math.huge, specifying the maximum depth from the initial accessibility object that should be visited to identify descendant elements and their attributes. withParents- an optional boolean, default false, specifying whether or not an element's (or descendant's) attributes for AXParent and AXTopLevelUIElement should also be visited when identifying additional elements to include in the results table.","Returns","an elementSearchObject as described in hs.axuielement:elementSearch","Notes","* The format of the results table passed to the callback for this method is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation. This method is syntactic sugar for hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] }). Please refer to hs.axuielement:elementSearch for details about the returned object and callback arguments."]},{"l":"childrenWithRole","p":["Signature","hs.axuielement:childrenWithRole(role) - table","Type","Method","Description","Returns a table containing only those immediate children of the element that perform the specified role.","Parameters","role- a string specifying the role that the returned children must perform. Example values can be found in hs.axuielement.roles.","Returns","a table containing zero or more axuielementObjects.","Notes","only the immediate children of the object are searched."]},{"l":"copy","p":["Signature","hs.axuielement:copy() - axuielementObject","Type","Method","Description","Return a duplicate userdata reference to the Accessibility object.","Parameters","None","Returns","a new userdata object representing a new reference to the Accessibility object.","Notes"]},{"l":"elementAtPosition","p":["Signature","hs.axuielement:elementAtPosition(x, y | pointTable) - axuielementObject | nil, errString","Type","Method","Description","Returns the accessibility object at the specified position on the screen. The top-left corner of the primary screen is 0, 0.","Parameters","x- the x coordinate of the screen location to test. If this parameter is provided, then the y parameter must also be provided and the pointTable parameter must not be provided. y- the y coordinate of the screen location to test. This parameter is required if the x parameter is provided. pointTable- the x and y coordinates of the screen location to test provided as a point-table, like the one returned by hs.mouse.getAbsolutePosition(a point-table is a table with key-value pairs for keys x and y). If this parameter is provided, then separate x and y parameters must not also be present.","Returns","an axuielementObject for the object at the specified coordinates, or nil and an error string if no object could be identified or an accessibility error occurred","Notes","This method can only be called on an axuielementObject that represents an application or the system-wide element (see hs.axuielement.systemWideElement). This function does hit-testing based on window z-order (that is, layering). If one window is on top of another window, the returned accessibility object comes from whichever window is topmost at the specified location. If this method is called on an axuielementObject representing an application, the search is restricted to the application. If this method is called on an axuielementObject representing the system-wide element, the search is not restricted to any particular application. See hs.axuielement.systemElementAtPosition."]},{"l":"elementSearch","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.axuielement:elementSearch(callback, [criteria], [namedModifiers]) - elementSearchObject | | Type | Method | | Description | Search for and generate a table of the accessibility elements for the attributes and descendants of this object based on the specified criteria. | | Parameters | callback - a (usually) required function which will receive the results of this search. The callback should expect three arguments and return none. The arguments to the callback function will be msg, a string specifying how the search ended and results, the elementSearchObject containing the requested results, and the number of items added to the results (see count in namedModifiers). msg will be \"completed\" if the search completes normally, or a string starting with \"\" if it is terminated early (see Returns: and Notes: for more details).criteria - an optional function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See hs.axuielement.searchCriteriaFunction to create a search function that uses hs.axuielement:matchesCriteria for evaluation.namedModifiers - an optional table specifying key-value pairs that further modify or control the search. This table may contain 0 or more of the following keys: count - an optional integer, default math.huge, specifying the maximum number of matches to collect before ending the search and invoking the callback. You can continue the search to find additional elements by invoking elementSearchObject:next() (described below in the Returns section) on the return value of this method, or on the results argument passed to the callback. depth - an optional integer, default math.huge, specifying the maximum number of steps (descendants) from the initial accessibility element the search should visit. If you know that your desired element(s) are relatively close to your starting element, setting this to a lower value can significantly speed up the search. The following are also recognized, but may impact the speed of the search, the responsiveness of Hammerspoon, or the format of the results in ways that limit further filtering and are not recommended except when you know that you require them:asTree - an optional boolean, default false, and ignored if criteria is specified and non-empty, objectOnly is true, or count is specified. This modifier specifies whether the search results should return as an array table of tables containing each element's details (false) or as a tree where in which the root node details are the key-value pairs of the returned table and descendant elements are likewise described in subtables attached to the attribute name they belong to (true). This format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation.includeParents - a boolean, default false, specifying whether or not parent attributes (AXParent and AXTopLevelUIElement) should be examined during the search. Note that in most cases, setting this value to true will end up traversing the entire Accessibility structure for the target application and may significantly slow down the search.noCallback - an optional boolean, default false, and ignored if callback is not also nil, allowing you to specify nil as the callback when set to true. This feature requires setting this named argument to true and specifying the callback field as nil because starting a query from an element with a lot of descendants WILL block Hammerspoon and slow down the responsiveness of your computer (I've seen blocking for over 5 minutes in extreme cases) and should be used only when you know you are starting from close to the end of the element hierarchy.objectOnly - an optional boolean, default true, specifying whether each result in the final table will be the accessibility element discovered (true) or a table containing details about the element include the attribute names, actions, etc. for the element (false). This latter format is primarily for debugging and exploratory purposes and may not be arranged for easy programatic evaluation. | | Returns | an elementSearchObject which contains metamethods allowing you to check to see if the process has completed and cancel it early if desired. The methods include: elementSearchObject:cancel([reason]) - cancels the current search and invokes the callback with the partial results already collected. If you specify reason, the msg argument for the callback will be ** reason; otherwise it will be \" cancelled\". elementSearchObject:isRunning() - returns true if the search is currently ongoing or false if it has completed or been cancelled. elementSearchObject:matched() - returns an integer specifying the number of elements which have already been found that meet the specified criteria function. elementSearchObject:runTime() - returns an integer specifying the number of seconds spent performing this search. Note that this is not an accurate measure of how much time a given search will always take because the time will be greatly affected by how much other activity is occurring within Hammerspoon and on the users computer. Resuming a cancelled search or a search which invoked the callback because it reached count items with the next method (described below) will cause this number to begin increasing again to provide a cumulative total of time spent performing the search; time between when the callback is invoked and the next method is invoked is not included. elementSearchObject:visited() - returns an integer specifying the number of elements which have been examined during the search so far. If asTree is false or not specified, the following additional methods will be available: elementSearchObject:filter(criteria, [callback]) - filterObject returns a new table containing elements in the search results that match the specified criteria. criteria - a required function which should accept one argument (the current element being examined) and return true if it should be included in the results or false if it should be rejected. See hs.axuielement.searchCriteriaFunction to create a search function that uses hs.axuielement:matchesCriteria for evaluation. callback - an optional callback which should expect two arguments and return none. If a callback is specified, the callback will receive two arguments, a msg indicating how the callback ended (the message format matches the style defined for this method) and the filterObject which contains the matching elements. The filterObject returned by this method and passed to the callback, if defined, will support the following methods as defined here: cancel, filter, isRunning, matched, runTime, and visited. elementSearchObject:next() - if the search was cancelled or reached the count of matches specified, this method will continue the search where it left off. The elementSearchObject returned when the callback is next invoked will have up to count items added to the existing results (calls to next are cumulative for the total results captured in the elementSearchObject). The third argument to the callback will be the number of items added to the search results, not the number of items in the search results. | | Notes | This method utilizes coroutines to keep Hammerspoon responsive, but may be slow to complete if includeParents is true, if you do not specify depth, or if you start from an element that has a lot of descendants (e.g. the application element for a web browser). This is dependent entirely upon how many active accessibility elements the target application defines and where you begin your search and cannot reliably be determined up front, so you may need to experiment to find the best balance for your specific requirements.The search performed is a breadth-first search, so in general earlier elements in the results table will be \"closer\" in the Accessibility hierarchy to the starting point than later elements.The elementSearchObject returned by this method and the results passed in as the second argument to the callback function are the same object -- you can use either one in your code depending upon which makes the most sense. Results that match the criteria function are added to the elementSearchObject as they are found, so if you examine the object/table returned by this method and determine that you have located the element or elements you require before the callback has been invoked, you can safely invoke the cancel method to end the search early. The exception to this is when asTree is true and objectsOnly is false and the search criteria is nil -- see hs.axuielement:buildTree. In this case, the results passed to the callback will be equal to elementSearchObject[1].If objectsOnly is specified as false, it may take some time after cancel is invoked for the mapping of element attribute tables to the descendant elements in the results set -- this is a by product of the need to iterate through the results to match up all of the instances of each element to it's attribute table.hs.axuielement:allDescendantElements is syntactic sugar for hs.axuielement:elementSearch(callback, { [includeParents = withParents] })hs.axuielement:buildTree is syntactic sugar for hs.axuielement:elementSearch(callback, { objectOnly = false, asTree = true, [depth = depth], [includeParents = withParents] }) |"]},{"l":"isAttributeSettable","p":["Signature","hs.axuielement:isAttributeSettable(attribute) - boolean | nil, errString","Type","Method","Description","Returns whether the specified accessibility object's attribute can be modified.","Parameters","attribute- the name of the attribute, as specified by hs.axuielement:attributeNames.","Returns","a boolean value indicating whether or not the value of the parameter can be modified or nil and an error string if an accessibility error occurred","Notes"]},{"l":"isValid","p":["Signature","hs.axuielement:isValid() - boolean | nil, errString","Type","Method","Description","Returns whether the specified accessibility object is still valid.","Parameters","None","Returns","a boolean value indicating whether or not the accessibility object is still valid or nil and an error string if any other accessibility error occurred","Notes","an accessibilityObject can become invalid for a variety of reasons, including but not limited to the element referred to no longer being available (e.g. an element referring to a window or one of its descendants that has been closed) or the application terminating."]},{"l":"matchesCriteria","p":["Signature","hs.axuielement:matchesCriteria(criteria) - boolean","Type","Method","Description","Returns true if the axuielementObject matches the specified criteria or false if it does not.","Parameters","criteria- the criteria to compare against the accessibility object","Returns","true if the axuielementObject matches the criteria, false if it does not.","Notes","the criteria argument must be one of the following: a single string, specifying the value the element's AXRole attribute must equal for a positive match an array table of strings specifying a list of possible values the element's AXRole attribute can equal for a positive match a table of key-value pairs specifying a more complex criteria. The table should be defined as follows: one or more of the following must be specified (though all specified must match): attribute-- a string, or table of strings, specifying attributes that the element must support. action-- a string, or table of strings, specifying actions that the element must be able to perform. parameterizedAttribute-- a string, or table of strings, specifying parametrized attributes that the element must support. if the attribute key is specified, you can use one of the following to specify a specific value the attribute must equal for a positive match. No more than one of these should be provided. If neither are present, then only the existence of the attributes specified by attribute are required. value-- a value, or table of values, that a specified attribute must equal. If it's a table, then only one of the values has to match the attribute value for a positive match. Note that if you specify more than one attribute with the attribute key, you must provide at least one value for each attribute in this table (order does not matter, but the match will fail if any attribute does not match at least one value provided). when specifying a value which is itself a table with keys (e.g. frame, size, url, color, etc.) then you must provide the value or values as a table of tables, e.g. { { y = 22 } }. only those keys which are specified within the value are checked for equality (or pattern matching). Values which are present in the attribute's value but are not specified in the comparison value are ignored (i.e. the previous example of y = 22 would only check the y component of an AXFrame attribute -- the x, h, and w values would be ignored). For value components which are numeric, e.g. 22 in the previous example, the default comparison is equality. You may change this with the comparison key described below in the optional keys. For possible keys when trying to match a color, see the documentation for hs.drawing.color. For possible keys when trying to match a URL, use url = string and/or filePath = string. The string for the specified table key will be compared in accordance with the pattern optional key described below. when specifying a value which is itself a table of values (e.g. a list of axuielementObjects) you must provide the value or values as a table of tables, e.g. { { obj1, obj2 } }. Order of the elements provided in the comparison value does not matter -- this only tests for existence within the attributes value. The test is for inclusion only -- the attribute's value may contain other elements as well, but must contain those specified within the comparison value. nilValue-- a boolean, specifying that the attributes must not have an assigned value (true) or may be assigned any value except nil (false). If the value key is specified, this key is ignored. Note that this applies to all of the attributes specified with the attribute key. the following are optional keys and are not required: pattern-- a boolean, default false, specifying whether string matches for attribute values should be evaluated with string.match(true) or as exact matches (false). See the Lua manual, section 6.4.1 ( help.lua._man._6_4_1 in the Hammerspoon console). If the value key is not set, than this key is ignored. invert-- a boolean, default false, specifying inverted logic for the criteria result --- if this is true and the criteria matches, evaluate criteria as false; otherwise evaluate as true. comparison-- a string, default \"\", specifying the comparison to be used when comparing numeric values. Possible comparison strings are: \"\" for equality, \"<\" for less than, \"<=\" for less than or equal to, \">\" for greater than, \">=\" for greater than or equal to, or \"~=\" for not equal to. an array table of one or more key-value tables as described immediately above; the element must be a positive match for all of the individual criteria tables specified (logical AND). This method is used by hs.axuielement.searchCriteriaFunction to create criteria functions compatible with hs.axuielement:elementSearch."]},{"l":"parameterizedAttributeNames","p":["Signature","hs.axuielement:parameterizedAttributeNames() - table | nil, errString","Type","Method","Description","Returns a list of all the parameterized attributes supported by the specified accessibility object.","Parameters","None","Returns","an array of the names of all parameterized attributes supported by the axuielementObject or nil and an error string if an accessibility error occurred","Notes"]},{"l":"parameterizedAttributeValue","p":["Signature","hs.axuielement:parameterizedAttributeValue(attribute, parameter) - value | nil, errString","Type","Method","Description","Returns the value of an accessibility object's parameterized attribute.","Parameters","attribute- the name of the attribute, as specified by hs.axuielement:parameterizedAttributeNames. parameter- the parameter required by the parameterized attribute.","Returns","the current value of the parameterized attribute, nil if the parameterized attribute has no value, or nil and an error string if an accessibility error occurred","Notes","The specific parameter required for a each parameterized attribute is different and is often application specific thus requiring some experimentation. Notes regarding identified parameter types and thoughts on some still being investigated will be provided in the Hammerspoon Wiki, hopefully shortly after this module becomes part of a Hammerspoon release."]},{"l":"path","p":["Signature","hs.axuielement:path() - table","Type","Method","Description","Returns a table of axuielements tracing this object through its parent objects to the root for this element, most likely an application object or the system wide object.","Parameters","None","Returns","a table containing this object and 0 or more parent objects representing the path from the root object to this element.","Notes","this object will always exist as the last element in the table (e.g. at table[#table]) with its most immediate parent at #table - 1, etc. until the rootmost object for this element is reached at index position 1. an axuielement object representing an application or the system wide object is its own rootmost object and will return a table containing only itself (i.e. #table will equal 1)"]},{"l":"performAction","p":["Signature","hs.axuielement:performAction(action) - axuielement | false | nil, errString","Type","Method","Description","Requests that the specified accessibility object perform the specified action.","Parameters","action- the name of the action, as specified by hs.axuielement:actionNames.","Returns","if the requested action was accepted by the target, returns the axuielementObject; if the requested action was rejected, returns false; otherwise returns nil and an error string if an accessibility error occurred","Notes","The return value only suggests success or failure, but is not a guarantee. The receiving application may have internal logic which prevents the action from occurring at this time for some reason, even though this method returns success (the axuielementObject). Contrawise, the requested action may trigger a requirement for a response from the user and thus appear to time out, causing this method to return false or nil."]},{"l":"pid","p":["Signature","hs.axuielement:pid() - integer | nil, errString","Type","Method","Description","Returns the process ID associated with the specified accessibility object.","Parameters","None","Returns","the process ID for the application to which the accessibility object ultimately belongs or nil and an error string if an accessibility error occurred","Notes"]},{"l":"setAttributeValue","p":["Signature","hs.axuielement:setAttributeValue(attribute, value) - axuielementObject | nil, errString","Type","Method","Description","Sets the accessibility object's attribute to the specified value.","Parameters","attribute- the name of the attribute, as specified by hs.axuielement:attributeNames. value- the value to assign to the attribute","Returns","the axuielementObject on success; nil and an error string if the attribute could not be set or an accessibility error occurred.","Notes"]},{"l":"setTimeout","p":["Signature","hs.axuielement:setTimeout(value) - axuielementObject | nil, errString","Type","Method","Description","Sets the timeout value used accessibility queries performed from this element.","Parameters","value- the number of seconds for the new timeout value. Must be 0 or positive.","Returns","the axuielementObject or nil and an error string if an accessibility error occurred","Notes","To change the global timeout affecting all queries on elements which do not have a specific timeout set, use this method on the systemwide element (see hs.axuielement.systemWideElement. Changing the timeout value for an axuielement object only changes the value for that specific element -- other axuieleement objects that may refer to the identical accessibility item are not affected. Setting the value to 0.0 resets the timeout -- if applied to the systemWideElement, the global default will be reset to its default value; if applied to another axuielement object, the timeout will be reset to the current global value as applied to the systemWideElement."]}],[{"i":"hsaxuielementaxtextmarker","l":"hs.axuielement.axtextmarker","p":["This submodule allows hs.axuielement to support using AXTextMarker and AXTextMarkerRange objects as parameters for parameterized Accessibility attributes with applications that support them.","Most Accessibility object values correspond to the common data types found in most programming languages -- strings, numbers, tables (arrays and dictionaries), etc. AXTextMarker and AXTextMarkerRange types are application specific and do not have a direct mapping to a simple data type. The description I've found most apt comes from comments within the Chromium source for the Mac version of their browser:","// A serialization of a position as POD. Not for sharing on disk or sharing// across thread or process boundaries, just for passing a position to an// API that works with positions as opaque objects.","This submodule allows Lua to represent these as userdata which can be passed in to parameterized attributes for the application from which they were retrieved. Examples are expected to be added to the Hammerspoon wiki soon.","As this submodule utilizes private and undocumented functions in the HIServices framework, if you receive an error using any of these functions or methods indicating an undefined CF function (the function or method will return nil and a string of the format \"CF function AX... undefined\"), please make sure to include the output of the following in any issue you submit to the Hammerspoon github page (enter these into the Hammerspoon console):"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","_functionCheck","bytes","endMarker","length","startMarker","Constructors- API calls which return an object, typically one that offers API methods","newMarker","newRange"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"_functionCheck","p":["Signature","hs.axuielement.axtextmarker._functionCheck() - table","Type","Function","Description","Returns a table of the AXTextMarker and AXTextMarkerRange functions that have been discovered and are used within this module.","Parameters","None","Returns","a table with key-value pairs where the keys correspond to the undocumented Core Foundation functions required by this module to support AXTextMarker and AXTextMarkerRange and the value will be a boolean indicating whether the function exists in the currently loaded frameworks.","Notes","the functions are defined within the HIServices framework which is part of the ApplicationServices framework, so it is expected that the necessary functions will always be available; however, if you ever receive an error message from a function or method within this submodule of the form \"CF function AX... undefined\", please see the submodule heading documentation for a description of the information, including that which this function provides, that should be included in any error report you submit. This is for debugging purposes and is not expected to be used often."]},{"l":"bytes","p":["Signature","hs.axuielement.axtextmarker:bytes() - string | nil, errorString","Type","Function","Description","Returns a string containing the opaque binary data contained within the axTextMarkerObject","Parameters","None","Returns","a string containing the opaque binary data contained within the axTextMarkerObject","Notes","the string will likely contain invalid UTF8 code sequences or unprintable ascii values; to see the data in decimal or hexadecimal form you can use: string.byte(hs.axuielement.axtextmarker:bytes(), 1, hs.axuielement.axtextmarker:length())-- or hs.utf8.hexDump(hs.axuielement.axtextmarker:bytes()) As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes."]},{"l":"endMarker","p":["Signature","hs.axuielement.axtextmarker:endMarker() - axTextMarkerObject | nil, errorString","Type","Function","Description","Returns the ending marker for an axTextMarkerRangeObject","Parameters","None","Returns","the ending marker for an axTextMarkerRangeObject","Notes"]},{"l":"length","p":["Signature","hs.axuielement.axtextmarker:length() - integer | nil, errorString","Type","Function","Description","Returns an integer specifying the number of bytes in the data portion of the axTextMarkerObject.","Parameters","None","Returns","an integer specifying the number of bytes in the data portion of the axTextMarkerObject","Notes","As the data is application specific, it is unlikely that you will use this method often; it is included primarily for testing and debugging purposes."]},{"l":"startMarker","p":["Signature","hs.axuielement.axtextmarker:startMarker() - axTextMarkerObject | nil, errorString","Type","Function","Description","Returns the starting marker for an axTextMarkerRangeObject","Parameters","None","Returns","the starting marker for an axTextMarkerRangeObject","Notes"]},{"l":"Constructors"},{"l":"newMarker","p":["Signature","hs.axuielement.axtextmarker.newMarker(string) - axTextMarkerObject | nil, errorString","Type","Constructor","Description","Creates a new AXTextMarker object from the string of binary data provided","Parameters","string- a string containing 1 or more bytes of data for the AXTextMarker object","Returns","a new axTextMarkerObject or nil and a string description if there was an error","Notes","This function is included primarily for testing and debugging purposes -- in general you will probably never use this constructor; AXTextMarker objects appear to be mostly application dependant and have no meaning external to the application from which it was created."]},{"l":"newRange","p":["Signature","hs.axuielement.axtextmarker.newRange(startMarker, endMarker) - axTextMarkerRangeObject | nil, errorString","Type","Constructor","Description","Creates a new AXTextMarkerRange object from the start and end markers provided","Parameters","startMarker- an axTextMarkerObject representing the start of the range to be created endMarker- an axTextMarkerObject representing the end of the range to be created","Returns","a new axTextMarkerRangeObject or nil and a string description if there was an error","Notes","this constructor can be used to create a range from axTextMarkerObjects obtained from an application to specify a new range for a parameterized attribute. As a simple example (it is hoped that more will be added to the Hammerspoon wiki shortly): lua/lili s = hs.axuielement.applicationElement(hs.application(Safari))/lili -- for a window displaying the DuckDuckGo main search page, this gets the/lili -- primary display area. Other pages may vary and you should build your/lili -- object as necessary for your target./lili c = s(AXMainWindow)(AXSections)[1].SectionObject[1][1]/lili start = c(AXStartTextMarker) -- get the text marker for the start of this element/lili ending = c(AXNextLineEndTextMarkerForTextMarker, start) -- get the next end of line marker/lili print(c(AXStringForTextMarkerRange, hs.axuielement.axtextmarker.newRange(start, ending)))/lili -- outputs Privacy, simplified. to the Hammerspoon console The specific attributes and parameterized attributes supported by a given application differ and can be discovered with the hs.axuielement:getAttributeNames and hs.axuielement:getParameterizedAttributeNames methods."]}],[{"i":"hsaxuielementobserver","l":"hs.axuielement.observer","p":["This submodule allows you to create observers for accessibility elements and be notified when they trigger notifications. Not all notifications are supported by all elements and not all elements support notifications, so some trial and error will be necessary, but for compliant applications, this can allow your code to be notified when an application's user interface changes in some way."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","notifications","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","addWatcher","callback","isRunning","removeWatcher","start","stop","watching"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"notifications","p":["Signature","hs.axuielement.observer.notifications[]","Type","Constant","Description","A table of common accessibility object notification names, provided for reference.","Notes","Notifications are application dependent and can be any string that the application developers choose; this list provides the suggested notification names found within the macOS Framework headers, but the list is not exhaustive nor is an application or element required to provide them."]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.axuielement.observer.new(pid) - observerObject","Type","Constructor","Description","Creates a new observer object for the application with the specified process ID.","Parameters","pid- the process ID of the application.","Returns","a new observerObject; generates an error if the pid does not exist or if the object cannot be created.","Notes","If you already have the hs.application object for an application, you can get its process ID with hs.application:pid() If you already have an hs.axuielement from the application you wish to observe (it doesn't have to be the application axuielement object, just one belonging to the application), you can get the process ID with hs.axuielement:pid()."]},{"l":"Methods"},{"l":"addWatcher","p":["Signature","hs.axuielement.observer:addWatcher(element, notification) - observerObject","Type","Method","Description","Registers the specified notification for the specified accessibility element with the observer.","Parameters","element- the hs.axuielement representing an accessibility element of the application the observer was created for. notification- a string specifying the notification.","Returns","the observerObject; generates an error if watcher cannot be registered","Notes","multiple notifications for the same accessibility element can be registered by invoking this method multiple times with the same element but different notification strings. if the specified element and notification string are already registered, this method does nothing. the notification string is application dependent and can be any string that the application developers choose; some common ones are found in hs.axuielement.observer.notifications, but the list is not exhaustive nor is an application or element required to provide them."]},{"l":"callback","p":["Signature","hs.axuielement.observer:callback([fn]) - observerObject | fn | nil","Type","Method","Description","Get or set the callback for the observer.","Parameters","fn- a function, or an explicit nil to remove, specifying the callback function the observer will invoke when the assigned elements generate notifications.","Returns","If an argument is provided, the observerObject; otherwise the current value.","Notes","the callback should expect 4 arguments and return none. The arguments passed to the callback will be as follows: the observerObject itself the hs.axuielement object for the accessibility element which generated the notification a string specifying the specific notification which was received a table containing key-value pairs with more information about the notification, if the element and notification type provide it. Commonly this will be an empty table indicating that no additional detail was provided."]},{"l":"isRunning","p":["Signature","hs.axuielement.observer:isRunning() - boolean","Type","Method","Description","Returns true or false indicating whether the observer is currently watching for notifications and generating callbacks.","Parameters","None","Returns","a boolean value indicating whether or not the observer is currently active.","Notes"]},{"l":"removeWatcher","p":["Signature","hs.axuielement.observer:removeWatcher(element, notification) - observerObject","Type","Method","Description","Unregisters the specified notification for the specified accessibility element from the observer.","Parameters","element- the hs.axuielement representing an accessibility element of the application the observer was created for. notification- a string specifying the notification.","Returns","the observerObject; generates an error if watcher cannot be unregistered","Notes","if the specified element and notification string are not currently registered with the observer, this method does nothing."]},{"l":"start","p":["Signature","hs.axuielement.observer:start() - observerObject","Type","Method","Description","Start observing the application and trigger callbacks for the elements and notifications assigned.","Parameters","None","Returns","the observerObject","Notes","This method does nothing if the observer is already running"]},{"l":"stop","p":["Signature","hs.axuielement.observer:stop() - observerObject","Type","Method","Description","Stop observing the application; no further callbacks will be generated.","Parameters","None","Returns","the observerObject","Notes","This method does nothing if the observer is not currently running"]},{"l":"watching","p":["Signature","hs.axuielement.observer:watching([element]) - table","Type","Method","Description","Returns a table of the notifications currently registered with the observer.","Parameters","element- an optional hs.axuielement to return a list of registered notifications for.","Returns","a table containing the currently registered notifications","Notes","If an element is specified, then the table returned will contain a list of strings specifying the specific notifications that the observer is watching that element for. If no argument is specified, then the table will contain key-value pairs in which each key will be an hs.axuielement that is being observed and the corresponding value will be a table containing a list of strings specifying the specific notifications that the observer is watching for from that element."]}],[{"i":"hsbase64","l":"hs.base64","p":["Base64 encoding and decoding","Portions sourced from ( https://gist.github.com/shpakovski/1902994)."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","decode","encode"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"decode","p":["Signature","hs.base64.decode(str) - val","Type","Function","Description","Decodes a given base64 string","Parameters","str - A base64 encoded string","Returns","A string containing the decoded data","Notes"]},{"l":"encode","p":["Signature","hs.base64.encode(val[,width]) - str","Type","Function","Description","Encodes a given string to base64","Parameters","val - A string to encode as base64 width - Optional line width to split the string into (usually 64 or 76)","Returns","A string containing the base64 representation of the input string","Notes"]}],[{"i":"hsbattery","l":"hs.battery","p":["Battery/power information All functions here may return nil, if the information requested is not available.","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"Submodules","p":["hs.battery.watcher"]},{"l":"API Overview","p":["_report","adapterSerialNumber","amperage","batterySerialNumber","batteryType","capacity","cycles","designCapacity","Functions- API calls offered directly by the extension","getAll","health","healthCondition","isCharged","isCharging","isFinishingCharge","maxCapacity","name","otherBatteryInfo","percentage","powerSource","powerSourceType","privateBluetoothBatteryInfo","timeRemaining","timeToFullCharge","voltage","warningLevel","watts"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"_report","p":["Signature","hs.battery._report() - table","Type","Function","Description","Returns a table containing all of the details concerning the Mac's powersource(s).","Parameters","None","Returns","a table containing the raw data about the power source(s) for the Mac.","Notes","This function is generally not required and is provided to aid in debugging. This function combines the output of the following internally used functions: hs.battery._adapterDetails() hs.battery._powerSources() hs.battery._appleSmartBattery() hs.battery._iopmBatteryInfo() You can view this report by typing hs.inspect(hs.battery._report())(or a subset of it by using one of the above listed functions instead) -- it will primarily be of interest when debugging or extending this module and generally not necessary to use."]},{"l":"adapterSerialNumber","p":["Signature","hs.battery.adapterSerialNumber() - integer | string","Type","Function","Description","Returns the serial number of the attached power supply, if present","Parameters","None","Returns","An number or string containing the power supply's serial number, or nil if the adapter is not attached or does not provide one.","Notes"]},{"l":"amperage","p":["Signature","hs.battery.amperage() - number","Type","Function","Description","Returns the amount of current flowing through the battery, in mAh","Parameters","None","Returns","A number containing the amount of current flowing through the battery. The value may be: Less than zero if the battery is being discharged (i.e. the computer is running on battery power) Zero if the battery is being neither charged nor discharged Greater than zero if the battery is being charged","Notes"]},{"l":"batterySerialNumber","p":["Signature","hs.battery.batterySerialNumber() - string","Type","Function","Description","Returns the serial number of the battery, if present","Parameters","None","Returns","A string containing the battery's serial number, or nil if there is no battery or the battery or UPS does not provide one.","Notes"]},{"l":"batteryType","p":["Signature","hs.battery.batteryType() - string","Type","Function","Description","Returns the type of battery present, or nil if there is no battery","Parameters","None","Returns","A string containing one of \"UPS\" or \"InternalBattery\", or nil if no battery is present.","Notes"]},{"l":"capacity","p":["Signature","hs.battery.capacity() - number","Type","Function","Description","Returns the current capacity of the battery in mAh","Parameters","None","Returns","A number containing the current capacity of the battery in mAh","Notes","This is the measure of how charged the battery is, vs the value of hs.battery.maxCapacity()"]},{"l":"cycles","p":["Signature","hs.battery.cycles() - number","Type","Function","Description","Returns the number of discharge cycles of the battery","Parameters","None","Returns","The number of cycles","Notes","One cycle is a full discharge of the battery, followed by a full charge. This may also be an aggregate of many smaller discharge-then-charge cycles (e.g. 10 iterations of discharging the battery from 100% to 90% and then charging back to 100% each time, is considered to be one cycle)"]},{"l":"designCapacity","p":["Signature","hs.battery.designCapacity() - number","Type","Function","Description","Returns the design capacity of the battery in mAh.","Parameters","None","Returns","A number containing the rated maximum capacity of the battery","Notes"]},{"l":"getAll","p":["Signature","hs.battery.getAll() - table","Type","Function","Description","Get all available battery information","Parameters","None","Returns","A table containing all the information provided by the separate functions in hs.battery","Notes","If you require multiple pieces of information about a battery, this function may be more efficient than calling several other functions separately"]},{"l":"health","p":["Signature","hs.battery.health() - string","Type","Function","Description","Returns the health status of the battery.","Parameters","None","Returns","A string containing one of {Good, Fair, Poor}, as determined by the Apple Smart Battery controller","Notes"]},{"l":"healthCondition","p":["Signature","hs.battery.healthCondition() - string or nil","Type","Function","Description","Returns the health condition status of the battery.","Parameters","None","Returns","Nil if there are no health conditions to report, or a string containing either:\"Check Battery\"\"Permanent Battery Failure\"","Notes"]},{"l":"isCharged","p":["Signature","hs.battery.isCharged() - boolean","Type","Function","Description","Returns the charged state of the battery","Parameters","None","Returns","True if the battery is charged, false if not","Notes"]},{"l":"isCharging","p":["Signature","hs.battery.isCharging() - boolean","Type","Function","Description","Returns the charging state of the battery","Parameters","None","Returns","True if the battery is being charged, false if not","Notes"]},{"l":"isFinishingCharge","p":["Signature","hs.battery.isFinishingCharge() - boolean or string","Type","Function","Description","Returns true if battery is finishing its charge","Parameters","None","Returns","True if the battery is in its final charging state (i.e. trickle charging), false if not","Notes"]},{"l":"maxCapacity","p":["Signature","hs.battery.maxCapacity() - number","Type","Function","Description","Returns the maximum capacity of the battery in mAh","Parameters","None","Returns","A number containing the observed maximum capacity of the battery in mAh","Notes","This may exceed the value of hs.battery.designCapacity() due to small variations in the production chemistry vs the design"]},{"l":"name","p":["Signature","hs.battery.name() - string","Type","Function","Description","Returns the name of the battery","Parameters","None","Returns","A string containing the name of the battery","Notes"]},{"l":"otherBatteryInfo","p":["Signature","hs.battery.otherBatteryInfo() - table","Type","Function","Description","Returns information about non-PSU batteries (e.g. Bluetooth accessories)","Parameters","None","Returns","A table containing information about other batteries known to the system, or an empty table if no devices were found","Notes"]},{"l":"percentage","p":["Signature","hs.battery.percentage() - number","Type","Function","Description","Returns the current percentage of battery charge","Parameters","None","Returns","A number containing the percentage of battery charge","Notes"]},{"l":"powerSource","p":["Signature","hs.battery.powerSource() - string","Type","Function","Description","Returns the current source providing power","Parameters","None","Returns","A string containing one of {AC Power, Battery Power, UPS Power}.","Notes"]},{"l":"powerSourceType","p":["Signature","hs.battery.powerSourceType() - string","Type","Function","Description","Returns current power source type","Parameters","None","Returns","A string containing one of {AC Power, Battery Power, Off Line}.","Notes"]},{"l":"privateBluetoothBatteryInfo","p":["Signature","hs.battery.privateBluetoothBatteryInfo() - table","Type","Function","Description","Returns information about Bluetooth devices using Apple Private APIs","Parameters","None","Returns","A table containing information about devices using private Apple APIs.","Notes","This function uses private Apple APIs - that means it can break without notice on any macOS version update. Please report breakage to us! This function will return information for all connected Bluetooth devices, but much of it will be meaningless for most devices The table contains the following keys: vendorID - Numerical identifier for the vendor of the device (Apple's ID is 76) productID - Numerical identifier for the device address - The Bluetooth address of the device isApple - A string containing \"YES\" or \"NO\", depending on whether or not this is an Apple/Beats product, or a third party product name - A human readable string containing the name of the device batteryPercentSingle - For some devices this will contain the percentage of the battery (e.g. Beats headphones) batteryPercentCombined - We do not currently understand what this field represents, please report if you find a non-zero value here batteryPercentCase - Battery percentage of AirPods cases (note that this will often read 0 - the AirPod case sleeps aggressively) batteryPercentLeft - Battery percentage of the left AirPod if it is out of the case batteryPercentRight - Battery percentage of the right AirPod if it is out of the case buttonMode - We do not currently understand what this field represents, please report if you find a value other than 1 micMode - For AirPods this corresponds to the microphone option in the device's Bluetooth options leftDoubleTap - For AirPods this corresponds to the left double tap action in the device's Bluetooth options rightDoubleTap - For AirPods this corresponds to the right double tap action in the device's Bluetooth options primaryBud - For AirPods this is either \"left\" or \"right\" depending on which bud is currently considered the primary device primaryInEar - For AirPods this is \"YES\" or \"NO\" depending on whether or not the primary bud is currently in an ear secondaryInEar - For AirPods this is \"YES\" or \"NO\" depending on whether or not the secondary bud is currently in an ear isInEarDetectionSupported - Whether or not this device can detect when it is currently in an ear isEnhancedDoubleTapSupported - Whether or not this device supports double tapping isANCSupported - We believe this likely indicates whether or not this device supports Active Noise Cancelling (e.g. Beats Solo) Please report any crashes from this function - it's likely that there are Bluetooth devices we haven't tested which may return weird data Many/Most/All non-Apple party products will likely return zeros for all of the battery related fields here, as will Apple HID devices. It seems that these private APIs mostly exist to support Apple/Beats headphones."]},{"l":"timeRemaining","p":["Signature","hs.battery.timeRemaining() - number","Type","Function","Description","Returns the battery life remaining, in minutes","Parameters","None","Returns","A number containing the minutes of battery life remaining. The value may be: Greater than zero to indicate the number of minutes remaining-1 if the remaining battery life is still being calculated-2 if there is unlimited time remaining (i.e. the system is on AC power)","Notes"]},{"l":"timeToFullCharge","p":["Signature","hs.battery.timeToFullCharge() - number","Type","Function","Description","Returns the time remaining for the battery to be fully charged, in minutes","Parameters","None","Returns","A number containing the time (in minutes) remaining for the battery to be fully charged, or -1 if the remaining time is still being calculated","Notes"]},{"l":"voltage","p":["Signature","hs.battery.voltage() - number","Type","Function","Description","Returns the current voltage of the battery in mV","Parameters","None","Returns","A number containing the current voltage of the battery","Notes"]},{"l":"warningLevel","p":["Signature","hs.battery.warningLevel() - string","Type","Function","Description","Returns a string specifying the current battery warning state.","Parameters","None","Returns","a string specifying the current warning level state. The string will be one of \"none\", \"low\", or \"critical\".","Notes","The meaning of the return strings is as follows:\"none\" - indicates that the system is not in a low battery situation, or is currently attached to an AC power source.\"low\" - the system is in a low battery situation and can provide no more than 20 minutes of runtime. Note that this is a guess only; 20 minutes cannot be guaranteed and will be greatly influenced by what the computer is doing at the time, how many applications are running, screen brightness, etc.\"critical\" - the system is in a very low battery situation and can provide no more than 10 minutes of runtime. Note that this is a guess only; 10 minutes cannot be guaranteed and will be greatly influenced by what the computer is doing at the time, how many applications are running, screen brightness, etc."]},{"l":"watts","p":["Signature","hs.battery.watts() - number","Type","Function","Description","Returns the power entering or leaving the battery, in W","Parameters","None","Returns","A number containing the rate of energy conversion in the battery. The value may be: Less than zero if the battery is being discharged (i.e. the computer is running on battery power) Zero if the battery is being neither charged nor discharged Greater than zero if the battery is being charged","Notes"]}],[{"i":"hsbatterywatcher","l":"hs.battery.watcher","p":["Watch for battery/power state changes","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","hs.battery.watcher.new(fn) - watcher","Type","Constructor","Description","Creates a battery watcher","Parameters","A function that will be called when the battery state changes. The function should accept no arguments.","Returns","An hs.battery.watcher object","Notes","Because the callback function accepts no arguments, tracking of state of changing battery attributes is the responsibility of the user (see https://github.com/Hammerspoon/hammerspoon/issues/166 for discussion)"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.battery.watcher:start() - self","Type","Method","Description","Starts the battery watcher","Parameters","None","Returns","The hs.battery.watcher object","Notes"]},{"l":"stop","p":["Signature","hs.battery.watcher:stop() - self","Type","Method","Description","Stops the battery watcher","Parameters","None","Returns","The hs.battery.watcher object","Notes"]}],[{"i":"hsblackmagic","l":"hs.blackmagic","p":["Support for the Blackmagic DaVinci Resolve Speed Editor Keyboard and Editor Keyboard.","Example Usage:","This extension was thrown together by Chris Hocking for CommandPost.","This extension would not be possible without Sylvain Munaut's genius work figuring out the authentication protocol.","This extension is based off Chris Jones' hs.streamdeck extension.","Special thanks to David Peterson, Morten Bentsen, Håvard Njåstad and Sondre Tungesvik Njåstad.","This extension uses code based off Sylvain Munaut's Python Scripts under the following license:","Copyright 2021 Sylvain Munaut tnt@246tNt.com","Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at","Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License."]},{"l":"API Overview","p":["battery","buttonNames","callback","Constants- Useful values which cannot be changed","deviceType","deviceTypes","discoveryCallback","Functions- API calls offered directly by the extension","getDevice","init","jogMode","jogModeNames","led","ledNames","Methods- API calls which can only be made on an object returned by a constructor","numDevices","serialNumber"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"buttonNames","p":["Signature","hs.blackmagic.buttonNames","Type","Constant","Description","A table of the button names used."]},{"l":"deviceTypes","p":["Signature","hs.blackmagic.deviceTypes","Type","Constant","Description","A table of the supported device types."]},{"l":"jogModeNames","p":["Signature","hs.blackmagic.jogModeNames","Type","Constant","Description","A table of the jog mode names used by each device type."]},{"l":"ledNames","p":["Signature","hs.blackmagic.ledNames","Type","Constant","Description","A table of the LED names used by each device type."]},{"l":"Functions"},{"l":"discoveryCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.blackmagic.discoveryCallback(fn) - none | | Type | Function | | Description | Sets/clears a callback for reacting to device discovery events. | | Parameters | fn - A function that will be called when a Blackmagic device is connected or disconnected. It should take the following arguments: A boolean, true if a device was connected, false if a device was disconnected. An hs.blackmagic object, being the device that was connected/disconnected. | | Returns | None | | Notes | |"]},{"l":"getDevice","p":["Signature","hs.blackmagic.getDevice(num) - hs.blackmagic``","Type","Function","Description","Gets an hs.blackmagic object for the specified device.","Parameters","num - A number that should be within the bounds of the number of connected devices.","Returns","An hs.blackmagic object or nil if something goes wrong.","Notes"]},{"l":"init","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.blackmagic.init(fn) - none | | Type | Function | | Description | Initialises the Blackmagic driver and sets a discovery callback. | | Parameters | fn - A function that will be called when a Blackmagic device is connected or disconnected. It should take the following arguments: A boolean, true if a device was connected, false if a device was disconnected. An hs.blackmagic object, being the device that was connected/disconnected. | | Returns | None | | Notes | This function must be called before any other parts of this module are used. |"]},{"l":"numDevices","p":["Signature","hs.blackmagic.numDevices() - number","Type","Function","Description","Gets the number of Blackmagic devices connected.","Parameters","None","Returns","A number containing the number of Blackmagic devices attached to the system.","Notes"]},{"l":"Methods"},{"l":"battery","p":["Signature","hs.blackmagic:battery() - boolean, number","Type","Method","Description","Gets the battery status for the Blackmagic device.","Parameters","None","Returns","true if charging, otherwise false The battery level between 0 and 100.","Notes"]},{"l":"callback","p":["Signature","hs.blackmagic:callback(fn) - hs.blackmagic``","Type","Method","Description","Sets/clears the button and jog wheel callback function for a Blackmagic device.","Parameters","fn - A function to be called when a button is pressed/released, or the jog wheel is rotated on the Blackmagic device.","Returns","The hs.blackmagic device The callback function should receive three arguments: The hs.blackmagic userdata object A string containing the name of the button or \"JOG WHEEL\" A boolean indicating whether the button was pressed (true) or released (false). Not relevant if a Jog Wheel action. The Jog Wheel Mode (if not a button press) The Jog Wheel value (if not a button press) You can use hs.blackmagic.buttonNames[deviceType] to get a table of possible values.","Notes"]},{"l":"deviceType","p":["Signature","hs.blackmagic:deviceType() - string","Type","Method","Description","Gets the device type for the Blackmagic device.","Parameters","None","Returns","The device type as a string - either \"Speed Editor\" or \"Editor Keyboard\".","Notes"]},{"l":"jogMode","p":["Signature","hs.blackmagic:jogMode([value]) - hs.blackmagic, string","Type","Method","Description","Gets or Sets the Jog Mode for the Blackmagic device.","Parameters","value - an optional string of \"RELATIVE\", \"ABSOLUTE\" and \"ABSOLUTE ZERO\" if setting.","Returns","The hs.blackmagic device\"RELATIVE\", \"ABSOLUTE\" and \"ABSOLUTE ZERO\" as a string, or nil if something has gone wrong.","Notes","You can use hs.blackmagic.jogModeNames[deviceType] to get a table of possible values.\"RELATIVE\" - Returns a “relative” position - a positive number if turning right, and a negative number if turning left. The faster you turn, the higher the number. One step is 360.\"ABSOLUTE\" - Returns an “absolute” position, based on when the mode was set. It has a range of -4096 (left of 0) to 4096 (right of 0). On the Editor Keyboard it has mechanical hard stops at -4096 and 4096, meaning you only use one half of the wheel.\"ABSOLUTE ZERO\" - The same as \"ABSOLUTE\", but has a small dead zone around 0 - which mechincally \"snaps\" to zero on a Editor Keyboard."]},{"l":"led","p":["Signature","hs.blackmagic:led(options) - hs.blackmagic``","Type","Method","Description","Sets the status for the LED lights.","Parameters","options - A table where the key is the button ID, and the value is a boolean to turn the LED on or off.","Returns","The hs.blackmagic device.","Notes","You can also use hs.blackmagic.ledNames[deviceType] to get a table of possible values."]},{"l":"serialNumber","p":["Signature","hs.blackmagic:serialNumber() - string","Type","Method","Description","Gets the serial number for the Blackmagic device.","Parameters","None","Returns","The serial number as a string.","Notes","The serial number is the unique identifier from the USB Device, and not the product serial number that's on the sticker on the back of the Blackmagic device."]}],[{"i":"hsbonjour","l":"hs.bonjour","p":["Find and publish network services advertised by multicast DNS (Bonjour) with Hammerspoon.","This module will allow you to discover services advertised on your network through multicast DNS and publish services offered by your computer."]},{"l":"Submodules","p":["hs.bonjour.service"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","machineServices","networkServices","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","findBrowsableDomains","findRegistrationDomains","findServices","includesPeerToPeer","stop"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"machineServices","p":["Signature","hs.bonjour.machineServices(target, callback) - none","Type","Function","Description","Polls a host for the service types it is advertising via multicast DNS.","Parameters","target- a string specifying the target host to query for advertised service types callback- a callback function which will be invoked when the service type query has completed. The callback should expect one argument which will either be an array of strings specifying the service types the target is advertising or a string specifying the error that occurred.","Returns","None","Notes","this function may not work for all clients implementing multicast DNS; it has been successfully tested with macOS and Linux targets running the Avahi Daemon service, but has generally returned an error when used with minimalist implementations found in common IOT devices and embedded electronics."]},{"l":"networkServices","p":["Signature","hs.bonjour.networkServices(callback, [timeout]) - none","Type","Function","Description","Returns a list of service types being advertised on your local network.","Parameters","callback- a callback function which will be invoked when the services query has completed. The callback should expect one argument: an array of strings specifying the service types discovered on the local network. timeout- an optional number, default 5, specifying the maximum number of seconds after the most recently received service type Hammerspoon should wait trying to identify advertised service types before finishing its query and invoking the callback.","Returns","None","Notes","This function is a convenience wrapper to hs.bonjour:findServices which collects the results from multiple callbacks made to findServices and returns them all at once to the callback function provided as an argument to this function. Because this function collects the results of multiple callbacks before invoking its own callback, the timeout value specified indicates the maximum number of seconds to wait after the latest value received by findServices unless the macOS specifies that it believes there are no more service types to identify. This is a best guess made by the macOS which may not always be accurate if your local network is particularly slow or if there are machines on your network which are slow to respond. See hs.bonjour:findServices for more details if you need to create your own query which can persist for longer periods of time or require termination logic that ignores the macOS's best guess."]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.bonjour.new() - browserObject","Type","Constructor","Description","Creates a new network service browser that finds published services on a network using multicast DNS.","Parameters","None","Returns","a new browserObject or nil if an error occurs","Notes"]},{"l":"Methods"},{"l":"findBrowsableDomains","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.bonjour:findBrowsableDomains(callback) - browserObject | | Type | Method | | Description | Return a list of zero-conf and bonjour domains visible to the users computer. | | Parameters | callback - a function which will be invoked as visible domains are discovered. The function should accept the following parameters and return none: browserObject - the userdata object for the browserObject which initiated the search type - a string which will be 'domain' or 'error'if type == 'domain', the remaining arguments will be:added - a boolean value indicating whether this callback invocation represents a newly discovered or added domain (true) or that the domain has been removed from the network (false)domain - a string specifying the name of the domain discovered or removedmoreExpected - a boolean value indicating whether or not the browser expects to discover additional domains or not.if type == 'error', the remaining arguments will be:errorString - a string specifying the error which has occurred | | Returns | the browserObject | | Notes | This method returns domains which are visible to your machine; however, your machine may or may not be able to access or publish records within the returned domains. See hs.bonjour:findRegistrationDomainsFor most non-corporate network users, it is likely that the callback will only be invoked once for the local domain. This is normal. Corporate networks or networks including Linux machines using additional domains defined with Avahi may see additional domains as well, though most Avahi installations now use only 'local' by default unless specifically configured to do otherwise.When moreExpected becomes false, it is the macOS's best guess as to whether additional records are available. Generally macOS is fairly accurate in this regard concerning domain searches, so to reduce the impact on system resources, it is recommended that you use hs.bonjour:stop when this parameter is false |"]},{"l":"findRegistrationDomains","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.bonjour:findRegistrationDomains(callback) - browserObject | | Type | Method | | Description | Return a list of zero-conf and bonjour domains this computer can register services in. | | Parameters | callback - a function which will be invoked as domains are discovered. The function should accept the following parameters and return none: browserObject - the userdata object for the browserObject which initiated the search type - a string which will be 'domain' or 'error'if type == 'domain', the remaining arguments will be:added - a boolean value indicating whether this callback invocation represents a newly discovered or added domain (true) or that the domain has been removed from the network (false)domain - a string specifying the name of the domain discovered or removedmoreExpected - a boolean value indicating whether or not the browser expects to discover additional domains or not.if type == 'error', the remaining arguments will be:errorString - a string specifying the error which has occurred | | Returns | the browserObject | | Notes | This is the preferred method for accessing domains as it guarantees that the host machine can connect to services in the returned domains. Access to domains outside this list may be more limited. See also hs.bonjour:findBrowsableDomainsFor most non-corporate network users, it is likely that the callback will only be invoked once for the local domain. This is normal. Corporate networks or networks including Linux machines using additional domains defined with Avahi may see additional domains as well, though most Avahi installations now use only 'local' by default unless specifically configured to do otherwise.When moreExpected becomes false, it is the macOS's best guess as to whether additional records are available. Generally macOS is fairly accurate in this regard concerning domain searches, so to reduce the impact on system resources, it is recommended that you use hs.bonjour:stop when this parameter is false |"]},{"l":"findServices","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.bonjour:findServices(type, [domain], [callback]) - browserObject | | Type | Method | | Description | Find advertised services of the type specified. | | Parameters | type - a string specifying the type of service to discover on your network. This string should be specified in the format of '_service._protocol.' where _protocol is one of '_tcp' or '_udp'. Examples of common service types can be found in hs.bonjour.serviceTypes.domain - an optional string specifying the domain to look for advertised services in. The domain should end with a period. If you omit this parameter, the default registration domain will be used, usually \"local.\"callback - a callback function which will be invoked as service advertisements meeting the specified criteria are discovered. The callback function should expect 2-5 arguments as follows: if a service is discovered or advertising for the service is terminated, the arguments will be:the browserObjectthe string \"domain\"a boolean indicating whether the service is being advertised (true) or should be removed because advertisements for the service are being terminated (false)the serviceObject for the specific advertisement (see hs.bonjour.service)a boolean indicating if more advertisements are expected (true) or if the macOS believes that there are no more advertisements to be discovered (false). if an error occurs, the callback arguments will be:the browserObjectthe string \"error\"a string specifying the specific error that occurred | | Returns | the browserObject | | Notes | macOS will indicate when it believes there are no more advertisements of the type specified by type in domain by marking the last argument to your callback function as false. This is a best guess and may not always be accurate if your network is slow or some servers on your network are particularly slow to respond.In addition, if you leave the browser running this method, you will get future updates when services are removed because of server shutdowns or added because of new servers being booted up.Leaving the browser running does consume some system resources though, so you will have to determine, based upon your specific requirements, if this is a concern for your specific task or not. To terminate the browser when you have retrieved all of the information you require, you can use the hs.bonjour:stop method.The special type \"_services._dns-sd._udp.\" can be used to discover the types of services being advertised on your network. The hs.bonjour.service objects returned to the callback function cannot actually be resolved, but you can use the hs.bonjour.service:name method to create a list of services that are currently present and being advertised. this special type is used by the shortcut function hs.bonjour.networkServices for this specific purpose.The special domain \"dns-sd.org.\" can be specified to find services advertised through Wide-Area Service Discovery as described at http://www.dns-sd.org. This can be used to discover a limited number of globally available sites on the internet, especially with a service type of _http._tcp.. In theory, with additional software, you may be able to publish services on your machine for Wide-Area Service discovery using this domain with hs.bonjour.service.new but the local dns server requirements and security implications of doing so are beyond the scope of this documentation. You should refer to http://www.dns-sd.org and your local DNS Server administrator or provider for more details. |"]},{"l":"includesPeerToPeer","p":["Signature","hs.bonjour:includesPeerToPeer([value]) - current value | browserObject","Type","Method","Description","Get or set whether to also browse over peer-to-peer Bluetooth and Wi-Fi, if available.","Parameters","value- an optional boolean, default false, value specifying whether to also browse over peer-to-peer Bluetooth and Wi-Fi, if available.","Returns","if value is provided, returns the browserObject; otherwise returns the current value for this property","Notes","This property must be set before initiating a search to have an effect."]},{"l":"stop","p":["Signature","hs.bonjour:stop() - browserObject","Type","Method","Description","Stops a currently running search or resolution for the browser object","Parameters","None","Returns","the browserObject","Notes","This method should be invoked when you have identified the services or hosts you require to reduce the consumption of system resources. Invoking this method on an already idle browser will do nothing In general, when your callback function for hs.bonjour:findBrowsableDomains, hs.bonjour:findRegistrationDomains, or hs.bonjour:findServices receives false for the moreExpected parameter, you should invoke this method on the browserObject unless there are specific reasons not to. Possible reasons you might want to extend the life of the browserObject are documented within each method."]}],[{"i":"hsbonjourservice","l":"hs.bonjour.service","p":["Represents the service records that are discovered or published by the hs.bonjour module.","This module allows you to explore the details of discovered services including ip addresses and text records, and to publish your own multicast DNS advertisements for services on your computer. This can be useful to advertise network services provided by other Hammerspoon modules or other applications on your computer which do not publish their own advertisements already.","This module will not allow you to publish proxy records for other hosts on your local network. Additional submodules which may address this limitation as well as provide additional functions available with Apple's dns-sd library are being considered but there is no estimated timeframe at present."]},{"l":"API Overview","p":["addresses","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","domain","hostname","includesPeerToPeer","Methods- API calls which can only be made on an object returned by a constructor","monitor","name","new","port","publish","remote","resolve","serviceTypes","stop","stopMonitoring","txtRecord","type"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"serviceTypes","p":["Signature","hs.bonjour.serviceTypes","Type","Constant","Description","A list of common service types which can used for discovery through this module.","Notes","This list was generated from the output of avahi-browse -b and avahi-browse -bk from the avahi-daemon/stable,now 0.7-4+b1 armhf package under Raspbian GNU/Linux 10. This list is by no means complete and is provided solely for the purposes of providing examples. Additional service types can be discovered quite easily using Google or other search engines. You can view the contents of this table in the Hammerspoon Console by entering require(hs.bonjour).serviceTypes into the input field."]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.bonjour.service.new(name, service, port, [domain]) - serviceObject","Type","Constructor","Description","Returns a new serviceObject for advertising a service provided by your computer.","Parameters","name- The name of the service being advertised. This does not have to be the hostname of the machine. However, if you specify an empty string, the computers hostname will be used. service- a string specifying the service being advertised. This string should be specified in the format of '_ service._ protocol.' where _ protocol is one of '_ tcp' or '_ udp'. Examples of common service types can be found in hs.bonjour.serviceTypes. port- an integer specifying the tcp or udp port the service is provided at domain- an optional string specifying the domain you wish to advertise this service in.","Returns","the newly created service object, or nil if there was an error","Notes","If the name specified is not unique on the network for the service type specified, then a number will be appended to the end of the name. This behavior cannot be overridden and can only be detected by checking hs.bonjour.service:name after hs.bonjour.service:publish is invoked to see if the name has been changed from what you originally assigned. The service will not be advertised until hs.bonjour.service:publish is invoked on the serviceObject returned. If you do not specify the domain parameter, your default domain, usually \"local\" will be used."]},{"l":"remote","p":["Signature","hs.bonjour.service.remote(name, service, [domain]) - serviceObject","Type","Constructor","Description","Returns a new serviceObject for a remote machine (i.e. not the users computer) on your network offering the specified service.","Parameters","name- a string specifying the name of the advertised service on the network to locate. Often, but not always, this will be the hostname of the machine providing the desired service. service- a string specifying the service type. This string should be specified in the format of '_ service._ protocol.' where _ protocol is one of '_ tcp' or '_ udp'. Examples of common service types can be found in hs.bonjour.serviceTypes. domain- an optional string specifying the domain the service belongs to.","Returns","the newly created service object, or nil if there was an error","Notes","In general you should not need to use this constructor, as they will be created automatically for you in the callbacks to hs.bonjour:findServices. This method can be used, however, when you already know that a specific service should exist on the network and you wish to resolve its current IP addresses or text records. Resolution of the service ip address, hostname, port, and current text records will not occur until hs.bonjour.service:publish is invoked on the serviceObject returned. The macOS API specifies that an empty domain string (i.e. specifying the domain parameter as \"\" or leaving it off completely) should result in using the default domain for the computer; in my experience this results in an error when attempting to resolve the serviceObject's ip addresses if I don't specify \"local\" explicitly. In general this shouldn't be an issue if you limit your use of remote serviceObjects to those returned by hs.bonjour:findServices as the domain of discovery will be included in the object for you automatically. If you do try to create these objects independently yourself, be aware that attempting to use the \"default domain\" rather than specifying it explicitly will probably not work as expected."]},{"l":"Methods"},{"l":"addresses","p":["Signature","hs.bonjour.service:addresses() - table","Type","Method","Description","Returns a table listing the addresses for the service represented by the serviceObject","Parameters","None","Returns","an array table of strings representing the IPv4 and IPv6 address of the machine which provides the services represented by the serviceObject","Notes","for remote serviceObjects, the table will be empty if this method is invoked before hs.bonjour.service:resolve. for local (published) serviceObjects, this table will always be empty."]},{"l":"domain","p":["Signature","hs.bonjour.service:domain() - string","Type","Method","Description","Returns the domain the service represented by the serviceObject belongs to.","Parameters","None","Returns","a string containing the domain the service represented by the serviceObject belongs to.","Notes","for remote serviceObjects, this domain will be the domain the service was discovered in. for local (published) serviceObjects, this domain will be the domain the service is published in; if you did not specify a domain with hs.bonjour.service.new then this will be an empty string until hs.bonjour.service:publish is invoked."]},{"l":"hostname","p":["Signature","hs.bonjour.service:hostname() - string","Type","Method","Description","Returns the hostname of the machine the service represented by the serviceObject belongs to.","Parameters","None","Returns","a string containing the hostname of the machine the service represented by the serviceObject belongs to.","Notes","for remote serviceObjects, this will be nil if this method is invoked before hs.bonjour.service:resolve. for local (published) serviceObjects, this method will always return nil."]},{"l":"includesPeerToPeer","p":["Signature","hs.bonjour.service:includesPeerToPeer([value]) - boolean | serviceObject","Type","Method","Description","Get or set whether the service represented by the service object should be published or resolved over peer-to-peer Bluetooth and Wi-Fi, if available.","Parameters","value- an optional boolean, default false, specifying whether advertising and resolving should occur over peer-to-peer Bluetooth and Wi-Fi, if available.","Returns","if value is provided, returns the serviceObject; otherwise returns the current value.","Notes","if you are changing the value of this property, you must call this method before invoking [hs.bonjour.service:publish](#publish] or hs.bonjour.service:resolve, or after stopping publishing or resolving with hs.bonjour.service:stop. for remote serviceObjects, this flag determines if resolution and text record monitoring should occur over peer-to-peer network interfaces. for local (published) serviceObjects, this flag determines if advertising should occur over peer-to-peer network interfaces."]},{"l":"monitor","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.bonjour.service:monitor([callback]) - serviceObject | | Type | Method | | Description | Monitor the service for changes to its associated text records. | | Parameters | callback - an optional callback function which should expect 3 arguments: the serviceObject userdata the string \"txtRecord\" a table containing key-value pairs specifying the new text records for the service | | Returns | the serviceObject | | Notes | When monitoring is active, hs.bonjour.service:txtRecord will return the most recent text records observed. If this is the only method by which you check the text records, but you wish to ensure you have the most recent values, you should invoke this method without specifying a callback.When hs.bonjour.service:resolve is invoked, the text records at the time of resolution are captured for retrieval with hs.bonjour.service:txtRecord. Subsequent changes to the text records will not be reflected by hs.bonjour.service:txtRecord unless this method has been invoked (with or without a callback function) and is currently active.You can monitor for text changes on local serviceObjects that were created by hs.bonjour.service.new and that you are publishing. This can be used to invoke a callback when one portion of your code makes changes to the text records you are publishing and you need another portion of your code to be aware of this change. |"]},{"l":"name","p":["Signature","hs.bonjour.service:name() - string","Type","Method","Description","Returns the name of the service represented by the serviceObject.","Parameters","None","Returns","a string containing the name of the service represented by the serviceObject.","Notes"]},{"l":"port","p":["Signature","hs.bonjour.service:port() - integer","Type","Method","Description","Returns the port the service represented by the serviceObject is available on.","Parameters","None","Returns","a number specifying the port the service represented by the serviceObject is available on.","Notes","for remote serviceObjects, this will be -1 if this method is invoked before hs.bonjour.service:resolve. for local (published) serviceObjects, this method will always return the number specified when the serviceObject was created with the hs.bonjour.service.new constructor."]},{"l":"publish","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.bonjour.service:publish([allowRename], [callback]) - serviceObject | | Type | Method | | Description | Begin advertising the specified local service. | | Parameters | allowRename - an optional boolean, default true, specifying whether to automatically rename the service if the name and type combination is already being published in the service's domain. If renaming is allowed and a conflict occurs, the service name will have -# appended to it where # is an increasing integer starting at 2.callback - an optional callback function which should expect 2 or 3 arguments and return none. The arguments to the callback function will be one of the following sets: on successful publishing:the serviceObject userdatathe string \"published\" if an error occurs during publishing:the serviceObject userdatathe string \"error\"a string specifying the specific error that occurred | | Returns | the serviceObject | | Notes | this method should only be called on serviceObjects which were created with hs.bonjour.service.new. |"]},{"l":"resolve","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.bonjour.service:resolve([timeout], [callback]) - serviceObject | | Type | Method | | Description | Resolve the address and details for a discovered service. | | Parameters | timeout - an optional number, default 0.0, specifying the maximum number of seconds to attempt to resolve the details for this service. Specifying 0.0 means that the resolution should not timeout and that resolution should continue indefinitely.callback - an optional callback function which should expect 2 or 3 arguments and return none. on successful resolution:the serviceObject userdatathe string \"resolved\" if an error occurs during resolution:the serviceObject userdatathe string \"error\"a string specifying the specific error that occurred if timeout is specified and is any number other than 0.0, the following will be sent to the callback when the timeout has been reached:the serviceObject userdatathe string \"stop\" | | Returns | the serviceObject | | Notes | this method should only be called on serviceObjects which were returned by an hs.bonjour browserObject or created with hs.bonjour.service.remote.For a remote service, this method must be called in order to retrieve the addresses, the port, the hostname, and any the associated text records for the service.To reduce the usage of system resources, you should generally specify a timeout value or make sure to invoke hs.bonjour.service:stop after you have verified that you have received the details you require. |"]},{"l":"stop","p":["Signature","hs.bonjour.service:stop() - serviceObject","Type","Method","Description","Stop advertising or resolving the service specified by the serviceObject","Parameters","None","Returns","the serviceObject","Notes","this method will stop the advertising of a service which has been published with hs.bonjour.service:publish or is being resolved with hs.bonjour.service:resolve. To reduce the usage of system resources, you should make sure to use this method when resolving a remote service if you did not specify a timeout for hs.bonjour.service:resolve or specified a timeout of 0.0 once you have verified that you have the details you need."]},{"l":"stopMonitoring","p":["Signature","hs.bonjour.service:stopMonitoring() - serviceObject","Type","Method","Description","Stop monitoring a service for changes to its text records.","Parameters","None","Returns","the serviceObject","Notes","This method will stop updating hs.bonjour.service:txtRecord and invoking the callback, if any, assigned with hs.bonjour.service:monitor."]},{"l":"txtRecord","p":["Signature","hs.bonjour.service:txtRecord([records]) - table | serviceObject | false","Type","Method","Description","Get or set the text records associated with the serviceObject.","Parameters","records- an optional table specifying the text record for the advertised service as a series of key-value entries. All keys and values must be specified as strings.","Returns","if an argument is provided to this method, returns the serviceObject or false if there was a problem setting the text record for this service. If no argument is provided, returns the current table of text records.","Notes","for remote serviceObjects, this method will return nil if invoked before hs.bonjour.service:resolve setting the text record for a service replaces the existing records for the serviceObject. If the serviceObject is remote, this change is only visible on the local machine. For a service you are advertising, this change will be advertised to other machines. Text records are usually used to provide additional information concerning the service and their purpose and meanings are service dependant; for example, when advertising an _http._tcp. service, you can specify a specific path on the server by specifying a table of text records containing the \"path\" key."]},{"l":"type","p":["Signature","hs.bonjour.service:type() - string","Method","Description","Returns the type of service represented by the serviceObject.","Parameters","None","Returns","a string containing the type of service represented by the serviceObject.","Notes"]}],[{"i":"hsbrightness","l":"hs.brightness","p":["Inspect/manipulate display brightness","Home: https://github.com/asmagill/mjolnir_asm.sys","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","ambient","get","set"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"ambient","p":["Signature","hs.brightness.ambient() - number","Type","Function","Description","Gets the current ambient brightness","Parameters","None","Returns","A number containing the current ambient brightness, measured in lux. If an error occurred, the number will be -1","Notes","Even though external Apple displays include an ambient light sensor, their data is typically not available, so this function will likely only be useful to MacBook users On Silicon based macs, this function uses a method similar to that used by corebrightnessdiag to retrieve the aggregate lux as reported to sysdiagnose. On Intel based macs, the raw sensor data is converted to lux via an algorithm used by Mozilla Firefox and is not guaranteed to give an accurate lux value."]},{"l":"get","p":["Signature","hs.brightness.get() - number","Type","Function","Description","Returns the current brightness of the display","Parameters","None","Returns","A number containing the brightness of the display, between 0 and 100","Notes"]},{"l":"set","p":["Signature","hs.brightness.set(brightness) - boolean","Type","Function","Description","Sets the display brightness","Parameters","brightness - A number between 0 and 100","Returns","True if the brightness was set, false if not","Notes"]}],[{"i":"hscaffeinate","l":"hs.caffeinate","p":["Control system power states (sleeping, preventing sleep, screen locking, etc)","NOTE: Any sleep preventions will be removed when hs.reload() is called. A future version of the module will save/restore state across reloads."]},{"l":"Submodules","p":["hs.caffeinate.watcher"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","currentAssertions","declareUserActivity","fastUserSwitch","get","lockScreen","logOut","restartSystem","sessionProperties","set","shutdownSystem","startScreensaver","systemSleep","toggle"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"currentAssertions","p":["Signature","hs.caffeinate.currentAssertions()","Type","Function","Description","Fetches information about processes which are currently asserting display/power sleep restrictions","Parameters","None","Returns","A table containing information about current power assertions, with process IDs (PID) as the keys, each of which may contain multiple assertions","Notes"]},{"l":"declareUserActivity","p":["Signature","hs.caffeinate.declareUserActivity([id])","Type","Function","Description","Informs the OS that the user performed some activity","Parameters","id - An option number containing the assertion ID returned by a previous call of this function","Returns","A number containing the ID of the assertion generated by this function","Notes","This is intended to simulate user activity, for example to prevent displays from sleeping, or to wake them up It is not mandatory to re-use assertion IDs if you are calling this function multiple times, but it is recommended that you do so if the calls are related"]},{"l":"fastUserSwitch","p":["Signature","hs.caffeinate.fastUserSwitch()","Type","Function","Description","Show the Fast User Switch screen (ie a login screen without logging out first)","Parameters","None","Returns","Notes"]},{"l":"get","p":["Signature","hs.caffeinate.get(sleepType) - bool or nil","Type","Function","Description","Queries whether a particular sleep type is being prevented","Parameters","sleepType - A string containing the type of sleep to inspect (see hs.caffeinate.set() for information about the possible values)","Returns","True if the specified type of sleep is being prevented, false if not. nil if sleepType was an invalid value","Notes"]},{"l":"lockScreen","p":["Signature","hs.caffeinate.lockScreen()","Type","Function","Description","Locks the displays","Parameters","None","Returns","Notes","This function uses private Apple APIs and could therefore stop working in any given release of macOS without warning."]},{"l":"logOut","p":["Signature","hs.caffeinate.logOut()","Type","Function","Description","Request the system log out the current user","Parameters","None","Returns","Notes"]},{"l":"restartSystem","p":["Signature","hs.caffeinate.restartSystem()","Type","Function","Description","Request the system reboot","Parameters","None","Returns","Notes"]},{"l":"sessionProperties","p":["Signature","hs.caffeinate.sessionProperties()","Type","Function","Description","Fetches information from the display server about the current session","Parameters","None","Returns","A table containing information about the current session, or nil if an error occurred","Notes","The keys in this dictionary will vary based on the current state of the system (e.g. local vs VNC login, screen locked vs unlocked)."]},{"l":"set","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.caffeinate.set(sleepType, aValue, acAndBattery) | | Type | Function | | Description | Configures the sleep prevention settings | | Parameters | sleepType - A string containing the type of sleep to be configured. The value should be one of: displayIdle - Controls whether the screen will be allowed to sleep (and also the system) if the user is idle. systemIdle - Controls whether the system will be allowed to sleep if the user is idle (display may still sleep). system - Controls whether the system will be allowed to sleep for any reason.aValue - A boolean, true if the specified type of sleep should be prevented, false if it should be allowedacAndBattery - A boolean, true if the sleep prevention should apply to both AC power and battery power, false if it should only apply to AC power. | | Returns | None | | Notes | These calls are not guaranteed to prevent the system sleep behaviours described above. The OS may override them if it feels it must (e.g. if your CPU temperature becomes dangerously high).The acAndBattery argument only applies to the system sleep type.You can toggle the acAndBattery state by calling hs.caffeinate.set() again and altering the acAndBattery value.The acAndBattery option does not appear to work anymore - it is based on private API that is not allowed in macOS 10.15 when running with the Hardened Runtime (which Hammerspoon now uses). |"]},{"l":"shutdownSystem","p":["Signature","hs.caffeinate.shutdownSystem()","Type","Function","Description","Request the system log out and power down","Parameters","None","Returns","Notes"]},{"l":"startScreensaver","p":["Signature","hs.caffeinate.startScreensaver()","Type","Function","Description","Request the system start the screensaver (which may lock the screen if the OS is configured to do so)","Parameters","None","Returns","Notes"]},{"l":"systemSleep","p":["Signature","hs.caffeinate.systemSleep()","Type","Function","Description","Requests the system to sleep immediately","Parameters","None","Returns","Notes"]},{"l":"toggle","p":["Signature","hs.caffeinate.toggle(sleepType) - bool or nil","Type","Function","Description","Toggles the current state of the specified type of sleep","Parameters","sleepType - A string containing the type of sleep to toggle (see hs.caffeinate.set() for information about the possible values)","Returns","True if the specified type of sleep is being prevented, false if not. nil if sleepType was an invalid value","Notes","If systemIdle is toggled to on, it will apply to AC only"]}],[{"i":"hscaffeinatewatcher","l":"hs.caffeinate.watcher","p":["Watch for display and system sleep/wake/power events and for fast user switching session events.","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","Methods- API calls which can only be made on an object returned by a constructor","new","screensaverDidStart","screensaverDidStop","screensaverWillStop","screensDidLock","screensDidSleep","screensDidUnlock","screensDidWake","sessionDidBecomeActive","sessionDidResignActive","start","stop","systemDidWake","systemWillPowerOff","systemWillSleep"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"screensaverDidStart","p":["Signature","hs.caffeinate.watcher.screensaverDidStart","Type","Constant","Description","The screensaver started"]},{"l":"screensaverDidStop","p":["Signature","hs.caffeinate.watcher.screensaverDidStop","Type","Constant","Description","The screensaver stopped"]},{"l":"screensaverWillStop","p":["Signature","hs.caffeinate.watcher.screensaverWillStop","Type","Constant","Description","The screensaver is about to stop"]},{"l":"screensDidLock","p":["Signature","hs.caffeinate.watcher.screensDidLock","Type","Constant","Description","The screen was locked"]},{"l":"screensDidSleep","p":["Signature","hs.caffeinate.watcher.screensDidSleep","Type","Constant","Description","The displays have gone to sleep"]},{"l":"screensDidUnlock","p":["Signature","hs.caffeinate.watcher.screensDidUnlock","Type","Constant","Description","The screen was unlocked"]},{"l":"screensDidWake","p":["Signature","hs.caffeinate.watcher.screensDidWake","Type","Constant","Description","The displays have woken from sleep"]},{"l":"sessionDidBecomeActive","p":["Signature","hs.caffeinate.watcher.sessionDidBecomeActive","Type","Constant","Description","The session became active, due to fast user switching"]},{"l":"sessionDidResignActive","p":["Signature","hs.caffeinate.watcher.sessionDidResignActive","Type","Constant","Description","The session is no longer active, due to fast user switching"]},{"l":"systemDidWake","p":["Signature","hs.caffeinate.watcher.systemDidWake","Type","Constant","Description","The system woke from sleep"]},{"l":"systemWillPowerOff","p":["Signature","hs.caffeinate.watcher.systemWillPowerOff","Type","Constant","Description","The user requested a logout or shutdown"]},{"l":"systemWillSleep","p":["Signature","hs.caffeinate.watcher.systemWillSleep","Type","Constant","Description","The system is preparing to sleep"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.caffeinate.watcher.new(fn) - watcher","Type","Constructor","Description","Creates a watcher object for system and display sleep/wake/power events","Parameters","fn - A function that will be called when system/display events happen. It should accept one parameter:","An event type (see the constants defined above)","Returns","An hs.caffeinate.watcher object","Notes"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.caffeinate.watcher:start()","Type","Method","Description","Starts the sleep/wake watcher","Parameters","None","Returns","An hs.caffeinate.watcher object","Notes"]},{"l":"stop","p":["Signature","hs.caffeinate.watcher:stop()","Type","Method","Description","Stops the sleep/wake watcher","Parameters","None","Returns","An hs.caffeinate.watcher object","Notes"]}],[{"i":"hscamera","l":"hs.camera","p":["Inspect the system's camera devices"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","allCameras","isWatcherRunning","setWatcherCallback","startWatcher","stopWatcher","Methods- API calls which can only be made on an object returned by a constructor","connectionID","isInUse","isPropertyWatcherRunning","name","setPropertyWatcherCallback","startPropertyWatcher","stopPropertyWatcher","uid"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"allCameras","p":["Signature","hs.camera.allCameras() - table","Type","Function","Description","Get all the cameras known to the system","Parameters","None","Returns","A table containing all of the known cameras","Notes"]},{"l":"isWatcherRunning","p":["Signature","hs.camera.isWatcherRunning() - Boolean","Type","Function","Description","Checks if the camera devices watcher is running","Parameters","None","Returns","A boolean, True if the watcher is running, otherwise False","Notes"]},{"l":"setWatcherCallback","p":["Signature","hs.camera.setWatcherCallback(fn)","Type","Function","Description","Sets/clears the callback function for the camera devices watcher","Parameters","fn - A callback function, or nil to remove a previously set callback. The callback should accept a two arguments (see Notes below)","Returns","None","Notes","The callback will be called when a camera is added or removed from the system To watch for changes within a single camera device, see hs.camera:newWatcher() The callback function arguments are: An hs.camera device object for the affected device A string, either \"Added\" or \"Removed\" depending on whether the device was added or removed from the system For \"Removed\" events, most methods on the hs.camera device object will not function correctly anymore and the device object passed to the callback is likely to be useless. It is recommended you re-check hs.camera.allCameras() and keep records of the cameras you care about Passing nil will cause the watcher to stop if it is running"]},{"l":"startWatcher","p":["Signature","hs.camera.startWatcher()","Type","Function","Description","Starts the camera devices watcher","Parameters","None","Returns","Notes"]},{"l":"stopWatcher","p":["Signature","hs.camera.stopWatcher()","Type","Function","Description","Stops the camera devices watcher","Parameters","None","Returns","Notes"]},{"l":"Methods"},{"l":"connectionID","p":["Signature","hs.camera:connectionID() - String","Type","Method","Description","Get the raw connection ID of the camera","Parameters","None","Returns","A number containing the connection ID of the camera","Notes"]},{"l":"isInUse","p":["Signature","hs.camera:isInUse() - Boolean","Type","Method","Description","Get the usage status of the camera","Parameters","None","Returns","A boolean, True if the camera is in use, otherwise False","Notes"]},{"l":"isPropertyWatcherRunning","p":["Signature","hs.camera:isPropertyWatcherRunning() - bool","Type","Method","Description","Checks if the property watcher on a camera object is running","Parameters","None","Returns","A boolean, True if the property watcher is running, otherwise False","Notes"]},{"l":"name","p":["Signature","hs.camera:name() - String","Type","Method","Description","Get the name of the camera","Parameters","None","Returns","A string containing the name of the camera","Notes"]},{"l":"setPropertyWatcherCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.camera:setPropertyWatcherCallback(fn) - hs.camera object | | Type | Method | | Description | Sets or clears a callback for when the properties of an hs.camera object change | | Parameters | fn - A function to be called when properties of the camera change, or nil to clear a previously set callback. The function should accept the following parameters: The hs.camera object that changed A string describing the property that changed. Possible values are: gone - The device's \"in use\" status changed (ie another app started using the camera, or stopped using it) A string containing the scope of the event, this will likely always be \"glob\" A number containing the element of the event, this will likely always be \"0\" | | Returns | The hs.camera object | | Notes | |"]},{"l":"startPropertyWatcher","p":["Signature","hs.camera:startPropertyWatcher()","Type","Method","Description","Starts the property watcher on a camera","Parameters","None","Returns","The hs.camera object","Notes"]},{"l":"stopPropertyWatcher","p":["Signature","hs.camera:stopPropertyWatcher()","Type","Method","Description","Stops the property watcher on a camera","Parameters","None","Returns","The hs.camera object","Notes"]},{"l":"uid","p":["Signature","hs.camera:uid() - String","Type","Method","Description","Get the UID of the camera","Parameters","None","Returns","A string containing the UID of the camera","Notes","The UID is not guaranteed to be stable across reboots"]}],[{"i":"hscanvas","l":"hs.canvas","p":["A different approach to drawing in Hammerspoon","hs.drawing approaches graphical images as independent primitives, each \"shape\" being a separate drawing object based on the core primitives: ellipse, rectangle, point, line, text, etc. This model works well with graphical elements that are expected to be managed individually and don't have complex clipping interactions, but does not scale well when more complex combinations or groups of drawing elements need to be moved or manipulated as a group, and only allows for simple inclusionary clipping regions.","This module works by designating a canvas and then assigning a series of graphical primitives to the canvas. Included in this assignment list are rules about how the individual elements interact with each other within the canvas (compositing and clipping rules), and direct modification of the canvas itself (move, resize, etc.) causes all of the assigned elements to be adjusted as a group.","The canvas elements are defined in an array, and each entry of the array is a table of key-value pairs describing the element at that position. Elements are rendered in the order in which they are assigned to the array (i.e. element 1 is drawn before element 2, etc.).","Attributes for canvas elements are defined in hs.canvas.attributes. All canvas elements require the type field; all other attributes have default values. Fields required to properly define the element (for example, frame for the rectangle element type) will be copied into the element definition with their default values if they are not specified at the time of creation. Optional attributes will only be assigned in the element definition if they are specified. When the module requires the value for an element's attribute it first checks the element definition itself, then the defaults are looked for in the canvas defaults, and then finally in the module's built in defaults (specified in the descriptions below).","Some examples of how to use this module can be found at https://github.com/asmagill/hammerspoon/wiki/hs.canvas.examples"]},{"l":"Submodules","p":["hs.canvas.matrix"]},{"l":"API Overview","p":["_accessibilitySubrole","alpha","appendElements","assignElement","attributes","behavior","behaviorAsLabels","bringToFront","canvasDefaultFor","canvasDefaultKeys","canvasDefaults","canvasElements","canvasMouseEvents","clickActivating","compositeTypes","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","copy","defaultTextStyle","delete","draggingCallback","elementAttribute","elementBounds","elementCount","elementKeys","elementSpec","Fields- Variables which can only be accessed from an object returned by a constructor","frame","Functions- API calls offered directly by the extension","help","hide","imageFromCanvas","insertElement","isOccluded","isShowing","isVisible","level","Methods- API calls which can only be made on an object returned by a constructor","minimumTextSize","mouseCallback","new","object","orderAbove","orderBelow","percentages","removeElement","replaceElements","rotateElement","sendToBack","show","size","topLeft","transformation","useCustomAccessibilitySubrole","wantsLayer","windowBehaviors","windowLevels"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"compositeTypes","p":["Signature","hs.canvas.compositeTypes[]","Type","Constant","Description","A table containing the possible compositing rules for elements within the canvas."]},{"l":"windowBehaviors","p":["Signature","hs.canvas.windowBehaviors[]","Type","Constant","Description","Array of window behavior labels for determining how a canvas or drawing object is handled in Spaces and Exposé"]},{"l":"windowLevels","p":["Signature","hs.canvas.windowLevels","Type","Constant","Description","A table of predefined window levels usable with hs.canvas:level","Notes","These key names map to the constants used in CoreGraphics to specify window levels and may not actually be used for what the name might suggest. For example, tests suggest that an active screen saver actually runs at a level of 2002, rather than at 1000, which is the window level corresponding to kCGScreenSaverWindowLevelKey. Each window level is sorted separately and hs.canvas:orderAbove and hs.canvas:orderBelow only arrange windows within the same level. If you use Dock hiding (or in 10.11, Menubar hiding) please note that when the Dock (or Menubar) is popped up, it is done so with an implicit orderAbove, which will place it above any items you may also draw at the Dock (or MainMenu) level. A canvas object with a hs.canvas:draggingCallback function can only accept drag-and-drop items when its window level is at hs.canvas.windowLevels.dragging or lower. A canvas object with a hs.canvas:mouseCallback function can only reliably receive mouse click events when its window level is at hs.canvas.windowLevels.desktopIcon+ 1 or higher."]},{"l":"Functions"},{"l":"defaultTextStyle","p":["Signature","hs.canvas.defaultTextStyle() - hs.styledtext attributes table","Type","Function","Description","Returns a table containing the default font, size, color, and paragraphStyle used by hs.canvas for text drawing objects.","Parameters","None","Returns","a table containing the default style attributes hs.canvas uses for text drawing objects in the hs.styledtext attributes table format.","Notes","This method is intended to be used in conjunction with hs.styledtext to create styledtext objects that are based on, or a slight variation of, the defaults used by hs.canvas."]},{"l":"elementSpec","p":["Signature","hs.canvas.elementSpec() - table","Type","Function","Description","Returns the list of attributes and their specifications that are recognized for canvas elements by this module.","Parameters","None","Returns","A table containing the attributes and specifications defined for this module.","Notes","This is primarily for debugging purposes and may be removed in the future."]},{"l":"help","p":["Signature","hs.canvas.help([attribute]) - string","Type","Function","Description","Provides specification information for the recognized attributes, or the specific attribute specified.","Parameters","attribute- an optional string specifying an element attribute. If this argument is not provided, all attributes are listed.","Returns","a string containing some of the information provided by the hs.canvas.elementSpec in a manner that is easy to reference from the Hammerspoon console.","Notes"]},{"l":"useCustomAccessibilitySubrole","p":["Signature","hs.canvas.useCustomAccessibilitySubrole([state]) - boolean","Type","Function","Description","Get or set whether or not canvas objects use a custom accessibility subrole for the containing system window.","Parameters","state- an optional boolean, default true, specifying whether or not canvas containers should use a custom accessibility subrole.","Returns","the current, possibly changed, value as a boolean","Notes","Under some conditions, it has been observed that Hammerspoon's hs.window.filter module will misidentify Canvas and Drawing objects as windows of the Hammerspoon application that it should consider when evaluating its filters. To eliminate this, hs.canvas objects (and previously hs.drawing objects, which are now deprecated and pass through to hs.canvas) were given a nonstandard accessibility subrole to prevent them from being included. This has caused some issues with third party tools, like Yabai, which also use the accessibility subroles for determining what actions it may take with Hammerspoon windows. By passing false to this function, all canvas objects will revert to specifying the standard subrole for the containing windows by default and should work as expected with third party tools. Note that this may cause issues or slowdowns if you are also using hs.window.filter; a more permanent solution is being considered. If you need to control the subrole of canvas objects more specifically, or only for some canvas objects, see hs.canvas:_accessibilitySubrole."]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.canvas.new(rect) - canvasObject","Type","Constructor","Description","Create a new canvas object at the specified coordinates","Parameters","rect- A rect-table containing the co-ordinates and size for the canvas object","Returns","a new, empty, canvas object, or nil if the canvas cannot be created with the specified coordinates","Notes","The size of the canvas defines the visible area of the canvas -- any portion of a canvas element which extends past the canvas's edges will be clipped. a rect-table is a table with key-value pairs specifying the top-left coordinate on the screen for the canvas (keys x and y) and the size (keys h and w) of the canvas. The table may be crafted by any method which includes these keys, including the use of an hs.geometry object."]},{"l":"Fields"},{"l":"attributes","p":["Signature","hs.canvas.attributes","Type","Field","Description","Canvas Element Attributes","Notes","* type- specifies the type of canvas element the table represents. This attribute has no default and must be specified for each element in the canvas array. Valid type strings are: arc- an arc inscribed on a circle, defined by radius, center, startAngle, and endAngle. canvas- an independent canvas object, displayed as an element within the specified frame. Defined by canvas and frame. circle- a circle, defined by radius and center. ellipticalArc- an arc inscribed on an oval, defined by frame, startAngle, and endAngle. image- an image as defined by one of the hs.image constructors. oval- an oval, defined by frame points- a list of points defined in coordinates. rectangle- a rectangle, optionally with rounded corners, defined by frame. resetClip- a special type -- indicates that the current clipping shape should be reset to the canvas default (the full canvas area). See Clipping Example. All other attributes, except action are ignored. segments- a list of line segments or bezier curves with control points, defined in coordinates. text- a string or hs.styledtext object, defined by text and frame.* The following is a list of all valid attributes. Not all attributes apply to every type, but you can set them for any type. action- Default strokeAndFill. A string specifying the action to take for the element in the array. The following actions are recognized: clip- append the shape to the current clipping region for the canvas. Ignored for canvas, image, and text types. build- do not render the element -- its shape is preserved and the next element in the canvas array is appended to it. This can be used to create complex shapes or clipping regions. The stroke and fill settings for a complex object created in this manner will be those of the final object of the group. Ignored for canvas, image, and text types. fill- fill the canvas element, if it is a shape, or display it normally if it is a canvas, image or text. Ignored for resetClip. skip- ignore this element or its effects. Can be used to temporarily \"remove\" an object from the canvas. stroke- stroke (outline) the canvas element, if it is a shape, or display it normally if it is a canvas, image or text. Ignored for resetClip. strokeAndFill- stroke and fill the canvas element, if it is a shape, or display it normally if it is a canvas, image or text. Ignored for resetClip. absolutePosition- Default true. If false, numeric location and size attributes ( frame, center, radius, and coordinates) will be automatically adjusted when the canvas is resized with hs.canvas:size or hs.canvas:frame so that the element remains in the same relative position in the canvas. absoluteSize- Default true. If false, numeric location and size attributes ( frame, center, radius, and coordinates) will be automatically adjusted when the canvas is resized with hs.canvas:size or hs.canvas:frame so that the element maintains the same relative size in the canvas. antialias- Default true. Indicates whether or not antialiasing should be enabled for the element. arcRadii- Default true. Used by the arc and ellipticalArc types to specify whether or not line segments from the element's center to the start and end angles should be included in the element's visible portion. This affects whether the object's stroke is a pie-shape or an arc with a chord from the start angle to the end angle. arcClockwise- Default true. Used by the arc and ellipticalArc types to specify whether the arc should be drawn from the start angle to the end angle in a clockwise (true) direction or in a counter-clockwise (false) direction. canvas- Defaults to nil. A separate canvas object which is to be displayed as an element in this canvas. The object must not currently belong to a visible window. Assign nil to this property to release a previously assigned object for use elsewhere as an element or on its own. canvasAlpha- Default 1.0. Specifies the alpha value to apply to the independent canvas element. compositeRule- A string, default \"sourceOver\", specifying how this element should be combined with earlier elements of the canvas. See hs.canvas.compositeTypes for a list of valid strings and their descriptions. center- Default { x = 50%, y = 50% }. Used by the circle and arc types to specify the center of the canvas element. The x and y fields can be specified as numbers or as a string. When specified as a string, the value is treated as a percentage of the canvas size. See the section on percentages for more information. clipToPath- Default false. Specifies whether the clipping regions should be temporarily limited to the element's shape while rendering this element or not. This can be used to produce crisper edges, as seen with hs.drawing but reduces stroke width granularity for widths less than 1.0 and causes occasional \"missing\" lines with the segments element type. Ignored for the canvas, image, point, and text types. closed- Default false. Used by the segments type to specify whether or not the shape defined by the lines and curves defined should be closed (true) or open (false). When an object is closed, an implicit line is stroked from the final point back to the initial point of the coordinates listed. coordinates- An array containing coordinates used by the segments and points types to define the lines and curves or points that make up the canvas element. The following keys are recognized and may be specified as numbers or strings (see the section on percentages). x- required for segments and points, specifying the x coordinate of a point. y- required for segments and points, specifying the y coordinate of a point. c1x- optional for segments, specifying the x coordinate of the first control point used to draw a bezier curve between this point and the previous point. Ignored for points and if present in the first coordinate in the coordinates array./lili c1y- optional for segments, specifying the y coordinate of the first control point used to draw a bezier curve between this point and the previous point. Ignored for points and if present in the first coordinate in the coordinates array. c2x- optional for segments, specifying the x coordinate of the second control point used to draw a bezier curve between this point and the previous point. Ignored for points and if present in the first coordinate in the coordinates array./lili c2y- optional for segments, specifying the y coordinate of the second control point used to draw a bezier curve between this point and the previous point. Ignored for points and if present in the first coordinate in the coordinates array. endAngle- Default 360.0. Used by the arc and ellipticalArc to specify the ending angle position for the inscribed arc. fillColor- Default { red = 1.0 }. Specifies the color used to fill the canvas element when the action is set to fill or strokeAndFill and fillGradient is equal to none. Ignored for the canvas, image, points, and text types. fillGradient- Default \"none\". A string specifying whether a fill gradient should be used instead of the fill color when the action is fill or strokeAndFill. May be \"none\", \"linear\", or \"radial\". fillGradientAngle- Default 0.0. Specifies the direction of a linear gradient when fillGradient is linear. fillGradientCenter- Default { x = 0.0, y = 0.0 }. Specifies the relative center point within the elements bounds of a radial gradient when fillGradient is radial. The x and y fields must both be between -1.0 and 1.0 inclusive. fillGradientColors- Default { { white = 0.0 }, { white = 1.0 } }. Specifies the colors to use for the gradient when fillGradient is not none. You must specify at least two colors, each of which must be convertible into the RGB color space (i.e. they cannot be an image being used as a color pattern). The gradient will blend from the first to the next, and so on until the last color. If more than two colors are specified, the \"color stops\" will be placed at evenly spaced intervals within the element. flatness- Default 0.6. A number which specifies the accuracy (or smoothness) with which curves are rendered. It is also the maximum error tolerance (measured in pixels) for rendering curves, where smaller numbers give smoother curves at the expense of more computation. flattenPath- Default false. Specifies whether curved line segments should be converted into straight line approximations. The granularity of the approximations is controlled by the path's current flatness value. frame- Default { x = 0%, y = 0%, h = 100%, w = 100% }. Used by the rectangle, oval, ellipticalArc, text, canvas and image types to specify the element's position and size. When the key value for x, y, h, or w are specified as a string, the value is treated as a percentage of the canvas size. See the section on percentages for more information. id- An optional string or number which is included in mouse callbacks to identify the element which was the target of the mouse event. If this is not specified for an element, it's index position is used instead. image- Defaults to a blank image. Used by the image type to specify an hs.image object to display as an image. imageAlpha- Defaults to 1.0. A number between 0.0 and 1.0 specifying the alpha value to be applied to the image specified by image. Note that if an image is a template image, then this attribute will internally default to 0.5 unless explicitly set for the element. imageAlignment- Default \"center\". A string specifying the alignment of the image within the canvas element's frame. Valid values for this attribute are \"center\", \"bottom\", \"topLeft\", \"bottomLeft\", \"bottomRight\", \"left\", \"right\", \"top\", and \"topRight\". imageAnimationFrame- Default 0. An integer specifying the image frame to display when the image is from an animated GIF. This attribute is ignored for other image types. May be specified as a negative integer indicating that the image frame should be calculated from the last frame and calculated backwards (i.e. specifying -1 selects the last frame for the GIF.) imageAnimates- Default false. A boolean specifying whether or not an animated GIF should be animated or if only a single frame should be shown. Ignored for other image types. imageScaling- Default \"scaleProportionally\". A string specifying how the image should be scaled within the canvas element's frame. Valid values for this attribute are: scaleToFit- shrink the image, preserving the aspect ratio, to fit the drawing frame only if the image is larger than the drawing frame. shrinkToFit- shrink or expand the image to fully fill the drawing frame. This does not preserve the aspect ratio. none- perform no scaling or resizing of the image. scaleProportionally- shrink or expand the image to fully fill the drawing frame, preserving the aspect ration. miterLimit- Default 10.0. The limit at which miter joins are converted to bevel join when strokeJoinStyle is miter. The miter limit helps you avoid spikes at the junction of two line segments. When the ratio of the miter length—the diagonal length of the miter join—to the line thickness exceeds the miter limit, the joint is converted to a bevel join. Ignored for the canvas, text, and image types. padding- Default 0.0. When an element specifies position information by percentage (i.e. as a string), the actual frame used for calculating position values is inset from the canvas frame on all sides by this amount. If you are using shadows with your elements, the shadow position is not included in the element's size and position specification; this attribute can be used to provide extra space for the shadow to be fully rendered within the canvas. radius- Default \"50%\". Used by the arc and circle types to specify the radius of the circle for the element. May be specified as a string or a number. When specified as a string, the value is treated as a percentage of the canvas size. See the section on percentages for more information. reversePath- Default false. Specifies drawing direction for the canvas element. By default, canvas elements are drawn from the point nearest the origin (top left corner) in a clockwise direction. Setting this to true causes the element to be drawn in a counter-clockwise direction. This will mostly affect fill and stroke dash patterns, but can also be used with clipping regions to create cut-outs. Ignored for canvas, image, and text types. roundedRectRadii- Default { xRadius = 0.0, yRadius = 0.0 }. shadow- Default { blurRadius = 5.0, color = { alpha = 1/3 }, offset = { h = -5.0, w = 5.0 } }. Specifies the shadow blurring, color, and offset to be added to an element which has withShadow set to true. startAngle- Default 0.0. Used by the arc and ellipticalArc to specify the starting angle position for the inscribed arc. strokeCapStyle- Default \"butt\". A string which specifies the shape of the endpoints of an open path when stroked. Primarily noticeable for lines rendered with the segments type. Valid values for this attribute are \"butt\", \"round\", and \"square\". strokeColor- Default { white = 0 }. Specifies the stroke (outline) color for a canvas element when the action is set to stroke or strokeAndFill. Ignored for the canvas, text, and image types. strokeDashPattern- Default {}. Specifies an array of numbers specifying a dash pattern for stroked lines when an element's action attribute is set to stroke or strokeAndFill. The numbers in the array alternate with the first element specifying a dash length in points, the second specifying a gap length in points, the third a dash length, etc. The array repeats to fully stroke the element. Ignored for the canvas, image, and text types. strokeDashPhase- Default 0.0. Specifies an offset, in points, where the dash pattern specified by strokeDashPattern should start. Ignored for the canvas, image, and text types. strokeJoinStyle- Default \"miter\". A string which specifies the shape of the joints between connected segments of a stroked path. Valid values for this attribute are \"miter\", \"round\", and \"bevel\". Ignored for element types of canvas, image, and text. strokeWidth- Default 1.0. Specifies the width of stroked lines when an element's action is set to stroke or strokeAndFill. Ignored for the canvas, image, and text element types. text- Default . Specifies the text to display for a text element. This may be specified as a string, or as an hs.styledtext object. textAlignment- Default natural. A string specifying the alignment of the text within a canvas element of type text. This field is ignored if the text is specified as an hs.styledtext object. Valid values for this attributes are: left- the text is visually left aligned. right- the text is visually right aligned. center- the text is visually center aligned. justified- the text is justified natural- the natural alignment of the text’s script textColor- Default { white = 1.0 }. Specifies the color to use when displaying the text element type, if the text is specified as a string. This field is ignored if the text is specified as an hs.styledtext object. textFont- Defaults to the default system font. A string specifying the name of the font to use when displaying the text element type, if the text is specified as a string. This field is ignored if the text is specified as an hs.styledtext object. textLineBreak- Default wordWrap. A string specifying how to wrap text which exceeds the canvas element's frame for an element of type text. This field is ignored if the text is specified as an hs.styledtext object. Valid values for this attribute are: wordWrap- wrap at word boundaries, unless the word itself doesn’t fit on a single line charWrap- wrap before the first character that doesn’t fit clip- do not draw past the edge of the drawing object frame truncateHead- the line is displayed so that the end fits in the frame and the missing text at the beginning of the line is indicated by an ellipsis truncateTail- the line is displayed so that the beginning fits in the frame and the missing text at the end of the line is indicated by an ellipsis truncateMiddle- the line is displayed so that the beginning and end fit in the frame and the missing text in the middle is indicated by an ellipsis textSize- Default 27.0. Specifies the font size to use when displaying the text element type, if the text is specified as a string. This field is ignored if the text is specified as an hs.styledtext object. trackMouseByBounds- Default false. If true, mouse events are based on the element's bounds (smallest rectangle which completely contains the element); otherwise, mouse events are based on the visible portion of the canvas element. trackMouseEnterExit- Default false. Generates a callback when the mouse enters or exits the canvas element. For canvas and text types, the frame of the element defines the boundaries of the tracking area. trackMouseDown- Default false. Generates a callback when mouse button is clicked down while the cursor is within the canvas element. For canvas and text types, the frame of the element defines the boundaries of the tracking area. trackMouseUp- Default false. Generates a callback when mouse button is released while the cursor is within the canvas element. For canvas and text types, the frame of the element defines the boundaries of the tracking area. trackMouseMove- Default false. Generates a callback when the mouse cursor moves within the canvas element. For canvas and text types, the frame of the element defines the boundaries of the tracking area. transformation- Default { m11 = 1.0, m12 = 0.0, m21 = 0.0, m22 = 1.0, tX = 0.0, tY = 0.0 }. Specifies a matrix transformation to apply to the element before displaying it. Transformations may include rotation, translation, scaling, skewing, etc. windingRule- Default \"nonZero\". A string specifying the winding rule in effect for the canvas element. May be \"nonZero\" or \"evenOdd\". The winding rule determines which portions of an element to fill. This setting will only have a visible effect on compound elements (built with the build action) or elements of type segments when the object is made from lines which cross. withShadow- Default false. Specifies whether a shadow effect should be applied to the canvas element. Ignored for the text type."]},{"l":"object","p":["Signature","hs.canvas.object[index]","Type","Field","Description","An array-like method for accessing the attributes for the canvas element at the specified index","Notes","Metamethods are assigned to the canvas object so that you can refer to individual elements of the canvas as if the canvas object was an array. Each element is represented by a table of key-value pairs, where each key represents an attribute for that element. Valid index numbers range from 1 to hs.canvas:elementCount() when getting an element or getting or setting one of its attributes, and from 1 to hs.canvas:elementCount()+ 1 when assign an element table to an index in the canvas. For example: luac = require(\"hs.canvas\")a = c.new:show()a:insertElement({ type = \"rectangle\", id = \"part1\", fillColor = })a:insertElement({ type = \"circle\", id = \"part2\", fillColor = }) can also be expressed as: luac = require(\"hs.canvas\")a = c.new:show()a[1] = { type = \"rectangle\", id = \"part1\", fillColor = }a[2] = { type = \"circle\", id = \"part2\", fillColor = } You can change a canvas element's attributes using this same style: a[2].fillColor.alpha = .5 will adjust the alpha value for element 2 of the canvas without adjusting any of the other color fields. To replace the color entirely, assign it like this: a[2].fillColor = { white = .5, alpha = .25 } The canvas defaults can also be accessed with the _default field like this: a._default.strokeWidth = 5. Attributes which have a string specified as their id attribute can also be accessed as if the id where a key in the table-like canvas: e.g. a.part2.action = skip It is important to note that these methods are a convenience and that the canvas object is not a true table. The tables are generated dynamically as needed; as such hs.inspect cannot properly display them; however, you can just type in the element or element attribute you wish to see expanded in the Hammerspoon console (or in a print command) to see the assigned attributes, e.g. a[1] or a[2].fillColor, and an inspect-like output will be provided. Attributes which allow using a string to specify a percentage (see percentages) can also be retrieved as their actual number for the canvas's current size by appending _raw to the attribute name, e.g. a[2].frame_raw. Because the canvas object is actually a Lua userdata, and not a real table, you cannot use the table.insert and table.remove functions on it. For inserting or removing an element in any position except at the end of the canvas, you must still use hs.canvas:insertElement and hs.canvas:removeElement. You can, however, remove the last element with a[#a] = nil. To print out all of the elements in the canvas with: for i, v in ipairs(a) do print(v) end. The pairs iterator will also work, and will work on element sub-tables (transformations, fillColor and strokeColor, etc.), but this iterator does not guarantee order."]},{"l":"percentages","p":["Signature","hs.canvas.percentages","Type","Field","Description","Canvas attributes which specify the location and size of canvas elements can be specified with an absolute position or as a percentage of the canvas size.","Notes","Percentages may be assigned to the following attributes: frame- the frame used by the rectangle, oval, ellipticalArc, text, and image types. The x and w fields will be a percentage of the canvas's width, and the y and h fields will be a percentage of the canvas's height. center- the center point for the circle and arc types. The x field will be a percentage of the canvas's width and the y field will be a percentage of the canvas's height. radius- the radius for the circle and arc types. The radius will be a percentage of the canvas's width. coordinates- the point coordinates used by the segments and points types. X coordinates (fields x, c1x, and c2x) will be a percentage of the canvas's width, and Y coordinates (fields y, c1y, and c2y) will be a percentage of the canvas's height. Percentages are assigned to these fields as a string. If the number in the string ends with a percent sign (%), then the percentage is the whole number which precedes the percent sign. If no percent sign is present, the percentage is expected in decimal format (e.g. \"1.0\" is the same as \"100%\"). Because a shadow applied to a canvas element is not considered as part of the element's bounds, you can also set the padding attribute to a positive number of points to inset the calculated values by from each edge of the canvas's frame so that the shadow will be fully visible within the canvas, even when an element is set to a width and height of \"100%\"."]},{"l":"Methods"},{"l":"_accessibilitySubrole","p":["Signature","hs.canvas:_accessibilitySubrole([subrole]) - canvasObject | current value","Type","Method","Description","Get or set the accessibility subrole returned by hs.canvas objects.","Parameters","subrole- an optional string or explicit nil which specifies what accessibility subrole value should be returned when canvas objects are queried through the macOS accessibility framework. See Notes for a discussion of how this value is interpreted. Defaults to nil.","Returns","If an argument is specified, returns the canvasObject; otherwise returns the current value.","Notes","Most people will probably not need to use this method; See hs.canvas.useCustomAccessibilitySubrole for a discussion as to why this method may be of use when Hammerspoon is being controlled through the accessibility framework by other applications. If a non empty string is specified as the argument to this method, the string will be returned whenever the canvas object's containing window is queried for its accessibility subrole. The other possible values depend upon the value registered with hs.canvas.useCustomAccessibilitySubrole: If useCustomAccessibilitySubrole is set to true (the default): If an explicit nil(the default) is specified for this method, the string returned when the canvas object's accessibility is queried will be the default macOS subrole for the canvas's window with the string \".Hammerspoon appended to it./lili If the empty string is specified (e.g.), then the default macOS subrole for the canvas's window will be returned./lili If useCustomAccessibilitySubroleis set to false:/lili If an explicitnil(the default) is specified for this method, then the default macOS subrole for the canvas's window will be returned./lili If the empty string is specified (e.g.), the string returned when the canvas object's accessibility is queried will be the default macOS subrole for the canvas's window with the string .Hammerspoon appended to it."]},{"l":"alpha","p":["Signature","hs.canvas:alpha([alpha]) - canvasObject | currentValue","Type","Method","Description","Get or set the alpha level of the window containing the canvasObject.","Parameters","alpha- an optional number specifying the new alpha level (0.0 - 1.0, inclusive) for the canvasObject","Returns","If an argument is provided, the canvas object; otherwise the current value.","Notes"]},{"l":"appendElements","p":["Signature","hs.canvas:appendElements(element...) - canvasObject","Type","Method","Description","Appends the elements specified to the canvas.","Parameters","element- a table containing key-value pairs that define the element to be appended to the canvas. You can specify one or more elements and they will be appended in the order they are listed.","Returns","the canvas object","Notes","You can also specify multiple elements in a table as an array, where each index in the table contains an element table, and use the array as a single argument to this method if this style works better in your code."]},{"l":"assignElement","p":["Signature","hs.canvas:assignElement(elementTable, [index]) - canvasObject","Type","Method","Description","Assigns a new element to the canvas at the specified index.","Parameters","elementTable- a table containing key-value pairs that define the element to be added to the canvas. index- an optional integer between 1 and the canvas element count + 1 specifying the index position to put the new element. Any element currently at that index will be replaced. Defaults to the canvas element count + 1 (i.e. after the end of the currently defined elements).","Returns","the canvasObject","Notes","When the index specified is the canvas element count + 1, the behavior of this method is the same as hs.canvas:insertElement; i.e. it adds the new element to the end of the currently defined element list."]},{"l":"behavior","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.canvas:behavior([behavior]) - canvasObject | currentValue | | Type | Method | | Description | Get or set the window behavior settings for the canvas object using labels defined in hs.canvas.windowBehaviors. | | Parameters | behavior - if present, the behavior should be a combination of values found in hs.canvas.windowBehaviors describing the window behavior. The behavior should be specified as one of the following: integer - a number representing the behavior which can be created by combining values found in hs.canvas.windowBehaviors with the logical or operator. string - a single key from hs.canvas.windowBehaviors which will be toggled in the current window behavior. table - a list of keys from hs.canvas.windowBehaviors which will be combined to make the final behavior by combining their values with the logical or operator. | | Returns | if an argument is provided, then the canvasObject is returned; otherwise the current behavior value is returned. | | Notes | |"]},{"l":"behaviorAsLabels","p":["Signature","hs.canvas:behaviorAsLabels(behaviorTable) - canvasObject | currentValue","Type","Method","Description","Get or set the window behavior settings for the canvas object using labels defined in hs.canvas.windowBehaviors.","Parameters","behaviorTable - an optional table of strings and/or integers specifying the desired window behavior for the canvas object.","Returns","If an argument is provided, the canvas object; otherwise the current value as a table of strings.","Notes"]},{"l":"bringToFront","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.canvas:bringToFront([aboveEverything]) - canvasObject | | Type | Method | | Description | Places the canvas object on top of normal windows | | Parameters | aboveEverything - An optional boolean value that controls how far to the front the canvas should be placed. Defaults to false. if true, place the canvas on top of all windows (including the dock and menubar and fullscreen windows). if false, place the canvas above normal windows, but below the dock, menubar and fullscreen windows. | | Returns | The canvas object | | Notes | As of macOS Sierra and later, if you want a hs.canvas object to appear above full-screen windows you must hide the Hammerspoon Dock icon first using: hs.dockicon.hide() |"]},{"l":"canvasDefaultFor","p":["Signature","hs.canvas:canvasDefaultFor(keyName, [newValue]) - canvasObject | currentValue","Type","Method","Description","Get or set the element default specified by keyName.","Parameters","keyName- the element default to examine or modify value- an optional new value to set as the default fot his canvas when not specified explicitly in an element declaration.","Returns","If an argument is provided, the canvas object; otherwise the current value.","Notes","Not all keys will apply to all element types. Currently set and built-in defaults may be retrieved in a table with hs.canvas:canvasDefaults."]},{"l":"canvasDefaultKeys","p":["Signature","hs.canvas:canvasDefaultKeys([module]) - table","Type","Method","Description","Returns a list of the key names for the attributes set for the canvas defaults.","Parameters","module- an optional boolean flag, default false, indicating whether the key names for the module defaults (true) should be included in the list. If false, only those defaults which have been explicitly set for the canvas are included.","Returns","a table containing the key names for the defaults which are set for this canvas. May also optionally include key names for all attributes which have a default value defined by the module.","Notes"]},{"l":"canvasDefaults","p":["Signature","hs.canvas:canvasDefaults([module]) - table","Type","Method","Description","Get a table of the default key-value pairs which apply to the canvas.","Parameters","module- an optional boolean flag, default false, indicating whether module defaults (true) should be included in the table. If false, only those defaults which have been explicitly set for the canvas are returned.","Returns","a table containing key-value pairs for the defaults which apply to the canvas.","Notes","Not all keys will apply to all element types. To change the defaults for the canvas, use hs.canvas:canvasDefaultFor."]},{"l":"canvasElements","p":["Signature","hs.canvas:canvasElements() - table","Type","Method","Description","Returns an array containing the elements defined for this canvas. Each array entry will be a table containing the key-value pairs which have been set for that canvas element.","Parameters","None","Returns","an array of element tables which are defined for the canvas.","Notes"]},{"l":"canvasMouseEvents","p":["Signature","hs.canvas:canvasMouseEvents([down], [up], [enterExit], [move]) - canvasObject | current values","Type","Method","Description","Get or set whether or not regions of the canvas which are not otherwise covered by an element with mouse tracking enabled should generate a callback for mouse events.","Parameters","down- an optional boolean, or nil placeholder, specifying whether or not the mouse button being pushed down should generate a callback for the canvas areas not otherwise covered by an element with mouse tracking enabled. up- an optional boolean, or nil placeholder, specifying whether or not the mouse button being released should generate a callback for the canvas areas not otherwise covered by an element with mouse tracking enabled. enterExit- an optional boolean, or nil placeholder, specifying whether or not the mouse pointer entering or exiting the canvas bounds should generate a callback for the canvas areas not otherwise covered by an element with mouse tracking enabled. move- an optional boolean, or nil placeholder, specifying whether or not the mouse pointer moving within the canvas bounds should generate a callback for the canvas areas not otherwise covered by an element with mouse tracking enabled.","Returns","If any arguments are provided, returns the canvas Object, otherwise returns the current values as four separate boolean values (i.e. not in a table).","Notes","Each value that you wish to set must be provided in the order given above, but you may specify a position as nil to indicate that whatever it's current state, no change should be applied. For example, to activate a callback for entering and exiting the canvas without changing the current callback status for up or down button clicks, you could use: hs.canvas:canvasMouseTracking(nil, nil, true). Use hs.canvas:mouseCallback to set the callback function. The identifier field in the callback's argument list will be \" canvas\", but otherwise identical to those specified in hs.canvas:mouseCallback."]},{"l":"clickActivating","p":["Signature","hs.canvas:clickActivating([flag]) - canvasObject | currentValue","Type","Method","Description","Get or set whether or not clicking on a canvas with a click callback defined should bring all of Hammerspoon's open windows to the front.","Parameters","flag- an optional boolean indicating whether or not clicking on a canvas with a click callback function defined should activate Hammerspoon and bring its windows forward. Defaults to true.","Returns","If an argument is provided, returns the canvas object; otherwise returns the current setting.","Notes","Setting this to false changes a canvas object's AXsubrole value and may affect the results of filters used with hs.window.filter, depending upon how they are defined."]},{"l":"copy","p":["Signature","hs.canvas:copy() - canvasObject","Type","Method","Description","Creates a copy of the canvas.","Parameters","None","Returns","a copy of the canvas","Notes","The copy of the canvas will be identical in all respects except: The new canvas will not have a callback function assigned, even if the original canvas does. The new canvas will not initially be visible, even if the original is. The new canvas is an independent entity -- any subsequent changes to either canvas will not be reflected in the other canvas. This method allows you to display a canvas in multiple places or use it as a canvas element multiple times."]},{"l":"delete","p":["Signature","hs.canvas:delete([fadeOutTime]) - none","Type","Method","Description","Destroys the canvas object, optionally fading it out first (if currently visible).","Parameters","fadeOutTime- An optional number of seconds over which to fade out the canvas object. Defaults to zero.","Returns","None","Notes","This method is automatically called during garbage collection, notably during a Hammerspoon termination or reload, with a fade time of 0."]},{"l":"draggingCallback","p":["Signature","hs.canvas:draggingCallback(fn) - canvasObject","Type","Method","Description","Sets or remove a callback for accepting dragging and dropping items onto the canvas.","Parameters","fn- A function, can be nil, that will be called when an item is dragged onto the canvas. An explicit nil, the default, disables drag-and-drop for this canvas.","Returns","The canvas object","Notes","The callback function should expect 3 arguments and optionally return 1: the canvas object itself, a message specifying the type of dragging event, and a table containing details about the item(s) being dragged. The key-value pairs of the details table will be the following: pasteboard- the name of the pasteboard that contains the items being dragged sequence- an integer that uniquely identifies the dragging session. mouse- a point table containing the location of the mouse pointer within the canvas corresponding to when the callback occurred. operation- a table containing string descriptions of the type of dragging the source application supports. Potentially useful for determining if your callback function should accept the dragged item or not.* The possible messages the callback function may receive are as follows:\"enter\" - the user has dragged an item into the canvas. When your callback receives this message, you can optionally return false to indicate that you do not wish to accept the item being dragged.\"exit\" - the user has moved the item out of the canvas; if the previous \"enter\" callback returned false, this message will also occur when the user finally releases the items being dragged.\"receive\" - indicates that the user has released the dragged object while it is still within the canvas frame. When your callback receives this message, you can optionally return false to indicate to the sending application that you do not want to accept the dragged item -- this may affect the animations provided by the sending application. You can use the sequence number in the details table to match up an \"enter\" with an \"exit\" or \"receive\" message. You should capture the details you require from the drag-and-drop operation during the callback for \"receive\" by using the pasteboard field of the details table and the hs.pasteboard module. Because of the nature of \"promised items\", it is not guaranteed that the items will still be on the pasteboard after your callback completes handling this message. A canvas object can only accept drag-and-drop items when its window level is at hs.canvas.windowLevels.dragging or lower. a canvas object can only accept drag-and-drop items when it accepts mouse events. You must define a hs.canvas:mouseCallback function, even if it is only a placeholder, e.g. hs.canvas:mouseCallback(function() end)"]},{"l":"elementAttribute","p":["Signature","hs.canvas:elementAttribute(index, key, [value]) - canvasObject | current value","Type","Method","Description","Get or set the attribute key for the canvas element at the specified index.","Parameters","index- the index of the canvas element whose attribute is to be retrieved or set. key- the key name of the attribute to get or set. value- an optional value to assign to the canvas element's attribute.","Returns","if a value for the attribute is specified, returns the canvas object; otherwise returns the current value for the specified attribute.","Notes"]},{"l":"elementBounds","p":["Signature","hs.canvas:elementBounds(index) - rectTable","Type","Method","Description","Returns the smallest rectangle which can fully contain the canvas element at the specified index.","Parameters","index- the index of the canvas element to get the bounds for","Returns","a rect table containing the smallest rectangle which can fully contain the canvas element.","Notes","For many elements, this will be the same as the element frame. For items without a frame (e.g. segments, circle, etc.) this will be the smallest rectangle which can fully contain the canvas element as specified by it's attributes."]},{"l":"elementCount","p":["Signature","hs.canvas:elementCount() - integer","Type","Method","Description","Returns the number of elements currently defined for the canvas object.","Parameters","None","Returns","the number of elements currently defined for the canvas object.","Notes"]},{"l":"elementKeys","p":["Signature","hs.canvas:elementKeys(index, [optional]) - table","Type","Method","Description","Returns a list of the key names for the attributes set for the canvas element at the specified index.","Parameters","index- the index of the element to get the assigned key list from. optional- an optional boolean, default false, indicating whether optional, but unset, keys relevant to this canvas object should also be included in the list returned.","Returns","a table containing the keys that are set for this canvas element. May also optionally include keys which are not specifically set for this element but use inherited values from the canvas or module defaults.","Notes","Any attribute which has been explicitly set for the element will be included in the key list (even if it is ignored for the element type). If the optional flag is set to true, the additional attribute names added to the list will only include those which are relevant to the element type."]},{"l":"frame","p":["Signature","hs.canvas:frame([rect]) - canvasObject | currentValue","Type","Method","Description","Get or set the frame of the canvasObject.","Parameters","rect - An optional rect-table containing the co-ordinates and size the canvas object should be moved and set to","Returns","If an argument is provided, the canvas object; otherwise the current value.","Notes","a rect-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the canvas (keys x and y) and the new size (keys h and w). The table may be crafted by any method which includes these keys, including the use of an hs.geometry object. elements in the canvas that have the absolutePosition attribute set to false will be moved so that their relative position within the canvas remains the same with respect to the new size. elements in the canvas that have the absoluteSize attribute set to false will be resized so that their relative size with respect to the canvas remains the same with respect to the new size."]},{"l":"hide","p":["Signature","hs.canvas:hide([fadeOutTime]) - canvasObject","Type","Method","Description","Hides the canvas object","Parameters","fadeOutTime- An optional number of seconds over which to fade out the canvas object. Defaults to zero.","Returns","The canvas object","Notes"]},{"l":"imageFromCanvas","p":["Signature","hs.canvas:imageFromCanvas() - hs.image object","Type","Method","Description","Returns an image of the canvas contents as an hs.image object.","Parameters","None","Returns","an hs.image object","Notes","The canvas does not have to be visible in order for an image to be generated from it."]},{"l":"insertElement","p":["Signature","hs.canvas:insertElement(elementTable, [index]) - canvasObject","Type","Method","Description","Insert a new element into the canvas at the specified index.","Parameters","elementTable- a table containing key-value pairs that define the element to be added to the canvas. index- an optional integer between 1 and the canvas element count + 1 specifying the index position to put the new element. Any element currently at that index, and those that follow, will be moved one position up in the element array. Defaults to the canvas element count + 1 (i.e. after the end of the currently defined elements).","Returns","the canvasObject","Notes","see also hs.canvas:assignElement."]},{"l":"isOccluded","p":["Signature","hs.canvas:isOccluded() - boolean","Type","Method","Description","Returns whether or not the canvas is currently occluded (hidden by other windows, off screen, etc).","Parameters","None","Returns","a boolean indicating whether or not the canvas is currently being occluded.","Notes","If any part of the canvas is visible (even if that portion of the canvas does not contain any canvas elements), then the canvas is not considered occluded. a canvas which is completely covered by one or more opaque windows is considered occluded; however, if the windows covering the canvas are not opaque, then the canvas is not occluded. a canvas that is currently hidden or with a height of 0 or a width of 0 is considered occluded. See also hs.canvas:isShowing."]},{"l":"isShowing","p":["Signature","hs.canvas:isShowing() - boolean","Type","Method","Description","Returns whether or not the canvas is currently being shown.","Parameters","None","Returns","a boolean indicating whether or not the canvas is currently being shown (true) or is currently hidden (false).","Notes","This method only determines whether or not the canvas is being shown or is hidden -- it does not indicate whether or not the canvas is currently off screen or is occluded by other objects. See also hs.canvas:isOccluded."]},{"l":"isVisible","p":["Signature","hs.canvas:isVisible() - boolean","Type","Method","Description","Returns whether or not the canvas is currently showing and is (at least partially) visible on screen.","Parameters","None","Returns","a boolean indicating whether or not the canvas is currently visible.","Notes","This is syntactic sugar for not hs.canvas:isOccluded(). See hs.canvas:isOccluded for more details."]},{"l":"level","p":["Signature","hs.canvas:level([level]) - canvasObject | currentValue","Type","Method","Description","Sets the window level more precisely than sendToBack and bringToFront.","Parameters","level- an optional level, specified as a number or as a string, specifying the new window level for the canvasObject. If it is a string, it must match one of the keys in hs.canvas.windowLevels.","Returns","If an argument is provided, the canvas object; otherwise the current value.","Notes"]},{"l":"minimumTextSize","p":["Signature","hs.canvas:minimumTextSize([index], text) - table","Type","Method","Description","Returns a table specifying the size of the rectangle which can fully render the text with the specified style so that is will be completely visible.","Parameters","index- an optional index specifying the element in the canvas which contains the text attributes which should be used when determining the size of the text. If not provided, the canvas defaults will be used instead. Ignored if text is an hs.styledtext object. text- a string or hs.styledtext object specifying the text.","Returns","a size table specifying the height and width of a rectangle which could fully contain the text when displayed in the canvas","Notes","Multi-line text (separated by a newline or return) is supported. The height will be for the multiple lines and the width returned will be for the longest line."]},{"l":"mouseCallback","p":["Signature","hs.canvas:mouseCallback(mouseCallbackFn) - canvasObject","Type","Method","Description","Sets a callback for mouse events with respect to the canvas","Parameters","mouseCallbackFn- A function, can be nil, that will be called when a mouse event occurs within the canvas, and an element beneath the mouse's current position has one of the trackMouse... attributes set to true.","Returns","The canvas object","Notes","The callback function should expect 5 arguments: the canvas object itself, a message specifying the type of mouse event, the canvas element id(or index position in the canvas if the id attribute is not set for the element), the x position of the mouse when the event was triggered within the rendered portion of the canvas element, and the y position of the mouse when the event was triggered within the rendered portion of the canvas element. See also hs.canvas:canvasMouseEvents for tracking mouse events in regions of the canvas not covered by an element with mouse tracking enabled. The following mouse attributes may be set to true for a canvas element and will invoke the callback with the specified message: trackMouseDown- indicates that a callback should be invoked when a mouse button is clicked down on the canvas element. The message will be \"mouseDown\". trackMouseUp- indicates that a callback should be invoked when a mouse button has been released over the canvas element. The message will be \"mouseUp\". trackMouseEnterExit- indicates that a callback should be invoked when the mouse pointer enters or exits the canvas element. The message will be \"mouseEnter\" or \"mouseExit\". trackMouseMove- indicates that a callback should be invoked when the mouse pointer moves within the canvas element. The message will be \"mouseMove\". The callback mechanism uses reverse z-indexing to determine which element will receive the callback -- the topmost element of the canvas which has enabled callbacks for the specified message will be invoked. No distinction is made between the left, right, or other mouse buttons. If you need to determine which specific button was pressed, use hs.eventtap.checkMouseButtons() within your callback to check. The hit point detection occurs by comparing the mouse pointer location to the rendered content of each individual canvas object... if an object which obscures a lower object does not have mouse tracking enabled, the lower object will still receive the event if it does have tracking enabled. Clipping regions which remove content from the visible area of a rendered object are ignored for the purposes of element hit-detection."]},{"l":"orderAbove","p":["Signature","hs.canvas:orderAbove([canvas2]) - canvasObject","Type","Method","Description","Moves canvas object above canvas2, or all canvas objects in the same presentation level, if canvas2 is not given.","Parameters","canvas2-An optional canvas object to place the canvas object above.","Returns","The canvas object","Notes","If the canvas object and canvas2 are not at the same presentation level, this method will move the canvas object as close to the desired relationship as possible without changing the canvas object's presentation level. See hs.canvas.level."]},{"l":"orderBelow","p":["Signature","hs.canvas:orderBelow([canvas2]) - canvasObject","Type","Method","Description","Moves canvas object below canvas2, or all canvas objects in the same presentation level, if canvas2 is not given.","Parameters","canvas2-An optional canvas object to place the canvas object below.","Returns","The canvas object","Notes","If the canvas object and canvas2 are not at the same presentation level, this method will move the canvas object as close to the desired relationship as possible without changing the canvas object's presentation level. See hs.canvas.level."]},{"l":"removeElement","p":["Signature","hs.canvas:removeElement([index]) - canvasObject","Type","Method","Description","Insert a new element into the canvas at the specified index.","Parameters","index- an optional integer between 1 and the canvas element count specifying the index of the canvas element to remove. Any elements that follow, will be moved one position down in the element array. Defaults to the canvas element count (i.e. the last element of the currently defined elements).","Returns","the canvasObject","Notes"]},{"l":"replaceElements","p":["Signature","hs.canvas:replaceElements(element...) - canvasObject","Type","Method","Description","Replaces all of the elements in the canvas with the elements specified. Shortens or lengthens the canvas element count if necessary to accomodate the new canvas elements.","Parameters","element- a table containing key-value pairs that define the element to be assigned to the canvas. You can specify one or more elements and they will be appended in the order they are listed.","Returns","the canvas object","Notes","You can also specify multiple elements in a table as an array, where each index in the table contains an element table, and use the array as a single argument to this method if this style works better in your code."]},{"l":"rotateElement","p":["Signature","hs.canvas:rotateElement(index, angle, [point], [append]) - canvasObject","Type","Method","Description","Rotates an element about the point specified, or the elements center if no point is specified.","Parameters","index- the index of the element to rotate angle- the angle to rotate the object in a clockwise direction point- an optional point table, defaulting to the elements center, specifying the point around which the object should be rotated append- an optional boolean, default false, specifying whether or not the rotation transformation matrix should be appended to the existing transformation assigned to the element (true) or replace it (false).","Returns","the canvas object","Notes","a point-table is a table with key-value pairs specifying a coordinate in the canvas (keys x and y). The table may be crafted by any method which includes these keys, including the use of an hs.geometry object. The center of the object is determined by getting the element's bounds with hs.canvas:elementBounds. If the third argument is a boolean value, the point argument is assumed to be the element's center and the boolean value is used as the append argument. This method uses hs.canvas.matrix to generate the rotation transformation and provides a wrapper for hs.canvas.matrix.translate(x, y):rotate(angle):translate(-x, -y) which is then assigned or appended to the element's existing transformation attribute."]},{"l":"sendToBack","p":["Signature","hs.canvas:sendToBack() - canvasObject","Type","Method","Description","Places the canvas object behind normal windows, between the desktop wallpaper and desktop icons","Parameters","None","Returns","The canvas object","Notes"]},{"l":"show","p":["Signature","hs.canvas:show([fadeInTime]) - canvasObject","Type","Method","Description","Displays the canvas object","Parameters","fadeInTime- An optional number of seconds over which to fade in the canvas object. Defaults to zero.","Returns","The canvas object","Notes","if the canvas is in use as an element in another canvas, this method will result in an error."]},{"l":"size","p":["Signature","hs.canvas:size([size]) - canvasObject | currentValue","Type","Method","Description","Get or set the size of a canvas object","Parameters","size- An optional size-table specifying the width and height the canvas object should be resized to","Returns","If an argument is provided, the canvas object; otherwise the current value.","Notes","a size-table is a table with key-value pairs specifying the size (keys h and w) the canvas should be resized to. The table may be crafted by any method which includes these keys, including the use of an hs.geometry object. elements in the canvas that have the absolutePosition attribute set to false will be moved so that their relative position within the canvas remains the same with respect to the new size. elements in the canvas that have the absoluteSize attribute set to false will be resized so that their relative size with respect to the canvas remains the same with respect to the new size."]},{"l":"topLeft","p":["Signature","hs.canvas:topLeft([point]) - canvasObject | currentValue","Type","Method","Description","Get or set the top-left coordinate of the canvas object","Parameters","point- An optional point-table specifying the new coordinate the top-left of the canvas object should be moved to","Returns","If an argument is provided, the canvas object; otherwise the current value.","Notes","a point-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the canvas (keys x and y). The table may be crafted by any method which includes these keys, including the use of an hs.geometry object."]},{"l":"transformation","p":["Signature","hs.canvas:transformation([matrix]) - canvasObject | current value","Type","Method","Description","Get or set the matrix transformation which is applied to every element in the canvas before being individually processed and added to the canvas.","Parameters","matrix- an optional table specifying the matrix table, as defined by the hs.canvas.matrix module, to be applied to every element of the canvas, or an explicit nil to reset the transformation to the identity matrix.","Returns","if an argument is provided, returns the canvasObject, otherwise returns the current value","Notes","An example use for this method would be to change the canvas's origin point from the lower left corner of the canvas to somewhere else, like the middle of the canvas."]},{"l":"wantsLayer","p":["Signature","hs.canvas:wantsLayer([flag]) - canvasObject | currentValue","Type","Method","Description","Get or set whether or not the canvas object should be rendered by the view or by Core Animation.","Parameters","flag- optional boolean (default false) which indicates whether the canvas object should be rendered by the containing view (false) or by Core Animation (true).","Returns","If an argument is provided, the canvas object; otherwise the current value.","Notes","This method can help smooth the display of small text objects on non-Retina monitors."]}],[{"i":"hscanvasmatrix","l":"hs.canvas.matrix","p":["A sub module to hs.canvas which provides support for basic matrix manipulations which can be used as the values for transformation attributes in the hs.canvas module.","For mathematical reasons that are beyond the scope of this document, a 3x3 matrix can be used to represent a series of manipulations to be applied to the coordinates of a 2 dimensional drawing object. These manipulations can include one or more of a combination of translations, rotations, shearing and scaling. Within the 3x3 matrix, only 6 numbers are actually required, and this module represents them as the following keys in a Lua table: m11, m12, m21, m22, tX, and tY. For those of a mathematical bent, the 3x3 matrix used within this module can be visualized as follows:","This module allows you to generate the table which can represent one or more of the recognized transformations without having to understand the math behind the manipulations or specify the matrix values directly.","Many of the methods defined in this module can be used both as constructors and as methods chained to a previous method or constructor. Chaining the methods in this manner allows you to combine multiple transformations into one combined table which can then be assigned to an element in your canvas..","For more information on the mathematics behind these, you can check the web. One site I used for reference (but there are many more which go into much more detail) can be found at http://www.cs.trinity.edu/~jhowland/cs2322/2d/2d/."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","identity","Methods- API calls which can only be made on an object returned by a constructor","append","invert","prepend","rotate","scale","shear","translate"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"identity","p":["Signature","hs.canvas.matrix.identity() - matrixObject","Type","Constructor","Description","Specifies the identity matrix. Resets all existing transformations when applied as a method to an existing matrixObject.","Parameters","None","Returns","the identity matrix.","Notes","The identity matrix can be thought of as \"apply no transformations at all\" or \"render as specified\". Mathematically this is represented as:[ 1, 0, 0 ][ 0, 1, 0 ][ 0, 0, 1 ]"]},{"l":"Methods"},{"l":"append","p":["Signature","hs.canvas.matrix:append(matrix) - matrixObject","Type","Method","Description","Appends the specified matrix transformations to the matrix and returns the new matrix. This method cannot be used as a constructor.","Parameters","matrix- the table to append to the current matrix.","Returns","the new matrix","Notes","Mathematically this method multiples the original matrix by the new one and returns the result of the multiplication. You can use this method to \"stack\" additional transformations on top of existing transformations, without having to know what the existing transformations in effect for the canvas element are."]},{"l":"invert","p":["Signature","hs.canvas.matrix:invert() - matrixObject","Type","Method","Description","Generates the mathematical inverse of the matrix. This method cannot be used as a constructor.","Parameters","None","Returns","the inverted matrix.","Notes","Inverting a matrix which represents a series of transformations has the effect of reversing or undoing the original transformations. This is useful when used with hs.canvas.matrix.append to undo a previously applied transformation without actually replacing all of the transformations which may have been applied to a canvas element."]},{"l":"prepend","p":["Signature","hs.canvas.matrix:prepend(matrix) - matrixObject","Type","Method","Description","Prepends the specified matrix transformations to the matrix and returns the new matrix. This method cannot be used as a constructor.","Parameters","matrix- the table to append to the current matrix.","Returns","the new matrix","Notes","Mathematically this method multiples the new matrix by the original one and returns the result of the multiplication. You can use this method to apply a transformation before the currently applied transformations, without having to know what the existing transformations in effect for the canvas element are."]},{"l":"rotate","p":["Signature","hs.canvas.matrix:rotate(angle) - matrixObject","Type","Method","Description","Applies a rotation of the specified number of degrees to the transformation matrix. This method can be used as a constructor or a method.","Parameters","angle- the number of degrees to rotate in a clockwise direction.","Returns","the new matrix","Notes","The rotation of an element this matrix is applied to will be rotated about the origin (zero point). To rotate an object about another point (its center for example), prepend a translation to the point to rotate about, and append a translation reversing the initial translation. e.g. hs.canvas.matrix.translate(x, y):rotate(angle):translate(-x, -y)"]},{"l":"scale","p":["Signature","hs.canvas.matrix:scale(xFactor, [yFactor]) - matrixObject","Type","Method","Description","Applies a scaling transformation to the matrix. This method can be used as a constructor or a method.","Parameters","xFactor- the scaling factor to apply to the object in the horizontal orientation. yFactor- an optional argument specifying a different scaling factor in the vertical orientation. If this argument is not provided, the xFactor argument will be used for both orientations.","Returns","the new matrix","Notes"]},{"l":"shear","p":["Signature","hs.canvas.matrix:shear(xFactor, [yFactor]) - matrixObject","Type","Method","Description","Applies a shearing transformation to the matrix. This method can be used as a constructor or a method.","Parameters","xFactor- the shearing factor to apply to the object in the horizontal orientation. yFactor- an optional argument specifying a different shearing factor in the vertical orientation. If this argument is not provided, the xFactor argument will be used for both orientations.","Returns","the new matrix","Notes"]},{"l":"translate","p":["Signature","hs.canvas.matrix:translate(x, y) - matrixObject","Type","Method","Description","Applies a translation transformation to the matrix. This method can be used as a constructor or a method.","Parameters","x- the distance to translate the object in the horizontal direction. y- the distance to translate the object in the vertical direction.","Returns","the new matrix","Notes"]}],[{"i":"hschooser","l":"hs.chooser","p":["Graphical, interactive tool for choosing/searching data","Notes:","This module was influenced heavily by Choose, by Steven Degutis ( https://github.com/sdegutis/choose)"]},{"l":"API Overview","p":["attachedToolbar","bgDark","cancel","choices","Constructors- API calls which return an object, typically one that offers API methods","delete","enableDefaultForQuery","fgColor","globalCallback","hide","hideCallback","invalidCallback","isVisible","Methods- API calls which can only be made on an object returned by a constructor","new","placeholderText","query","queryChangedCallback","refreshChoicesCallback","rightClickCallback","rows","searchSubText","select","selectedRow","selectedRowContents","show","showCallback","subTextColor","Variables- Configurable values","width"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"globalCallback","p":["Signature","hs.chooser.globalCallback","Type","Variable","Description","A global callback function used for various hs.chooser events","Notes","This callback should accept two parameters: An hs.chooser object A string containing the name of the event to handle. Possible values are: willOpen- An hs.chooser is about to be shown on screen didClose- An hs.chooser has just been removed from the screen There is a default global callback that uses the willOpen event to remember which window has focus, and the didClose event to restore focus back to the original window. If you want to use this in addition to your own callback, you can call it as hs.chooser._defaultGlobalCallback(event)"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.chooser.new(completionFn) - hs.chooser object","Type","Constructor","Description","Creates a new chooser object","Parameters","completionFn - A function that will be called when the chooser is dismissed. It should accept one parameter, which will be nil if the user dismissed the chooser window, otherwise it will be a table containing whatever information you supplied for the item the user chose.","Returns","An hs.chooser object","Notes","As of macOS Sierra and later, if you want a hs.chooser object to appear above full-screen windows you must hide the Hammerspoon Dock icon first using: hs.dockicon.hide()"]},{"l":"Methods"},{"l":"attachedToolbar","p":["Signature","hs.chooser:attachedToolbar([toolbar]) - hs.chooser object | currentValue","Type","Method","Description","Get or attach/detach a toolbar to/from the chooser.","Parameters","toolbar- An hs.webview.toolbar object to be attached to the chooser. If nil is supplied, the current toolbar will be removed","Returns","if a toolbarObject or explicit nil is specified, returns the hs.chooser object; otherwise returns the current toolbarObject or nil, if no toolbar is attached to the chooser.","Notes","this method is a convenience wrapper for the hs.webview.toolbar.attachToolbar function. If the toolbarObject is currently attached to another window when this method is called, it will be detached from the original window and attached to the chooser. If you wish to attach the same toolbar to multiple chooser objects, see hs.webview.toolbar:copy."]},{"l":"bgDark","p":["Signature","hs.chooser:bgDark([beDark]) - hs.chooser object or boolean","Type","Method","Description","Sets the background of the chooser between light and dark","Parameters","beDark - A optional boolean, true to be dark, false to be light. If this parameter is omitted, the current setting will be returned","Returns","The hs.chooser object or a boolean, true if the window is dark, false if it is light","Notes","The text colors will not automatically change when you toggle the darkness of the chooser window, you should also set appropriate colors with hs.chooser:fgColor() and hs.chooser:subTextColor()"]},{"l":"cancel","p":["Signature","hs.chooser:cancel() - hs.chooser object","Type","Method","Description","Cancels the chooser","Parameters","None","Returns","The hs.chooser object","Notes"]},{"l":"choices","p":["Signature","hs.chooser:choices(choices) - hs.chooser object","Type","Method","Description","Sets the choices for a chooser","Parameters","choices - Either a function to call when the list of choices is needed, or nil to remove any existing choices/callback, or a table containing static choices.","Returns","The hs.chooser object","Notes","The table of choices (be it provided statically, or returned by the callback) must contain at least the following keys for each choice: text - A string or hs.styledtext object that will be shown as the main text of the choice Each choice may also optionally contain the following keys: subText - A string or hs.styledtext object that will be shown underneath the main text of the choice image - An hs.image image object that will be displayed next to the choice valid - A boolean that defaults to true, if set to false selecting the choice will invoke the invalidCallback method instead of dismissing the chooser Any other keys/values in each choice table will be retained by the chooser and returned to the completion callback when a choice is made. This is useful for storing UUIDs or other non-user-facing information, however, it is important to note that you should not store userdata objects in the table - it is run through internal conversion functions, so only basic Lua types should be stored. If a function is given, it will be called once, when the chooser window is displayed. The results are then cached until this method is called again, or hs.chooser:refreshChoicesCallback() is called. If you're using a hs.styledtext object for text or subText choices, make sure you specify a color, otherwise your text could appear transparent depending on the bgDark setting. Example: lua/lililocal choices = {/lili {/lili [text] = First Choice,/lili [subText] = This is the subtext of the first choice,/lili [uuid] = 0001/lili },/lili { [text] = Second Option,/lili [subText] = I wonder what I should type here?,/lili [uuid] = Bbbb/lili },/lili { [text] = hs.styledtext.new(Third Possibility, {font={size=18}, color=hs.drawing.color.definedCollections.hammerspoon.green}),/lili [subText] = What a lot of choosing there is going on here!,/lili [uuid] = III3/lili },/lili}"]},{"l":"delete","p":["Signature","hs.chooser:delete()","Type","Method","Description","Deletes a chooser","Parameters","None","Returns","Notes"]},{"l":"enableDefaultForQuery","p":["Signature","hs.chooser:enableDefaultForQuery([]) - hs.chooser object or boolean","Type","Method","Description","Gets/Sets whether the chooser should run the callback on a query when it does not match any on the list","Parameters","enableDefaultForQuery - An optional boolean, true to return query string, false to not. If this parameter is omitted, the current configuration value will be returned","Returns","the hs.chooser object if a value was set, or a boolean if no parameter was passed","Notes","This should be used before a chooser has been displayed"]},{"l":"fgColor","p":["Signature","hs.chooser:fgColor(color) - hs.chooser object","Type","Method","Description","Sets the foreground color of the chooser","Parameters","color - An optional table containing a color specification (see hs.drawing.color), or nil to restore the default color. If this parameter is omitted, the existing color will be returned","Returns","The hs.chooser object or a color table","Notes"]},{"l":"hide","p":["Signature","hs.chooser:hide() - hs.chooser object","Type","Method","Description","Hides the chooser","Parameters","None","Returns","The hs.chooser object","Notes"]},{"l":"hideCallback","p":["Signature","hs.chooser:hideCallback([fn]) - hs.chooser object","Type","Method","Description","Sets/clears a callback for when the chooser window is hidden","Parameters","fn - An optional function that will be called when the chooser window is hidden. If this parameter is omitted, the existing callback will be removed.","Returns","The hs.chooser object","Notes","This callback is called after the chooser is hidden. This callback is called after hs.chooser.globalCallback."]},{"l":"invalidCallback","p":["Signature","hs.chooser:invalidCallback([fn]) - hs.chooser object","Type","Method","Description","Sets/clears a callback for invalid choices","Parameters","fn - An optional function that will be called whenever the user select an choice set as invalid. If this parameter is omitted, the existing callback will be removed.","Returns","The hs.chooser object","Notes","The callback may accept one argument, it will be a table containing whatever information you supplied for the item the user chose. To display a context menu, see hs.menubar, specifically the :popupMenu() method"]},{"l":"isVisible","p":["Signature","hs.chooser:isVisible() - boolean","Type","Method","Description","Checks if the chooser is currently displayed","Parameters","None","Returns","A boolean, true if the chooser is displayed on screen, false if not","Notes"]},{"l":"placeholderText","p":["Signature","hs.chooser:placeholderText([placeholderText]) - hs.chooser object or string","Type","Method","Description","Sets/gets placeholder text that is shown in the query text field when no other text is present","Parameters","placeholderText - An optional string for placeholder text. If this parameter is omitted, the existing placeholder text will be returned.","Returns","The hs.chooser object, or the existing placeholder text","Notes"]},{"l":"query","p":["Signature","hs.chooser:query([queryString]) - hs.chooser object or string","Type","Method","Description","Sets/gets the search string","Parameters","queryString - An optional string to search for, or an explicit nil to clear the query. If omitted, the current contents of the search box are returned","Returns","The hs.chooser object or a string","Notes","You can provide an explicit nil or empty string to clear the current query string."]},{"l":"queryChangedCallback","p":["Signature","hs.chooser:queryChangedCallback([fn]) - hs.chooser object","Type","Method","Description","Sets/clears a callback for when the search query changes","Parameters","fn - An optional function that will be called whenever the search query changes. If this parameter is omitted, the existing callback will be removed.","Returns","The hs.chooser object","Notes","As the user is typing, the callback function will be called for every keypress. You may wish to do filtering on each call, or you may wish to use a delayed hs.timer object to only react when they have finished typing. The callback function should accept a single argument: A string containing the new search query"]},{"l":"refreshChoicesCallback","p":["Signature","hs.chooser:refreshChoicesCallback([reload]) - hs.chooser object","Type","Method","Description","Refreshes the choices data from a callback","Parameters","reload - An optional parameter that reloads the chooser results to take into account the current query string (defaults to false)","Returns","The hs.chooser object","Notes","This method will do nothing if you have not set a function with hs.chooser:choices()"]},{"l":"rightClickCallback","p":["Signature","hs.chooser:rightClickCallback([fn]) - hs.chooser object","Type","Method","Description","Sets/clears a callback for right clicking on choices","Parameters","fn - An optional function that will be called whenever the user right clicks on a choice. If this parameter is omitted, the existing callback will be removed.","Returns","The hs.chooser object","Notes","The callback may accept one argument, the row the right click occurred in or 0 if there is currently no selectable row where the right click occurred. To determine the location of the mouse pointer at the right click, see hs.mouse. To display a context menu, see hs.menubar, specifically the :popupMenu() method"]},{"l":"rows","p":["Signature","hs.chooser:rows([numRows]) - hs.chooser object or number","Type","Method","Description","Gets/Sets the number of rows that will be shown","Parameters","numRows - An optional number of choices to show (i.e. the vertical height of the chooser window). If this parameter is omitted, the current value will be returned","Returns","The hs.chooser object or a number","Notes"]},{"l":"searchSubText","p":["Signature","hs.chooser:searchSubText([searchSubText]) - hs.chooser object or boolean","Type","Method","Description","Gets/Sets whether the chooser should search in the sub-text of each item","Parameters","searchSubText - An optional boolean, true to search sub-text, false to not search sub-text. If this parameter is omitted, the current configuration value will be returned","Returns","The hs.chooser object if a value was set, or a boolean if no parameter was passed","Notes","This should be used before a chooser has been displayed"]},{"l":"select","p":["Signature","hs.chooser:select([row]) - hs.chooser object","Type","Method","Description","Closes the chooser by selecting the specified row, or the currently selected row if not given","Parameters","row- an optional integer specifying the row to select.","Returns","The hs.chooser object","Notes"]},{"l":"selectedRow","p":["Signature","hs.chooser:selectedRow([row]) - number","Type","Method","Description","Get or set the currently selected row","Parameters","row- an optional integer specifying the row to select.","Returns","If an argument is provided, returns the hs.chooser object; otherwise returns a number containing the row currently selected (i.e. the one highlighted in the UI)","Notes"]},{"l":"selectedRowContents","p":["Signature","hs.chooser:selectedRowContents([row]) - table","Type","Method","Description","Returns the contents of the currently selected or specified row","Parameters","row- an optional integer specifying the specific row to return the contents of","Returns","a table containing whatever information was supplied for the row currently selected or an empty table if no row is selected or the specified row does not exist.","Notes"]},{"l":"show","p":["Signature","hs.chooser:show([topLeftPoint]) - hs.chooser object","Type","Method","Description","Displays the chooser","Parameters","An optional hs.geometry point object describing the absolute screen co-ordinates for the top left point of the chooser window. Defaults to centering the window on the primary screen","Returns","The hs.chooser object","Notes"]},{"l":"showCallback","p":["Signature","hs.chooser:showCallback([fn]) - hs.chooser object","Type","Method","Description","Sets/clears a callback for when the chooser window is shown","Parameters","fn - An optional function that will be called when the chooser window is shown. If this parameter is omitted, the existing callback will be removed.","Returns","The hs.chooser object","Notes","This callback is called after the chooser is shown. To execute code just before it's shown (and/or after it's removed) see hs.chooser.globalCallback"]},{"l":"subTextColor","p":["Signature","hs.chooser:subTextColor(color) - hs.chooser object or hs.color object","Type","Method","Description","Sets the sub-text color of the chooser","Parameters","color - An optional table containing a color specification (see hs.drawing.color), or nil to restore the default color. If this parameter is omitted, the existing color will be returned","Returns","The hs.chooser object or a color table","Notes"]},{"l":"width","p":["Signature","hs.chooser:width([percent]) - hs.chooser object or number","Type","Method","Description","Gets/Sets the width of the chooser","Parameters","percent - An optional number indicating the percentage of the width of the screen that the chooser should occupy. If this parameter is omitted, the current width will be returned","Returns","The hs.chooser object or a number","Notes","This should be used before a chooser has been displayed"]}],[{"i":"hsconsole","l":"hs.console","p":["Some functions for manipulating the Hammerspoon console.","These functions allow altering the behavior and display of the Hammerspoon console. They should be considered experimental, but have worked well for me."]},{"l":"API Overview","p":["alpha","asHSDrawing","asHSWindow","behavior","behaviorAsLabels","clearConsole","consoleCommandColor","consoleFont","consolePrintColor","consoleResultColor","Constants- Useful values which cannot be changed","darkMode","defaultToolbar","Deprecateds- API features which will be removed in an future release","Functions- API calls offered directly by the extension","getConsole","getHistory","hswindow","inputBackgroundColor","level","maxOutputHistory","Methods- API calls which can only be made on an object returned by a constructor","outputBackgroundColor","printStyledtext","setConsole","setHistory","smartInsertDeleteEnabled","titleVisibility","toolbar","windowBackgroundColor"]},{"l":"API Documentation"},{"l":"Deprecateds"},{"l":"asHSDrawing","p":["Signature","hs.console.asHSDrawing() - hs.drawing object","Type","Deprecated","Description","Because use of this function can easily lead to a crash, useful methods from hs.drawing have been added to the hs.console module itself. If you believe that a useful method has been overlooked, please submit an issue.","Parameters","None","Returns","a placeholder object"]},{"l":"asHSWindow","p":["Signature","hs.console.asHSWindow() - hs.window object","Type","Deprecated","Description","Returns an hs.window object for the console so that you can use hs.window methods on it."]},{"l":"Constants"},{"l":"defaultToolbar","p":["Signature","hs.console.defaultToolbar","Type","Constant","Description","Default toolbar for the Console window","Notes","This is an hs.toolbar object that is shown by default in the Hammerspoon Console You can remove this toolbar by adding hs.console.toolbar(nil) to your config, or you can replace it with your own hs.webview.toolbar object"]},{"l":"Functions"},{"l":"alpha","p":["Signature","hs.console.alpha([alpha]) - currentValue","Type","Function","Description","Get or set the alpha level of the console window.","Parameters","alpha- an optional number between 0.0 and 1.0 specifying the new alpha level for the Hammerspoon console.","Returns","the current, possibly new, value.","Notes"]},{"l":"behaviorAsLabels","p":["Signature","hs.console.behaviorAsLabels(behaviorTable) - currentValue","Type","Function","Description","Get or set the window behavior settings for the console using labels defined in hs.drawing.windowBehaviors.","Parameters","behaviorTable - an optional table of strings and/or numbers specifying the desired window behavior for the Hammerspoon console.","Returns","the current (possibly new) value.","Notes","Window behaviors determine how the console is handled by Spaces and Exposé. See hs.drawing.windowBehaviors for more information."]},{"l":"clearConsole","p":["Signature","hs.console.clearConsole() - nil","Type","Function","Description","Clear the Hammerspoon console output window.","Parameters","None","Returns","Notes","This is equivalent to hs.console.setConsole()"]},{"l":"consoleCommandColor","p":["Signature","hs.console.consoleCommandColor([color]) - color","Type","Function","Description","Get or set the color that commands displayed in the Hammerspoon console are displayed with.","Parameters","color - an optional table containing color keys as described in hs.drawing.color","Returns","the current color setting as a table","Notes","See the hs.drawing.color entry in the Dash documentation, or type help.hs.drawing.color in the Hammerspoon console to get more information on how to specify a color. Note this only affects future output -- anything already in the console will remain its current color."]},{"l":"consoleFont","p":["Signature","hs.console.consoleFont([font]) - fontTable","Type","Function","Description","Get or set the font used in the Hammerspoon console.","Parameters","font - an optional string or table describing the font to use in the console. If a string is specified, then the default system font size will be used. If a table is specified, it should contain a name key-value pair and a size key-value pair describing the font to be used.","Returns","the current font setting as a table containing a name key and a size key.","Notes","See the hs.drawing.color entry in the Dash documentation, or type help.hs.drawing.color in the Hammerspoon console to get more information on how to specify a color. Note this only affects future output -- anything already in the console will remain its current font."]},{"l":"consolePrintColor","p":["Signature","hs.console.consolePrintColor([color]) - color","Type","Function","Description","Get or set the color that regular output displayed in the Hammerspoon console is displayed with.","Parameters","color - an optional table containing color keys as described in hs.drawing.color","Returns","the current color setting as a table","Notes","See the hs.drawing.color entry in the Dash documentation, or type help.hs.drawing.color in the Hammerspoon console to get more information on how to specify a color. Note this only affects future output -- anything already in the console will remain its current color."]},{"l":"consoleResultColor","p":["Signature","hs.console.consoleResultColor([color]) - color","Type","Function","Description","Get or set the color that function results displayed in the Hammerspoon console are displayed with.","Parameters","color - an optional table containing color keys as described in hs.drawing.color","Returns","the current color setting as a table","Notes","See the hs.drawing.color entry in the Dash documentation, or type help.hs.drawing.color in the Hammerspoon console to get more information on how to specify a color. Note this only affects future output -- anything already in the console will remain its current color."]},{"l":"darkMode","p":["Signature","hs.console.darkMode([state]) - bool","Type","Function","Description","Set or display whether or not the Console window should display in dark mode.","Parameters","state - an optional boolean which will set whether or not the Console window should display in dark mode.","Returns","A boolean, true if dark mode is enabled otherwise false.","Notes","Enabling Dark Mode for the Console only affects the window background, and doesn't automatically change the Console's Background Color, so you will need to add something similar to: lua/lili if hs.console.darkMode() then/lili hs.console.outputBackgroundColor{ white = 0 }/lili hs.console.consoleCommandColor{ white = 1 }/lili hs.console.alpha(.8)/lili end/lili."]},{"l":"getConsole","p":["Signature","hs.console.getConsole([styled]) - text | styledText","Type","Function","Description","Get the text of the Hammerspoon console output window.","Parameters","styled - an optional boolean indicating whether the console text is returned as a string or a styledText object. Defaults to false.","Returns","The text currently in the Hammerspoon console output window as either a string or an hs.styledtext object.","Notes","If the text of the console is retrieved as a string, no color or style information in the console output is retrieved - only the raw text."]},{"l":"getHistory","p":["Signature","hs.console.getHistory() - array","Type","Function","Description","Get the Hammerspoon console command history as an array.","Parameters","None","Returns","an array containing the history of commands entered into the Hammerspoon console.","Notes"]},{"l":"hswindow","p":["Signature","hs.console.hswindow() - hs.window object","Type","Function","Description","Get an hs.window object which represents the Hammerspoon console window","Parameters","None","Returns","an hs.window object","Notes"]},{"l":"inputBackgroundColor","p":["Signature","hs.console.inputBackgroundColor([color]) - color","Type","Function","Description","Get or set the color for the background of the Hammerspoon Console's input field.","Parameters","color - an optional table containing color keys as described in hs.drawing.color","Returns","the current color setting as a table","Notes","See the hs.drawing.color entry in the Dash documentation, or type help.hs.drawing.color in the Hammerspoon console to get more information on how to specify a color."]},{"l":"level","p":["Signature","hs.console.level([theLevel]) - currentValue","Type","Function","Description","Get or set the console window level","Parameters","theLevel- an optional parameter specifying the desired level as an integer, which can be obtained from hs.drawing.windowLevels.","Returns","the current, possibly new, value","Notes","see the notes for hs.drawing.windowLevels"]},{"l":"maxOutputHistory","p":["Signature","hs.console.maxOutputHistory([length]) - number","Type","Function","Description","Get or set the max length of the Hammerspoon console's scrollback history.","Parameters","length - an optional number containing the maximum size in bytes of the Hammerspoon console history.","Returns","the current maximum size of the console history","Notes","A length value of zero will allow the history to grow infinitely The default console history is 100,000 characters"]},{"l":"outputBackgroundColor","p":["Signature","hs.console.outputBackgroundColor([color]) - color","Type","Function","Description","Get or set the color for the background of the Hammerspoon Console's output view.","Parameters","color - an optional table containing color keys as described in hs.drawing.color","Returns","the current color setting as a table","Notes","See the hs.drawing.color entry in the Dash documentation, or type help.hs.drawing.color in the Hammerspoon console to get more information on how to specify a color."]},{"l":"printStyledtext","p":["Signature","hs.console.printStyledtext(...) - none","Type","Function","Description","A print function which recognizes hs.styledtext objects and renders them as such in the Hammerspoon console.","Parameters","Any number of arguments can be specified, just like the builtin Lua print command. If an argument matches the userdata type of hs.styledtext, the text is rendered as defined by its style attributes in the Hammerspoon console; otherwise it is rendered as it would be via the traditional print command within Hammerspoon.","Returns","None","Notes","This has been made as close to the Lua print command as possible. You can replace the existing print command with this by adding the following to your init.lua file: print = function(...) hs.rawprint(...) hs.console.printStyledtext(...) end"]},{"l":"setConsole","p":["Signature","hs.console.setConsole([styledText]) - none","Type","Function","Description","Clear the Hammerspoon console output window.","Parameters","styledText - an optional hs.styledtext object containing the text you wish to replace the Hammerspoon console output with. If you do not provide an argument, the console is cleared of all content.","Returns","None","Notes","You can specify the console content as a string or as an hs.styledtext object in either userdata or table format."]},{"l":"setHistory","p":["Signature","hs.console.setHistory(array) - nil","Type","Function","Description","Set the Hammerspoon console command history to the items specified in the given array.","Parameters","array - the list of commands to set the Hammerspoon console history to.","Returns","None","Notes","You can clear the console history by using an empty array (e.g. hs.console.setHistory({})"]},{"l":"smartInsertDeleteEnabled","p":["Signature","hs.console.smartInsertDeleteEnabled([flag]) - bool","Type","Function","Description","Determine whether or not objects copied from the console window insert or delete space around selected words to preserve proper spacing and punctuation.","Parameters","flag - an optional boolean value indicating whether or not \"smart\" space behavior is enabled when copying from the Hammerspoon console.","Returns","the current value","Notes","this only applies to future copy operations from the Hammerspoon console -- anything already in the clipboard is not affected."]},{"l":"titleVisibility","p":["Signature","hs.console.titleVisibility([state]) - current value","Type","Function","Description","Get or set whether or not the \"Hammerspoon Console\" text appears in the Hammerspoon console titlebar.","Parameters","state - an optional string containing the text \"visible\" or \"hidden\", specifying whether or not the console window's title text appears.","Returns","a string of \"visible\" or \"hidden\" specifying the current (possibly changed) state of the window title's visibility.","Notes","When a toolbar is attached to the Hammerspoon console (see the hs.webview.toolbar module documentation), this function can be used to specify whether the Toolbar appears underneath the console window's title (\"visible\") or in the window's title bar itself, as seen in applications like Safari (\"hidden\"). When the title is hidden, the toolbar will only display the toolbar items as icons without labels, and ignores changes made with hs.webview.toolbar:displayMode. If a toolbar is attached to the console, you can achieve the same effect as this function with hs.console.toolbar():inTitleBar(boolean)"]},{"l":"windowBackgroundColor","p":["Signature","hs.console.windowBackgroundColor([color]) - color","Type","Function","Description","Get or set the color for the background of the Hammerspoon Console's window.","Parameters","color - an optional table containing color keys as described in hs.drawing.color","Returns","the current color setting as a table","Notes","See the hs.drawing.color entry in the Dash documentation, or type help.hs.drawing.color in the Hammerspoon console to get more information on how to specify a color."]},{"l":"Methods"},{"l":"behavior","p":["Signature","hs.console.behavior([behavior]) - currentValue","Type","Method","Description","Get or set the window behavior settings for the console.","Parameters","behavior- an optional number representing the desired window behaviors for the Hammerspoon console.","Returns","the current, possibly new, value.","Notes","Window behaviors determine how the webview object is handled by Spaces and Exposé. See hs.drawing.windowBehaviors for more information."]},{"l":"toolbar","p":["Signature","hs.console.toolbar([toolbar]) - toolbarObject | currentValue","Type","Method","Description","Get or attach/detach a toolbar to/from the Hammerspoon console.","Parameters","toolbar- if an hs.webview.toolbar object is specified, it will be attached to the Hammerspoon console. If an explicit nil is specified, the current toolbar will be removed from the console.","Returns","if a toolbarObject or explicit nil is specified, returns the toolbarObject; otherwise returns the current toolbarObject or nil, if no toolbar is attached to the console.","Notes","this method is a convenience wrapper for the hs.webview.toolbar.attachToolbar function. If the toolbar is currently attached to another window when this function is called, it will be detached from the original window and attached to the console."]}],[{"i":"hscrash","l":"hs.crash","p":["Various features/facilities for developers who are working on Hammerspoon itself, or writing extensions for it. It is extremely unlikely that you should need any part of this extension, in a normal user configuration."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","attemptMemoryRelease","crash","crashKV","crashLog","dumpCLIBS","residentSize","throwObjCException"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"attemptMemoryRelease","p":["Signature","hs.crash.attemptMemoryRelease()","Type","Function","Description","Attempts to reduce RAM usage of Hammerspoon","Parameters","None","Returns","Notes","This function will print some memory usage numbers (in bytes) to the Hammerspoon Console before and after forcing Lua's garbage collector"]},{"l":"crash","p":["Signature","hs.crash.crash()","Type","Function","Description","Causes Hammerspoon to immediately crash","Parameters","None","Returns","Notes","This is for testing purposes only, you are extremely unlikely to need this in normal Hammerspoon usage"]},{"l":"crashKV","p":["Signature","hs.crash.crashKV(key, value)","Type","Function","Description","Sets a key/value pair in any Sentry crash dump generated by this Hammerspoon session","Parameters","key - A string containing the key name of the pair value - A string containing the value of the pair","Returns","None","Notes"]},{"l":"crashLog","p":["Signature","hs.crash.crashLog(logMessage)","Type","Function","Description","Leaves a breadcrumb log message in any Sentry crash dump generated by this Hammerspoon session","Parameters","logMessage - A string containing a message to log","Returns","None","Notes","This is probably only useful to extension developers. If you are trying to track down a confusing crash, and you have access to the Sentry project for Hammerspoon (or access to someone who has access!), this can be a useful way to leave breadcrumbs from Lua in the crash dump"]},{"l":"dumpCLIBS","p":["Signature","hs.crash.dumpCLIBS() - table","Type","Function","Description","Dumps the contents of Lua's CLIBS registry","Parameters","None","Returns","A table containing all the paths of C libraries that have been loaded into the Lua runtime","Notes","This is probably only useful to extension developers as a useful way of ensuring that you are loading C libraries from the places you expect."]},{"l":"residentSize","p":["Signature","hs.crash.residentSize() - integer or nil","Type","Function","Description","Gets the resident size of the Hammerspoon process","Parameters","None","Returns","An integer containing the amount of RAM in use by Hammerspoon (in bytes), or nil if an error occurred","Notes"]},{"l":"throwObjCException","p":["Signature","hs.crash.throwObjCException(name, message)","Type","Function","Description","Causes Hammerspoon to generate an Objective C exception","Parameters","name - A string containing the name of the exception message - A human readable string explaining the exception","Returns","None","Notes","Outside of a context of a Lua pcall() (or a C lua_pcall()), this will cause Hammerspoon to exit. We follow the safe behaviour of terminating the app on any unhandled Objective C exception."]}],[{"i":"hsdeezer","l":"hs.deezer","p":["Controls for Deezer music player.","Heavily inspired by 'hs.spotify', credits to the original author."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","displayCurrentTrack","ff","Functions- API calls offered directly by the extension","getCurrentAlbum","getCurrentArtist","getCurrentTrack","getPlaybackState","getPosition","getVolume","isPlaying","isRunning","next","pause","play","playpause","previous","rw","setPosition","setVolume","state_paused","state_playing","state_stopped","volumeDown","volumeUp"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"state_paused","p":["Signature","hs.deezer.state_paused","Type","Constant","Description","Returned by hs.deezer.getPlaybackState() to indicates deezer is paused"]},{"l":"state_playing","p":["Signature","hs.deezer.state_playing","Type","Constant","Description","Returned by hs.deezer.getPlaybackState() to indicates deezer is playing"]},{"l":"state_stopped","p":["Signature","hs.deezer.state_stopped","Type","Constant","Description","Returned by hs.deezer.getPlaybackState() to indicates deezer is stopped"]},{"l":"Functions"},{"l":"displayCurrentTrack","p":["Signature","hs.deezer.displayCurrentTrack()","Type","Function","Description","Displays information for current track on screen","Parameters","None","Returns","Notes"]},{"l":"ff","p":["Signature","hs.deezer.ff()","Type","Function","Description","Skips the playback position forwards by 5 seconds","Parameters","None","Returns","Notes"]},{"l":"getCurrentAlbum","p":["Signature","hs.deezer.getCurrentAlbum()","Type","Function","Description","Gets the name of the album of the current track","Parameters","None","Returns","A string containing the Album of the current track, or nil if an error occurred","Notes"]},{"l":"getCurrentArtist","p":["Signature","hs.deezer.getCurrentArtist()","Type","Function","Description","Gets the name of the artist of the current track","Parameters","None","Returns","A string containing the Artist of the current track, or nil if an error occurred","Notes"]},{"l":"getCurrentTrack","p":["Signature","hs.deezer.getCurrentTrack()","Type","Function","Description","Gets the name of the current track","Parameters","None","Returns","A string containing the name of the current track, or nil if an error occurred","Notes"]},{"l":"getPlaybackState","p":["Signature","hs.deezer.getPlaybackState()","Type","Function","Description","Gets the current playback state of deezer","Parameters","None","Returns","A string containing one of the following constants:- hs.deezer.state_stopped- hs.deezer.state_paused- hs.deezer.state_playing","Notes"]},{"l":"getPosition","p":["Signature","hs.deezer.getPosition()","Type","Function","Description","Gets the playback position (in seconds) in the current song","Parameters","None","Returns","A number indicating the current position in the song","Notes"]},{"l":"getVolume","p":["Signature","hs.deezer.getVolume()","Type","Function","Description","Gets the deezer volume setting","Parameters","None","Returns","A number containing the volume deezer is set to between 1 and 100","Notes"]},{"l":"isPlaying","p":["Signature","hs.deezer.isPlaying()","Type","Function","Description","Returns whether deezer is currently playing","Parameters","None","Returns","A boolean value indicating whether deezer is currently playing a track, or nil if an error occurred (unknown player state). Also returns false if the application is not running","Notes"]},{"l":"isRunning","p":["Signature","hs.deezer.isRunning()","Type","Function","Description","Returns whether deezer is currently open. Most other functions in hs.deezer will automatically start the application, so this function can be used to guard against that.","Parameters","None","Returns","A boolean value indicating whether the deezer application is running.","Notes"]},{"l":"next","p":["Signature","hs.deezer.next()","Type","Function","Description","Skips to the next deezer track","Parameters","None","Returns","Notes"]},{"l":"pause","p":["Signature","hs.deezer.pause()","Type","Function","Description","Pauses the current deezer track","Parameters","None","Returns","Notes"]},{"l":"play","p":["Signature","hs.deezer.play()","Type","Function","Description","Plays the current deezer track","Parameters","None","Returns","Notes"]},{"l":"playpause","p":["Signature","hs.deezer.playpause()","Type","Function","Description","Toggles play/pause of current deezer track","Parameters","None","Returns","Notes"]},{"l":"previous","p":["Signature","hs.deezer.previous()","Type","Function","Description","Skips to previous deezer track","Parameters","None","Returns","Notes"]},{"l":"rw","p":["Signature","hs.deezer.rw()","Type","Function","Description","Skips the playback position backwards by 5 seconds","Parameters","None","Returns","Notes"]},{"l":"setPosition","p":["Signature","hs.deezer.setPosition(pos)","Type","Function","Description","Sets the playback position in the current song","Parameters","pos - A number containing the position (in seconds) to jump to in the current song","Returns","None","Notes"]},{"l":"setVolume","p":["Signature","hs.deezer.setVolume(vol)","Type","Function","Description","Sets the deezer volume setting","Parameters","vol - A number between 1 and 100","Returns","None","Notes"]},{"l":"volumeDown","p":["Signature","hs.deezer.volumeDown()","Type","Function","Description","Reduces the volume by 5","Parameters","None","Returns","Notes"]},{"l":"volumeUp","p":["Signature","hs.deezer.volumeUp()","Type","Function","Description","Increases the volume by 5","Parameters","None","Returns","Notes"]}],[{"i":"hsdialog","l":"hs.dialog","p":["A collection of useful dialog boxes, alerts and panels for user interaction."]},{"l":"Submodules","p":["hs.dialog.color"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","alert","blockAlert","chooseFileOrFolder","textPrompt","webviewAlert"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"alert","p":["Signature","hs.dialog.alert(x, y, callbackFn, message, [informativeText], [buttonOne], [buttonTwo], [style]) - string","Type","Function","Description","Displays a simple non-blocking dialog box using NSAlert and a hidden hs.webview that's automatically destroyed when the alert is closed.","Parameters","x - A number containing the horizontal co-ordinate of the top-left point of the dialog box. Defaults to 1. y - A number containing the vertical co-ordinate of the top-left point of the dialog box. Defaults to 1. callbackFn - The callback function that's called when a button is pressed. message - The message text to display.[informativeText] - Optional informative text to display.[buttonOne] - An optional value for the first button as a string. Defaults to \"OK\".[buttonTwo] - An optional value for the second button as a string. If nil is used, no second button will be displayed.[style] - An optional style of the dialog box as a string. Defaults to \"warning\".","Returns","nil","Notes","The optional values must be entered in order (i.e. you can't supply style without also supplying buttonOne and buttonTwo).[style] can be \"warning\", \"informational\" or \"critical\". If something other than these string values is given, it will use \"informational\". Example: lua/lili testCallbackFn = function(result) print(Callback Result: .. result) end/lili hs.dialog.alert(100, 100, testCallbackFn, Message, Informative Text, Button One, Button Two, NSCriticalAlertStyle)/lili hs.dialog.alert(200, 200, testCallbackFn, Message, Informative Text, Single Button)"]},{"l":"blockAlert","p":["Signature","hs.dialog.blockAlert(message, informativeText, [buttonOne], [buttonTwo], [style]) - string","Type","Function","Description","Displays a simple dialog box using NSAlert that will halt Lua code processing until the alert is closed.","Parameters","message - The message text to display. informativeText - The informative text to display.[buttonOne] - An optional value for the first button as a string. Defaults to \"OK\".[buttonTwo] - An optional value for the second button as a string. If nil is used, no second button will be displayed.[style] - An optional style of the dialog box as a string. Defaults to \"informational\".","Returns","The value of the button as a string.","Notes","The optional values must be entered in order (i.e. you can't supply style without also supplying buttonOne and buttonTwo).[style] can be \"warning\", \"informational\" or \"critical\". If something other than these string values is given, it will use \"warning\". Example: hs.dialog.blockAlert(Message, Informative Text, Button One, Button Two, critical)"]},{"l":"chooseFileOrFolder","p":["Signature","hs.dialog.chooseFileOrFolder([message], [defaultPath], [canChooseFiles], [canChooseDirectories], [allowsMultipleSelection], [allowedFileTypes], [resolvesAliases]) - string","Type","Function","Description","Displays a file and/or folder selection dialog box using NSOpenPanel.","Parameters","[message] - The optional message text to display.[defaultPath] - The optional path you want to dialog to open to.[canChooseFiles] - Whether or not the user can select files. Defaults to true.[canChooseDirectories] - Whether or not the user can select folders. Default to false.[allowsMultipleSelection] - Allow multiple selections of files and/or folders. Defaults to false.[allowedFileTypes] - An optional table of allowed file types. Defaults to true.[resolvesAliases] - An optional boolean that indicates whether the panel resolves aliases.","Returns","The selected files in a table or nil if cancel was pressed.","Notes","The optional values must be entered in order (i.e. you can't supply allowsMultipleSelection without also supplying canChooseFiles and canChooseDirectories). Example: hs.inspect(hs.dialog.chooseFileOrFolder(Please select a file:, ~/Desktop, true, false, true, {jpeg, pdf}, true))"]},{"l":"textPrompt","p":["Signature","hs.dialog.textPrompt(message, informativeText, [defaultText], [buttonOne], [buttonTwo], [secureField]) - string, string","Type","Function","Description","Displays a simple text input dialog box.","Parameters","message - The message text to display informativeText - The informative text to display[defaultText] - The informative text to display[buttonOne] - An optional value for the first button as a string[buttonTwo] - An optional value for the second button as a string[secureField] - An optional boolean. If true, PasswordField instead of TextField. Defaults to false.","Returns","The value of the button as a string The value of the text input as a string","Notes","buttonOne defaults to \"OK\" if no value is supplied. buttonOne will also be triggered by pressing ENTER, whereas buttonTwo will be triggered by pressing ESC. Examples: hs.dialog.textPrompt(Main message., Please enter something:) hs.dialog.textPrompt(Main message., Please enter something:, Default Value, OK) hs.dialog.textPrompt(Main message., Please enter something:, Default Value, OK, Cancel) hs.dialog.textPrompt(Main message., Please enter something:, , OK, Cancel, true)"]},{"l":"webviewAlert","p":["Signature","hs.dialog.webviewAlert(webview, callbackFn, message, [informativeText], [buttonOne], [buttonTwo], [style]) - string","Type","Function","Description","Displays a simple dialog box using NSAlert in a hs.webview.","Parameters","webview - The hs.webview to display the alert on. callbackFn - The callback function that's called when a button is pressed. message - The message text to display.[informativeText] - Optional informative text to display.[buttonOne] - An optional value for the first button as a string. Defaults to \"OK\".[buttonTwo] - An optional value for the second button as a string. If nil is used, no second button will be displayed.[style] - An optional style of the dialog box as a string. Defaults to \"warning\".","Returns","nil","Notes","This alert is will prevent the user from interacting with the hs.webview until a button is pressed on the alert. The optional values must be entered in order (i.e. you can't supply style without also supplying buttonOne and buttonTwo).[style] can be \"warning\", \"informational\" or \"critical\". If something other than these string values is given, it will use \"informational\". Example: lua/lili testCallbackFn = function(result) print(Callback Result: .. result) end/lili testWebviewA = hs.webview.newBrowser(hs.geometry.rect(250, 250, 250, 250)):show()/lili testWebviewB = hs.webview.newBrowser(hs.geometry.rect(450, 450, 450, 450)):show()/lili hs.dialog.webviewAlert(testWebviewA, testCallbackFn, Message, Informative Text, Button One, Button Two, warning)/lili hs.dialog.webviewAlert(testWebviewB, testCallbackFn, Message, Informative Text, Single Button)"]}],[{"i":"hsdialogcolor","l":"hs.dialog.color","p":["A panel that allows users to select a color."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","alpha","callback","color","continuous","hide","mode","show","showsAlpha"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"alpha","p":["Signature","hs.dialog.color.alpha([value]) - number","Type","Function","Description","Set or display the selected opacity.","Parameters","[value] - A opacity value as a number between 0 and 1, where 0 is 100% transparent/see-through.","Returns","The current alpha value as a number.","Notes","Example: hs.dialog.color.alpha(0.5)"]},{"l":"callback","p":["Signature","hs.dialog.color.callback([callbackFn]) - function or nil","Type","Function","Description","Sets or removes the callback function for the color panel.","Parameters","a function, or nil to remove the current function, which will be invoked as a callback for messages generated by this color panel. The callback function should expect 2 arguments as follows: ** A table containing the color values from the color panel. ** A boolean which returns true if the color panel has been closed otherwise false indicating that the color panel is still open (i.e. it may change color again).","Returns","The last callbackFn or nil so you can save it and re-attach it if something needs to temporarily take the callbacks.","Notes","Example: hs.dialog.color.callback(function(a,b) print(COLOR CALLBACK:\\nSelected Color: .. hs.inspect(a) .. \\nPanel Closed: .. hs.inspect(b)) end)"]},{"l":"color","p":["Signature","hs.dialog.color.color([value]) - table","Type","Function","Description","Set or display the currently selected color in a color wheel.","Parameters","[value] - The color values in a table (as described in hs.drawing.color).","Returns","A table of the currently selected color in the form of hs.drawing.color.","Notes","Example: hs.dialog.color.color(hs.drawing.color.blue)"]},{"l":"continuous","p":["Signature","hs.dialog.color.continuous([value]) - boolean","Type","Function","Description","Set or display whether or not the callback should be continuously updated when a user drags a color slider or control.","Parameters","[value] - true if you want to continuously trigger the callback, otherwise false.","Returns","true if continuous is enabled otherwise false","Notes","Example: hs.dialog.color.continuous(true)"]},{"l":"hide","p":["Signature","hs.dialog.color.hide() - none","Type","Function","Description","Hides the Color Panel.","Parameters","None","Returns","Notes","Example: hs.dialog.color.hide()"]},{"l":"mode","p":["Signature","hs.dialog.color.mode([value]) - table","Type","Function","Description","Set or display the currently selected color panel mode.","Parameters","[value] - The mode you wish to use as a string from the following options: ** \"wheel\" - Color Wheel ** \"gray\" - Gray Scale Slider ** \"RGB\" - RGB Sliders ** \"CMYK\" - CMYK Sliders ** \"HSB\" - HSB Sliders ** \"list\" - Color Palettes ** \"custom\" - Image Palettes ** \"crayon\" - Pencils ** \"none\"","Returns","The current mode as a string.","Notes","Example: hs.dialog.color.mode(RGB)"]},{"l":"show","p":["Signature","hs.dialog.color.show() - none","Type","Function","Description","Shows the Color Panel.","Parameters","None","Returns","Notes","Example: hs.dialog.color.show()"]},{"l":"showsAlpha","p":["Signature","hs.dialog.color.showsAlpha([value]) - boolean","Type","Function","Description","Set or display whether or not the color panel should display an opacity slider.","Parameters","[value] - true if you want to display an opacity slider, otherwise false.","Returns","true if the opacity slider is displayed otherwise false","Notes","Example: hs.dialog.color.showsAlpha(true)"]}],[{"i":"hsdistributednotifications","l":"hs.distributednotifications","p":["Interact with NSDistributedNotificationCenter There are many notifications posted by parts of OS X, and third party apps, which may be interesting to react to using this module.","You can discover the notifications that are being posted on your system with some code like this:","Note that distributed notifications are expensive - they involve lots of IPC. Also note that they are not guaranteed to be delivered, particularly if the system is very busy."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","post","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","start","stop"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"post","p":["Signature","hs.distributednotifications.post(name[, sender[, userInfo]])","Type","Function","Description","Sends a distributed notification","Parameters","name - A string containing the name of the notification sender - An optional string containing the name of the sender of the notification (in the form com.domain.application.foo). Defaults to nil. userInfo - An optional table containing additional information to post with the notification. Defaults to nil.","Returns","None","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.distributednotifications.new(callback[, name[, object]]) - object","Type","Constructor","Description","Creates a new NSDistributedNotificationCenter watcher","Parameters","callback - A function to be called when a matching notification arrives. The function should accept one argument:","notificationName - A string containing the name of the notification name - An optional string containing the name of notifications to watch for. A value of nil will cause all notifications to be watched on macOS versions earlier than Catalina. Defaults to nil. object - An optional string containing the name of sending objects to watch for. A value of nil will cause all sending objects to be watched. Defaults to nil.","Returns","An hs.distributednotifications object","Notes","On Catalina and above, it is no longer possible to observe all notifications - the name parameter is effectively now required. See https://mjtsai.com/blog/2019/10/04/nsdistributednotificationcenter-no-longer-supports-nil-names"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.distributednotifications:start() - object","Type","Method","Description","Starts a NSDistributedNotificationCenter watcher","Parameters","None","Returns","The hs.distributednotifications object","Notes"]},{"l":"stop","p":["Signature","hs.distributednotifications:stop() - object","Type","Method","Description","Stops a NSDistributedNotificationCenter watcher","Parameters","None","Returns","The hs.distributednotifications object","Notes"]}],[{"i":"hsdoc","l":"hs.doc","p":["Create documentation objects for interactive help within Hammerspoon","The documentation object created is a table with tostring metamethods allowing access to a specific functions documentation by appending the path to the method or function to the object created.","From the Hammerspoon console:","Results in:","By default, the internal core documentation and portions of the Lua 5.3 manual, located at http://www.lua.org/manual/5.3/manual.html, are already registered for inclusion within this documentation object, but you can register additional documentation from 3rd party modules with hs.registerJSONFile(...)."]},{"l":"Submodules","p":["hs.doc.builder","hs.doc.hsdocs","hs.doc.markdown"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","help","locateJSONFile","preloadSpoonDocs","registeredFiles","registerJSONFile","unregisterJSONFile"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"help","p":["Signature","hs.doc.help(identifier)","Type","Function","Description","Prints the documentation for some part of Hammerspoon's API and Lua 5.3. This function has also been aliased as hs.help and help as a shorthand for use within the Hammerspoon console.","Parameters","identifier - A string containing the signature of some part of Hammerspoon's API (e.g. hs.reload)","Returns","None","Notes","This function is mainly for runtime API help while using Hammerspoon's Console Documentation files registered with hs.doc.registerJSONFile or hs.doc.preloadSpoonDocs that have not yet been actually loaded will be loaded when this command is invoked in any of the forms described below. You can also access the results of this function by the following methods from the console: help(\"prefix.path\") -- quotes are required, e.g. help(hs.reload) help.prefix.path -- no quotes are required, e.g. help.hs.reload prefix can be one of the following: hs- provides documentation for Hammerspoon's builtin commands and modules spoon- provides documentation for the Spoons installed on your system lua- provides documentation for the version of lua Hammerspoon is using, currently 5.3 lua._man- provides the table of contents for the Lua 5.3 manual. You can pull up a specific section of the lua manual by including the chapter (and subsection) like this: lua._man._3_4_8. lua._C- provides documentation specifically about the Lua C API for use when developing modules which require external libraries. path is one or more components, separated by a period specifying the module, submodule, function, or method you wish to view documentation for."]},{"l":"locateJSONFile","p":["Signature","hs.doc.locateJSONFile(module) - path | false, message","Type","Function","Description","Locates the JSON file corresponding to the specified third-party module or Spoon by searching package.path and package.cpath.","Parameters","module - the name of the module to locate a JSON file for","Returns","the path to the JSON file, or false, error if unable to locate a corresponding JSON file.","Notes","The JSON should be named 'docs.json' and located in the same directory as the lua or so file which is used when the module is loaded via require. The documentation for core modules is stored in the JSON file specified by the hs.docstrings_json_file variable; this function is intended for use in locating the documentation file for third party modules and Spoons."]},{"l":"preloadSpoonDocs","p":["Signature","hs.doc.preloadSpoonDocs()","Type","Function","Description","Locates all installed Spoon documentation files and marks them for loading the next time the hs.doc.help function is invoked.","Parameters","None","Returns","Notes"]},{"l":"registeredFiles","p":["Signature","hs.doc.registeredFiles() - table","Type","Function","Description","Returns the list of registered JSON files.","Parameters","None","Returns","a table containing the list of registered JSON files","Notes","The table returned by this function has a metatable including a __ tostring method which allows you to see the list of registered files by simply typing hs.doc.registeredFiles() in the Hammerspoon Console. By default, the internal core documentation and portions of the Lua 5.3 manual, located at http://www.lua.org/manual/5.3/manual.html, are already registered for inclusion within this documentation object. You can unregister these defaults if you wish to start with a clean slate with the following commands: hs.doc.unregisterJSONFile(hs.docstrings_json_file)-- to unregister the Hammerspoon API docs hs.doc.unregisterJSONFile((hs.docstrings_json_file:gsub(/docs.json$,/lua.json)))-- to unregister the Lua 5.3 Documentation."]},{"l":"registerJSONFile","p":["Signature","hs.doc.registerJSONFile(jsonfile, [isSpoon]) - status[, message]","Type","Function","Description","Register a JSON file for inclusion when Hammerspoon generates internal documentation.","Parameters","jsonfile - A string containing the location of a JSON file isSpoon - an optional boolean, default false, specifying that the documentation should be added to the spoons sub heading in the documentation hierarchy.","Returns","status - Boolean flag indicating if the file was registered or not. If the file was not registered, then a message indicating the error is also returned.","Notes","this function just registers the documentation file; it won't actually be loaded and parsed until hs.doc.help is invoked."]},{"l":"unregisterJSONFile","p":["Signature","hs.doc.unregisterJSONFile(jsonfile) - status[, message]","Type","Function","Description","Remove a JSON file from the list of registered files.","Parameters","jsonfile - A string containing the location of a JSON file","Returns","status - Boolean flag indicating if the file was unregistered or not. If the file was not unregistered, then a message indicating the error is also returned.","Notes","This function requires the rebuilding of the entire documentation tree for all remaining registered files, so the next time help is queried with hs.doc.help, there may be a slight one-time delay."]}],[{"i":"hsdocbuilder","l":"hs.doc.builder","p":["Builds documentation support files. Still experimental.","This submodule provides functions for mimicking the documentation generation processes used when generating the official Hammerspoon documentation. The long term goal is to provide a mechanism for generating complete Hammerspoon documentation in all of its formats with only the Hammerspoon application and source files without any additional software required.","This submodule can be used to generate and maintain the documentation for Spoon bundles and can also be used to generate documentation for third-party modules as well.","Documentation for modules and spoons is expected to be embedded in the source code for the relevant object in specially formatted comment strings. A very brief example of how to format documentation can be found at https://github.com/Hammerspoon/hammerspoon/blob/master/SPOONS.md#documentation, but a better treatment is planned.","Most of this submodule should be considered at the \"Proof of Concept\" stage and will require some additional work on your part to generate useful documentation in HTML, Markdown, or Docset formats. This is expected to change in the future."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","genComments","genJSON","genSQL"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"genComments","p":["Signature","hs.doc.builder.genComments(path, [recurse]) - table","Type","Function","Description","Generates a documentation table for Hammerspoon modules or Spoon bundles from the source files located in the path(s) provided.","Parameters","where - a string specifying a single path, or a table containing multiple strings specifying paths where source files should be examined to generate the documentation table. recurse - an optional boolean, default true, specifying whether or not files in sub-directories of the specified path should be examined for comment strings as well.","Returns","table - a table containing the documentation broken out into the key-value pairs used to generate documentation displayed by hs.doc and hs.doc.hsdocs.","Notes","Because Hammerspoon and all known currently available modules are coded in Objective-C and/or Lua, only files with the .m or .lua extension are examined in the provided path(s). Please submit an issue (or pull request, if you modify this submodule yourself) at https://github.com/Hammerspoon if you need this to be changed for your addition."]},{"l":"genJSON","p":["Signature","hs.doc.builder.genJSON(source) - string","Type","Function","Description","Generates a JSON string representation of the documentation source specified. This is the format expected by hs.doc and hs.doc.hsdoc and is used to provide the built in documentation for Hammerspoon.","Parameters","source - the source to generate the JSON string for. If this is provided as a string, it is passed to hs.doc.builder.genComments and the result is used. If it is a table, then it is assumed to have already been generated by a call to hs.doc.builder.genComments.","Returns","string - the JSON string representation of the documentation","Notes","If you have installed the hs command line tool (see hs.ipc), you can use the following to generate the docs.json file that is used to provide documentation for Hammerspoon Spoon bundles: hs -c hs.doc.builder.genJSON(\\$(pwd)\\) docs.json You can also use this to generate documentation for any third-party-modules you build, but you will have to register the documentation with hs.doc.registerJSONFile yourself -- it is not automatically loaded for you like it is for Spoons."]},{"l":"genSQL","p":["Signature","hs.doc.builder.genSQL(source) - string","Type","Function","Description","Generates the SQL commands required for creating the search index when creating a docset of the documentation.","Parameters","source - the source to generate the SQL commands for. If this is provided as a string, it is passed to hs.doc.builder.genComments and the result is used. If it is a table, then it is assumed to have already been generated by a call to hs.doc.builder.genComments.","Returns","string - the relevant SQL commands as a string","Notes"]}],[{"i":"hsdochsdocs","l":"hs.doc.hsdocs","p":["Manage the internal documentation web server.","This module provides functions for managing the Hammerspoon built-in documentation web server. Currently, this is the same documentation available in the Dash docset for Hammerspoon, but does not require third party software for viewing.","Future enhancements to this module under consideration include:","Support for third-party modules to add to the documentation set at run-time","Markdown/HTML based tutorials and How-To examples","Documentation for the LuaSkin Objective-C Framework","Lua Reference documentation","The intent of this sub-module is to provide as close a rendering of the same documentation available at the Hammerspoon GitHub site and Dash documentation as possible in a manner suitable for run-time modification so module developers can test out documentation additions without requiring a complete recompilation of the Hammerspoon source. As always, the most current and official documentation can be found at https://www.hammerspoon.org and in the official Hammerspoon Dash docset."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","browserDarkMode","browserFrame","forceExternalBrowser","help","interface","moduleEntitiesInSidebar","port","start","stop","trackBrowserFrame"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"browserDarkMode","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.doc.hsdocs.browserDarkMode([value]) - currentValue | | Type | Function | | Description | Get or set whether or not the Hammerspoon browser renders output in Dark mode. | | Parameters | value - an optional boolean, number, or nil specifying whether or not the documentation browser renders in Dark mode. if value is true, then the HTML output will always be inverted if value is false, then the HTML output will never be inverted if value is nil, then the output will be inverted only when the OS X theme is set to Dark mode if the value is a number between 0 and 100, the number specifies the inversion ratio, where 0 means no inversion, 100 means full inversion, and 50 is completely unreadable because the foreground and background are equally adjusted. | | Returns | the current, possibly new, value | | Notes | Inversion is applied through the use of CSS filtering, so while numeric values other than 0 (false) and 100 (true) are allowed, the result is generally not what is desired.Changes made with this function are saved with hs.settings with the label \"_documentationServer.invertDocs\" and will persist through a reload or restart of Hammerspoon. |"]},{"l":"browserFrame","p":["Signature","hs.doc.hsdocs.browserFrame([frameTable]) - currentValue","Type","Function","Description","Get or set the currently saved initial frame location for the documentation browser.","Parameters","frameTable - a frame table containing x, y, h, and w values specifying the browser's initial position when Hammerspoon starts.","Returns","the current, possibly new, value","Notes","If hs.doc.hsdocs.trackBrowserFrame is false or nil (the default), then you can use this function to specify the initial position of the documentation browser. If hs.doc.hsdocs.trackBrowserFrame is true, then this any value set with this function will be overwritten whenever the browser window is moved or resized. Changes made with this function are saved with hs.settings with the label \"_ documentationServer.browserFrame\" and will persist through a reload or restart of Hammerspoon."]},{"l":"forceExternalBrowser","p":["Signature","hs.doc.hsdocs.forceExternalBrowser([value]) - currentValue","Type","Function","Description","Get or set whether or not hs.doc.hsdocs.help uses an external browser.","Parameters","value - an optional boolean or string, default false, specifying whether or not documentation requests will be displayed in an external browser or the internal one handled by hs.webview.","Returns","the current, possibly new, value","Notes","If this value is set to true, help requests invoked by hs.doc.hsdocs.help will be invoked by your system's default handler for the http scheme. If this value is set to a string, the string specifies the bundle ID of an application which will be used to handle the url request for the documentation. The string should match one of the items returned by hs.urlevent.getAllHandlersForScheme(http). This behavior is triggered automatically, regardless of this setting, if you are running with a version of OS X prior to 10.10, since hs.webview requires OS X 10.10 or later. Changes made with this function are saved with hs.settings with the label \"_ documentationServer.forceExternalBrowser\" and will persist through a reload or restart of Hammerspoon."]},{"l":"help","p":["Signature","hs.doc.hsdocs.help([identifier]) - nil","Type","Function","Description","Display the documentation for the specified Hammerspoon function, or the Table of Contents for the Hammerspoon documentation in a built-in mini browser.","Parameters","an optional string specifying a Hammerspoon module, function, or method to display documentation for. If you leave out this parameter, the table of contents for the Hammerspoon built-in documentation is displayed instead.","Returns","None","Notes"]},{"l":"interface","p":["Signature","hs.doc.hsdocs.interface([interface]) - currentValue","Type","Function","Description","Get or set the network interface that the Hammerspoon documentation web server will be served on","Parameters","interface - an optional string, or nil, specifying the network interface the Hammerspoon documentation web server will be served on. An explicit nil specifies that the web server should listen on all active interfaces for the machine. Defaults to \"localhost\".","Returns","the current, possibly new, value","Notes","See hs.httpserver.setInterface for a description of valid values that can be specified as the interface argument to this function. A change to the interface can only occur when the documentation server is not running. If the server is currently active when you call this function with an argument, the server will be temporarily stopped and then restarted after the interface has been changed. Changes made with this function are saved with hs.settings with the label \"_ documentationServer.interface\" and will persist through a reload or restart of Hammerspoon."]},{"l":"moduleEntitiesInSidebar","p":["Signature","hs.doc.hsdocs.moduleEntitiesInSidebar([value]) - currentValue","Type","Function","Description","Get or set whether or not a module's entity list is displayed as a column on the left of the rendered page.","Parameters","value - an optional boolean specifying whether or not a module's entity list is displayed inline in the documentation (false) or in a sidebar on the left (true).","Returns","the current, possibly new, value","Notes","This is experimental and is disabled by default. It was inspired by a Userscript written by krasnovpro. The original can be found at https://openuserjs.org/scripts/krasnovpro/hammerspoon.org_Documentation/source. Changes made with this function are saved with hs.settings with the label \"_ documentationServer.entitiesInSidebar\" and will persist through a reload or restart of Hammerspoon."]},{"l":"port","p":["Signature","hs.doc.hsdocs.port([value]) - currentValue","Type","Function","Description","Get or set the Hammerspoon documentation server HTTP port.","Parameters","value - an optional number specifying the port for the Hammerspoon documentation web server","Returns","the current, possibly new, value","Notes","The default port number is 12345. Changes made with this function are saved with hs.settings with the label \"_ documentationServer.serverPort\" and will persist through a reload or restart of Hammerspoon."]},{"l":"start","p":["Signature","hs.doc.hsdocs.start() - hs.doc.hsdocs``","Type","Function","Description","Start the Hammerspoon internal documentation web server.","Parameters","None","Returns","the table representing the hs.doc.hsdocs module","Notes","This function is automatically called, if necessary, when hs.doc.hsdocs.help is invoked. The documentation web server can be viewed from a web browser by visiting \"http://localhost:port\" where port is the port the server is running on, 12345 by default -- see hs.doc.hsdocs.port."]},{"l":"stop","p":["Signature","hs.doc.hsdocs.stop() - hs.doc.hsdocs``","Type","Function","Description","Stop the Hammerspoon internal documentation web server.","Parameters","None","Returns","the table representing the hs.doc.hsdocs module","Notes"]},{"l":"trackBrowserFrame","p":["Signature","hs.doc.hsdocs.trackBrowserFrame([value]) - currentValue","Type","Function","Description","Get or set whether or not changes in the documentation browsers location and size persist through launches of Hammerspoon.","Parameters","value - an optional boolean specifying whether or not the browsers location should be saved across launches of Hammerspoon.","Returns","the current, possibly new, value","Notes","Changes made with this function are saved with hs.settings with the label \"_ documentationServer.trackBrowserFrameChanges\" and will persist through a reload or restart of Hammerspoon."]}],[{"i":"hsdocmarkdown","l":"hs.doc.markdown","p":["Markdown to HTML and plaintext conversion support used by hs.doc","This module provides GitHub-Flavored-Markdown conversion support used by hs.doc. This module is a Lua wrapper to the C code portion of the Ruby gem github-markdown, available at https://rubygems.org/gems/github-markdown/versions/0.6.9.","The Ruby gem github-markdown was chosen as the code base for this module because it is the tool used to generate the official Hammerspoon Dash docset.","The Lua wrapper portion is licensed under the MIT license by the Hammerspoon development team. The C code portion of the Ruby gem is licensed under the MIT license by GitHub, Inc."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","convert"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"convert","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.doc.markdown.convert(markdown, [type]) - output | | Type | Function | | Description | Converts markdown encoded text to html or plaintext. | | Parameters | markdown - a string containing the input text encoded using markdown tagstype - an optional string specifying the conversion options and output type. Defaults to \"gfm\". The currently recognized types are: \"markdown\" - specifies that the output should be HTML with the standard GitHub/Markdown extensions enabled. \"gfm\" - specifies that the output should be HTML with additional GitHub extensions enabled. \"plaintext\" - specifies that the output should plain text with the standard GitHub/Markdown extensions enabled. | | Returns | an HTML or plaintext representation of the markdown encoded text provided. | | Notes | The standard GitHub/Markdown extensions enabled for all conversions are: NO_INTRA_EMPHASIS - disallow emphasis inside of words LAX_SPACING - supports spacing like in Markdown 1.0.0 (i.e. do not require an empty line between two different blocks in a paragraph) STRIKETHROUGH - support strikethrough with double tildes (~) TABLES - support Markdown tables FENCED_CODE - supports fenced code blocks surround by three back-ticks () or three tildes (~)/lili AUTOLINK - HTTP URL's are treated as links, even if they aren't marked as such with Markdown tags/lili/liliThe gfm type also includes the following extensions:/lili HARD_WRAP - line breaks are replaced with br entities/lili SPACE_HEADERS - require a space between the #` and the name of a header (prevents collisions with the Issues filter) |"]}],[{"i":"hsdockicon","l":"hs.dockicon","p":["Control Hammerspoon's dock icon","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","bounce","hide","setBadge","show","tileCanvas","tileSize","tileUpdate","visible"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"bounce","p":["Signature","hs.dockicon.bounce(indefinitely)","Type","Function","Description","Bounce Hammerspoon's dock icon","Parameters","indefinitely - A boolean value, true if the dock icon should bounce until the dock icon is clicked, false if the dock icon should only bounce briefly","Returns","None","Notes"]},{"l":"hide","p":["Signature","hs.dockicon.hide()","Type","Function","Description","Hide Hammerspoon's dock icon","Parameters","None","Returns","Notes"]},{"l":"setBadge","p":["Signature","hs.dockicon.setBadge(badge)","Type","Function","Description","Set Hammerspoon's dock icon badge","Parameters","badge - A string containing the label to place inside the dock icon badge. If the string is empty, the badge will be cleared","Returns","None","Notes"]},{"l":"show","p":["Signature","hs.dockicon.show()","Type","Function","Description","Make Hammerspoon's dock icon visible","Parameters","None","Returns","Notes"]},{"l":"tileCanvas","p":["Signature","hs.dockicon.tileCanvas([canvas]) - canvasObject | nil","Type","Function","Description","Get or set a canvas object to be displayed as the Hammerspoon dock icon","Parameters","canvas- an optional hs.canvas object specifying the canvas to be displayed as the dock icon for Hammerspoon. If an explicit nil is specified, the dock icon will revert to the Hammerspoon application icon.","Returns","If the dock icon is assigned a canvas object, that canvas object will be returned, otherwise returns nil.","Notes","If you update the canvas object by changing any of its components, it will not be reflected in the dock icon until you invoke hs.dockicon.tileUpdate."]},{"l":"tileSize","p":["Signature","hs.dockicon.tileSize() - size table","Type","Function","Description","Returns a table containing the size of the tile representing the dock icon.","Parameters","None","Returns","a table containing the size of the tile representing the dock icon for Hammerspoon. This table will contain h and w keys specifying the tile height and width as numbers.","Notes","the size returned specifies the display size of the dock icon tile. If your canvas item is larger than this, then only the top left portion corresponding to the size returned will be displayed."]},{"l":"tileUpdate","p":["Signature","hs.dockicon.tileUpdate() - none","Type","Function","Description","Force an update of the dock icon.","Parameters","None","Returns","Notes","Changes made to a canvas object are not reflected automatically like they are when a canvas is being displayed on the screen; you must invoke this method after making changes to the canvas for the updates to be reflected in the dock icon."]},{"l":"visible","p":["Signature","hs.dockicon.visible() - bool","Type","Function","Description","Determine whether Hammerspoon's dock icon is visible","Parameters","None","Returns","A boolean, true if the dock icon is visible, false if not","Notes"]}],[{"i":"hsdrawing","l":"hs.drawing","p":["DEPRECATED. Primitives for drawing on the screen in various ways.","hs.drawing is now deprecated and will be removed in a future release. Its functionality is now implemented by hs.canvas and you should migrate your code to using that directly. The API docs for hs.drawing remain here as a convenience."]},{"l":"Submodules","p":["hs.drawing.color"]},{"l":"API Overview","p":["alpha","appImage","arc","behavior","behaviorAsLabels","bringToFront","circle","clickCallbackActivating","clippingRectangle","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","defaultTextStyle","delete","disableScreenUpdates","ellipticalArc","enableScreenUpdates","frame","Functions- API calls offered directly by the extension","getStyledText","getTextDrawingSize","hide","image","imageAlignment","imageAnimates","imageFrame","imageScaling","line","Methods- API calls which can only be made on an object returned by a constructor","orderAbove","orderBelow","rectangle","rotateImage","sendToBack","setAlpha","setArcAngles","setBehavior","setBehaviorByLabels","setClickCallback","setFill","setFillColor","setFillGradient","setFrame","setImage","setImageASCII","setImageFromPath","setLevel","setRoundedRectRadii","setSize","setStroke","setStrokeColor","setStrokeWidth","setStyledText","setText","setTextColor","setTextFont","setTextSize","setTextStyle","setTopLeft","show","text","windowBehaviors","windowLevels"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"windowBehaviors","p":["Signature","hs.drawing.windowBehaviors[]","Type","Constant","Description","Array of window behavior labels for determining how an hs.drawing object is handled in Spaces and Exposé","Notes","This table has a __ tostring() metamethod which allows listing it's contents in the Hammerspoon console by typing hs.drawing.windowBehaviors."]},{"l":"windowLevels","p":["Signature","hs.drawing.windowLevels","Type","Constant","Description","A table of predefined window levels usable with hs.drawing:setLevel(...)","Notes","This table has a __ tostring() metamethod which allows listing it's contents in the Hammerspoon console by typing hs.drawing.windowLevels. These key names map to the constants used in CoreGraphics to specify window levels and may not actually be used for what the name might suggest. For example, tests suggest that an active screen saver actually runs at a level of 2002, rather than at 1000, which is the window level corresponding to kCGScreenSaverWindowLevelKey. Each drawing level is sorted separately and hs.drawing:orderAbove(...) and hs.drawing:orderBelow(...) only arrange windows within the same level./liliIf you use Dock hiding (or in 10.11, Menubar hiding) please note that when the Dock (or Menubar) is popped up, it is done so with an implicit orderAbove, which will place it above any items you may also draw at the Dock (or MainMenu) level./lili/liliA drawing object with a [hs.drawing:setClickCallback](#setClickCallback) function can only reliably receive mouse click events when its window level is at hs.drawing.windowLevels.desktopIcon` + 1 or higher."]},{"l":"Functions"},{"l":"defaultTextStyle","p":["Signature","hs.drawing.defaultTextStyle() - hs.styledtext attributes table","Type","Function","Description","Returns a table containing the default font, size, color, and paragraphStyle used by hs.drawing for text drawing objects.","Parameters","None","Returns","a table containing the default style attributes hs.drawing uses for text drawing objects in the hs.styledtext attributes table format.","Notes","This method returns the default font, size, color, and paragraphStyle used by hs.drawing for text objects. If you modify a drawing object's defaults with hs.drawing:setColor, hs.drawing:setTextFont, or hs.drawing:setTextSize, the changes will not be reflected by this function."]},{"l":"disableScreenUpdates","p":["Signature","hs.drawing.disableScreenUpdates() - None","Type","Function","Description","Tells the OS X window server to pause updating the physical displays for a short while.","Parameters","None","Returns","Notes","This method can be used to allow multiple changes which are being made to the users display appear as if they all occur simultaneously by holding off on updating the screen on the regular schedule. This method should always be balanced with a call to hs.drawing.enableScreenUpdates when your updates have been completed. Failure to do so will be logged in the system logs. The window server will only allow you to pause updates for up to 1 second. This prevents a rogue or hung process from locking the systems display completely. Updates will be resumed when hs.drawing.enableScreenUpdates is encountered or after 1 second, whichever comes first. The underlying OS function for disabling screen updates is deprecated."]},{"l":"enableScreenUpdates","p":["Signature","hs.drawing.enableScreenUpdates() - None","Type","Function","Description","Tells the OS X window server to resume updating the physical displays after a previous pause.","Parameters","None","Returns","Notes","In conjunction with hs.drawing.disableScreenUpdates, this method can be used to allow multiple changes which are being made to the users display appear as if they all occur simultaneously by holding off on updating the screen on the regular schedule. The window server will only allow you to pause updates for up to 1 second. This prevents a rogue or hung process from locking the systems display completely. Updates will be resumed when this function is encountered or after 1 second, whichever comes first. The underlying OS function for enabling screen updates is deprecated."]},{"l":"getTextDrawingSize","p":["Signature","hs.drawing.getTextDrawingSize(styledTextObject or theText, [textStyle]) - sizeTable | nil","Type","Function","Description","Get the size of the rectangle necessary to fully render the text with the specified style so that is will be completely visible.","Parameters","styledTextObject - an object created with the hs.styledtext module or its table representation (see hs.styledtext). textStyle - an optional table containing one or more of the following keys to set for the text of the drawing object (if textStyle is nil or missing, the hs.drawing defaults are used):","Returns","sizeTable - a table containing the Height and Width necessary to fully display the text drawing object, or nil if an error occurred","Notes","This function assumes the default values specified for any key which is not included in the provided textStyle. The size returned is an approximation and may return a width that is off by about 4 points. Use the returned size as a minimum starting point. Sometimes using the \"clip\" or \"truncateMiddle\" lineBreak modes or \"justified\" alignment will fit, but its safest to add in your own buffer if you have the space in your layout. Multi-line text (separated by a newline or return) is supported. The height will be for the multiple lines and the width returned will be for the longest line. The following simplified style format is supported for use with hs.drawing:setText and hs.drawing.setTextStyle. theText - the text which is to be displayed. textStyle - a table containing one or more of the following keys to set for the text of the drawing object (if textStyle is nil or missing, the hs.drawing defaults are used): font - the name of the font to use (default: the system font) size - the font point size to use (default: 27.0) color - ignored, but accepted for compatibility with hs.drawing:setTextStyle() alignment - a string of one of the following indicating the texts alignment within the drawing objects frame:\"left\" - the text is visually left aligned.\"right\" - the text is visually right aligned.\"center\" - the text is visually center aligned.\"justified\" - the text is justified\"natural\" - (default) the natural alignment of the text’s script lineBreak - a string of one of the following indicating how to wrap text which exceeds the drawing object's frame:\"wordWrap\" - (default) wrap at word boundaries, unless the word itself doesn’t fit on a single line\"charWrap\" - wrap before the first character that doesn’t fit\"clip\" - do not draw past the edge of the drawing object frame\"truncateHead\" - the line is displayed so that the end fits in the frame and the missing text at the beginning of the line is indicated by an ellipsis\"truncateTail\" - the line is displayed so that the beginning fits in the frame and the missing text at the end of the line is indicated by an ellipsis\"truncateMiddle\" - the line is displayed so that the beginning and end fit in the frame and the missing text in the middle is indicated by an ellipsis"]},{"l":"Constructors"},{"l":"appImage","p":["Signature","hs.drawing.appImage(sizeRect, bundleID) - drawingObject or nil","Type","Constructor","Description","Creates a new image object with the icon of a given app","Parameters","sizeRect - A rect-table containing the location/size of the image. If the size values are -1 then the image will be displayed at the icon's native size bundleID - A string containing the bundle identifier of an app (e.g. \"com.apple.Safari\")","Returns","An hs.drawing object, or nil if an error occurs","Notes"]},{"l":"arc","p":["Signature","hs.drawing.arc(centerPoint, radius, startAngle, endAngle) - drawingObject or nil","Type","Constructor","Description","Creates a new arc object","Parameters","centerPoint - A point-table containing the center of the circle used to define the arc radius - The radius of the circle used to define the arc startAngle - The starting angle of the arc, measured in degrees clockwise from the y-axis. endAngle - The ending angle of the arc, measured in degrees clockwise from the y-axis.","Returns","An hs.drawing object, or nil if an error occurs","Notes","This constructor is actually a wrapper for the hs.drawing.ellipticalArc constructor."]},{"l":"circle","p":["Signature","hs.drawing.circle(sizeRect) - drawingObject or nil","Type","Constructor","Description","Creates a new circle object","Parameters","sizeRect - A rect-table containing the location/size of the circle","Returns","An hs.drawing object, or nil if an error occurs","Notes"]},{"l":"ellipticalArc","p":["Signature","hs.drawing.ellipticalArc(sizeRect, startAngle, endAngle) - drawingObject or nil","Type","Constructor","Description","Creates a new elliptical arc object","Parameters","sizeRect - A rect-table containing the location and size of the ellipse used to define the arc startAngle - The starting angle of the arc, measured in degrees clockwise from the y-axis. endAngle - The ending angle of the arc, measured in degrees clockwise from the y-axis.","Returns","An hs.drawing object, or nil if an error occurs","Notes"]},{"l":"image","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.drawing.image(sizeRect, imageData) - drawingObject or nil | | Type | Constructor | | Description | Creates a new image object | | Parameters | sizeRect - A rect-table containing the location/size of the imageimageData - This can be either: An hs.image object A string containing a path to an image file A string beginning with ASCII: which signifies that the rest of the string is interpreted as a special form of ASCII diagram, which will be rendered to an image. See the notes below for information about the special format of ASCII diagram. | | Returns | An hs.drawing object, or nil if an error occursPaths relative to the PWD of Hammerspoon (typically ~/.hammerspoon/) will work, but paths relative to the UNIX homedir character, ~ will notAnimated GIFs are supported. They're not super friendly on your CPU, but they work | | Notes | To use the ASCII diagram image support, see http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstring/ and be sure to preface your ASCII diagram with the special string ASCII: |"]},{"l":"line","p":["Signature","hs.drawing.line(originPoint, endPoint) - drawingObject or nil","Type","Constructor","Description","Creates a new line object","Parameters","originPoint - A point-table containing the co-ordinates of the starting point of the line endPoint - A point-table containing the co-ordinates of the end point of the line","Returns","An hs.drawing object, or nil if an error occurs","Notes"]},{"l":"rectangle","p":["Signature","hs.drawing.rectangle(sizeRect) - drawingObject or nil","Type","Constructor","Description","Creates a new rectangle object","Parameters","sizeRect - A rect-table containing the location/size of the rectangle","Returns","An hs.drawing object, or nil if an error occurs","Notes"]},{"l":"text","p":["Signature","hs.drawing.text(sizeRect, message) - drawingObject or nil","Type","Constructor","Description","Creates a new text object","Parameters","sizeRect - A rect-table containing the location/size of the text message - A string containing the text to be displayed. May also be any of the types supported by hs.styledtext. See hs.styledtext for more details.","Returns","An hs.drawing object, or nil if an error occurs","Notes"]},{"l":"Methods"},{"l":"alpha","p":["Signature","hs.drawing:alpha() - number","Type","Method","Description","Get the alpha level of the window containing the hs.drawing object.","Parameters","None","Returns","The current alpha level for the hs.drawing object","Notes"]},{"l":"behavior","p":["Signature","hs.drawing:behavior() - number","Type","Method","Description","Returns the current behavior of the hs.drawing object with respect to Spaces and Exposé for the object.","Parameters","None","Returns","The numeric representation of the current behaviors for the hs.drawing object","Notes"]},{"l":"behaviorAsLabels","p":["Signature","hs.drawing:behaviorAsLabels() - table","Type","Method","Description","Returns a table of the labels for the current behaviors of the object.","Parameters","None","Returns","Returns a table of the labels for the current behaviors with respect to Spaces and Exposé for the object.","Notes"]},{"l":"bringToFront","p":["Signature","hs.drawing:bringToFront([aboveEverything]) - drawingObject","Type","Method","Description","Places the drawing object on top of normal windows","Parameters","aboveEverything - An optional boolean value that controls how far to the front the drawing should be placed. true to place the drawing on top of all windows (including the dock and menubar), false to place the drawing above normal windows, but below the dock and menubar. Defaults to false.","Returns","The drawing object","Notes","As of macOS Sierra and later, if you want a hs.drawing object to appear above full-screen windows you must hide the Hammerspoon Dock icon first using: hs.dockicon.hide()"]},{"l":"clickCallbackActivating","p":["Signature","hs.drawing:clickCallbackActivating([false]) - drawingObject or current value","Type","Method","Description","Get or set whether or not clicking on a drawing with a click callback defined should bring all of Hammerspoon's open windows to the front.","Parameters","flag - an optional boolean indicating whether or not clicking on a drawing with a click callback function defined should activate Hammerspoon and bring its windows forward. Defaults to true.","Returns","If a setting value is provided, the drawing object is returned; if no argument is provided, the current setting is returned.","Notes","Setting this to false changes a drawing object's AXsubrole value and may affect the results of filters defined for hs.window.filter, depending upon how they are defined."]},{"l":"clippingRectangle","p":["Signature","hs.drawing:clippingRectangle([rect]) - drawingObject or current value","Type","Method","Description","Set the screen area in which the drawing contents are visible.","Parameters","rect - an optional rectangle specifying the visible area of the screen where the drawing's contents are visible. If an explicit nil is specified, no clipping rectangle is set. Defaults to nil","Returns","if an argument is provided, returns the drawing object; otherwise the current value is returned.","Notes","This method can be used to specify the area of the display where this drawing should be visible. If any portion of the drawing extends beyond this rectangle, the image is clipped so that only the portion within this rectangle is visible. The rectangle defined by this method is independent of the drawing's actual frame -- if you move the drawing with hs.drawing:setFrame or hs.drawing:setTopLeft, this rectangle retains its current value. This method does not work for image objects at present."]},{"l":"delete","p":["Signature","hs.drawing:delete()","Type","Method","Description","Destroys the drawing object","Parameters","None","Returns","Notes","This method immediately destroys the drawing object. If you want it to fade out, use :hide() first, with some suitable time, and hs.timer.doAfter() to schedule the :delete() call"]},{"l":"frame","p":["Signature","hs.drawing:frame() - hs.geometry object","Type","Method","Description","Gets the frame of a drawingObject in absolute coordinates","Parameters","None","Returns","An hs.geometry object containing the frame of the drawing object","Notes"]},{"l":"getStyledText","p":["Signature","hs.drawing:getStyledText() - hs.styledtext object","Type","Method","Description","Gets the text of a drawing object as an hs.styledtext object","Parameters","None","Returns","an hs.styledtext object","Notes","This method should only be used on text drawing objects"]},{"l":"hide","p":["Signature","hs.drawing:hide([fadeOutTime]) - drawingObject","Type","Method","Description","Hides the drawing object","Parameters","fadeOut - An optional number of seconds over which to fade out the drawing object. Defaults to zero","Returns","The drawing object","Notes"]},{"l":"imageAlignment","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.drawing:imageAlignment([type]) - drawingObject or current value | | Type | Method | | Description | Get or set the alignment of an image that doesn't fully fill the drawing objects frame. | | Parameters | type - an optional string value which should match one of the following (default is center): topLeft - the image's top left corner will match the drawing frame's top left corner top - the image's top match the drawing frame's top and will be centered horizontally topRight - the image's top right corner will match the drawing frame's top right corner left - the image's left side will match the drawing frame's left side and will be centered vertically center - the image will be centered vertically and horizontally within the drawing frame right - the image's right side will match the drawing frame's right side and will be centered vertically bottomLeft - the image's bottom left corner will match the drawing frame's bottom left corner bottom - the image's bottom match the drawing frame's bottom and will be centered horizontally bottomRight - the image's bottom right corner will match the drawing frame's bottom right corner | | Returns | If a setting value is provided, the drawing object is returned; if no argument is provided, the current setting is returned. | | Notes | |"]},{"l":"imageAnimates","p":["Signature","hs.drawing:imageAnimates([flag]) - drawingObject or current value","Type","Method","Description","Get or set whether or not an animated GIF image should cycle through its animation.","Parameters","flag - an optional boolean flag indicating whether or not an animated GIF image should cycle through its animation. Defaults to true.","Returns","If a setting value is provided, the drawing object is returned; if no argument is provided, the current setting is returned.","Notes"]},{"l":"imageFrame","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.drawing:imageFrame([type]) - drawingObject or current value | | Type | Method | | Description | Get or set what type of frame should be around the drawing frame of the image. | | Parameters | type - an optional string value which should match one of the following (default is none): none - no frame is drawing around the drawingObject's frameRect photo - a thin black outline with a white background and a dropped shadow. bezel - a gray, concave bezel with no background that makes the image look sunken. groove - a thin groove with a gray background that looks etched around the image. button - a convex bezel with a gray background that makes the image stand out in relief, like a button. | | Returns | If a setting value is provided, the drawing object is returned; if no argument is provided, the current setting is returned. | | Notes | Apple considers the photo, groove, and button style frames \"stylistically obsolete\" and if a frame is required, recommend that you use the bezel style or draw your own to more closely match the OS look and feel. |"]},{"l":"imageScaling","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.drawing:imageScaling([type]) - drawingObject or current value | | Type | Method | | Description | Get or set how an image is scaled within the frame of a drawing object containing an image. | | Parameters | type - an optional string value which should match one of the following (default is scaleProportionally): shrinkToFit - shrink the image, preserving the aspect ratio, to fit the drawing frame only if the image is larger than the drawing frame. scaleToFit - shrink or expand the image to fully fill the drawing frame. This does not preserve the aspect ratio. none - perform no scaling or resizing of the image. scaleProportionally - shrink or expand the image to fully fill the drawing frame, preserving the aspect ration. | | Returns | If a setting value is provided, the drawing object is returned; if no argument is provided, the current setting is returned. | | Notes | |"]},{"l":"orderAbove","p":["Signature","hs.drawing:orderAbove([object2]) - object","Type","Method","Description","Moves drawing object above drawing object2, or all drawing objects in the same presentation level, if object2 is not provided.","Parameters","Optional drawing object to place the drawing object above.","Returns","The hs.drawing object","Notes"]},{"l":"orderBelow","p":["Signature","hs.drawing:orderBelow([object2]) - object1","Type","Method","Description","Moves drawing object below drawing object2, or all drawing objects in the same presentation level, if object2 is not provided.","Parameters","Optional drawing object to place the drawing object below.","Returns","The hs.drawing object","Notes"]},{"l":"rotateImage","p":["Signature","hs.drawing:rotateImage(angle) - drawingObject","Type","Method","Description","Rotates an image clockwise around its center","Parameters","angle - the angle in degrees to rotate the image around its center in a clockwise direction.","Returns","The drawing object","Notes","* This method works by rotating the image view within its drawing window. This means that an image which completely fills its viewing area will most likely be cropped in some places. Best results are achieved with images that have clear space around their edges or with hs.drawing.imageScaling set to \"none\"."]},{"l":"sendToBack","p":["Signature","hs.drawing:sendToBack() - drawingObject","Type","Method","Description","Places the drawing object behind normal windows, between the desktop wallpaper and desktop icons","Parameters","None","Returns","The drawing object","Notes"]},{"l":"setAlpha","p":["Signature","hs.drawing:setAlpha(level) - object","Type","Method","Description","Sets the alpha level of the window containing the hs.drawing object.","Parameters","level - the alpha level (0.0 - 1.0) to set the object to","Returns","The hs.drawing object","Notes"]},{"l":"setArcAngles","p":["Signature","hs.drawing:setArcAngles(startAngle, endAngle) - drawingObject","Type","Method","Description","Changes the starting and ending angles for an arc drawing object","Parameters","startAngle - The starting angle of the arc, measured in degrees clockwise from the y-axis. endAngle - The ending angle of the arc, measured in degrees clockwise from the y-axis.","Returns","The drawing object","Notes","This method should only be used on arc drawing objects"]},{"l":"setBehavior","p":["Signature","hs.drawing:setBehavior(behavior) - object","Type","Method","Description","Sets the window behaviors represented by the number provided for the window containing the hs.drawing object.","Parameters","behavior - the numeric representation of the behaviors to set for the window of the object","Returns","The hs.drawing object","Notes"]},{"l":"setBehaviorByLabels","p":["Signature","hs.drawing:setBehaviorByLabels(table) - object","Type","Method","Description","Sets the window behaviors based upon the labels specified in the table provided.","Parameters","a table of label strings or numbers. Recognized values can be found in hs.drawing.windowBehaviors.","Returns","The hs.drawing object","Notes"]},{"l":"setClickCallback","p":["Signature","hs.drawing:setClickCallback(mouseUpFn, mouseDownFn) - drawingObject","Type","Method","Description","Sets a callback for mouseUp and mouseDown click events","Parameters","mouseUpFn - A function, can be nil, that will be called when the drawing object is clicked on and the mouse button is released. If this argument is nil, any existing callback is removed. mouseDownFn - A function, can be nil, that will be called when the drawing object is clicked on and the mouse button is first pressed down. If this argument is nil, any existing callback is removed.","Returns","The drawing object","Notes","No distinction is made between the left, right, or other mouse buttons -- they all invoke the same up or down function. If you need to determine which specific button was pressed, use hs.eventtap.checkMouseButtons() within your callback to check."]},{"l":"setFill","p":["Signature","hs.drawing:setFill(doFill) - drawingObject","Type","Method","Description","Sets whether or not to fill a drawing object","Parameters","doFill - A boolean, true to fill the drawing object, false to not fill","Returns","The drawing object","Notes","This method should only be used on line, rectangle, circle, or arc drawing objects"]},{"l":"setFillColor","p":["Signature","hs.drawing:setFillColor(color) - drawingObject","Type","Method","Description","Sets the fill color of a drawing object","Parameters","color - a color table as described in hs.drawing.color","Returns","The drawing object","Notes","This method should only be used on rectangle, circle, or arc drawing objects Calling this method will remove any gradient fill colors previously set with hs.drawing:setFillGradient()"]},{"l":"setFillGradient","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.drawing:setFillGradient(startColor, endColor, angle) - drawingObject | | Type | Method | | Description | Sets the fill gradient of a drawing object | | Parameters | startColor - A table containing color component values between 0.0 and 1.0 for each of the keys: red (default 0.0) green (default 0.0) blue (default 0.0) alpha (default 1.0)endColor - A table containing color component values between 0.0 and 1.0 for each of the keys: red (default 0.0) green (default 0.0) blue (default 0.0) alpha (default 1.0)angle - A number representing the angle of the gradient, measured in degrees, counter-clockwise, from the left of the drawing object | | Returns | The drawing object | | Notes | This method should only be used on rectangle, circle, or arc drawing objectsCalling this method will remove any fill color previously set with hs.drawing:setFillColor() |"]},{"l":"setFrame","p":["Signature","hs.drawing:setFrame(rect) - drawingObject","Type","Method","Description","Sets the frame of the drawingObject in absolute coordinates","Parameters","rect - A rect-table containing the co-ordinates and size that should be applied to the drawingObject","Returns","The drawing object","Notes"]},{"l":"setImage","p":["Signature","hs.drawing:setImage(image) - drawingObject","Type","Method","Description","Sets the image of a drawing object","Parameters","image - An hs.image object","Returns","The drawing object","Notes"]},{"l":"setImageASCII","p":["Signature","hs.drawing:setImageASCII(ascii) - drawingObject","Type","Method","Description","Sets the image of a drawing object from an ASCII representation","Parameters","ascii - A string containing the ASCII image to render","Returns","The drawing object","Notes","To use the ASCII diagram image support, see http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstring"]},{"l":"setImageFromPath","p":["Signature","hs.drawing:setImageFromPath(imagePath) - drawingObject","Type","Method","Description","Sets the image path of a drawing object","Parameters","imagePath - A string containing the path to an image file","Returns","The drawing object","Notes","This method should only be used on an image drawing object Paths relative to the PWD of Hammerspoon (typically ~/.hammerspoon/) will work, but paths relative to the UNIX homedir character, ~ will not Animated GIFs are supported. They're not super friendly on your CPU, but they work"]},{"l":"setLevel","p":["Signature","hs.drawing:setLevel(theLevel) - drawingObject","Type","Method","Description","Sets the window level more precisely than sendToBack and bringToFront.","Parameters","theLevel - the level specified as a number or as a string where this object should be drawn. If it is a string, it must match one of the keys in hs.drawing.windowLevels.","Returns","the drawing object","Notes","see the notes for hs.drawing.windowLevels These levels may be unable to explicitly place drawing objects around full-screen macOS windows"]},{"l":"setRoundedRectRadii","p":["Signature","hs.drawing:setRoundedRectRadii(xradius, yradius) - drawingObject","Type","Method","Description","Sets the radii of the corners of a rectangle drawing object","Parameters","xradius - A number containing the radius of each corner along the x-axis yradius - A number containing the radius of each corner along the y-axis","Returns","The drawing object","Notes","This method should only be used on rectangle drawing objects If either radius value is greater than half the width/height (as appropriate) of the rectangle, the value will be clamped at half the width/height If either (or both) radius values are 0, the rectangle will be drawn without rounded corners"]},{"l":"setSize","p":["Signature","hs.drawing:setSize(size) - drawingObject","Type","Method","Description","Resizes a drawing object","Parameters","size - A size-table containing the width and height the drawing object should be resized to","Returns","The drawing object","Notes","If this is called on an hs.drawing.text object, only its window will be resized. If you also want to change the font size, use :setTextSize()"]},{"l":"setStroke","p":["Signature","hs.drawing:setStroke(doStroke) - drawingObject","Type","Method","Description","Sets whether or not to stroke a drawing object","Parameters","doStroke - A boolean, true to stroke the drawing object, false to not stroke","Returns","The drawing object","Notes","This method should only be used on line, rectangle, circle, or arc drawing objects"]},{"l":"setStrokeColor","p":["Signature","hs.drawing:setStrokeColor(color) - drawingObject","Type","Method","Description","Sets the stroke color of a drawing object","Parameters","color - a color table as described in hs.drawing.color","Returns","The drawing object","Notes","This method should only be used on line, rectangle, circle, or arc drawing objects"]},{"l":"setStrokeWidth","p":["Signature","hs.drawing:setStrokeWidth(width) - drawingObject","Type","Method","Description","Sets the stroke width of a drawing object","Parameters","width - A number containing the width in points to stroke a drawing object","Returns","The drawing object","Notes","This method should only be used on line, rectangle, circle, or arc drawing objects"]},{"l":"setStyledText","p":["Signature","hs.drawing:setStyledText(message) - drawingObject","Type","Method","Description","Sets the text of a drawing object from an hs.styledtext object","Parameters","message - Any of the types supported by hs.styledtext. See hs.styledtext for more details.","Returns","The drawing object","Notes","This method should only be used on text drawing objects"]},{"l":"setText","p":["Signature","hs.drawing:setText(message) - drawingObject","Type","Method","Description","Sets the text of a drawing object","Parameters","message - A string containing the text to display","Returns","The drawing object","Notes","This method should only be used on text drawing objects If the text of the drawing object is emptied (i.e. \"\") then style changes may be lost. Use a placeholder such as a space (\" \") or hide the object if style changes need to be saved but the text should disappear for a while."]},{"l":"setTextColor","p":["Signature","hs.drawing:setTextColor(color) - drawingObject","Type","Method","Description","Sets the default text color for a drawing object","Parameters","color - a color table as described in hs.drawing.color","Returns","The drawing object","Notes","This method should only be called on text drawing objects This method changes the font color for portions of an hs.drawing text object which do not have a specific font set in their attributes list (see hs.styledtext for more details)."]},{"l":"setTextFont","p":["Signature","hs.drawing:setTextFont(fontname) - drawingObject","Type","Method","Description","Sets the default font for a drawing object","Parameters","fontname - A string containing the name of the font to use","Returns","The drawing object","Notes","This method should only be used on text drawing objects This method changes the font for portions of an hs.drawing text object which do not have a specific font set in their attributes list (see hs.styledtext for more details)."]},{"l":"setTextSize","p":["Signature","hs.drawing:setTextSize(size) - drawingObject","Type","Method","Description","Sets the default text size for a drawing object","Parameters","size - A number containing the font size to use","Returns","The drawing object","Notes","This method should only be used on text drawing objects This method changes the font size for portions of an hs.drawing text object which do not have a specific font set in their attributes list (see hs.styledtext for more details)."]},{"l":"setTextStyle","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.drawing:setTextStyle([textStyle]) - drawingObject | | Type | Method | | Description | Sets some simple style parameters for the entire text of a drawing object. For more control over style including having multiple styles within a single text object, use hs.styledtext and hs.drawing:setStyledText instead. | | Parameters | textStyle - an optional table containing one or more of the following keys to set for the text of the drawing object (if the table is nil or left out, the style is reset to the hs.drawing defaults): font - the name of the font to use (default: the system font) size - the font point size to use (default: 27.0) color - a color table as described in hs.drawing.color alignment - a string of one of the following indicating the texts alignment within the drawing objects frame:\"left\" - the text is visually left aligned.\"right\" - the text is visually right aligned.\"center\" - the text is visually center aligned.\"justified\" - the text is justified\"natural\" - (default) the natural alignment of the text’s script lineBreak - a string of one of the following indicating how to wrap text which exceeds the drawing object's frame:\"wordWrap\" - (default) wrap at word boundaries, unless the word itself doesn’t fit on a single line\"charWrap\" - wrap before the first character that doesn’t fit\"clip\" - do not draw past the edge of the drawing object frame\"truncateHead\" - the line is displayed so that the end fits in the frame and the missing text at the beginning of the line is indicated by an ellipsis\"truncateTail\" - the line is displayed so that the beginning fits in the frame and the missing text at the end of the line is indicated by an ellipsis\"truncateMiddle\" - the line is displayed so that the beginning and end fit in the frame and the missing text in the middle is indicated by an ellipsis | | Returns | The drawing object | | Notes | This method should only be used on text drawing objectsIf the text of the drawing object is currently empty (i.e. \"\") then style changes may be lost. Use a placeholder such as a space (\" \") or hide the object if style changes need to be saved but the text should disappear for a while.Only the keys specified are changed. To reset an object to all of its defaults, call this method with an explicit nil as its only parameter (e.g. hs.drawing:setTextStyle(nil)The font, font size, and font color can also be set by their individual specific methods as well; this method is provided so that style components can be stored and applied collectively, as well as used by hs.drawing.getTextDrawingSize() to determine the proper rectangle size for a textual drawing object. |"]},{"l":"setTopLeft","p":["Signature","hs.drawing:setTopLeft(point) - drawingObject","Type","Method","Description","Moves the drawingObject to a given point","Parameters","point - A point-table containing the absolute co-ordinates the drawing object should be moved to","Returns","The drawing object","Notes"]},{"l":"show","p":["Signature","hs.drawing:show([fadeInTime]) - drawingObject","Type","Method","Description","Displays the drawing object","Parameters","fadeInTime - An optional number of seconds over which to fade in the drawing object. Defaults to zero","Returns","The drawing object","Notes"]}],[{"i":"hsdrawingcolor","l":"hs.drawing.color","p":["alpha - the color transparency from 0.0 (completely transparent) to 1.0 (completely opaque)","Any combination of the above keys may be specified within the color table and they will be evaluated in the following order:","As a combination of Hue, Saturation, and Brightness (HSB or HSV Color):","As a combination of Red, Green, and Blue elements (RGB Color):","As an HTML style hex color specification:","As grayscale (Grayscale Color):","blue - the blue component of the color specified as a number from 0.0 to 1.0.","brightness - the brightness component of the color specified as a number from 0.0 to 1.0.","Color is represented within Hammerspoon as a table containing keys which tell Hammerspoon how the color is specified. You can specify a color in one of the following ways, depending upon the keys you supply within the table:","Except where specified above to indicate the color model being used, any key which is not provided defaults to a value of 0.0, except for alpha, which defaults to 1.0. This means that specifying an empty table as the color will result in an opaque black color.","From an image to be used as a tiled pattern:","From the system or Hammerspoon color lists:","green - the green component of the color specified as a number from 0.0 to 1.0.","hex - a string of the format \"#rrggbb\" or \"#rgb\" where r, g, and b are hexadecimal digits (i.e. 0-9, A-F)","hue - the hue component of the color specified as a number from 0.0 to 1.0.","If the hue key is provided, then the color is generated as an HSB color","if the image key is specified, it will be used to create a tiling pattern.","If the list and name keys are specified, and if they can be matched to an existing color within the system color lists, that color is used.","If the white key is provided, then the color is generated as a Grayscale color","image - an hs.image object representing the image to be used as a tiled pattern","list - the name of a system color list or a collection list defined in hs.drawing.color","name - the color name within the specified color list","Otherwise, an RGB color is generated.","Provides access to the system color lists and a wider variety of ways to represent color within Hammerspoon.","red - the red component of the color specified as a number from 0.0 to 1.0.","saturation - the saturation component of the color specified as a number from 0.0 to 1.0.","white - the ratio of white to black from 0.0 (completely black) to 1.0 (completely white)"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","definedCollections","Variables- Configurable values","ansiTerminalColors","hammerspoon","x11","Functions- API calls offered directly by the extension","asHSB","asRGB","colorsFor","lists"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"definedCollections","p":["Signature","hs.drawing.color.definedCollections","Type","Constant","Description","This table contains this list of defined color collections provided by the hs.drawing.color module. Collections differ from the system color lists in that you can modify the color values their members contain by modifying the table at hs.drawing.color.collection.color and future references to that color will reflect the new changes, thus allowing you to customize the palettes for your installation.","Notes","This list is a constant, but the members it refers to are not."]},{"l":"Variables"},{"l":"ansiTerminalColors","p":["Signature","hs.drawing.color.ansiTerminalColors","Type","Variable","Description","A collection of colors representing the ANSI Terminal color sequences. The color definitions are based upon code found at https://github.com/balthamos/geektool-3 in the /NerdTool/classes/ANSIEscapeHelper.m file.","Notes","This is not a constant, so you can adjust the colors at run time for your installation if desired."]},{"l":"hammerspoon","p":["Signature","hs.drawing.color.hammerspoon","Type","Variable","Description","This table contains a collection of various useful pre-defined colors:","Notes","This is not a constant, so you can adjust the colors at run time for your installation if desired. Previous versions of Hammerspoon included these colors at the hs.drawing.color path; for backwards compatibility, the keys of this table are replicated at that path as long as they do not conflict with any other color collection or function within the hs.drawing.color module. You really should adjust your code to use the collection, as this may change in the future."]},{"l":"x11","p":["Signature","hs.drawing.color.x11","Type","Variable","Description","A collection of colors representing the X11 color names as defined at https://en.wikipedia.org/wiki/Web_colors#X11_color_names(names in lowercase)","Notes","This is not a constant, so you can adjust the colors at run time for your installation if desired."]},{"l":"Functions"},{"l":"asHSB","p":["Signature","hs.drawing.color.asHSB(color) - table | string","Type","Function","Description","Returns a table containing the HSB representation of the specified color.","Parameters","color - a table specifying a color as described in the module definition (see hs.drawing.color in the online help or Dash documentation)","Returns","a table containing the hue, saturation, brightness, and alpha keys representing the specified color as HSB or a string describing the color's colorspace if conversion is not possible.","Notes","See also hs.drawing.color.asRGB"]},{"l":"asRGB","p":["Signature","hs.drawing.color.asRGB(color) - table | string","Type","Function","Description","Returns a table containing the RGB representation of the specified color.","Parameters","color - a table specifying a color as described in the module definition (see hs.drawing.color in the online help or Dash documentation)","Returns","a table containing the red, blue, green, and alpha keys representing the specified color as RGB or a string describing the color's colorspace if conversion is not possible.","Notes","See also hs.drawing.color.asHSB"]},{"l":"colorsFor","p":["Signature","hs.drawing.color.colorsFor(list) - table","Type","Function","Description","Returns a table containing the colors for the specified system color list or hs.drawing.color collection.","Parameters","list - the name of the list to provide colors for","Returns","a table whose keys are made from the colors provided by the color list or nil if the list does not exist.","Notes","Where possible, each color node is provided as its RGB color representation. Where this is not possible, the color node contains the keys list and name which identify the indicated color. This means that you can use the following wherever a color parameter is expected: hs.drawing.color.colorsFor(list)[color-name] This function provides a tostring metatable method which allows listing the defined colors in the list in the Hammerspoon console with: hs.drawing.colorsFor(list) See also hs.drawing.color.lists"]},{"l":"lists","p":["Signature","hs.drawing.color.lists() - table","Type","Function","Description","Returns a table containing the system color lists and hs.drawing.color collections with their defined colors.","Parameters","None","Returns","a table whose keys are made from the currently defined system color lists and hs.drawing.color collections. Each color list key refers to a table whose keys make up the colors provided by the specific color list.","Notes","Where possible, each color node is provided as its RGB color representation. Where this is not possible, the color node contains the keys list and name which identify the indicated color. This means that you can use the following wherever a color parameter is expected: hs.drawing.color.lists()[list-name][color-name] This function provides a tostring metatable method which allows listing the defined color lists in the Hammerspoon console with: hs.drawing.color.lists() See also hs.drawing.color.colorsFor"]}],[{"i":"hseventtap","l":"hs.eventtap","p":["Tap into input events (mouse, keyboard, trackpad) for observation and possibly overriding them It also provides convenience wrappers for sending mouse and keyboard events. If you need to construct finely controlled mouse/keyboard events, see hs.eventtap.event","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"Submodules","p":["hs.eventtap.event"]},{"l":"API Overview","p":["checkKeyboardModifiers","checkMouseButtons","Constructors- API calls which return an object, typically one that offers API methods","doubleClickInterval","Functions- API calls offered directly by the extension","isEnabled","isSecureInputEnabled","keyRepeatDelay","keyRepeatInterval","keyStroke","keyStrokes","leftClick","Methods- API calls which can only be made on an object returned by a constructor","middleClick","new","otherClick","rightClick","scrollWheel","start","stop"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"checkKeyboardModifiers","p":["Signature","hs.eventtap.checkKeyboardModifiers([raw]) - table","Type","Function","Description","Returns a table containing the current key modifiers being pressed or in effect at this instant for the keyboard most recently used.","Parameters","raw - an optional boolean value which, if true, includes the _ raw key containing the numeric representation of all of the keyboard/modifier flags.","Returns","Returns a table containing boolean values indicating which keyboard modifiers were held down when the function was invoked; The possible keys are: cmd (or ⌘) alt (or ⌥) shift (or ⇧) ctrl (or ⌃) capslock fn and optionally_ raw - a numeric representation of the numeric representation of all of the keyboard/modifier flags.","Notes","This is an instantaneous poll of the current keyboard modifiers for the most recently used keyboard, not a callback. This is useful primarily in conjunction with other modules, such as hs.menubar, when a callback is already in progress or waiting for an event callback is not practical or possible. the numeric value returned is useful if you need to detect device dependent flags or flags which we normally ignore because they are not present (or are accessible another way) on most keyboards."]},{"l":"checkMouseButtons","p":["Signature","hs.eventtap.checkMouseButtons() - table","Type","Function","Description","Returns a table containing the current mouse buttons being pressed at this instant.","Parameters","None","Returns","Returns an array containing indices starting from 1 up to the highest numbered button currently being pressed where the index is true if the button is currently pressed or false if it is not. Special hash tag synonyms for left(button 1), right(button 2), and middle(button 3) are also set to true if these buttons are currently being pressed.","Notes","This is an instantaneous poll of the current mouse buttons, not a callback. This is useful primarily in conjunction with other modules, such as hs.menubar, when a callback is already in progress or waiting for an event callback is not practical or possible."]},{"l":"doubleClickInterval","p":["Signature","hs.eventtap.doubleClickInterval() - number","Type","Function","Description","Returns the system-wide setting for the delay between two clicks, to register a double click event","Parameters","None","Returns","A number containing the maximum number of seconds between two mouse click events, for a double click event to be registered","Notes"]},{"l":"isSecureInputEnabled","p":["Signature","hs.eventtap.isSecureInputEnabled() - boolean","Type","Function","Description","Checks if macOS is preventing keyboard events from being sent to event taps","Parameters","None","Returns","A boolean, true if secure input is enabled, otherwise false","Notes","If secure input is enabled, Hammerspoon is not able to intercept keyboard events Secure input is enabled generally only in situations where an password field is focused in a web browser, system dialog or terminal"]},{"l":"keyRepeatDelay","p":["Signature","hs.eventtap.keyRepeatDelay() - number","Type","Function","Description","Returns the system-wide setting for the delay before keyboard repeat events begin","Parameters","None","Returns","A number containing the number of seconds before repeat events begin, after a key is held down","Notes"]},{"l":"keyRepeatInterval","p":["Signature","hs.eventtap.keyRepeatInterval() - number","Type","Function","Description","Returns the system-wide setting for the interval between repeated keyboard events","Parameters","None","Returns","A number containing the number of seconds between keyboard events, if a key is held down","Notes"]},{"l":"keyStroke","p":["Signature","hs.eventtap.keyStroke(modifiers, character[, delay, application])","Type","Function","Description","Generates and emits a single keystroke event pair for the supplied keyboard modifiers and character","Parameters","modifiers - A table containing the keyboard modifiers to apply (\"fn\", \"ctrl\", \"alt\", \"cmd\", \"shift\", or their Unicode equivalents) character - A string containing a character to be emitted delay - An optional delay (in microseconds) between key down and up event. Defaults to 200000 (i.e. 200ms) application - An optional hs.application object to send the keystroke to","Returns","None","Notes","This function is ideal for sending single keystrokes with a modifier applied (e.g. sending ⌘-v to paste, with hs.eventtap.keyStroke({cmd}, v)). If you want to emit multiple keystrokes for typing strings of text, see hs.eventtap.keyStrokes() Note that invoking this function with a table (empty or otherwise) for the modifiers argument will force the release of any modifier keys which have been explicitly created by hs.eventtap.event.newKeyEvent and posted that are still in the \"down\" state. An explicit nil for this argument will not (i.e. the keystroke will inherit any currently \"down\" modifiers)"]},{"l":"keyStrokes","p":["Signature","hs.eventtap.keyStrokes(text[, application])","Type","Function","Description","Generates and emits keystroke events for the supplied text","Parameters","text - A string containing the text to be typed application - An optional hs.application object to send the keystrokes to","Returns","None","Notes","If you want to send a single keystroke with keyboard modifiers (e.g. sending ⌘-v to paste), see hs.eventtap.keyStroke()"]},{"l":"leftClick","p":["Signature","hs.eventtap.leftClick(point[, delay])","Type","Function","Description","Generates a left mouse click event at the specified point","Parameters","point - A table with keys {x, y} indicating the location where the mouse event should occur delay - An optional delay (in microseconds) between mouse down and up event. Defaults to 200000 (i.e. 200ms)","Returns","None","Notes","This is a wrapper around hs.eventtap.event.newMouseEvent that sends leftmousedown and leftmouseup events)"]},{"l":"middleClick","p":["Signature","hs.eventtap.middleClick(point[, delay])","Type","Function","Description","Generates a middle mouse click event at the specified point","Parameters","point - A table with keys {x, y} indicating the location where the mouse event should occur delay - An optional delay (in microseconds) between mouse down and up event. Defaults to 200000 (i.e. 200ms)","Returns","None","Notes","This function is just a wrapper which calls hs.eventtap.otherClick(point, delay, 2) and is included solely for backwards compatibility."]},{"l":"otherClick","p":["Signature","hs.eventtap.otherClick(point[, delay][, button])","Type","Function","Description","Generates an \"other\" mouse click event at the specified point","Parameters","point - A table with keys {x, y} indicating the location where the mouse event should occur delay - An optional delay (in microseconds) between mouse down and up event. Defaults to 200000 (i.e. 200ms) button - An optional integer, default 2, between 2 and 31 specifying the button number to be pressed. If this parameter is specified then delay must also be specified, though you may specify it as nil to use the default.","Returns","None","Notes","This is a wrapper around hs.eventtap.event.newMouseEvent that sends otherMouseDown and otherMouseUp events) macOS recognizes up to 32 distinct mouse buttons, though few mouse devices have more than 3. The left mouse button corresponds to button number 0 and the right mouse button corresponds to 1; distinct events are used for these mouse buttons, so you should use hs.eventtap.leftClick and hs.eventtap.rightClick respectively. All other mouse buttons are coalesced into the otherMouse events and are distinguished by specifying the specific button with the mouseEventButtonNumber property, which this function does for you. The specific purpose of mouse buttons greater than 2 varies by hardware and application (typically they are not present on a mouse and have no effect in an application)"]},{"l":"rightClick","p":["Signature","hs.eventtap.rightClick(point[, delay])","Type","Function","Description","Generates a right mouse click event at the specified point","Parameters","point - A table with keys {x, y} indicating the location where the mouse event should occur delay - An optional delay (in microseconds) between mouse down and up event. Defaults to 200000 (i.e. 200ms)","Returns","None","Notes","This is a wrapper around hs.eventtap.event.newMouseEvent that sends rightmousedown and rightmouseup events)"]},{"l":"scrollWheel","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.eventtap.scrollWheel(offsets, modifiers, unit) - event | | Type | Function | | Description | Generates and emits a scroll wheel event | | Parameters | offsets - A table containing the {horizontal, vertical} amount to scroll. Positive values scroll up or left, negative values scroll down or right.mods - A table containing zero or more of the following: cmd alt shift ctrl fnunit - An optional string containing the name of the unit for scrolling. Either \"line\" (the default) or \"pixel\" | | Returns | None | | Notes | |"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.eventtap.new(types, fn) - eventtap","Type","Constructor","Description","Create a new event tap object","Parameters","types - A table that should contain values from hs.eventtap.event.types fn - A function that will be called when the specified event types occur. The function should take a single parameter, which will be an event object. It can optionally return two values. Firstly, a boolean, true if the event should be deleted, false if it should propagate to any other applications watching for that event. Secondly, a table of events to post.","Returns","An event tap object","Notes","If you specify the argument types as the special table {\"all\"[, events to ignore]}, then all events (except those you optionally list after the \"all\" string) will trigger a callback, even events which are not defined in the Quartz Event Reference."]},{"l":"Methods"},{"l":"isEnabled","p":["Signature","hs.eventtap:isEnabled() - bool","Type","Method","Description","Determine whether or not an event tap object is enabled.","Parameters","None","Returns","True if the event tap is enabled or false if it is not.","Notes"]},{"l":"start","p":["Signature","hs.eventtap:start()","Type","Method","Description","Starts an event tap","Parameters","None","Returns","The event tap object","Notes"]},{"l":"stop","p":["Signature","hs.eventtap:stop()","Type","Method","Description","Stops an event tap","Parameters","None","Returns","The event tap object","Notes"]}],[{"i":"hseventtapevent","l":"hs.eventtap.event","p":["Create, modify and inspect events for hs.eventtap","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis.","hs.eventtap.event.newGesture uses an external library by Calf Trail Software, LLC.","Touch Copyright (C) 2010 Calf Trail Software, LLC","This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.","This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.","You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA."]},{"l":"API Overview","p":["asData","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","copy","Functions- API calls offered directly by the extension","getButtonState","getCharacters","getFlags","getKeyCode","getProperty","getRawEventData","getTouchDetails","getTouches","getType","getUnicodeString","location","Methods- API calls which can only be made on an object returned by a constructor","newEvent","newEventFromData","newGesture","newKeyEvent","newKeyEventSequence","newMouseEvent","newScrollEvent","newSystemKeyEvent","post","properties","rawFlagMasks","rawFlags","setFlags","setKeyCode","setProperty","setType","setUnicodeString","systemKey","timestamp","types"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"properties","p":["Signature","hs.eventtap.event.properties - table","Type","Constant","Description","A table containing property types for use with hs.eventtap.event:getProperty() and hs.eventtap.event:setProperty(). The table supports forward (label to number) and reverse (number to label) lookups to increase its flexibility.","Notes","The constants defined in this table are as follows:(I) in the description indicates that this property is returned or set as an integer(N) in the description indicates that this property is returned or set as a number (floating point) eventSourceGroupID -- (I) The event source Unix effective GID. eventSourceStateID -- (I) The event source state ID used to create this event. eventSourceUnixProcessID -- (I) The event source Unix process ID. eventSourceUserData -- (I) Event source user-supplied data, up to 64 bits. eventSourceUserID -- (I) The event source Unix effective UID. eventTargetProcessSerialNumber -- (I) The event target process serial number. The value is a 64-bit long word. eventTargetUnixProcessID -- (I) The event target Unix process ID. eventUnacceleratedPointerMovementX -- Undocumented, assumed Integer eventUnacceleratedPointerMovementY -- Undocumented, assumed Integer keyboardEventAutorepeat -- (I) Non-zero when this is an autorepeat of a key-down, and zero otherwise. keyboardEventKeyboardType -- (I) The keyboard type identifier. keyboardEventKeycode -- (I) The virtual keycode of the key-down or key-up event. mouseEventButtonNumber -- (I) The mouse button number. For information about the possible values, see Mouse Buttons. mouseEventClickState -- (I) The mouse button click state. A click state of 1 represents a single click. A click state of 2 represents a double-click. A click state of 3 represents a triple-click. mouseEventDeltaX -- (I) The horizontal mouse delta since the last mouse movement event. mouseEventDeltaY -- (I) The vertical mouse delta since the last mouse movement event. mouseEventInstantMouser -- (I) The value is non-zero if the event should be ignored by the Inkwell subsystem. mouseEventNumber -- (I) The mouse button event number. Matching mouse-down and mouse-up events will have the same event number. mouseEventPressure -- (N) The mouse button pressure. The pressure value may range from 0 to 1, with 0 representing the mouse being up. This value is commonly set by tablet pens mimicking a mouse. mouseEventSubtype -- (I) Encoding of the mouse event subtype. 0 = mouse, 1 = tablet point, 2 = tablet proximity, 3 = touch mouseEventWindowUnderMousePointer -- (I) Window ID of window underneath mouse pointer (this corresponds to hs.window:id()) mouseEventWindowUnderMousePointerThatCanHandleThisEvent -- (I) Window ID of window underneath mouse pointer that can handle this event (this corresponds to hs.window:id()) scrollWheelEventDeltaAxis1 -- (I) Scrolling data. This field typically contains the change in vertical position since the last scrolling event from a Mighty Mouse scroller or a single-wheel mouse scroller. scrollWheelEventDeltaAxis2 -- (I) Scrolling data. This field typically contains the change in horizontal position since the last scrolling event from a Mighty Mouse scroller. scrollWheelEventDeltaAxis3 -- (I) This field is not used. scrollWheelEventFixedPtDeltaAxis1 -- (N) Contains scrolling data which represents a line-based or pixel-based change in vertical position since the last scrolling event from a Mighty Mouse scroller or a single-wheel mouse scroller. scrollWheelEventFixedPtDeltaAxis2 -- (N) Contains scrolling data which represents a line-based or pixel-based change in horizontal position since the last scrolling event from a Mighty Mouse scroller. scrollWheelEventFixedPtDeltaAxis3 -- (N) This field is not used. scrollWheelEventInstantMouser -- (I) Indicates whether the event should be ignored by the Inkwell subsystem. If the value is non-zero, the event should be ignored. scrollWheelEventIsContinuous -- (I) Indicates whether a scrolling event contains continuous, pixel-based scrolling data. The value is non-zero when the scrolling data is pixel-based and zero when the scrolling data is line-based (note that this is the opposite of what constants in CGEventTypes.h suggest, so test before relying on and let us know what you discover!). scrollWheelEventMomentumPhase -- (I) Indicates scroll momentum phase: 0 = none, 1 = begin, 2 = continue, 3 = end scrollWheelEventPointDeltaAxis1 -- (I) Pixel-based scrolling data. The scrolling data represents the change in vertical position since the last scrolling event from a Mighty Mouse scroller or a single-wheel mouse scroller. scrollWheelEventPointDeltaAxis2 -- (I) Pixel-based scrolling data. The scrolling data represents the change in horizontal position since the last scrolling event from a Mighty Mouse scroller. scrollWheelEventPointDeltaAxis3 -- (I) This field is not used. scrollWheelEventScrollCount -- (I) The number of scroll gestures that have begun before the momentum phase of the initial gesture has ended (unverified, this is inferred from web comments). scrollWheelEventScrollPhase -- (I) Indicates scroll phase: 1 = began, 2 = changed, 4 = ended, 8 = cancelled, 128 = may begin. tabletEventDeviceID -- (I) The system-assigned unique device ID. tabletEventPointButtons -- (I) The tablet button state. Bit 0 is the first button, and a set bit represents a closed or pressed button. Up to 16 buttons are supported. tabletEventPointPressure -- (N) The tablet pen pressure. A value of 0.0 represents no pressure, and 1.0 represents maximum pressure. tabletEventPointX -- (I) The absolute X coordinate in tablet space at full tablet resolution. tabletEventPointY -- (I) The absolute Y coordinate in tablet space at full tablet resolution. tabletEventPointZ -- (I) The absolute Z coordinate in tablet space at full tablet resolution. tabletEventRotation -- (N) The tablet pen rotation. tabletEventTangentialPressure -- (N) The tangential pressure on the device. A value of 0.0 represents no pressure, and 1.0 represents maximum pressure. tabletEventTiltX -- (N) The horizontal tablet pen tilt. A value of 0.0 represents no tilt, and 1.0 represents maximum tilt. tabletEventTiltY -- (N) The vertical tablet pen tilt. A value of 0.0 represents no tilt, and 1.0 represents maximum tilt. tabletEventVendor1 -- (I) A vendor-specified value. tabletEventVendor2 -- (I) A vendor-specified value. tabletEventVendor3 -- (I) A vendor-specified value. tabletProximityEventCapabilityMask -- (I) The device capabilities mask. tabletProximityEventDeviceID -- (I) The system-assigned device ID. tabletProximityEventEnterProximity -- (I) Indicates whether the pen is in proximity to the tablet. The value is non-zero if the pen is in proximity to the tablet and zero when leaving the tablet. tabletProximityEventPointerID -- (I) The vendor-defined ID of the pointing device. tabletProximityEventPointerType -- (I) The pointer type. tabletProximityEventSystemTabletID -- (I) The system-assigned unique tablet ID. tabletProximityEventTabletID -- (I) The vendor-defined tablet ID, typically the USB product ID. tabletProximityEventVendorID -- (I) The vendor-defined ID, typically the USB vendor ID. tabletProximityEventVendorPointerSerialNumber -- (I) The vendor-defined pointer serial number. tabletProximityEventVendorPointerType -- (I) The vendor-assigned pointer type. tabletProximityEventVendorUniqueID -- (I) The vendor-defined unique ID."]},{"l":"rawFlagMasks","p":["Signature","hs.eventtap.event.rawFlagMasks[]","Type","Constant","Description","A table containing key-value pairs describing the raw modifier flags which can be manipulated with hs.eventtap.event:rawFlags.","Notes","This table and hs.eventtap.event:rawFlags are both considered experimental as the full meanings behind some of these flags and what combinations are likely to be observed is still being determined. It is possible that some of these key names may change in the future. At present, what is known about the flags is presented here: alternate - Corresponds to the left (or only) alt key on the keyboard command - Corresponds to the left (or only) cmd key on the keyboard control - Corresponds to the left (or only) ctrl key on the keyboard shift - Corresponds to the left (or only) shift key on the keyboard numericPad - Indicates that the key corresponds to one defined as belonging to the numeric keypad, if present secondaryFn - Indicates the fn key found on most modern Macintosh laptops. May also be observed with function and other special keys (arrows, page-up/down, etc.) deviceRightAlternate - Corresponds to the right alt key on the keyboard (if present) deviceRightCommand - Corresponds to the right cmd key on the keyboard (if present) deviceRightControl - Corresponds to the right ctrl key on the keyboard (if present) deviceRightShift - Corresponds to the right alt key on the keyboard (if present) nonCoalesced - Indicates that multiple mouse movements are not being coalesced into one event if delivery of the event has been delayed The following are also defined in IOLLEvent.h, but the description is a guess since I have not observed them myself alphaShift - related to the caps-lock in some way? alphaShiftStateless - related to the caps-lock in some way? deviceAlphaShiftStateless - related to the caps-lock in some way? deviceLeftAlternate - Corresponds to the left alt key on the keyboard (if present) deviceLeftCommand - Corresponds to the left cmd key on the keyboard (if present) deviceLeftControl - Corresponds to the left ctrl key on the keyboard (if present) deviceLeftShift - Corresponds to the left shift key on the keyboard (if present) help - related to a modifier found on old NeXT keyboards but not on modern keyboards? It has also been observed that synthetic events that have been posted also have the bit represented by 0x20000000 set. This constant does not appear in IOLLEvent.h or CGEventTypes.h, which defines most of the constants used in this module, so it is not included within this table at present, but may be added in the future if any corroborating information can be found. For what it may be worth, I have found it most useful to filter out nonCoalesced and 0x20000000 before examining the flags in my own code, like this: hs.eventtap.event:rawFlags() 0xdffffeff where 0xdffffeff = ~(0x20000000","0x100) (limited to the 32 bits since that is what is returned by rawFlags). Any documentation or references that can be found which can further expand on the information here is welcome -- Please submit any information you may have through the Hammerspoon GitHub site or Google group."]},{"l":"types","p":["Signature","hs.eventtap.event.types - table","Type","Constant","Description","A table containing event types to be used with hs.eventtap.new(...) and returned by hs.eventtap.event:type(). The table supports forward (label to number) and reverse (number to label) lookups to increase its flexibility.","Notes","The constants defined in this table are as follows: nullEvent -- Specifies a null event. (thus far unobserved; please submit an issue if you can provide more information) leftMouseDown -- Specifies a mouse down event with the left button. leftMouseUp -- Specifies a mouse up event with the left button. rightMouseDown -- Specifies a mouse down event with the right button. rightMouseUp -- Specifies a mouse up event with the right button. mouseMoved -- Specifies a mouse moved event. leftMouseDragged -- Specifies a mouse drag event with the left button down. rightMouseDragged -- Specifies a mouse drag event with the right button down. keyDown -- Specifies a key down event. keyUp -- Specifies a key up event. flagsChanged -- Specifies a key changed event for a modifier or status key. scrollWheel -- Specifies a scroll wheel moved event. tabletPointer -- Specifies a tablet pointer event. tabletProximity -- Specifies a tablet proximity event. otherMouseDown -- Specifies a mouse down event with one of buttons 2-31. otherMouseUp -- Specifies a mouse up event with one of buttons 2-31. otherMouseDragged -- Specifies a mouse drag event with one of buttons 2-31 down. The following events, also included in the lookup table, are provided through NSEvent and currently may require the use of hs.eventtap.event:getRawEventData() to retrieve supporting information. Target specific methods may be added as the usability of these events is explored. gesture -- An event that represents a touch event on a touch sensitive trackpad or touchbar. See below. systemDefined -- An event indicating some system event has occurred. For us, it is primarily used to detect special system keys (Volume Up/Down, etc.). See hs.eventtap.event:systemKey and hs.eventtap.event.newSystemKeyEvent. appKitDefined -- (thus far unobserved; please submit an issue if you can provide more information) applicationDefined -- (thus far unobserved; please submit an issue if you can provide more information) cursorUpdate -- (thus far unobserved; please submit an issue if you can provide more information) mouseEntered -- (thus far unobserved; please submit an issue if you can provide more information) mouseExited -- (thus far unobserved; please submit an issue if you can provide more information) periodic -- (thus far unobserved; please submit an issue if you can provide more information) quickLook -- (thus far unobserved; please submit an issue if you can provide more information) To detect the following events, setup your eventtap to capture the hs.eventtap.event.type.gesture type and examine the value of hs.eventtap.event:getType(true). gesture -- The user touched a portion of a touchpad directTouch -- The user touched a portion of the touch bar. changeMode -- A double-tap on the side of an Apple Pencil paired with an iPad that is being used as an external monitor via Sidecar. magnify -- The user performed a pinch open or pinch close gesture. pressure -- The pressure on a forcetouch trackpad has changed.. rotate -- The user performed a rotation gesture. smartMagnify -- The user performed a smart zoom gesture (2-finger double tap on trackpads). swipe -- The user performed a swipe gesture. (thus far unobserved; please submit an issue if you can provide more information)"]},{"l":"Functions"},{"l":"newKeyEventSequence","p":["Signature","hs.eventtap.event.newKeyEventSequence(modifiers, character) - table","Type","Function","Description","Generates a table containing the keydown and keyup events to generate the keystroke with the specified modifiers.","Parameters","modifiers - A table containing the keyboard modifiers to apply (\"cmd\", \"alt\", \"shift\", \"ctrl\", \"rightCmd\", \"rightAlt\", \"rightShift\", \"rightCtrl\", or \"fn\") character - A string containing a character to be emitted","Returns","a table with events which contains the individual events that Apple recommends for building up a keystroke combination (see hs.eventtap.event.newKeyEvent) in the order that they should be posted (i.e. the first half will contain keyDown events and the second half will contain keyUp events)","Notes","The modifiers table must contain the full name of the modifiers you wish used for the keystroke as defined in hs.keycodes.map-- the Unicode equivalents are not supported by this function. The returned table will always contain an even number of events -- the first half will be the keyDown events and the second half will be the keyUp events. The events have not been posted; the table can be used without change as the return value for a callback to a watcher defined with hs.eventtap.new."]},{"l":"Constructors"},{"l":"copy","p":["Signature","hs.eventtap.event:copy() - event","Type","Constructor","Description","Duplicates an hs.eventtap.event event for further modification or injection","Parameters","None","Returns","A new hs.eventtap.event object","Notes"]},{"l":"newEvent","p":["Signature","hs.eventtap.event.newEvent() - event","Type","Constructor","Description","Creates a blank event. You will need to set its type with hs.eventtap.event:setType","Parameters","None","Returns","a new hs.eventtap.event object","Notes","this is an empty event that you should set a type for and whatever other properties may be appropriate before posting."]},{"l":"newEventFromData","p":["Signature","hs.eventtap.event.newEventFromData(data) - event","Type","Constructor","Description","Creates an event from the data encoded in the string provided.","Parameters","data - a string containing binary data provided by hs.eventtap.event:asData representing an event.","Returns","a new hs.eventtap.event object or nil if the string did not represent a valid event","Notes"]},{"l":"newGesture","p":["Signature","hs.eventtap.event.newGesture(gestureType[, gestureValue]) - event","Type","Constructor","Description","Creates an gesture event.","Parameters","gestureType - the type of gesture you want to create as a string (see notes below).[gestureValue] - an optional value for the specific gesture (i.e. magnification amount or rotation in degrees).","Returns","a new hs.eventtap.event object or nil if the gestureType is not valid.","Notes","Valid gestureType values are: beginMagnify- Starts a magnification event with an optional magnification value as a number (defaults to 0). The exact unit of measurement is unknown. endMagnify- Starts a magnification event with an optional magnification value as a number (defaults to 0.1). The exact unit of measurement is unknown. beginRotate- Starts a rotation event with an rotation value in degrees (i.e. a value of 45 turns it 45 degrees left - defaults to 0). endRotate- Starts a rotation event with an rotation value in degrees (i.e. a value of 45 turns it 45 degrees left - defaults to 45). beginSwipeLeft- Begin a swipe left. endSwipeLeft- End a swipe left. beginSwipeRight- Begin a swipe right. endSwipeRight- End a swipe right. beginSwipeUp- Begin a swipe up. endSwipeUp- End a swipe up. beginSwipeDown- Begin a swipe down. endSwipeDown- End a swipe down."]},{"l":"newKeyEvent","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.eventtap.event.newKeyEvent([mods], key, isdown) - event | | Type | Constructor | | Description | Creates a keyboard event | | Parameters | mods - An optional table containing zero or more of the following: cmd alt shift ctrl fnkey - A string containing the name of a key (see hs.hotkey for more information) or an integer specifying the virtual keycode for the key.isdown - A boolean, true if the event should be a key-down, false if it should be a key-up | | Returns | An hs.eventtap.event object | | Notes | The original version of this constructor utilized a shortcut which merged flagsChanged and keyUp/keyDown events into one. This approach is still supported for backwards compatibility and because it does work in most cases.According to Apple Documentation, the proper way to perform a keypress with modifiers is through multiple key events; for example to generate 'Å', you should do the following: ~~~lua hs.eventtap.event.newKeyEvent(hs.keycodes.map.shift, true):post() hs.eventtap.event.newKeyEvent(hs.keycodes.map.alt, true):post() hs.eventtap.event.newKeyEvent(\"a\", true):post() hs.eventtap.event.newKeyEvent(\"a\", false):post() hs.eventtap.event.newKeyEvent(hs.keycodes.map.alt, false):post() hs.eventtap.event.newKeyEvent(hs.keycodes.map.shift, false):post() ~~~The shortcut method is still supported, though if you run into odd behavior or need to generate flagsChanged events without a corresponding keyUp or keyDown, please check out the syntax demonstrated above. ~~~lua hs.eventtap.event.newKeyEvent({\"shift\", \"alt\"}, \"a\", true):post() hs.eventtap.event.newKeyEvent({\"shift\", \"alt\"}, \"a\", false):post() ~~~The shortcut approach is still limited to generating only the left version of modifiers. |"]},{"l":"newMouseEvent","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.eventtap.event.newMouseEvent(eventtype, point[, modifiers) - event | | Type | Constructor | | Description | Creates a new mouse event | | Parameters | eventtype - One of the mouse related values from hs.eventtap.event.typespoint - An hs.geometry point table (i.e. of the form {x=123, y=456}) indicating the location where the mouse event should occurmodifiers - An optional table (e.g. {\"cmd\", \"alt\"}) containing zero or more of the following keys: cmd alt shift ctrl fn | | Returns | An hs.eventtap object | | Notes | |"]},{"l":"newScrollEvent","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.eventtap.event.newScrollEvent(offsets, mods, unit) - event | | Type | Constructor | | Description | Creates a scroll wheel event | | Parameters | offsets - A table containing the {horizontal, vertical} amount to scroll. Positive values scroll up or left, negative values scroll down or right.mods - A table containing zero or more of the following: cmd alt shift ctrl fnunit - An optional string containing the name of the unit for scrolling. Either \"line\" (the default) or \"pixel\" | | Returns | An hs.eventtap.event object | | Notes | |"]},{"l":"newSystemKeyEvent","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.eventtap.event.newSystemKeyEvent(key, isdown) - event | | Type | Constructor | | Description | Creates a keyboard event for special keys (e.g. media playback) | | Parameters | key - A string containing the name of a special key. The possible names are: SOUND_UP SOUND_DOWN MUTE BRIGHTNESS_UP BRIGHTNESS_DOWN CONTRAST_UP CONTRAST_DOWN POWER LAUNCH_PANEL VIDMIRROR PLAY EJECT NEXT PREVIOUS FAST REWIND ILLUMINATION_UP ILLUMINATION_DOWN ILLUMINATION_TOGGLE CAPS_LOCK HELP NUM_LOCKisdown - A boolean, true if the event should be a key-down, false if it should be a key-up | | Returns | An hs.eventtap.event object | | Notes | To set modifiers on a system key event (e.g. cmd/ctrl/etc), see the hs.eventtap.event:setFlags() methodThe event names are case sensitive |"]},{"l":"Methods"},{"l":"asData","p":["Signature","hs.eventtap.event:asData() - string","Type","Method","Description","Returns a string containing binary data representing the event. This can be used to record events for later use.","Parameters","None","Returns","a string representing the event or nil if the event cannot be represented as a string","Notes","You can recreate the event for later posting with hs.eventtap.event.newEventFromData"]},{"l":"getButtonState","p":["Signature","hs.eventtap.event:getButtonState(button) - bool","Type","Method","Description","Gets the state of a mouse button in the event","Parameters","button - A number between 0 and 31. The left mouse button is 0, the right mouse button is 1 and the middle mouse button is 2. The meaning of the remaining buttons varies by hardware, and their functionality varies by application (typically they are not present on a mouse and have no effect in an application)","Returns","A boolean, true if the specified mouse button is to be clicked by the event","Notes","This method should only be called on mouse events"]},{"l":"getCharacters","p":["Signature","hs.eventtap.event:getCharacters([clean]) - string or nil","Type","Method","Description","Returns the Unicode character, if any, represented by a keyDown or keyUp event.","Parameters","clean -- an optional parameter, default false, which indicates if key modifiers, other than Shift, should be stripped from the keypress before converting to Unicode.","Returns","A string containing the Unicode character represented by the keyDown or keyUp event, or nil if the event is not a keyUp or keyDown.","Notes","This method should only be used on keyboard events If clean is true, all modifiers except for Shift are stripped from the character before converting to the Unicode character represented by the keypress. If the keypress does not correspond to a valid Unicode character, an empty string is returned (e.g. if clean is false, then Opt-E will return an empty string, while Opt-Shift-E will return an accent mark)."]},{"l":"getFlags","p":["Signature","hs.eventtap.event:getFlags() - table","Type","Method","Description","Gets the keyboard modifiers of an event","Parameters","None","Returns","A table containing the keyboard modifiers that present in the event - i.e. zero or more of the following keys, each with a value of true: cmd alt shift ctrl fn The table responds to the following methods: contain(mods) -> boolean Returns true if the modifiers contain all of given modifiers containExactly(mods) -> boolean Returns true if the modifiers contain all of given modifiers exactly and nothing else Parameter mods is a table containing zero or more of the following: cmd or ⌘ alt or ⌥ shift or ⇧ ctrl or ⌃ fn","Notes"]},{"l":"getKeyCode","p":["Signature","hs.eventtap.event:getKeyCode() - keycode","Type","Method","Description","Gets the raw keycode for the event","Parameters","None","Returns","A number containing the raw keycode, taken from hs.keycodes.map","Notes","This method should only be used on keyboard events"]},{"l":"getProperty","p":["Signature","hs.eventtap.event:getProperty(prop) - number","Type","Method","Description","Gets a property of the event","Parameters","prop - A value taken from hs.eventtap.event.properties","Returns","A number containing the value of the requested property","Notes","The properties are CGEventField values, as documented at https://developer.apple.com/library/mac/documentation/Carbon/Reference/QuartzEventServicesRef/index.html#//apple_ref/c/tdef/CGEventField"]},{"l":"getRawEventData","p":["Signature","hs.eventtap.event:getRawEventData() - table","Type","Method","Description","Returns raw data about the event","Parameters","None","Returns","A table with two keys: CGEventData -- a table with keys containing CGEvent data about the event. NSEventData -- a table with keys containing NSEvent data about the event.","Notes","Most of the data in CGEventData is already available through other methods, but is presented here without any cleanup or parsing. This method is expected to be used mostly for testing and expanding the range of possibilities available with the hs.eventtap module. If you find that you are regularly using specific data from this method for common or re-usable purposes, consider submitting a request for adding a more targeted method to hs.eventtap or hs.eventtap.event -- it will likely be more efficient and faster for common tasks, something eventtaps need to be to minimize affecting system responsiveness."]},{"l":"getTouchDetails","p":["Signature","hs.eventtap.event:getTouchDetails() - table | nil","Type","Method","Description","Returns a table containing more information about some touch related events.","Parameters","None","Returns","if the event is a touch event (i.e. is an event of type hs.eventtap.event.types.gesture), then this method returns a table with zero or more of the following key-value pairs: if the gesture is for a pressure event: pressure- a number between 0.0 and 1.0 inclusive indicating the relative amount of pressure applied by the touch; trackpads which are not pressure sensitive will only report the discrete values of 0.0 and 1.0. stage- an integer between 0 and 2 specifying the stage. 0 represents a touch transitioning to a state too light to be considered a touch, usually at the end of a click; 1 represents a touch with enough pressure to be considered a mouseDown event; 2 represents additional pressure, usually what would trigger a \"deep\" or \"force\" touch. stageTransition- a number between 0.0 and 1.0. As the pressure increases and transition between stages begins, this will rise from 0.0 to 1.0; as the pressure decreases and a transition between stages begins, this will fall from 0.0 to -1.0. When the pressure is solidly within a specific stage, this will remain 0.0. pressureBehavior- a string specifying the effect or purpose of the pressure. Note that the exact meaning (in terms of haptic feedback or action being performed) of each label is target application or ui element specific. Valid values for this key are:\"unknown\", \"default\", \"click\", \"generic\", \"accelerator\", \"deepClick\", \"deepDrag\" if the gesture is for a magnification event: magnification- a number specifying the change in magnification that should be added to the current scaling of an item to achieve the new scale factor. if the gesture is for a rotation event: rotation- a number specifying in degrees the change in rotation that should be added as specified by this event. Clockwise rotation is indicated by a negative number while counter-clockwise rotation will be positive.","Notes"]},{"l":"getTouches","p":["Signature","hs.eventtap.event:getTouches() - table | nil","Type","Method","Description","Returns a table of details containing information about touches on the trackpad associated with this event if the event is of the type hs.eventtap.event.types.gesture.","Parameters","None","Returns","if the event is of the type gesture, returns a table; otherwise returns nil.","Notes","if the event is of the type gesture, the table will contain one or more tables in an array. Each member table of the array will have the following key-value pairs: device- a string containing a unique identifier for the device on which the touch occurred. At present we do not have a way to match the identifier to a specific touch device, but if multiple such devices are attached to the computer, this value will differ between them. deviceSize- a size table containing keys h and w for the height and width of the touch device in points (72 PPI resolution). force- a number representing a measure of the force of the touch when the device is a forcetouch trackpad. This will be 0.0 for non-forcetouch trackpads and the touchbar. identity- a string specifying a unique identifier for the touch guaranteed to be unique for the life of the touch. This identifier may be used to track the movement of a specific touch (e.g. finger) as it moves through successive callbacks. phase- a string specifying the current phase the touch is considered to be in. The possible values are: \"began\", \"moved\", \"stationary\", \"ended\", or \"cancelled\". resting- Resting touches occur when a user simply rests their thumb on the trackpad device. Requires that the foreground window has views accepting resting touches. timestamp- a number representing the time the touch was detected. This number corresponds to seconds since the last system boot, not including time the computer has been asleep. Comparable to hs.timer.absoluteTime() / 1000000000. touching- a boolean specifying whether or not the touch phase is \"began\", \"moved\", or \"stationary\" (i.e. is not\"ended\" or \"cancelled\"). type- a string specifying the type of touch. A \"direct\" touch will indicate a touchbar, while a trackpad will report \"indirect\". The following fields will be present when the touch is from a touchpad ( type== \"indirect\")/lili normalizedPosition- a point table specifying the x and y coordinates of the touch, each normalized to be a value between 0.0 and 1.0. is the lower left corner of the touch device./lili previousNormalizedPosition- a point table specifying the x and y coordinates of the previous position for this specific touch (as linked by identity) normalized to values between 0.0 and 1.0./liliThe following fields will be present when the touch is from the touchbar ( type== direct) location- a point table specifying the x and y coordinates of the touch location within the touchbar. previousLocation- a point table specifying the x and y coordinates of the previous location for this specific touch (as linked by identity) within the touchbar."]},{"l":"getType","p":["Signature","hs.eventtap.event:getType([nsSpecificType]) - number","Type","Method","Description","Gets the type of the event","Parameters","nsSpecificType- an optional boolean, default false, specifying whether or not a more specific Cocoa NSEvent type should be returned, if available.","Returns","A number containing the type of the event, taken from hs.eventtap.event.types","Notes","some newer events are grouped into a more generic event for watching purposes and the specific event type is determined by examining the event through the Cocoa API. The primary example of this is for gestures on a trackpad or touches of the touchbar, as all of these are grouped under the hs.eventtap.event.types.gesture event. For example: lua/lili myTap = hs.eventtap.new( { hs.eventtap.event.types.gesture }, function(e)/lili local gestureType = e:getType(true)/lili if gestureType == hs.eventtap.types.directTouch then/lili -- they touched the touch bar/lili elseif gestureType == hs.eventtap.types.gesture then/lili -- they are touching the trackpad, but it's not for a gesture/lili elseif gestureType == hs.eventtap.types.magnify then/lili -- they're preforming a magnify gesture/lili -- etc -- see hs.eventtap.event.types for more/lili endif/lili end/lili"]},{"l":"getUnicodeString","p":["Signature","hs.eventtap.event:getUnicodeString()","Type","Method","Description","Gets the single unicode character of an event","Parameters","None","Returns","A string containing the unicode character","Notes"]},{"l":"location","p":["Signature","hs.eventtap.event:location([pointTable]) - event | table","Type","Method","Description","Get or set the current mouse pointer location as defined for the event.","Parameters","pointTable - an optional point table specifying the x and y coordinates of the mouse pointer location for the event","Returns","if pointTable is provided, returns the hs.eventtap.event object; otherwise returns a point table containing x and y key-value pairs specifying the mouse pointer location as specified for this event.","Notes","the use or effect of this method is undefined if the event is not a mouse type event."]},{"l":"post","p":["Signature","hs.eventtap.event:post([app])","Type","Method","Description","Posts the event to the OS - i.e. emits the keyboard/mouse input defined by the event","Parameters","app - An optional hs.application object. If specified, the event will only be sent to that application","Returns","The hs.eventtap.event object","Notes"]},{"l":"rawFlags","p":["Signature","hs.eventtap.event:rawFlags([flags]) - event | integer","Type","Method","Description","Experimental method to get or set the modifier flags for an event directly.","Parameters","flags - an optional integer, made by logically combining values from hs.eventtap.event.rawFlagMasks specifying the modifier keys which should be set for this event","Returns","if flags is provided, returns the hs.eventtap.event object; otherwise returns the current flags set as an integer","Notes","This method is experimental and may undergo changes or even removal in the future See hs.eventtap.event.rawFlagMasks for more information"]},{"l":"setFlags","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.eventtap.event:setFlags(table) - event | | Type | Method | | Description | Sets the keyboard modifiers of an event | | Parameters | A table containing the keyboard modifiers to be sent with the event - i.e. zero or more of the following keys, each with a value of true: cmd alt shift ctrl fn | | Returns | The hs.eventap.event object. | | Notes | |"]},{"l":"setKeyCode","p":["Signature","hs.eventtap.event:setKeyCode(keycode)","Type","Method","Description","Sets the raw keycode for the event","Parameters","keycode - A number containing a raw keycode, taken from hs.keycodes.map","Returns","The hs.eventtap.event object","Notes","This method should only be used on keyboard events"]},{"l":"setProperty","p":["Signature","hs.eventtap.event:setProperty(prop, value)","Type","Method","Description","Sets a property of the event","Parameters","prop - A value from hs.eventtap.event.properties value - A number containing the value of the specified property","Returns","The hs.eventtap.event object.","Notes","The properties are CGEventField values, as documented at https://developer.apple.com/library/mac/documentation/Carbon/Reference/QuartzEventServicesRef/index.html#//apple_ref/c/tdef/CGEventField"]},{"l":"setType","p":["Signature","hs.eventtap.event:setType(type) - event","Type","Method","Description","Set the type for this event.","Parameters","type - an integer matching one of the event types described in hs.eventtap.event.types","Returns","the hs.eventtap.event object","Notes"]},{"l":"setUnicodeString","p":["Signature","hs.eventtap.event:setUnicodeString(string)","Type","Method","Description","Sets a unicode string as the output of the event","Parameters","string - A string containing unicode characters, which will be applied to the event","Returns","The hs.eventtap.event object","Notes","Calling this method will reset any flags previously set on the event (because they don't make any sense, and you should not try to set flags again) This is likely to only work with short unicode strings that resolve to a single character"]},{"l":"systemKey","p":["Signature","hs.eventtap.event:systemKey() - table","Type","Method","Description","Returns the special key and its state if the event is a NSSystemDefined event of subtype AUX_CONTROL_BUTTONS (special-key pressed)","Parameters","None","Returns","If the event is a NSSystemDefined event of subtype AUX_CONTROL_BUTTONS, a table with the following keys defined: key -- a string containing one of the following labels indicating the key involved: SOUND_UP SOUND_DOWN MUTE BRIGHTNESS_UP BRIGHTNESS_DOWN CONTRAST_UP CONTRAST_DOWN POWER LAUNCH_PANEL VIDMIRROR PLAY EJECT NEXT PREVIOUS FAST REWIND ILLUMINATION_UP ILLUMINATION_DOWN ILLUMINATION_TOGGLE CAPS_LOCK HELP NUM_LOCK or \"undefined\" if the key detected is unrecognized. keyCode -- the numeric keyCode corresponding to the key specified in key. down -- a boolean value indicating if the key is pressed down (true) or just released (false) repeat -- a boolean indicating if this event is because the keydown is repeating. This will always be false for a key release. If the event does not correspond to a NSSystemDefined event of subtype AUX_CONTROL_BUTTONS, then an empty table is returned.","Notes","CAPS_LOCK seems to sometimes generate 0 or 2 key release events (down == false), especially on builtin laptop keyboards, so it is probably safest (more reliable) to look for cases where down == true only. If the key field contains \"undefined\", you can use the number in keyCode to look it up in /System/Library/Frameworks/IOKit.framework/Headers/hidsystem/ev_keymap.h. If you believe the numeric value is part of a new system update or was otherwise mistakenly left out, please submit the label (it will defined in the header file as NX_KEYTYPE_something) and number to the Hammerspoon maintainers at https://github.com/Hammerspoon/hammerspoon with a request for inclusion in the next Hammerspoon update."]},{"l":"timestamp","p":["Signature","hs.eventtap.event:timestamp([absolutetime]) - event | integer","Type","Method","Description","Get or set the timestamp of the event.","Parameters","absolutetime - an optional integer specifying the timestamp for the event.","Returns","if absolutetime is provided, returns the hs.eventtap.event object; otherwise returns the current timestamp for the event.","Notes","Synthesized events have a timestamp of 0 by default. The timestamp, if specified, is expressed as an integer representing the number of nanoseconds since the system was last booted. See hs.timer.absoluteTime. This field appears to be informational only and is not required when crafting your own events with this module."]}],[{"i":"hsexpose","l":"hs.expose","p":["Keyboard-driven expose replacement/enhancement","Warning: this module is still somewhat experimental. Should you encounter any issues, please feel free to report them on https://github.com/Hammerspoon/hammerspoon/issues or #hammerspoon on irc.libera.chat","With this module you can configure a hotkey to show thumbnails for open windows when invoked; each thumbnail will have an associated keyboard \"hint\" (usually one or two characters) that you can type to quickly switch focus to that window; in conjunction with keyboard modifiers, you can additionally minimize ( alt by default) or close( shift by default) any window without having to focus it first.","When used in combination with a windowfilter you can include or exclude specific apps, window titles, screens, window roles, etc. Additionally, each expose instance can be customized to include or exclude minimized or hidden windows, windows residing in other Mission Control Spaces, or only windows for the current application. You can further customize hint length, colors, fonts and sizes, whether to show window thumbnails and/or titles, and more.","To improve responsiveness, this module will update its thumbnail layout in the background (so to speak), so that it can show the expose without delay on invocation. Be aware that on particularly heavy Hammerspoon configurations this could adversely affect overall performance; you can disable this behaviour with hs.expose.ui.fitWindowsInBackground=false","Usage:"]},{"l":"API Overview","p":["Variables- Configurable values","ui","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","hide","show","toggleShow"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"ui","p":["Signature","hs.expose.ui","Type","Variable","Description","Allows customization of the expose behaviour and user interface"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.expose.new([windowfilter[, uiPrefs][, logname, [loglevel]]]) - hs.expose object","Type","Constructor","Description","Creates a new hs.expose instance; it can use a windowfilter to determine which windows to show","Parameters","windowfilter - (optional) if omitted or nil, use the default windowfilter; otherwise it must be a windowfilter instance or constructor table uiPrefs - (optional) a table to override UI preferences for this instance; its keys and values must follow the conventions described in hs.expose.ui; this parameter allows you to have multiple expose instances with different behaviour (for example, with and without thumbnails and/or titles) using different hotkeys logname - (optional) name of the hs.logger instance for the new expose; if omitted, the class logger will be used loglevel - (optional) log level for the hs.logger instance for the new expose","Returns","the new instance","Notes","by default expose will show invisible windows and (unlike the OSX expose) windows from other spaces; use hs.expose.ui or the uiPrefs parameter to change these behaviours."]},{"l":"Methods"},{"l":"hide","p":["Signature","hs.expose:hide()","Type","Method","Description","Hides the expose, if visible, and exits the modal mode","Parameters","None","Returns","Notes","Call this function if you need to make sure the modal is exited without waiting for the user to press esc"]},{"l":"show","p":["Signature","hs.expose:show([activeApplication])","Type","Method","Description","Shows an expose-like screen with modal keyboard hints for switching to, closing or minimizing/unminimizing windows.","Parameters","activeApplication - (optional) if true, only show windows of the active application (within the scope of the instance windowfilter); otherwise show all windows allowed by the instance windowfilter","Returns","None","Notes","passing true for activeApplication will simply hide hints/thumbnails for applications other than the active one, without recalculating the hints layout; conversely, setting onlyActiveApplication=true for an expose instance's ui will calculate an optimal layout for the current active application's windows Completing a hint will exit the expose and focus the selected window. Pressing esc will exit the expose and with no action taken. If shift is being held when a hint is completed (the background will be red), the selected window will be closed. If it's the last window of an application, the application will be closed. If alt is being held when a hint is completed (the background will be blue), the selected window will be minimized (if visible) or unminimized/unhidden (if minimized or hidden)."]},{"l":"toggleShow","p":["Signature","hs.expose:toggleShow([activeApplication])","Type","Method","Description","Toggles the expose - see hs.expose:show() and hs.expose:hide()","Parameters","activeApplication - (optional) if true, only show windows of the active application (within the scope of the instance windowfilter); otherwise show all windows allowed by the instance windowfilter","Returns","None","Notes","passing true for activeApplication will simply hide hints/thumbnails for applications other than the active one, without recalculating the hints layout; conversely, setting onlyActiveApplication=true for an expose instance's ui will calculate an optimal layout for the current active application's windows Completing a hint will exit the expose and focus the selected window. Pressing esc will exit the expose and with no action taken. If shift is being held when a hint is completed (the background will be red), the selected window will be closed. If it's the last window of an application, the application will be closed. If alt is being held when a hint is completed (the background will be blue), the selected window will be minimized (if visible) or unminimized/unhidden (if minimized or hidden)."]}],[{"i":"hsfnutils","l":"hs.fnutils","p":["Functional programming utility functions"]},{"l":"API Overview","p":["concat","Constructors- API calls which return an object, typically one that offers API methods","contains","copy","cycle","each","every","filter","find","Functions- API calls offered directly by the extension","ieach","ifilter","imap","indexOf","map","mapCat","partial","reduce","sequence","some","sortByKeys","sortByKeyValues","split"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"concat","p":["Signature","hs.fnutils.concat(table1, table2)","Type","Function","Description","Join two tables together","Parameters","table1 - A table containing some sort of data table2 - A table containing some sort of data","Returns","table1, with all of table2's elements added to the end of it","Notes","table2 cannot be a sparse table, see http://www.luafaq.org/gotchas.html#T6.4"]},{"l":"contains","p":["Signature","hs.fnutils.contains(table, element) - bool","Type","Function","Description","Determine if a table contains a given object","Parameters","table - A table containing some sort of data element - An object to search the table for","Returns","A boolean, true if the element could be found in the table, otherwise false","Notes"]},{"l":"copy","p":["Signature","hs.fnutils.copy(table) - table","Type","Function","Description","Copy a table using pairs()","Parameters","table - A table containing some sort of data","Returns","A new table containing the same data as the input table","Notes"]},{"l":"each","p":["Signature","hs.fnutils.each(table, fn)","Type","Function","Description","Execute a function across a table (in arbitrary order), and discard the results","Parameters","table - A table; it can have both a list (or array) part and a hash (or dict) part fn - A function that accepts a single parameter (a table element)","Returns","None","Notes"]},{"l":"every","p":["Signature","hs.fnutils.every(table, fn) - bool","Type","Function","Description","Returns true if the application of fn on every entry in table is true.","Parameters","table - A table containing some sort of data fn - A function that accepts a single parameter and returns a \"true\" value (any value except the boolean false or nil) if the parameter was accepted, or a \"false\" value (the boolean false or nil) if the parameter was rejected.","Returns","True if the application of fn on every element of the table is true False if the function returns false for any element of the table. Note that testing stops when the first false return is detected.","Notes"]},{"l":"filter","p":["Signature","hs.fnutils.filter(table, fn) - table","Type","Function","Description","Filter a table by running a predicate function on its elements (in arbitrary order)","Parameters","table - A table; it can have both a list (or array) part and a hash (or dict) part fn - A function that accepts a single parameter (a table element) and returns a boolean value: true if the parameter should be kept, false if it should be discarded","Returns","A table containing the elements of the table for which fn(element) returns true","Notes","If table is a pure array table (list-like) without \"holes\", use hs.fnutils.ifilter() if you need guaranteed in-order processing and for better performance."]},{"l":"find","p":["Signature","hs.fnutils.find(table, fn) - element","Type","Function","Description","Execute a function across a table and return the first element where that function returns true","Parameters","table - A table containing some sort of data fn - A function that takes one parameter and returns a boolean value","Returns","The element of the supplied table that first caused fn to return true","Notes"]},{"l":"ieach","p":["Signature","hs.fnutils.ieach(list, fn)","Type","Function","Description","Execute a function across a list-like table in order, and discard the results","Parameters","list - A list-like table, i.e. one whose keys are sequential integers starting from 1 fn - A function that accepts a single parameter (a table element)","Returns","None","Notes"]},{"l":"ifilter","p":["Signature","hs.fnutils.ifilter(list, fn) - list","Type","Function","Description","Filter a list-like table by running a predicate function on its elements in order","Parameters","list - A list-like table, i.e. one whose keys are sequential integers starting from 1 fn - A function that accepts a single parameter (a table element) and returns a boolean value: true if the parameter should be kept, false if it should be discarded","Returns","A list-like table containing the elements of the table for which fn(element) returns true","Notes","If list has \"holes\", all elements after the first hole will be lost, as the table is iterated over with ipairs; use hs.fnutils.map() if your table has holes"]},{"l":"imap","p":["Signature","hs.fnutils.imap(list, fn) - list","Type","Function","Description","Execute a function across a list-like table in order, and collect the results","Parameters","list - A list-like table, i.e. one whose keys are sequential integers starting from 1 fn - A function that accepts a single parameter (a table element). The values returned from this function will be collected into the result list; when nil is returned the relevant element is discarded - the result list won't have any \"holes\".","Returns","A list-like table containing the results of calling the function on every element in the table","Notes","If list has \"holes\", all elements after the first hole will be lost, as the table is iterated over with ipairs; use hs.fnutils.map() if your table has holes"]},{"l":"indexOf","p":["Signature","hs.fnutils.indexOf(table, element) - number or nil","Type","Function","Description","Determine the location in a table of a given object","Parameters","table - A table containing some sort of data element - An object to search the table for","Returns","A number containing the index of the element in the table, or nil if it could not be found","Notes"]},{"l":"map","p":["Signature","hs.fnutils.map(table, fn) - table","Type","Function","Description","Execute a function across a table (in arbitrary order) and collect the results","Parameters","table - A table; it can have both a list (or array) part and a hash (or dict) part fn - A function that accepts a single parameter (a table element). For the hash part, the values returned from this function (if non-nil) will be assigned to the same key in the result list. For the array part, this function behaves like hs.fnutils.imap()(i.e. nil results are discarded); however all keys, including integer keys after a \"hole\" in table, will be iterated over.","Returns","A table containing the results of calling the function on every element in the table","Notes","If table is a pure array table (list-like) without \"holes\", use hs.fnutils.imap() if you need guaranteed in-order processing and for better performance."]},{"l":"mapCat","p":["Signature","hs.fnutils.mapCat(table, fn) - table","Type","Function","Description","Execute, across a table, a function that outputs tables, and concatenate all of those tables together","Parameters","table - A table containing some sort of data fn - A function that takes a single parameter and returns a table","Returns","A table containing the concatenated results of calling fn(element) for every element in the supplied table","Notes"]},{"l":"reduce","p":["Signature","hs.fnutils.reduce(table, fn[, initial]) - table","Type","Function","Description","Reduce a table to a single element, using a function","Parameters","table - A table containing some sort of data fn - A function that takes two parameters, which will be elements of the supplied table. It should choose one of these elements and return it initial - If given, the first call to fn will be with this value and the first element of the table","Returns","The element of the supplied table that was chosen by the iterative reducer function","Notes","table cannot be a sparse table, see http://www.luafaq.org/gotchas.html#T6.4 The first iteration of the reducer will call fn with the first and second elements of the table. The second iteration will call fn with the result of the first iteration, and the third element. This repeats until there is only one element left"]},{"l":"some","p":["Signature","hs.fnutils.some(table, fn) - bool","Type","Function","Description","Returns true if the application of fn on entries in table are true for at least one of the members.","Parameters","table - A table containing some sort of data fn - A function that accepts a single parameter and returns a \"true\" value (any value except the boolean false or nil) if the parameter was accepted, or a \"false\" value (the boolean false or nil) if the parameter was rejected.","Returns","True if the application of fn on any element of the table is true. Note that testing stops when the first true return is detected. False if the function returns false for all elements of the table.","Notes"]},{"l":"split","p":["Signature","hs.fnutils.split(sString, sSeparator [, nMax] [, bPlain]) - { array }","Type","Function","Description","Convert string to an array of strings, breaking at the specified separator.","Parameters","sString -- the string to split into substrings sSeparator -- the separator. If bPlain is false or not provided, this is treated as a Lua pattern. nMax -- optional parameter specifying the maximum number (or all if nMax is nil) of substrings to split from sString. bPlain -- optional boolean parameter, defaulting to false, specifying if sSeparator should be treated as plain text (true) or a Lua pattern (false)","Returns","An array of substrings. The last element of the array will be the remaining portion of sString that remains after nMax(or all, if nMax is not provided or is nil) substrings have been identified.","Notes","Similar to \"split\" in Perl or \"string.split\" in Python. Optional parameters nMax and bPlain are identified by their type -- if parameter 3 or 4 is a number or nil, it will be considered a value for nMax; if parameter 3 or 4 is a boolean value, it will be considered a value for bPlain. Lua patterns are more flexible for pattern matching, but can also be slower if the split point is simple. See §6.4.1 of the Lua_Reference_Manual at http://www.lua.org/manual/5.3/manual.html#6.4.1 for more information on Lua patterns."]},{"l":"Constructors"},{"l":"cycle","p":["Signature","hs.fnutils.cycle(table) - fn()","Type","Constructor","Description","Creates a function that repeatedly iterates a table","Parameters","table - A table containing some sort of data","Returns","A function that, when called repeatedly, will return all of the elements of the supplied table, repeating indefinitely","Notes","table cannot be a sparse table, see http://www.luafaq.org/gotchas.html#T6.4 An example usage: lua/lili f = cycle({4, 5, 6})/lili {f(), f(), f(), f(), f(), f(), f()} == {4, 5, 6, 4, 5, 6, 4}/lili"]},{"l":"partial","p":["Signature","hs.fnutils.partial(fn, ...) - fn'","Type","Constructor","Description","Returns a new function which takes the provided arguments and pre-applies them as the initial arguments to the provided function. When the new function is later invoked with additional arguments, they are appended to the end of the initial list given and the complete list of arguments is finally passed into the provided function and its result returned.","Parameters","fn - The function which will act on all of the arguments provided now and when the result is invoked later.... - The initial arguments to pre-apply to the resulting new function.","Returns","A function","Notes","This is best understood with an example which you can test in the Hammerspoon console: Create the function a which has it's initial arguments set to 1,2,3: a = hs.fnutils.partial(function(...) return table.pack(...) end, 1, 2, 3) Now some examples of using the new function, a(...): hs.inspect(a(\"a\",\"b\",\"c\")) will return: { 1, 2, 3, \"a\", \"b\", \"c\", n = 6 } hs.inspect(a(4,5,6,7)) will return: { 1, 2, 3, 4, 5, 6, 7, n = 7 } hs.inspect(a(1)) will return: { 1, 2, 3, 1, n = 4 }"]},{"l":"sequence","p":["Signature","hs.fnutils.sequence(...) - fn","Type","Constructor","Description","Creates a function that will collect the result of a series of functions into a table","Parameters","... - A number of functions, passed as different arguments. They should accept zero parameters, and return something","Returns","A function that, when called, will call all of the functions passed to this constructor. The output of these functions will be collected together and returned.","Notes"]},{"l":"sortByKeys","p":["Signature","hs.fnutils.sortByKeys(table[ , function]) - function","Type","Constructor","Description","Iterator for retrieving elements from a table of key-value pairs in the order of the keys.","Parameters","table - the table of key-value pairs to be iterated through fn - an optional function which will be passed to table.sort to determine how the keys are sorted. If it is not present, then keys will be sorted numerically/alphabetically.","Returns","function to be used as an iterator","Notes","Similar to Perl's sort(keys %hash) Iterators are used in looping constructs like for: for i,v in hs.fnutils.sortByKeys(t[, f]) do ... end A sort function should accept two arguments and return true if the first argument should appear before the second, or false otherwise. e.g. function(m,n) return not (m n) end would result in reverse alphabetic order. See _ Programming_In_Lua, 3rd_ed, page 52 for a more complete discussion. The default sort is to compare keys directly, if they are of the same type, or as their tostring() versions, if the key types differ: function(m,n) if type(m) ~= type(n) then return tostring(m) < tostring(n) else return m < n end"]},{"l":"sortByKeyValues","p":["Signature","hs.fnutils.sortByKeyValues(table[ , function]) - function","Type","Constructor","Description","Iterator for retrieving elements from a table of key-value pairs in the order of the values.","Parameters","table - the table of key-value pairs to be iterated through fn - an optional function which will be passed to table.sort to determine how the values are sorted. If it is not present, then values will be sorted numerically/alphabetically.","Returns","function to be used as an iterator","Notes","Similar to Perl's sort { $hash{$a} = $hash{$b} } keys %hash Iterators are used in looping constructs like for: for i,v in hs.fnutils.sortByKeyValues(t[, f]) do ... end A sort function should accept two arguments and return true if the first argument should appear before the second, or false otherwise. e.g. function(m,n) return not (m n) end would result in reverse alphabetic order. See _ Programming_In_Lua, 3rd_ed, page 52 for a more complete discussion. The default sort is to compare values directly, if they are of the same type, or as their tostring() versions, if the value types differ: function(m,n) if type(m) ~= type(n) then return tostring(m) < tostring(n) else return m < n end"]}],[{"i":"hsfs","l":"hs.fs","p":["Access/inspect the filesystem","This module is partial superset of LuaFileSystem 1.8.0 ( http://keplerproject.github.io/luafilesystem/). It has been modified to remove functions which do not apply to macOS filesystems and additional functions providing macOS specific filesystem information have been added."]},{"l":"Submodules","p":["hs.fs.volume","hs.fs.xattr"]},{"l":"API Overview","p":["attributes","chdir","currentDir","dir","displayName","fileUTI","fileUTIalternate","Functions- API calls offered directly by the extension","getFinderComments","link","lock","lockDir","mkdir","pathFromBookmark","pathToAbsolute","pathToBookmark","rmdir","setFinderComments","symlinkAttributes","tagsAdd","tagsGet","tagsRemove","tagsSet","temporaryDirectory","touch","unlock","urlFromPath"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"attributes","p":["Signature","hs.fs.attributes(filepath [, aName]) - table or string or nil,error","Type","Function","Description","Gets the attributes of a file","Parameters","filepath - A string containing the path of a file to inspect aName - An optional attribute name. If this value is specified, only the attribute requested, is returned","Returns","A table with the file attributes corresponding to filepath (or nil followed by an error message in case of error). If the second optional argument is given, then a string is returned with the value of the named attribute. attribute mode is a string, all the others are numbers, and the time related attributes use the same time reference of os.time: dev - A number containing the device the file resides on ino - A number containing the inode of the file mode - A string containing the type of the file (possible values are: file, directory, link, socket, named pipe, char device, block device or other) nlink - A number containing a count of hard links to the file uid - A number containing the user-id of owner gid - A number containing the group-id of owner rdev - A number containing the type of device, for files that are char/block devices access - A number containing the time of last access modification (as seconds since the UNIX epoch) change - A number containing the time of last file status change (as seconds since the UNIX epoch) modification - A number containing the time of the last file contents change (as seconds since the UNIX epoch) permissions - A 9 character string specifying the user access permissions for the file. The first three characters represent Read/Write/Execute permissions for the file owner. The first character will be \"r\" if the user has read permissions, \"-\" if they do not; the second will be \"w\" if they have write permissions, \"-\" if they do not; the third will be \"x\" if they have execute permissions, \"-\" if they do not. The second group of three characters follow the same convention, but refer to whether or not the file's group have Read/Write/Execute permissions, and the final three characters follow the same convention, but apply to other system users not covered by the Owner or Group fields. creation - A number containing the time the file was created (as seconds since the UNIX epoch) size - A number containing the file size, in bytes blocks - A number containing the number of blocks allocated for file blksize - A number containing the optimal file system I/O blocksize","Notes","This function uses stat() internally thus if the given filepath is a symbolic link, it is followed (if it points to another link the chain is followed recursively) and the information is about the file it refers to. To obtain information about the link itself, see function hs.fs.symlinkAttributes()"]},{"l":"chdir","p":["Signature","hs.fs.chdir(path) - true or (nil,error)","Type","Function","Description","Changes the current working directory to the given path.","Parameters","path - A string containing the path to change working directory to","Returns","If successful, returns true, otherwise returns nil and an error string","Notes"]},{"l":"currentDir","p":["Signature","hs.fs.currentDir() - string or (nil,error)","Type","Function","Description","Gets the current working directory","Parameters","None","Returns","A string containing the current working directory, or if an error occurred, nil and an error string","Notes"]},{"l":"dir","p":["Signature","hs.fs.dir(path) - iter_fn, dir_obj, nil, dir_obj","Type","Function","Description","Creates an iterator for walking a filesystem path","Parameters","path - A string containing a directory to iterate","Returns","An iterator function A data object to pass to the iterator function or an error message as a string nil as the initial argument for the iterator (unused and unnecessary in this case, but conforms to Lua spec for iterators). Ignore this value if you are not using this function with for(see Notes). A second data object used by for to close the directory object immediately when the loop terminates. Ignore this value if you are not using this function with for(see Notes).","Notes","Unlike most functions in this module, hs.fs.dir will throw a Lua error if the supplied path cannot be iterated. The simplest way to use this function is with a for loop. When used in this manner, the for loop itself will take care of closing the directory stream for us, even if we break out of the loop early./lili for file in hs.fs.dir(/Users/Guest/Documents) do/lili print(file)/lili end/lili It is also possible to use the dir_obj directly if you wish:/lili local iterFn, dirObj = hs.fs.dir(/Users/Guest/Documents)/lili local file = dirObj:next() -- get the first file in the directory/lili while (file) do/lili print(file)/lili file = dirObj:next() -- get the next file in the directory/lili end/lili dirObj:close() -- necessary to make sure that the directory stream is closed/lili"]},{"l":"displayName","p":["Signature","hs.fs.displayName(filepath) - string","Type","Function","Description","Returns the display name of the file or directory at a specified path.","Parameters","filepath - The path to the file or directory","Returns","a string containing the display name of the file or directory at a specified path; returns nil if no file with the specified path exists.","Notes"]},{"l":"fileUTI","p":["Signature","hs.fs.fileUTI(path) - string or nil","Type","Function","Description","Returns the Uniform Type Identifier for the file location specified.","Parameters","path - the path to the file to return the UTI for.","Returns","a string containing the Uniform Type Identifier for the file location specified or nil if an error occurred","Notes"]},{"l":"fileUTIalternate","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.fs.fileUTIalternate(fileUTI, type) - string | | Type | Function | | Description | Returns the fileUTI's equivalent form in an alternate type specification format. | | Parameters | a string containing a file UTI, such as one returned by hs.fs.fileUTI.a string specifying the alternate format for the UTI. This string may be one of the following:extension - as a file extension, commonly used for platform independent file sharing when file metadata can't be guaranteed to be cross-platform compatible. Generally considered unreliable when other file type identification methods are available. mime - as a mime-type, commonly used by Internet applications like web browsers and email applications. pasteboard - as an NSPasteboard type (see hs.pasteboard). ostype - four character file type, most common pre OS X, but still used in some legacy APIs. | | Returns | the file UTI in the alternate format or nil if the UTI does not have an alternate of the specified type. | | Notes | |"]},{"l":"getFinderComments","p":["Signature","hs.fs.getFinderComments(path) - string","Type","Function","Description","Get the Finder comments for the file or directory at the specified path","Parameters","path - the path to the file or directory you wish to get the comments of","Returns","a string containing the Finder comments for the file or directory specified. If no comments have been set for the file, returns an empty string. If an error occurs, most commonly an invalid path, this function will throw a Lua error.","Notes","This function uses hs.osascript to access the file comments through AppleScript"]},{"l":"link","p":["Signature","hs.fs.link(old, new[, symlink]) - true or (nil,error)","Type","Function","Description","Creates a link","Parameters","old - A string containing a path to a filesystem object to link from new - A string containing a path to create the link at symlink - An optional boolean, true to create a symlink, false to create a hard link. Defaults to false","Returns","True if the link was created, otherwise nil and an error string","Notes"]},{"l":"lock","p":["Signature","hs.fs.lock(filehandle, mode[, start[, length]]) - true or (nil,error)","Type","Function","Description","Locks a file, or part of it","Parameters","filehandle - An open file mode - A string containing either \"r\" for a shared read lock, or \"w\" for an exclusive write lock start - An optional number containing an offset into the file to start the lock at. Defaults to 0 length - An optional number containing the length of the file to lock. Defaults to the full size of the file","Returns","True if the lock was obtained successfully, otherwise nil and an error string","Notes"]},{"l":"lockDir","p":["Signature","hs.fs.lockDir(path, [seconds_stale]) - lock or (nil,error)","Type","Function","Description","Locks a directory","Parameters","path - A string containing the path to a directory seconds_stale - An optional number containing an age (in seconds) beyond which to consider an existing lock as stale. Defaults to INT_MAX (which is, broadly speaking, equivalent to \"never\")","Returns","If successful, a lock object, otherwise nil and an error string","Notes","This is not a low level OS feature, the lock is actually a file created in the path, called lockfile.lfs, so the directory must be writable for this function to succeed The returned lock object can be freed with lock:free() If the lock already exists and is not stale, the error string returned will be \"File exists\""]},{"l":"mkdir","p":["Signature","hs.fs.mkdir(dirname) - true or (nil,error)","Type","Function","Description","Creates a new directory","Parameters","dirname - A string containing the path of a directory to create","Returns","True if the directory was created, otherwise nil and an error string","Notes"]},{"l":"pathFromBookmark","p":["Signature","hs.fs.pathFromBookmark(data) - string | nil, string","Type","Function","Description","Gets the file path from a binary encoded bookmark.","Parameters","data - The binary encoded Bookmark.","Returns","A string containing the path to the Bookmark URL or nil if an error occurs. An error message if an error occurs.","Notes","A bookmark provides a persistent reference to a file-system resource. When you resolve a bookmark, you obtain a URL to the resource’s current location. A bookmark’s association with a file-system resource (typically a file or folder) usually continues to work if the user moves or renames the resource, or if the user relaunches your app or restarts the system. No volumes are mounted during the resolution of the bookmark data."]},{"l":"pathToAbsolute","p":["Signature","hs.fs.pathToAbsolute(filepath) - string","Type","Function","Description","Gets the absolute path of a given path","Parameters","filepath - Any kind of file or directory path, be it relative or not","Returns","A string containing the absolute path of filepath(i.e. one that doesn't include ., .. or symlinks) Note that symlinks will be resolved to their target file","Notes"]},{"l":"pathToBookmark","p":["Signature","hs.fs.pathToBookmark(path) - string | nil","Type","Function","Description","Returns the path as binary encoded bookmark data.","Parameters","path - The path to encode","Returns","Bookmark data in a binary encoded string or nil if path is invalid.","Notes"]},{"l":"rmdir","p":["Signature","hs.fs.rmdir(dirname) - true or (nil,error)","Type","Function","Description","Removes an existing directory","Parameters","dirname - A string containing the path to a directory to remove","Returns","True if the directory was removed, otherwise nil and an error string","Notes"]},{"l":"setFinderComments","p":["Signature","hs.fs.setFinderComments(path, comment) - boolean","Type","Function","Description","Set the Finder comments for the file or directory at the specified path to the comment specified","Parameters","path - the path to the file or directory you wish to set the comments of comment - a string specifying the comment to set. If this parameter is missing or is an explicit nil, the existing comment is cleared.","Returns","true on success; on error, most commonly an invalid path, this function will throw a Lua error.","Notes","This function uses hs.osascript to access the file comments through AppleScript"]},{"l":"symlinkAttributes","p":["Signature","hs.fs.symlinkAttributes (filepath [, aname]) - table or string or nil,error","Type","Function","Description","Gets the attributes of a symbolic link","Parameters","filepath - A string containing the path of a link to inspect aName - An optional attribute name. If this value is specified, only the attribute requested, is returned","Returns","A table or string if the values could be found, otherwise nil and an error string.","Notes","The return values for this function are identical to those provided by hs.fs.attributes() with the following addition: the attribute name \"target\" is added and specifies a string containing the absolute path that the symlink points to."]},{"l":"tagsAdd","p":["Signature","hs.fs.tagsAdd(filepath, tags)","Type","Function","Description","Adds one or more tags to the Finder tags of a file","Parameters","filepath - A string containing the path of a file tags - A table containing one or more strings, each containing a tag name","Returns","true if the tags were updated; throws a lua error if an error occurs updating the tags","Notes"]},{"l":"tagsGet","p":["Signature","hs.fs.tagsGet(filepath) - table or nil","Type","Function","Description","Gets the Finder tags of a file","Parameters","filepath - A string containing the path of a file","Returns","A table containing the list of the file's tags, or nil if the file has no tags assigned; throws a lua error if an error accessing the file occurs","Notes"]},{"l":"tagsRemove","p":["Signature","hs.fs.tagsRemove(filepath, tags)","Type","Function","Description","Removes Finder tags from a file","Parameters","filepath - A string containing the path of a file tags - A table containing one or more strings, each containing a tag name","Returns","true if the tags were updated; throws a lua error if an error occurs updating the tags","Notes"]},{"l":"tagsSet","p":["Signature","hs.fs.tagsSet(filepath, tags)","Type","Function","Description","Sets the Finder tags of a file, removing any that are already set","Parameters","filepath - A string containing the path of a file tags - A table containing zero or more strings, each containing a tag name","Returns","true if the tags were set; throws a lua error if an error occurs setting the new tags","Notes"]},{"l":"temporaryDirectory","p":["Signature","hs.fs.temporaryDirectory() - string","Type","Function","Description","Returns the path of the temporary directory for the current user.","Parameters","None","Returns","The path to the system designated temporary directory for the current user.","Notes"]},{"l":"touch","p":["Signature","hs.fs.touch(filepath [, atime [, mtime]]) - true or (nil,error)","Type","Function","Description","Updates the access and modification times of a file","Parameters","filepath - A string containing the path of a file to touch atime - An optional number containing the new access time of the file to set (as seconds since the Epoch). Defaults to now mtime - An optional number containing the new modification time of the file to set (as seconds since the Epoch). Defaults to the value of atime","Returns","True if the operation was successful, otherwise nil and an error string","Notes"]},{"l":"unlock","p":["Signature","hs.fs.unlock(filehandle[, start[, length]]) - true or (nil,error)","Type","Function","Description","Unlocks a file or a part of it.","Parameters","filehandle - An open file start - An optional number containing an offset from the start of the file, to unlock. Defaults to 0 length - An optional number containing the length of file to unlock. Defaults to the full size of the file","Returns","True if the unlock succeeded, otherwise nil and an error string","Notes"]},{"l":"urlFromPath","p":["Signature","hs.fs.urlFromPath(path) - string | nil","Type","Function","Description","Returns the encoded URL from a path.","Parameters","path - The path","Returns","A string or nil if path is invalid.","Notes"]}],[{"i":"hsfsvolume","l":"hs.fs.volume","p":["Interact with OS X filesystem volumes","This is distinct from hs.fs in that hs.fs deals with UNIX filesystem operations, while hs.fs.volume interacts with the higher level OS X concept of volumes"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","didMount","didRename","didUnmount","willUnmount","Functions- API calls offered directly by the extension","allVolumes","eject","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","start","stop"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"didMount","p":["Signature","hs.fs.volume.didMount","Type","Constant","Description","A volume was mounted"]},{"l":"didRename","p":["Signature","hs.fs.volume.didRename","Type","Constant","Description","A volume changed either its name or mountpoint (or more likely, both)"]},{"l":"didUnmount","p":["Signature","hs.fs.volume.didUnmount","Type","Constant","Description","A volume was unmounted"]},{"l":"willUnmount","p":["Signature","hs.fs.volume.willUnmount","Type","Constant","Description","A volume is about to be unmounted"]},{"l":"Functions"},{"l":"allVolumes","p":["Signature","hs.fs.volume.allVolumes([showHidden]) - table","Type","Function","Description","Returns a table of information about disk volumes attached to the system","Parameters","showHidden - An optional boolean, true to show hidden volumes, false to not show hidden volumes. Defaults to false.","Returns","A table of information, where the keys are the paths of disk volumes","Notes","This is an alias for hs.host.volumeInformation() The possible keys in the table are: NSURLVolumeTotalCapacityKey - Size of the volume in bytes NSURLVolumeAvailableCapacityKey - Available space on the volume in bytes NSURLVolumeIsAutomountedKey - Boolean indicating if the volume was automounted NSURLVolumeIsBrowsableKey - Boolean indicating if the volume can be browsed NSURLVolumeIsEjectableKey - Boolean indicating if the volume should be ejected before its media is removed NSURLVolumeIsInternalKey - Boolean indicating if the volume is an internal drive or an external drive NSURLVolumeIsLocalKey - Boolean indicating if the volume is a local or remote drive NSURLVolumeIsReadOnlyKey - Boolean indicating if the volume is read only NSURLVolumeIsRemovableKey - Boolean indicating if the volume's media can be physically ejected from the drive (e.g. a DVD) NSURLVolumeMaximumFileSizeKey - Maximum file size the volume can support, in bytes NSURLVolumeUUIDStringKey - The UUID of volume's filesystem NSURLVolumeURLForRemountingKey - For remote volumes, the network URL of the volume NSURLVolumeLocalizedNameKey - Localized version of the volume's name NSURLVolumeNameKey - The volume's name NSURLVolumeLocalizedFormatDescriptionKey - Localized description of the volume* Not all keys will be present for all volumes* The meanings of NSURLVolumeIsEjectableKey and NSURLVolumeIsRemovableKey are not generally useful for determining if a drive is removable in the modern sense (e.g. a USB drive) as much of this terminology dates back to when USB didn't exist and removable drives were things like Floppy/DVD drives. If you're trying to determine if a drive is not fixed into the computer, you may need to use a combination of these keys, but which exact combination you should use, is not consistent across macOS versions."]},{"l":"eject","p":["Signature","hs.fs.volume.eject(path) - boolean,string","Type","Function","Description","Unmounts and ejects a volume","Parameters","path - An absolute path to the volume you wish to eject","Returns","A boolean, true if the volume was ejected, otherwise false A string, empty if the volume was ejected, otherwise it will contain the error message","Notes"]},{"l":"Constructors"},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.fs.volume.new(fn) - watcher | | Type | Constructor | | Description | Creates a watcher object for volume events | | Parameters | fn - A function that will be called when volume events happen. It should accept two parameters: An event type (see the constants defined above) A table that will contain relevant information | | Returns | An hs.fs.volume object | | Notes | |"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.fs.volume:start()","Type","Method","Description","Starts the volume watcher","Parameters","None","Returns","An hs.fs.volume object","Notes"]},{"l":"stop","p":["Signature","hs.fs.volume:stop()","Type","Method","Description","Stops the volume watcher","Parameters","None","Returns","An hs.fs.volume object","Notes"]}],[{"i":"hsfsxattr","l":"hs.fs.xattr","p":["Get and manipulate extended attributes for files and directories","This submodule provides functions for getting and setting the extended attributes for files and directories. Access to extended attributes is provided through the Darwin xattr functions defined in the /usr/include/sys/xattr.h header. Attribute names are expected to conform to proper UTF-8 strings and values are represented as raw data -- in Lua raw data is presented as bytes in a string object but the bytes are not required to conform to proper UTF-8 byte code sequences. This module does not perform any encoding or decoding of the raw data.","All of the functions provided by this module can take an options table. Note that not all options are valid for all functions. The options table should be a Lua table containing an array of zero or more of the following strings:","\"noFollow\" - do not follow symbolic links; this can be used to access the attributes of the link itself.","\"hfsCompression\" - access HFS Plus Compression extended attributes for the file or directory, if present","\"createOnly\" - when setting an attribute value, fail if the attribute already exists","\"replaceOnly\" - when setting an attribute value, fail if the attribute does not already exist","Note that the following options did not seem to be valid for the initial tests performed when developing this module and may refer the kernel level features not available to Hammerspoon; they are included here for full compatibility with the library as defined in its header. If you have more information about these options or can provide examples or documentation about their use, please submit an issue to the Hammerspoon github repository so we can provide better documentation here.","\"noSecurity\" - bypass authorization checking","\"noDefault\" - bypass the default extended attribute file (dot-underscore file)"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","get","getHumanReadable","list","remove","set"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"get","p":["Signature","hs.fs.xattr.get(path, attribute, [options], [position]) - string | true | nil","Type","Function","Description","Set the extended attribute to the value provided for the path specified.","Parameters","path- A string specifying the path to the file or directory to get the extended attribute from attribute- A string specifying the name of the extended attribute to get the value of options- An optional table containing options as described in this module's documentation header. Defaults to (an empty array). position- An optional integer specifying the offset within the extended attribute. Defaults to 0. Setting this argument to a value other than 0 is only valid when attribute is \"com.apple.ResourceFork\".","Returns","If the attribute exists for the file or directory and contains data, returns the value of the attribute as a string of raw bytes which are not guaranteed to conform to proper UTF-8 byte sequences. If the attribute exist but does not have a value, returns the Lua boolean true. If the attribute does not exist, returns nil. Throws a Lua error on failure with a description of the reason for the failure.","Notes","See also hs.fs.xattr.getHumanReadable."]},{"l":"getHumanReadable","p":["Signature","hs.fs.xattr.getHumanReadable(path, attribute, [options], [position]) - string | true | nil","Type","Function","Description","A wrapper to hs.fs.xattr.get which returns non UTF-8 data as a hexadecimal dump provided by hs.utf8.hexDump.","Parameters","path- A string specifying the path to the file or directory to get the extended attribute from attribute- A string specifying the name of the extended attribute to get the value of options- An optional table containing options as described in this module's documentation header. Defaults to (an empty array). position- An optional integer specifying the offset within the extended attribute. Defaults to 0. Setting this argument to a value other than 0 is only valid when attribute is \"com.apple.ResourceFork\".","Returns","if the returned data does not conform to proper UTF-8 byte sequences, passes the string through hs.utf8.hexDump first. Otherwise the return values follow the description for hs.fs.xattr.get.","Notes","This is provided for testing and debugging purposes; in general you probably want hs.fs.xattr.get once you know how to properly understand the data returned for the attribute. This is similar to the long format option in the command line xattr command."]},{"l":"list","p":["Signature","hs.fs.xattr.list(path, [options]) - table","Type","Function","Description","Returns a list of the extended attributes currently defined for the specified file or directory","Parameters","path- A string specifying the path to the file or directory to get the list of extended attributes for options- An optional table containing options as described in this module's documentation header. Defaults to (an empty array).","Returns","a table containing an array of strings identifying the extended attributes currently defined for the file or directory; note that the order of the attributes is nondeterministic and is not guaranteed to be the same for future queries. Throws a Lua error on failure with a description of the reason for the failure.","Notes"]},{"l":"remove","p":["Signature","hs.fs.xattr.remove(path, attribute, [options]) - boolean","Type","Function","Description","Removes the specified extended attribute from the file or directory at the path specified.","Parameters","path- A string specifying the path to the file or directory to remove the extended attribute from attribute- A string specifying the name of the extended attribute to remove options- An optional table containing options as described in this module's documentation header. Defaults to (an empty array).","Returns","True if the operation succeeds; otherwise throws a Lua error with a description of reason for failure.","Notes"]},{"l":"set","p":["Signature","hs.fs.xattr.set(path, attribute, value, [options], [position]) - boolean","Type","Function","Description","Set the extended attribute to the value provided for the path specified.","Parameters","path- A string specifying the path to the file or directory to set the extended attribute for attribute- A string specifying the name of the extended attribute to set value- A string containing the value to set the extended attribute to. This value is treated as a raw sequence of bytes and does not have to conform to property UTF-8 byte sequences. options- An optional table containing options as described in this module's documentation header. Defaults to (an empty array). position- An optional integer specifying the offset within the extended attribute. Defaults to 0. Setting this argument to a value other than 0 is only valid when attribute is \"com.apple.ResourceFork\".","Returns","True if the operation succeeds; otherwise throws a Lua error with a description of reason for failure.","Notes"]}],[{"i":"hsgeometry","l":"hs.geometry","p":["[X,Y WxH] or [X1,Y1 X2,Y2] or variations (note the square brackets) creates a unit rect where x=X/100, y=Y/100, w=W/100, h=H/100","4 parameters X,Y,W,H for the respective fields - W and H, or X and Y, can be nil:","a point and a size X Y,WxH or {x=X,y=Y},{w=W,h=H} create a rect","a point, or vector2, with x and y fields for its coordinates","a rect, which has both a point component for one of its corners, and a size component - so it has all 4 fields","a size with w and h fields for width and height respectively","a string:","a table {X,Y,W,H} creates a rect","a table {X,Y} creates a point","a table {x=X,y=Y,w=W,h=H} creates a rect, or if you omit X and Y, or W and H, creates a size or a point respectively","a table {x1=X1,y1=Y1,x2=X2,y2=Y2} creates a rect, where X1,Y1 and X2,Y2 are the coordinates of opposite corners","a unit rect, which is a rect with all fields between 0 and 1; it represents a \"relative\" rect within another (absolute) rect(e.g. a unit rect x=0,y=0 , w=0.5,h=0.5 is the quarter portion closest to the origin); please note that hs.geometry makes no distinction internally between regular rects and unit rects; you can convert to and from as needed via the appropriate methods","An hs.geometry object can be:","hs.geometry(nil,nil,W,H) creates a size","hs.geometry(X,Y,W,H) creates a rect given its width and height from a corner","hs.geometry(X,Y) creates a point","Utility object to represent points, sizes and rects in a bidimensional plane","WxH or W*H creates a size","X Y or X,Y creates a point","X Y/WxH or X,Y W*H(or variations thereof) creates a rect given its width and height from a corner","X1,Y1X2,Y2 or X1 Y1 X2 Y2(or variations thereof) creates a rect given two opposite corners","You can create these objects in many different ways, via my_obj=hs.geometry.new(...) or simply my_obj=hs.geometry(...) by passing any of the following:","You can use any of these anywhere an hs.geometry object is expected in Hammerspoon; the constructor will be called for you."]},{"l":"API Overview","p":["(#x)","angle","angleTo","area","aspect","bottomright","center","Constructors- API calls which return an object, typically one that offers API methods","copy","distance","equals","Fields- Variables which can only be accessed from an object returned by a constructor","fit","floor","fromUnitRect","h","inside","intersect","length","Methods- API calls which can only be made on an object returned by a constructor","move","new","normalize","point","rect","rotateCCW","scale","size","string","table","topleft","toUnitRect","type","union","vector","w","wh","x1","x2","x2y2","xy","y","y1","y2"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"copy","p":["Signature","hs.geometry.copy(geom) - hs.geometry object","Type","Constructor","Description","Creates a copy of an hs.geometry object","Parameters","geom - an hs.geometry object to copy","Returns","a newly created copy of the hs.geometry object","Notes"]},{"l":"new","p":["Signature","hs.geometry.new(...) - hs.geometry object","Type","Constructor","Description","Creates a new hs.geometry object","Parameters","... - see the module description at the top","Returns","a newly created hs.geometry object","Notes"]},{"l":"point","p":["Signature","hs.geometry.point(x, y) - hs.geometry point","Type","Constructor","Description","Convenience function for creating a point object","Parameters","x - A number containing the horizontal co-ordinate of the point y - A number containing the vertical co-ordinate of the point","Returns","An hs.geometry point object","Notes"]},{"l":"rect","p":["Signature","hs.geometry.rect(x, y, w, h) - hs.geometry rect","Type","Constructor","Description","Convenience function for creating a rect-table","Parameters","x - A number containing the horizontal co-ordinate of the top-left point of the rect y - A number containing the vertical co-ordinate of the top-left point of the rect w - A number containing the width of the rect h - A number containing the height of the rect","Returns","An hs.geometry rect object","Notes"]},{"l":"size","p":["Signature","hs.geometry.size(w, h) - hs.geometry size","Type","Constructor","Description","Convenience function for creating a size object","Parameters","w - A number containing a width h - A number containing a height","Returns","An hs.geometry size object","Notes"]},{"l":"Fields"},{"l":"area","p":["Signature","hs.geometry.area","Type","Field","Description","A number representing the area of this rect or size; changing it will scale the rect/size - see hs.geometry:scale()"]},{"l":"aspect","p":["Signature","hs.geometry.aspect","Type","Field","Description","A number representing the aspect ratio of this rect or size; changing it will reshape the rect/size, keeping its area and center constant"]},{"l":"bottomright","p":["Signature","hs.geometry.bottomright","Type","Field","Description","Alias for x2y2"]},{"l":"center","p":["Signature","hs.geometry.center","Type","Field","Description","A point representing the geometric center of this rect or the midpoint of this vector2; changing it will move the rect/vector accordingly"]},{"l":"h","p":["Signature","hs.geometry.h","Type","Field","Description","The height of this rect or size; changing it will keep the rect's x,y corner constant"]},{"l":"length","p":["Signature","hs.geometry.length","Type","Field","Description","A number representing the length of the diagonal of this rect, or the length of this vector2; changing it will scale the rect/vector - see hs.geometry:scale()"]},{"l":"string","p":["Signature","hs.geometry.string","Type","Field","Description","The X,Y/WxH string for this hs.geometry object ( reduced precision); useful e.g. for logging"]},{"l":"table","p":["Signature","hs.geometry.table","Type","Field","Description","The {x=X,y=Y,w=W,h=H} table for this hs.geometry object; useful e.g. for serialization/deserialization"]},{"l":"topleft","p":["Signature","hs.geometry.topleft","Type","Field","Description","Alias for xy"]},{"l":"w","p":["Signature","hs.geometry.w","Type","Field","Description","The width of this rect or size; changing it will keep the rect's x,y corner constant"]},{"l":"wh","p":["Signature","hs.geometry.wh","Type","Field","Description","The size component for this hs.geometry object; setting this to a new size will keep the rect's x,y corner constant"]},{"l":"x","p":["Signature","hs.geometry.x","Type","Field","Description","The x coordinate for this point or rect's corner; changing it will move the rect but keep the same width and height"]},{"l":"x1","p":["Signature","hs.geometry.x1","Type","Field","Description","Alias for x"]},{"l":"x2","p":["Signature","hs.geometry.x2","Type","Field","Description","The x coordinate for the second corner of this rect; changing it will affect the rect's width"]},{"l":"x2y2","p":["Signature","hs.geometry.x2y2","Type","Field","Description","The point denoting the other corner of this hs.geometry object; setting this to a new point will change the rect's width and height"]},{"l":"xy","p":["Signature","hs.geometry.xy","Type","Field","Description","The point component for this hs.geometry object; setting this to a new point will move the rect but keep the same width and height"]},{"l":"y","p":["Signature","hs.geometry.y","Type","Field","Description","The y coordinate for this point or rect's corner; changing it will move the rect but keep the same width and height"]},{"l":"y1","p":["Signature","hs.geometry.y1","Type","Field","Description","Alias for y"]},{"l":"y2","p":["Signature","hs.geometry.y2","Type","Field","Description","The y coordinate for the second corner of this rect; changing it will affect the rect's height"]},{"l":"Methods"},{"l":"angle","p":["Signature","hs.geometry:angle() - number","Type","Method","Description","Returns the angle between the positive x axis and this vector2","Parameters","None","Returns","a number representing the angle in radians","Notes"]},{"l":"angleTo","p":["Signature","hs.geometry:angleTo(point) - number","Type","Method","Description","Returns the angle between the positive x axis and the vector connecting this point or rect's center to another point or rect's center","Parameters","point - an hs.geometry object, or a table or string or parameter list to construct one; if a rect, uses the rect's center","Returns","a number representing the angle in radians","Notes"]},{"l":"distance","p":["Signature","hs.geometry:distance(point) - number","Type","Method","Description","Finds the distance between this point or rect's center and another point or rect's center","Parameters","point - an hs.geometry object, or a table or string or parameter list to construct one; if a rect, uses the rect's center","Returns","a number indicating the distance","Notes"]},{"l":"equals","p":["Signature","hs.geometry:equals(other) - boolean","Type","Method","Description","Checks if two geometry objects are equal","Parameters","other - another hs.geometry object, or a table or string or parameter list to construct one","Returns","true if this hs.geometry object perfectly overlaps other, false otherwise","Notes"]},{"l":"fit","p":["Signature","hs.geometry:fit(bounds) - hs.geometry object","Type","Method","Description","Ensure this rect is fully inside bounds, by scaling it down if it's larger (preserving its aspect ratio) and moving it if necessary","Parameters","bounds - an hs.geometry rect object, or a table or string or parameter list to construct one, indicating the rect that must fully contain this rect","Returns","this hs.geometry object for method chaining","Notes"]},{"l":"floor","p":["Signature","hs.geometry:floor() - hs.geometry object","Type","Method","Description","Truncates all coordinates in this object to integers","Parameters","None","Returns","this hs.geometry point for method chaining","Notes"]},{"l":"fromUnitRect","p":["Signature","hs.geometry:fromUnitRect(frame) - hs.geometry rect","Type","Method","Description","Converts a unit rect within a given frame into a rect","Parameters","frame - an hs.geometry rect (with w and h>0)","Returns","An hs.geometry rect object","Notes"]},{"l":"inside","p":["Signature","hs.geometry:inside(rect) - boolean","Type","Method","Description","Checks if this hs.geometry object lies fully inside a given rect","Parameters","rect - an hs.geometry rect, or a table or string or parameter list to construct one","Returns","true if this point/rect lies fully inside the given rect, false otherwise","Notes"]},{"l":"intersect","p":["Signature","hs.geometry:intersect(rect) - hs.geometry rect","Type","Method","Description","Returns the intersection rect between this rect and another rect","Parameters","rect - an hs.geometry rect, or a table or string or parameter list to construct one","Returns","a new hs.geometry rect","Notes","If the two rects don't intersect, the result rect will be a \"projection\" of the second rect onto this rect's closest edge or corner along the x or y axis; the w and/or h fields in the result rect will be 0."]},{"l":"move","p":["Signature","hs.geometry:move(point) - hs.geometry object","Type","Method","Description","Moves this point/rect","Parameters","point - an hs.geometry object, or a table or string or parameter list to construct one, indicating the x and y displacement to apply","Returns","this hs.geometry object for method chaining","Notes"]},{"l":"normalize","p":["Signature","hs.geometry:normalize() - point","Type","Method","Description","Normalizes this vector2","Parameters","None","Returns","this hs.geometry point for method chaining","Notes"]},{"l":"rotateCCW","p":["Signature","hs.geometry:rotateCCW(aroundpoint, ntimes) - hs.geometry point","Type","Method","Description","Rotates a point around another point N times","Parameters","aroundpoint - an hs.geometry point to rotate this point around ntimes - the number of times to rotate, defaults to 1","Returns","A new hs.geometry point containing the location of the rotated point","Notes"]},{"l":"scale","p":["Signature","hs.geometry:scale(size) - hs.geometry object","Type","Method","Description","Scales this vector2/size, or this rect keeping its center constant","Parameters","size - an hs.geometry object, or a table or string or parameter list to construct one, indicating the factors for scaling this rect's width and height; if a number, the rect will be scaled by the same factor in both axes","Returns","this hs.geometry object for method chaining","Notes"]},{"l":"toUnitRect","p":["Signature","hs.geometry:toUnitRect(frame) - hs.geometry unit rect","Type","Method","Description","Converts a rect into its unit rect within a given frame","Parameters","frame - an hs.geometry rect (with w and h>0)","Returns","An hs.geometry unit rect object","Notes","The resulting unit rect is always clipped within frame's bounds (via hs.geometry:intersect()); if frame does not encompass this rect no error will be thrown, but the resulting unit rect won't be a direct match with this rect(i.e. calling :fromUnitRect(frame) on it will return a different rect)"]},{"l":"type","p":["Signature","hs.geometry:type() - string","Method","Description","Returns the type of an hs.geometry object","Parameters","None","Returns","a string describing the type of this hs.geometry object, i.e. 'point', 'size', 'rect' or 'unitrect'; nil if not a valid object","Notes"]},{"l":"union","p":["Signature","hs.geometry:union(rect) - hs.geometry rect","Type","Method","Description","Returns the smallest rect that encloses both this rect and another rect","Parameters","rect - an hs.geometry rect, or a table or string or parameter list to construct one","Returns","a new hs.geometry rect","Notes"]},{"l":"vector","p":["Signature","hs.geometry:vector(point) - point","Type","Method","Description","Returns the vector2 from this point or rect's center to another point or rect's center","Parameters","point - an hs.geometry object, or a table or string or parameter list to construct one; if a rect, uses the rect's center","Returns","an hs.geometry point","Notes"]}],[{"i":"hsgrid","l":"hs.grid","p":["Move/resize windows within a grid","The grid partitions your screens for the purposes of window management. The default layout of the grid is 3 columns by 3 rows. You can specify different grid layouts for different screens and/or screen resolutions.","Windows that are aligned with the grid have their location and size described as a cell. Each cell is an hs.geometry rect with these fields:","x - The column of the left edge of the window","y - The row of the top edge of the window","w - The number of columns the window occupies","h - The number of rows the window occupies","For a grid of 3x3:","a cell '0,0 1x1' will be in the upper-left corner","a cell '2,0 1x1' will be in the upper-right corner","and so on...","Additionally, a modal keyboard driven interface for interactive resizing is provided via hs.grid.show(); The grid will be overlaid on the focused or frontmost window's screen with keyboard hints. To resize/move the window, you can select the corner cells of the desired position. For a move-only, you can select a cell and confirm with 'return'. The selected cell will become the new upper-left of the window. You can also use the arrow keys to move the window onto adjacent screens, and the tab/shift-tab keys to cycle to the next/previous window. Once you selected a cell, you can use the arrow keys to navigate through the grid. In this case, the grid will highlight the selected cells. After highlighting enough cells, press enter to move/resize the window to the highlighted area."]},{"l":"API Overview","p":["adjustWindow","Functions- API calls offered directly by the extension","get","getCell","getGrid","getGridFrame","hide","HINTS","maximizeWindow","pushWindowDown","pushWindowLeft","pushWindowRight","pushWindowUp","resizeWindowShorter","resizeWindowTaller","resizeWindowThinner","resizeWindowWider","set","setGrid","setMargins","show","snap","toggleShow","ui","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"HINTS","p":["Signature","hs.grid.HINTS","Type","Variable","Description","A bidimensional array (table of tables of strings) holding the keyboard hints (as per hs.keycodes.map) to be used for the interactive resizing interface.","Notes","hs.inspect(hs.grid.HINTS) from the console will show you how the table is built hs.grid.show() When displaying interactive grid, if gird dimensions ( hs.grid.setGrid()) are greater than HINTS dimensions, then Hammerspoon merges few cells such that interactive grid dimensions do not exceed HINTS dimensions. This is done to make sure interactive grid cells do not run out of hints. The interactive grid ends up with cells of varying height and width. The actual grid is not affected. If you use API methods like hs.grid.pushWindowDown(), you will not face this issue at all. If you have a grid of higher dimensions and require an interactive gird that accurately models underlying grid then set HINTS variable to a table that has same dimensions as your grid. Following is an example of grid that has 16 columns/lilihs.grid.setGrid('16x4')/lilihs.grid.HINTS={/lili {'f1', 'f2' , 'f3' , 'f4' , 'f5', 'f6', 'f7', 'f8', 'f9', 'f10', 'f11', 'f12', 'f13', 'f14', 'f15', 'f16'},/lili {'1' , 'f11', 'f15', 'f19', 'f3', '=' , ']' , '2' , '3' , '4' , '5' , '6' , '7' , '8' , '9' , '0' },/lili {'Q' , 'f12', 'f16', 'f20', 'f4', '-' , '[' , 'W' , 'E' , 'R' , 'T' , 'Y' , 'U' , 'I' , 'O' , 'P' },/lili {'A' , 'f13', 'f17', 'f1' , 'f5', 'f7', '\\\\', 'S' , 'D' , 'F' , 'G' , 'H' , 'J' , 'K' , 'L' , ',' },/lili {'X' , 'f14', 'f18', 'f2' , 'f6', 'f8', ';' , '/' , '.' , 'Z' , 'X' , 'C' , 'V' , 'B' , 'N' , 'M' }/lili}/lili"]},{"l":"ui","p":["Signature","hs.grid.ui","Type","Variable","Description","Allows customization of the modal resizing grid user interface"]},{"l":"Functions"},{"l":"adjustWindow","p":["Signature","hs.grid.adjustWindow(fn, window) - hs.grid","Type","Function","Description","Calls a user specified function to adjust a window's cell","Parameters","fn - a function that accepts a cell object as its only argument. The function should modify it as needed and return nothing window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes"]},{"l":"get","p":["Signature","hs.grid.get(win) - cell","Type","Function","Description","Gets the cell describing a window","Parameters","an hs.window object to get the cell of","Returns","a cell object (i.e. an hs.geometry rect), or nil if an error occurred","Notes"]},{"l":"getCell","p":["Signature","hs.grid.getCell(cell, screen) - hs.geometry","Type","Function","Description","Gets the hs.geometry rect for a cell on a particular screen","Parameters","cell - a cell object, i.e. an hs.geometry rect or argument to construct one screen - an hs.screen object or argument to hs.screen.find() where the cell is located","Returns","the hs.geometry rect for a cell on a particular screen or nil if the screen isn't found","Notes"]},{"l":"getGrid","p":["Signature","hs.grid.getGrid(screen) - hs.geometry size","Type","Function","Description","Gets the defined grid size for a given screen or screen resolution","Parameters","screen - an hs.screen object, or a valid argument to hs.screen.find(), indicating the screen to get the grid of; if omitted or nil, gets the default grid, which is used when no specific grid is found for any given screen/resolution","Returns","an hs.geometry size object indicating the number of columns and rows in the grid","Notes","if a grid was not set for the specified screen or geometry, the default grid will be returned Usage: local mygrid = hs.grid.getGrid('1920x1080') -- gets the defined grid for all screens with a 1920x1080 resolution local defgrid=hs.grid.getGrid() defgrid.w=defgrid.w+2 -- increases the number of columns in the default grid by 2"]},{"l":"getGridFrame","p":["Signature","hs.grid.getGridFrame(screen) - hs.geometry rect","Type","Function","Description","Gets the defined grid frame for a given screen or screen resolution.","Parameters","screen - an hs.screen object, or a valid argument to hs.screen.find(), indicating the screen to get the grid frame of","Returns","an hs.geometry rect object indicating the frame used by the grid for the given screen; if no custom frame was given via hs.grid.setGrid(), returns the screen's frame","Notes"]},{"l":"hide","p":["Signature","hs.grid.hide()","Type","Function","Description","Hides the grid, if visible, and exits the modal resizing mode.","Parameters","None","Returns","Notes","Call this function if you need to make sure the modal is exited without waiting for the user to press esc. If an exit callback was provided when invoking the modal interface, calling .hide() will call it"]},{"l":"maximizeWindow","p":["Signature","hs.grid.maximizeWindow(window) - hs.grid","Type","Function","Description","Moves and resizes a window to fill the entire grid","Parameters","window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes"]},{"l":"pushWindowDown","p":["Signature","hs.grid.pushWindowDown(window) - hs.grid","Type","Function","Description","Moves a window one grid cell down the screen, or onto the adjacent screen's grid when necessary","Parameters","window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes"]},{"l":"pushWindowLeft","p":["Signature","hs.grid.pushWindowLeft(window) - hs.grid","Type","Function","Description","Moves a window one grid cell to the left, or onto the adjacent screen's grid when necessary","Parameters","window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes"]},{"l":"pushWindowRight","p":["Signature","hs.grid.pushWindowRight(window) - hs.grid","Type","Function","Description","Moves a window one cell to the right, or onto the adjacent screen's grid when necessary","Parameters","window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes"]},{"l":"pushWindowUp","p":["Signature","hs.grid.pushWindowUp(window) - hs.grid","Type","Function","Description","Moves a window one grid cell up the screen, or onto the adjacent screen's grid when necessary","Parameters","window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes"]},{"l":"resizeWindowShorter","p":["Signature","hs.grid.resizeWindowShorter(window) - hs.grid","Type","Function","Description","Resizes a window so its bottom edge moves one grid cell higher","Parameters","window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes"]},{"l":"resizeWindowTaller","p":["Signature","hs.grid.resizeWindowTaller(window) - hs.grid","Type","Function","Description","Resizes a window so its bottom edge moves one grid cell lower","Parameters","window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes","if the window hits the bottom edge of the screen and is asked to become taller, its top edge will shift further up"]},{"l":"resizeWindowThinner","p":["Signature","hs.grid.resizeWindowThinner(window) - hs.grid","Type","Function","Description","Resizes a window to be one cell thinner","Parameters","window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes"]},{"l":"resizeWindowWider","p":["Signature","hs.grid.resizeWindowWider(window) - hs.grid","Type","Function","Description","Resizes a window to be one cell wider","Parameters","window - an hs.window object to act on; if omitted, the focused or frontmost window will be used","Returns","the hs.grid module for method chaining","Notes","if the window hits the right edge of the screen and is asked to become wider, its left edge will shift further left"]},{"l":"set","p":["Signature","hs.grid.set(win, cell, screen) - hs.grid","Type","Function","Description","Sets the cell for a window on a particular screen","Parameters","win - an hs.window object representing the window to operate on cell - a cell object, i.e. an hs.geometry rect or argument to construct one, to apply to the window screen - (optional) an hs.screen object or argument to hs.screen.find() representing the screen to place the window on; if omitted the window's current screen will be used","Returns","the hs.grid module for method chaining","Notes"]},{"l":"setGrid","p":["Signature","hs.grid.setGrid(grid,screen,frame) - hs.grid","Type","Function","Description","Sets the grid size for a given screen or screen resolution","Parameters","grid - an hs.geometry size, or argument to construct one, indicating the number of columns and rows for the grid screen - an hs.screen object, or a valid argument to hs.screen.find(), indicating the screen(s) to apply the grid to; if omitted or nil, sets the default grid, which is used when no specific grid is found for any given screen/resolution frame - an hs.geometry rect object indicating the frame that the grid will occupy for the given screen; if omitted or nil, the screen's :frame() will be used; use this argument if you want e.g. to leave a strip of the desktop unoccluded when using GeekTool or similar. The screen argument must be non-nil when setting a custom grid frame.","Returns","the hs.grid module for method chaining","Notes"]},{"l":"setMargins","p":["Signature","hs.grid.setMargins(margins) - hs.grid","Type","Function","Description","Sets the margins between windows","Parameters","margins - an hs.geometry point or size, or argument to construct one, indicating the desired margins between windows in screen points","Returns","the hs.grid module for method chaining","Notes"]},{"l":"show","p":["Signature","hs.grid.show([exitedCallback][, multipleWindows])","Type","Function","Description","Shows the grid and starts the modal interactive resizing process for the focused or frontmost window.","Parameters","exitedCallback - (optional) a function that will be called after the user dismisses the modal interface multipleWindows - (optional) if true, the resizing grid won't automatically go away after selecting the desired cells for the frontmost window; instead, it'll switch to the next window","Returns","None","Notes","In most cases this function should be invoked via hs.hotkey.bind with some keyboard shortcut. In the modal interface, press the arrow keys to jump to adjacent screens; spacebar to maximize/unmaximize; esc to quit without any effect Pressing tab or shift-tab in the modal interface will cycle to the next or previous window; if multipleWindows is false or omitted, the first press will just enable the multiple windows behaviour The keyboard hints assume a QWERTY layout; if you use a different layout, change hs.grid.HINTS accordingly If grid dimensions are greater than 10x10 then you may have to change hs.grid.HINTS depending on your requirements. See note in HINTS."]},{"l":"snap","p":["Signature","hs.grid.snap(win) - hs.grid","Type","Function","Description","Snaps a window into alignment with the nearest grid lines","Parameters","win - an hs.window object to snap","Returns","the hs.grid module for method chaining","Notes"]},{"l":"toggleShow","p":["Signature","hs.grid.toggleShow([exitedCallback][, multipleWindows])","Type","Function","Description","Toggles the grid and modal resizing mode - see hs.grid.show() and hs.grid.hide()","Parameters","exitedCallback - (optional) a function that will be called after the user dismisses the modal interface multipleWindows - (optional) if true, the resizing grid won't automatically go away after selecting the desired cells for the frontmost window; instead, it'll switch to the next window","Returns","None","Notes"]}],[{"i":"hshash","l":"hs.hash","p":["Various hashing algorithms"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","bMD5","bSHA1","bSHA256","bSHA512","hmacMD5","hmacSHA1","hmacSHA256","hmacSHA512","MD5","SHA1","SHA256","SHA512"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"bMD5","p":["Signature","hs.hash.bMD5(data) - data","Type","Function","Description","Calculates a binary MD5 hash","Parameters","data - A string containing some data to hash","Returns","A string containing the binary hash of the supplied data","Notes"]},{"l":"bSHA1","p":["Signature","hs.hash.bSHA1(data) - data","Type","Function","Description","Calculates a binary SHA1 hash","Parameters","data - A string containing some data to hash","Returns","A string containing the binary hash of the supplied data","Notes"]},{"l":"bSHA256","p":["Signature","hs.hash.bSHA256(data) - data","Type","Function","Description","Calculates a binary SHA256 hash","Parameters","data - A string containing some data to hash","Returns","A string containing the binary hash of the supplied data","Notes"]},{"l":"bSHA512","p":["Signature","hs.hash.bSHA512(data) - data","Type","Function","Description","Calculates a binary SHA512 hash","Parameters","data - A string containing some data to hash","Returns","A string containing the binary hash of the supplied data","Notes"]},{"l":"hmacMD5","p":["Signature","hs.hash.hmacMD5(key, data) - string","Type","Function","Description","Calculates an HMAC using a key and an MD5 hash","Parameters","key - A string containing a secret key to use data - A string containing the data to hash","Returns","A string containing the hash of the supplied data","Notes"]},{"l":"hmacSHA1","p":["Signature","hs.hash.hmacSHA1(key, data) - string","Type","Function","Description","Calculates an HMAC using a key and a SHA1 hash","Parameters","key - A string containing a secret key to use data - A string containing the data to hash","Returns","A string containing the hash of the supplied data","Notes"]},{"l":"hmacSHA256","p":["Signature","hs.hash.hmacSHA256(key, data) - string","Type","Function","Description","Calculates an HMAC using a key and a SHA256 hash","Parameters","key - A string containing a secret key to use data - A string containing the data to hash","Returns","A string containing the hash of the supplied data","Notes"]},{"l":"hmacSHA512","p":["Signature","hs.hash.hmacSHA512(key, data) - string","Type","Function","Description","Calculates an HMAC using a key and a SHA512 hash","Parameters","key - A string containing a secret key to use data - A string containing the data to hash","Returns","A string containing the hash of the supplied data","Notes"]},{"l":"MD5","p":["Signature","hs.hash.MD5(data) - string","Type","Function","Description","Calculates an MD5 hash","Parameters","data - A string containing some data to hash","Returns","A string containing the hash of the supplied data, encoded as hexadecimal","Notes"]},{"l":"SHA1","p":["Signature","hs.hash.SHA1(data) - string","Type","Function","Description","Calculates an SHA1 hash","Parameters","data - A string containing some data to hash","Returns","A string containing the hash of the supplied data, encoded as hexadecimal","Notes"]},{"l":"SHA256","p":["Signature","hs.hash.SHA256(data) - string","Type","Function","Description","Calculates an SHA256 hash","Parameters","data - A string containing some data to hash","Returns","A string containing the hash of the supplied data, encoded as hexadecimal","Notes"]},{"l":"SHA512","p":["Signature","hs.hash.SHA512(data) - string","Type","Function","Description","Calculates an SHA512 hash","Parameters","data - A string containing some data to hash","Returns","A string containing the hash of the supplied data, encoded as hexadecimal","Notes"]}],[{"i":"hshid","l":"hs.hid","p":["HID interface for Hammerspoon, controls and queries caps lock state","Portions sourced from ( https://discussions.apple.com/thread/7094207)."]},{"l":"Submodules","p":["hs.hid.led"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","get","set","toggle"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"get","p":["Signature","hs.hid.capslock.get() - bool","Type","Function","Description","Checks the state of the caps lock via HID","Parameters","None","Returns","true if on, false if off","Notes"]},{"l":"set","p":["Signature","hs.hid.capslock.set(state) - bool","Type","Function","Description","Assigns capslock to the desired state","Parameters","state - A boolean indicating desired state","Returns","true if on, false if off","Notes"]},{"l":"toggle","p":["Signature","hs.hid.capslock.toggle() - bool","Type","Function","Description","Toggles the state of caps lock via HID","Parameters","None","Returns","true if on, false if off","Notes"]}],[{"i":"hshidled","l":"hs.hid.led","p":["HID LED interface for Hammerspoon, controls the state of keyboard LEDs"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","set"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"set","p":["Signature","hs.hid.led.set(name, state) - bool","Type","Function","Description","Assigns HID LED to the desired state","Parameters","name - LED name: \"caps\", \"scroll\" or \"num\" state - A boolean indicating desired state","Returns","true if success, false if error","Notes","This function controls the LED state only, to modify capslock state, use hs.hid.capslock.set"]}],[{"i":"hshints","l":"hs.hints","p":["Switch focus with a transient per-application keyboard shortcut"]},{"l":"API Overview","p":["Variables- Configurable values","fontName","fontSize","hintChars","iconAlpha","showTitleThresh","style","titleMaxSize","Functions- API calls offered directly by the extension","windowHints"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"fontName","p":["Signature","hs.hints.fontName","Type","Variable","Description","A fully specified family-face name, preferably the PostScript name, such as Helvetica-BoldOblique or Times-Roman. (The Font Book app displays PostScript names of fonts in the Font Info panel.)"]},{"l":"fontSize","p":["Signature","hs.hints.fontSize","Type","Variable","Description","The size of font that should be used. A value of 0.0 will use the default size."]},{"l":"hintChars","p":["Signature","hs.hints.hintChars","Type","Variable","Description","This controls the set of characters that will be used for window hints. They must be characters found in hs.keycodes.map"]},{"l":"iconAlpha","p":["Signature","hs.hints.iconAlpha","Type","Variable","Description","Opacity of the application icon. Default is 0.95."]},{"l":"showTitleThresh","p":["Signature","hs.hints.showTitleThresh","Type","Variable","Description","If there are less than or equal to this many windows on screen their titles will be shown in the hints."]},{"l":"style","p":["Signature","hs.hints.style","Type","Variable","Description","If this is set to \"vimperator\", every window hint starts with the first character"]},{"l":"titleMaxSize","p":["Signature","hs.hints.titleMaxSize","Type","Variable","Description","If the title is longer than maxSize, the string is truncated, -1 to disable, valid value is >= 6"]},{"l":"Functions"},{"l":"windowHints","p":["Signature","hs.hints.windowHints([windows, callback, allowNonStandard])","Type","Function","Description","Displays a keyboard hint for switching focus to each window","Parameters","windows - An optional table containing some hs.window objects. If this value is nil, all windows will be hinted callback - An optional function that will be called when a window has been selected by the user. The function will be called with a single argument containing the hs.window object of the window chosen by the user allowNonStandard - An optional boolean. If true, all windows will be included, not just standard windows","Returns","None","Notes","If there are more windows open than there are characters available in hs.hints.hintChars, multiple characters will be used If hints.style is set to \"vimperator\", every window hint is prefixed with the first character of the parent application's name To display hints only for the currently focused application, try something like: hs.hints.windowHints(hs.window.focusedWindow():application():allWindows())"]}],[{"i":"hshost","l":"hs.host","p":["Inspect information about the machine Hammerspoon is running on","Notes:","The network/hostname calls can be slow, as network resolution calls can be called, which are synchronous and will block Hammerspoon until they complete."]},{"l":"Submodules","p":["hs.host.locale"]},{"l":"API Overview","p":["addresses","cpuUsage","cpuUsageTicks","Functions- API calls offered directly by the extension","globallyUniqueString","gpuVRAM","idleTime","interfaceStyle","localizedName","names","operatingSystemVersion","operatingSystemVersionString","thermalState","uuid","vmStat","volumeInformation"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"addresses","p":["Signature","hs.host.addresses() - table","Type","Function","Description","Gets a list of network addresses for the current machine","Parameters","None","Returns","A table of strings containing the network addresses of the current machine","Notes","The results will include IPv4 and IPv6 addresses"]},{"l":"cpuUsage","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.host.cpuUsage([period], [callback]) - table | | Type | Function | | Description | Query CPU usage statistics for a given time interval using hs.host.cpuUsageTicks and return the results as percentages. | | Parameters | period - an optional value specifying the time between samples collected for calculating CPU usage statistics. If callback is not provided, this is an optional integer, default 100000, specifying the number of microseconds to block between samples collected. Note that Hammerspoon will block for this period of time during execution of this function. If callback is provided, this is an optional number, default 1.0, specifying the number of seconds between samples collected. Hammerspoon will not block during this time period.callback - an optional callback function which will receive the cpu usage statistics in a table, described below, as its sole argument. | | Returns | If a callback function is not provided, this function will return a table containing the following: Individual tables, indexed by the core number, for each CPU core with the following keys in each subtable: user -- percentage of CPU time occupied by user level processes. system -- percentage of CPU time occupied by system (kernel) level processes. nice -- percentage of CPU time occupied by user level processes with a positive nice value. (See notes below) active -- For convenience, when you just want the total CPU usage, this is the sum of user, system, and nice. idle -- percentage of CPU time spent idle The key overall containing the same keys as described above but based upon the average of all cores combined. The key n containing the number of cores detected.If a callback function is provided, this function will return a placeholder table with the following metamethods: hs.host.cpuUsage:finished() - returns a boolean indicating if the second CPU sample has been collected yet (true) or not (false). hs.host.cpuUsage:stop() - abort the sample collection. The callback function will not be invoked. The results of the cpu statistics will be submitted as a table, described above, to the callback function. | | Notes | If no callback function is provided, Hammerspoon will block (i.e. no other Hammerspoon activity can occur) during execution of this function for period microseconds (1 second = 1,000,000 microseconds). The default period is 1/10 of a second. If period is too small, it is possible that some of the CPU statistics may result in nan (not-a-number).For reference, the top command has a default period between samples of 1 second.The subtables for each core and overall have a __tostring() metamethod which allows listing it's contents in the Hammerspoon console by typing hs.host.cpuUsage()[#] where # is the core you are interested in or the string \"overall\". |"]},{"l":"cpuUsageTicks","p":["Signature","hs.host.cpuUsageTicks() - table","Type","Function","Description","Returns a table containing the current cpu usage information for the system in ticks since the most recent system boot.","Parameters","None","Returns","A table containing the following: Individual tables, indexed by the core number, for each CPU core with the following keys in each subtable: user -- number of ticks the cpu core has spent in user mode since system startup. system -- number of ticks the cpu core has spent in system mode since system startup. nice active -- For convenience, when you just want the total CPU usage, this is the sum of user, system, and nice. idle -- number of ticks the cpu core has spent idle The key overall containing the same keys as described above but based upon the combined total of all cpu cores for the system. The key n containing the number of cores detected.","Notes","CPU mode ticks are updated during system interrupts and are incremented based upon the mode the CPU is in at the time of the interrupt. By its nature, this is always going to be approximate, and a single call to this function will return the current tick values since the system was last rebooted. To generate a snapshot of the system's usage \"at this moment\", you must take two samples and calculate the difference between them. The hs.host.cpuUsage function is a wrapper which does this for you and returns the cpu usage statistics as a percentage of the total number of ticks which occurred during the sample period you specify when invoking hs.host.cpuUsage. Historically on Unix based systems, the nice cpu state represents processes for which the execution priority has been reduced to allow other higher priority processes access to more system resources. The source code for the version of the XNU Kernel currently provided by Apple (for macOS 10.12.3) shows this value as returned by the host_processor_info as hardcoded to 0. For completeness, this value is included in the statistics returned by this function, but unless Apple makes a change in the future, it is not expected to provide any useful information. Adapted primarily from code found at http://stackoverflow.com/questions/6785069/get-cpu-percent-usage"]},{"l":"globallyUniqueString","p":["Signature","hs.host.globallyUniqueString() - string","Type","Function","Description","Returns a newly generated global unique identifier as a string","Parameters","None","Returns","a newly generated global unique identifier as a string","Notes","See also hs.host.uuid The global unique identifier for a process includes the host name, process ID, and a time stamp, which ensures that the ID is unique for the network. This property generates a new string each time it is invoked, and it uses a counter to guarantee that strings are unique. This is often used as a file or directory name in conjunction with hs.host.temporaryDirectory() when creating temporary files."]},{"l":"gpuVRAM","p":["Signature","hs.host.gpuVRAM() - table","Type","Function","Description","Returns the model and VRAM size for the installed GPUs.","Parameters","None","Returns","A table whose key-value pairs represent the GPUs for the current system. Each key is a string containing the name for an installed GPU and its value is the GPU's VRAM size in MB. If the VRAM size cannot be determined for a specific GPU, its value will be -1.0.","Notes","If your GPU reports -1.0 as the memory size, please submit an issue to the Hammerspoon github repository and include any information that you can which may be relevant, such as: Macintosh model, macOS version, is the GPU built in or a third party expansion card, the GPU model and VRAM as best you can determine (see the System Information application in the Utilities folder and look at the Graphics/Display section) and anything else that you think might be important."]},{"l":"idleTime","p":["Signature","hs.host.idleTime() - seconds","Type","Function","Description","Returns the number of seconds the computer has been idle.","Parameters","None","Returns","the idle time in seconds","Notes","Idle time is defined as no mouse move nor keyboard entry, etc. and is determined by querying the HID (Human Interface Device) subsystem. This code is directly inspired by code found at http://www.xs-labs.com/en/archives/articles/iokit-idle-time"]},{"l":"interfaceStyle","p":["Signature","hs.host.interfaceStyle() - string","Type","Function","Description","Returns the OS X interface style for the current user.","Parameters","None","Returns","A string representing the current user interface style, or nil if the default style is in use.","Notes","As of OS X 10.10.4, other than the default style, only \"Dark\" is recognized as a valid style."]},{"l":"localizedName","p":["Signature","hs.host.localizedName() - string","Type","Function","Description","Gets the name of the current machine, as displayed in the Finder sidebar","Parameters","None","Returns","A string containing the name of the current machine","Notes"]},{"l":"names","p":["Signature","hs.host.names() - table","Type","Function","Description","Gets a list of network names for the current machine","Parameters","None","Returns","A table of strings containing the network names of the current machine","Notes","This function should be used sparingly, as it may involve blocking network access to resolve hostnames"]},{"l":"operatingSystemVersion","p":["Signature","hs.host.operatingSystemVersion() - table","Type","Function","Description","The operating system version as a table containing the major, minor, and patch numbers.","Parameters","None","Returns","The operating system version as a table containing the keys major, minor, and patch corresponding to the version number determined and a key named \"exact\" or \"approximation\" depending upon the method used to determine the OS Version information.","Notes","Prior to 10.10 (Yosemite), there was no definitive way to reliably get an exact OS X version number without either mapping it to the Darwin kernel version, mapping it to the AppKitVersionNumber (the recommended method), or parsing the result of NSProcessingInfo's operatingSystemVersionString selector, which Apple states is not guaranteed to be reliably parsable. for OS X versions prior to 10.10, the version number is approximately determined by evaluating the AppKitVersionNumber. For these operating systems, the approximate key is defined and set to true, as the exact patch level cannot be definitively determined. for OS X Versions starting at 10.10 and going forward, an exact value for the version number can be determined with NSProcessingInfo's operatingSystemVersion selector and the exact key is defined and set to true if this method is used."]},{"l":"operatingSystemVersionString","p":["Signature","hs.host.operatingSystemVersionString() - string","Type","Function","Description","The operating system version as a human readable string.","Parameters","None","Returns","Notes","According to the OS X Developer documentation, \"The operating system version string is human readable, localized, and is appropriate for displaying to the user. This string is not appropriate for parsing.\""]},{"l":"thermalState","p":["Signature","hs.host.thermalState() - string","Type","Function","Description","The current thermal state of the computer, as a human readable string","Parameters","None","Returns","The system's thermal state as a human readable string","Notes"]},{"l":"uuid","p":["Signature","hs.host.uuid() - string","Type","Function","Description","Returns a newly generated UUID as a string","Parameters","None","Returns","a newly generated UUID as a string","Notes","See also hs.host.globallyUniqueString UUIDs (Universally Unique Identifiers), also known as GUIDs (Globally Unique Identifiers) or IIDs (Interface Identifiers), are 128-bit values. UUIDs created by NSUUID conform to RFC 4122 version 4 and are created with random bytes."]},{"l":"vmStat","p":["Signature","hs.host.vmStat() - table","Type","Function","Description","Returns a table containing virtual memory statistics for the current machine, as well as the page size (in bytes) and physical memory size (in bytes).","Parameters","None","Returns","A table containing the following keys: anonymousPages -- the total number of pages that are anonymous cacheHits -- number of object cache hits cacheLookups -- number of object cache lookups fileBackedPages -- the total number of pages that are file-backed (non-swap) memSize -- physical memory size in bytes pageIns -- the total number of requests for pages from a pager (such as the inode pager). pageOuts -- the total number of pages that have been paged out. pageSize -- page size in bytes pagesActive -- the total number of pages currently in use and pageable. pagesCompressed -- the total number of pages that have been compressed by the VM compressor. pagesCopyOnWrite -- the number of faults that caused a page to be copied (generally caused by copy-on-write faults). pagesDecompressed -- the total number of pages that have been decompressed by the VM compressor. pagesFree -- the total number of free pages in the system. pagesInactive -- the total number of pages on the inactive list. pagesPurgeable -- the total number of purgeable pages. pagesPurged -- the total number of pages that have been purged. pagesReactivated -- the total number of pages that have been moved from the inactive list to the active list (reactivated). pagesSpeculative -- the total number of pages on the speculative list. pagesThrottled -- the total number of pages on the throttled list (not wired but not pageable). pagesUsedByVMCompressor -- the number of pages used to store compressed VM pages. pagesWiredDown -- the total number of pages wired down. That is, pages that cannot be paged out. pagesZeroFilled -- the total number of pages that have been zero-filled on demand. swapIns -- the total number of compressed pages that have been swapped out to disk. swapOuts -- the total number of compressed pages that have been swapped back in from disk. translationFaults -- the number of times the \"vm_fault\" routine has been called. uncompressedPages -- the total number of pages (uncompressed) held within the compressor","Notes","The table returned has a __ tostring() metamethod which allows listing it's contents in the Hammerspoon console by typing hs.host.vmStats(). Except for the addition of cacheHits, cacheLookups, pageSize and memSize, the results for this function should be identical to the OS X command vm_stat. Adapted primarily from the source code to Apple's vm_stat command located at http://www.opensource.apple.com/source/system_cmds/system_cmds-643.1.1/vm_stat.tproj/vm_stat.c"]},{"l":"volumeInformation","p":["Signature","hs.host.volumeInformation([showHidden]) - table","Type","Function","Description","Returns a table of information about disk volumes attached to the system","Parameters","showHidden - An optional boolean, true to show hidden volumes, false to not show hidden volumes. Defaults to false.","Returns","A table of information, where the keys are the paths of disk volumes","Notes","The possible keys in the table are: NSURLVolumeTotalCapacityKey - Size of the volume in bytes NSURLVolumeAvailableCapacityKey - Available space on the volume in bytes NSURLVolumeIsAutomountedKey - Boolean indicating if the volume was automounted NSURLVolumeIsBrowsableKey - Boolean indicating if the volume can be browsed NSURLVolumeIsEjectableKey - Boolean indicating if the volume should be ejected before its media is removed NSURLVolumeIsInternalKey - Boolean indicating if the volume is an internal drive or an external drive NSURLVolumeIsLocalKey - Boolean indicating if the volume is a local or remote drive NSURLVolumeIsReadOnlyKey - Boolean indicating if the volume is read only NSURLVolumeIsRemovableKey - Boolean indicating if the volume's media can be physically ejected from the drive (e.g. a DVD) NSURLVolumeMaximumFileSizeKey - Maximum file size the volume can support, in bytes NSURLVolumeUUIDStringKey - The UUID of volume's filesystem NSURLVolumeURLForRemountingKey - For remote volumes, the network URL of the volume NSURLVolumeLocalizedNameKey - Localized version of the volume's name NSURLVolumeNameKey - The volume's name NSURLVolumeLocalizedFormatDescriptionKey - Localized description of the volume* Not all keys will be present for all volumes* The meanings of NSURLVolumeIsEjectableKey and NSURLVolumeIsRemovableKey are not generally useful for determining if a drive is removable in the modern sense (e.g. a USB drive) as much of this terminology dates back to when USB didn't exist and removable drives were things like Floppy/DVD drives. If you're trying to determine if a drive is not fixed into the computer, you may need to use a combination of these keys, but which exact combination you should use, is not consistent across macOS versions."]}],[{"i":"hshostlocale","l":"hs.host.locale","p":["Retrieve information about the user's Language and Region settings.","Locales encapsulate information about linguistic, cultural, and technological conventions and standards. Examples of information encapsulated by a locale include the symbol used for the decimal separator in numbers and the way dates are formatted. Locales are typically used to provide, format, and interpret information about and according to the user’s customs and preferences."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","availableLocales","current","details","localizedString","preferredLanguages","registerCallback","unregisterCallback"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"availableLocales","p":["Signature","hs.host.locale.availableLocales() - table","Type","Function","Description","Returns an array table containing the identifiers for the locales available on the system.","Parameters","None","Returns","an array table of strings specifying the locale identifiers recognized by this system.","Notes","these values can be used with hs.host.locale.details to get details for a specific locale."]},{"l":"current","p":["Signature","hs.host.locale.current() - string","Type","Function","Description","Returns an string specifying the user's currently selected locale identifier.","Parameters","None","Returns","a string specifying the identifier of the user's currently selected locale.","Notes","this value can be used with hs.host.locale.details to get details for the returned locale."]},{"l":"details","p":["Signature","hs.host.locale.details([identifier]) - table","Type","Function","Description","Returns a table containing information about the current or specified locale.","Parameters","identifier- an optional string, specifying the locale to display information about. If you do not specify an identifier, information about the user's currently selected locale is returned.","Returns","a table containing one or more of the following key-value pairs: alternateQuotationBeginDelimiterKey- A string containing the alternating begin quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate. alternateQuotationEndDelimiterKey- A string containing the alternate end quotation symbol associated with the locale. In some locales, when quotations are nested, the quotation characters alternate. calendar- A table containing key-value pairs describing for calendar associated with the locale. The table will contain one or more of the following pairs: AMSymbol- The AM symbol for time in the locale's calendar. calendarIdentifier- A string representing the calendar identity. eraSymbols- An array table of strings specifying the names of the eras as recognized in the locale's calendar. firstWeekday- The index in weekdaySymbols of the first weekday in the locale's calendar. longEraSymbols- An array table of strings specifying long names of the eras as recognized in the locale's calendar. minimumDaysInFirstWeek- The minimum number of days, an integer value, in the first week in the locale's calendar. monthSymbols- An array table of strings for the months of the year in the locale's calendar. PMSymbol- The PM symbol for time in the locale's calendar. quarterSymbols- An array table of strings for the quarters of the year in the locale's calendar. shortMonthSymbols- An array table of short strings for the months of the year in the locale's calendar. shortQuarterSymbols- An array table of short strings for the quarters of the year in the locale's calendar. shortStandaloneMonthSymbols- An array table of short standalone strings for the months of the year in the locale's calendar. shortStandaloneQuarterSymbols- An array table of short standalone strings for the quarters of the year in the locale's calendar. shortStandaloneWeekdaySymbols- An array table of short standalone strings for the days of the week in the locale's calendar. shortWeekdaySymbols- An array table of short strings for the days of the week in the locale's calendar. standaloneMonthSymbols- An array table of standalone strings for the months of the year in the locale's calendar. standaloneQuarterSymbols- An array table of standalone strings for the quarters of the year in the locale's calendar. standaloneWeekdaySymbols- An array table of standalone strings for the days of the week in the locale's calendar. veryShortMonthSymbols- An array table of very short strings for the months of the year in the locale's calendar. veryShortStandaloneMonthSymbols- An array table of very short standalone strings for the months of the year in the locale's calendar. veryShortStandaloneWeekdaySymbols- An array table of very short standalone strings for the days of the week in the locale's calendar. veryShortWeekdaySymbols- An array table of very short strings for the days of the week in the locale's calendar. weekdaySymbols- An array table of strings for the days of the week in the locale's calendar. collationIdentifier- A string containing the collation associated with the locale. collatorIdentifier- A string containing the collation identifier for the locale. countryCode- A string containing the locale country code. currencyCode- A string containing the currency code associated with the locale. currencySymbol- A string containing the currency symbol associated with the locale. decimalSeparator- A string containing the decimal separator associated with the locale. exemplarCharacterSet- An array table of strings which make up the exemplar character set for the locale. groupingSeparator- A string containing the numeric grouping separator associated with the locale. identifier- A string containing the locale identifier. languageCode- A string containing the locale language code. measurementSystem- A string containing the measurement system associated with the locale. quotationBeginDelimiterKey- A string containing the begin quotation symbol associated with the locale. quotationEndDelimiterKey- A string containing the end quotation symbol associated with the locale. scriptCode- A string containing the locale script code. temperatureUnit- A string containing the preferred measurement system for temperature. timeFormatIs24Hour- A boolean specifying whether time is expressed in a 24 hour format (true) or 12 hour format (false). usesMetricSystem- A boolean specifying whether or not the locale uses the metric system. variantCode- A string containing the locale variant code.","Notes","If you specify a locale identifier as an argument, it should be based on one of the strings returned by hs.host.locale.availableLocales. Use of an arbitrary string may produce unreliable or inconsistent results. Apple does not provide a documented method for retrieving the users preferences with respect to temperatureUnit or timeFormatIs24Hour. The methods used to determine these values are based on code from the following sources: temperatureUnit- http://stackoverflow.com/a/41263725 timeFormatIs24Hour- http://stackoverflow.com/a/1972487 If you are able to identify additional locale or regional settings that are not provided by this function and have a source which describes a reliable method to retrieve this information, please submit an issue at https://github.com/Hammerspoon/hammerspoon with the details."]},{"l":"localizedString","p":["Signature","hs.host.locale.localizedString(localeCode[, baseLocaleCode]) - string | nil, string | nil","Type","Function","Description","Returns the localized string for a specific language code.","Parameters","localeCode- The locale code for the locale you want to return the localized string of. baseLocaleCode- An optional string, specifying the locale to use for the string. If you do not specify a baseLocaleCode, the user's currently selected locale is used.","Returns","A string containing the localized string or nil if either the localeCode or baseLocaleCode is invalid. For example, if the localeCode is \"de_CH\", this will return \"German\". A string containing the localized string including the dialect or nil if either the localeCode or baseLocaleCode is invalid. For example, if the localeCode is \"de_CH\", this will return \"German (Switzerland)\".","Notes","The localeCode and optional baseLocaleCode must be one of the strings returned by hs.host.locale.availableLocales."]},{"l":"preferredLanguages","p":["Signature","hs.host.locale.preferredLanguages() - table","Type","Function","Description","Returns the user's language preference order as an array of strings.","Parameters","None","Returns","an array table of strings specifying the user's preferred languages as string identifiers.","Notes"]},{"l":"registerCallback","p":["Signature","hs.host.locale.registerCallback(function) - uuidString","Type","Function","Description","Registers a function to be invoked when anything in the user's locale settings change","Parameters","fn- the function to be invoked when a setting changes","Returns","a uuid string which can be used to unregister a callback function when you no longer require notification of changes","Notes","The callback function will not receive any arguments and should return none. You can retrieve the new locale settings with hs.host.locale.localeInformation and check its keys to determine if the change is of interest. Any change made within the Language and Region settings panel will trigger this callback, even changes which are not reflected in the locale information provided by hs.host.locale.localeInformation."]},{"l":"unregisterCallback","p":["Signature","hs.host.locale.unregisterCallback(uuidString) - boolean","Type","Function","Description","Unregister a callback function when you no longer care about changes to the user's locale","Parameters","uuidString- the uuidString returned by hs.host.locale.registerCallback when you registered the callback function","Returns","true if the callback was successfully unregistered or false if it was not, usually because the uuidString does not correspond to a current callback function.","Notes"]}],[{"i":"hshotkey","l":"hs.hotkey","p":["Create and manage global keyboard shortcuts"]},{"l":"Submodules","p":["hs.hotkey.modal"]},{"l":"API Overview","p":["alertDuration","assignable","bind","bindSpec","Constructors- API calls which return an object, typically one that offers API methods","delete","deleteAll","disable","disableAll","enable","Functions- API calls offered directly by the extension","getHotkeys","Methods- API calls which can only be made on an object returned by a constructor","new","showHotkeys","systemAssigned","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"alertDuration","p":["Signature","hs.hotkey.alertDuration","Type","Variable","Description","Duration of the alert shown when a hotkey created with a message parameter is triggered, in seconds. Default is 1."]},{"l":"Functions"},{"l":"assignable","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.hotkey.assignable(mods, key) - boolean | | Type | Function | | Description | Determines whether the hotkey combination can be assigned a callback through Hammerspoon. | | Parameters | mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required, which should be zero or more of the following: \"cmd\", \"command\" or \"⌘\" \"ctrl\", \"control\" or \"⌃\" \"alt\", \"option\" or \"⌥\" \"shift\" or \"⇧\"key - A string containing the name of a keyboard key (as found in hs.keycodes.map ), or a raw keycode number | | Returns | a boolean value, true if the hotkey combination can be given an assignment by Hammerspoon or false if it cannot. | | Notes | The most common reason a hotkey combination cannot be given an assignment by Hammerspoon is because it is in use by the Mac operating system -- see the Shortcuts tab of Keyboard in the System Preferences application or hs.hotkey.systemAssigned. |"]},{"l":"deleteAll","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.hotkey.deleteAll(mods, key) | | Type | Function | | Description | Deletes all previously set callbacks for a given keyboard combination | | Parameters | mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required, which should be zero or more of the following: \"cmd\", \"command\" or \"⌘\" \"ctrl\", \"control\" or \"⌃\" \"alt\", \"option\" or \"⌥\" \"shift\" or \"⇧\"key - A string containing the name of a keyboard key (as found in hs.keycodes.map ), or a raw keycode number | | Returns | None | | Notes | |"]},{"l":"disableAll","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.hotkey.disableAll(mods, key) | | Type | Function | | Description | Disables all previously set callbacks for a given keyboard combination | | Parameters | mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required, which should be zero or more of the following: \"cmd\", \"command\" or \"⌘\" \"ctrl\", \"control\" or \"⌃\" \"alt\", \"option\" or \"⌥\" \"shift\" or \"⇧\"key - A string containing the name of a keyboard key (as found in hs.keycodes.map ), or a raw keycode number | | Returns | None | | Notes | |"]},{"l":"getHotkeys","p":["Signature","hs.hotkey.getHotkeys() - table","Type","Function","Description","Returns a list of all currently active hotkeys","Parameters","None","Returns","A table containing the hotkeys that are active, i.e. enabled and not \"shadowed\", in the current context(usually, the global hotkey context, but it could be a modal hotkey context). Every element in the list is a table with two fields: idx - a string describing the keyboard combination for the hotkey msg - the hotkey message, if provided when the hotkey was created (prefixed with the keyboard combination)","Notes"]},{"l":"showHotkeys","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.hotkey.showHotkeys(mods, key) - hs.hotkey object | | Type | Function | | Description | Creates (and enables) a hotkey that shows all currently active hotkeys (i.e. enabled and not \"shadowed\" in the current context) while pressed | | Parameters | mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required, which should be zero or more of the following: \"cmd\", \"command\" or \"⌘\" \"ctrl\", \"control\" or \"⌃\" \"alt\", \"option\" or \"⌥\" \"shift\" or \"⇧\"key - A string containing the name of a keyboard key (as found in hs.keycodes.map ), or a raw keycode number | | Returns | The new hs.hotkey object | | Notes | |"]},{"l":"systemAssigned","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.hotkey.systemAssigned(mods, key) - table | false | | Type | Function | | Description | Examine whether a potential hotkey is in use by the macOS system such as the Screen Capture, Universal Access, and Keyboard Navigation keys. | | Parameters | mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required, which should be zero or more of the following: \"cmd\", \"command\" or \"⌘\" \"ctrl\", \"control\" or \"⌃\" \"alt\", \"option\" or \"⌥\" \"shift\" or \"⇧\"key - A string containing the name of a keyboard key (as found in hs.keycodes.map ), or a raw keycode number | | Returns | if the hotkey combination is in use by a system function, returns a table containing the following keys: keycode - the numeric keycode for the hotkey mods - a numeric representation of the modifier flags for the hotkey enabled - a boolean indicating whether or not the key is currently enabledif the hotkey combination is not in use by the operating system, returns the boolean value false | | Notes | this is provided for informational purposes and does not provide a reliable test as to whether or not Hammerspoon can use the combination to create a custom hotkey -- some combinations which return a table can be over-ridden by Hammerspoon while others cannot. See also hs.hotkey.assignable. |"]},{"l":"Constructors"},{"l":"bind","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.hotkey.bind(mods, key, [message,] pressedfn, releasedfn, repeatfn) - hs.hotkey object | | Type | Constructor | | Description | Creates a new hotkey and enables it immediately | | Parameters | mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required, which should be zero or more of the following: \"cmd\", \"command\" or \"⌘\" \"ctrl\", \"control\" or \"⌃\" \"alt\", \"option\" or \"⌥\" \"shift\" or \"⇧\"key - A string containing the name of a keyboard key (as found in hs.keycodes.map ), or a raw keycode numbermessage - (optional) A string containing a message to be displayed via hs.alert() when the hotkey has been triggered; if omitted, no alert will be shownpressedfn - A function that will be called when the hotkey has been pressed, or nilreleasedfn - A function that will be called when the hotkey has been released, or nilrepeatfn - A function that will be called when a pressed hotkey is repeating, or nil | | Returns | A new hs.hotkey object or nil if the hotkey could not be enabled | | Notes | This function is just a wrapper that performs hs.hotkey.new(...):enable()You can create multiple hs.hotkey objects for the same keyboard combination, but only one can be active at any given time - see hs.hotkey:enable()If message is the empty string , the alert will just show the triggered keyboard combinationIf you don't want any alert, you must actually omit the message parameter; a nil in 3rd position will be interpreted as a missing pressedfnYou must pass at least one of pressedfn, releasedfn or repeatfn; to delete a hotkey, use hs.hotkey:delete() |"]},{"l":"bindSpec","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.hotkey.bindSpec(keyspec, ...) - hs.hotkey object | | Type | Constructor | | Description | Creates a hotkey and enables it immediately | | Parameters | keyspec - A table containing two items: first, a table containing keyboard modifiers, as specified in hs.hotkey.bind() second, a string containing the name of a keyboard key, as specified in hs.hotkey.bind()... - All remaining arguments are as specified in hs.hotkey.bind() | | Returns | A new hs.hotkey object for method chaining | | Notes | This function is just a wrapper that performs hs.hotkey.bind(keyspec[1], keyspec[2], ...) |"]},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.hotkey.new(mods, key, [message,] pressedfn, releasedfn, repeatfn) - hs.hotkey object | | Type | Constructor | | Description | Creates a new hotkey | | Parameters | mods - A table or a string containing (as elements, or as substrings with any separator) the keyboard modifiers required, which should be zero or more of the following: \"cmd\", \"command\" or \"⌘\" \"ctrl\", \"control\" or \"⌃\" \"alt\", \"option\" or \"⌥\" \"shift\" or \"⇧\"key - A string containing the name of a keyboard key (as found in hs.keycodes.map ), or a raw keycode numbermessage - (optional) A string containing a message to be displayed via hs.alert() when the hotkey has been triggered; if omitted, no alert will be shownpressedfn - A function that will be called when the hotkey has been pressed, or nilreleasedfn - A function that will be called when the hotkey has been released, or nilrepeatfn - A function that will be called when a pressed hotkey is repeating, or nil | | Returns | A new hs.hotkey object or nil if the hotkey could not be enabled | | Notes | You can create multiple hs.hotkey objects for the same keyboard combination, but only one can be active at any given time - see hs.hotkey:enable()If message is the empty string , the alert will just show the triggered keyboard combinationIf you don't want any alert, you must actually omit the message parameter; a nil in 3rd position will be interpreted as a missing pressedfnYou must pass at least one of pressedfn, releasedfn or repeatfn; to delete a hotkey, use hs.hotkey:delete() |"]},{"l":"Methods"},{"l":"delete","p":["Signature","hs.hotkey:delete()","Type","Method","Description","Disables and deletes a hotkey object","Parameters","None","Returns","Notes"]},{"l":"disable","p":["Signature","hs.hotkey:disable() - hs.hotkey object","Type","Method","Description","Disables a hotkey object","Parameters","None","Returns","The hs.hotkey object for method chaining","Notes"]},{"l":"enable","p":["Signature","hs.hotkey:enable() - hs.hotkey object | nil","Type","Method","Description","Enables a hotkey object","Parameters","None","Returns","The hs.hotkey object for method chaining or nil if the hotkey could not be enabled for some reason.","Notes","When you enable a hotkey that uses the same keyboard combination as another previously-enabled hotkey, the old one will stop working as it's being \"shadowed\" by the new one. As soon as the new hotkey is disabled or deleted the old one will trigger again."]}],[{"i":"hshotkeymodal","l":"hs.hotkey.modal","p":["Create/manage modal keyboard shortcut environments","Usage:"]}],[{"i":"hshttp","l":"hs.http","p":["Perform HTTP requests"]},{"l":"API Overview","p":["Variables- Configurable values","htmlEntities","Functions- API calls offered directly by the extension","asyncGet","asyncPost","asyncPut","convertHtmlEntities","doAsyncRequest","doRequest","encodeForQuery","get","post","put","registerEntity","urlParts"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"htmlEntities","p":["Signature","hs.http.htmlEntities[]","Type","Variable","Description","A collection of common HTML Entities (&whatever;) and their UTF8 equivalents. To retrieve the UTF8 sequence for a given entity, reference the table as hs.http.htmlEntities[key;] where key is the text of the entity's name or a numeric reference like #number.","Notes","This list is likely not complete. It is based on the list of common entities described at http://www.freeformatter.com/html-entities.html. Additional entities can be temporarily added via the hs.http.registerEntity(...) function. If you feel you have a more official list of entities which contains items which are currently not included by default, please open up an issue at https://github.com/Hammerspoon/hammerspoon and your link will be considered. To see a list of the currently defined entities, a __ tostring meta-method is included so that referencing the table directly as a string will return the current definitions. For reference, this meta-method is essentially the following: for i,v in hs.fnutils.sortByKeys(hs.http.htmlEntities) do print(string.format(\"%-10s %-10s %s\\n\", i, \"&#\"..tostring(hs.utf8.codepoint(v))..\";\", v)) end Note that this list will not include the numeric conversion of entities (e.g. A), as this is handled by an __ index metamethod to allow for all possible numeric values."]},{"l":"Functions"},{"l":"asyncGet","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.http.asyncGet(url, headers, callback) | | Type | Function | | Description | Sends an HTTP GET request asynchronously | | Parameters | url - A string containing the URL to retrieveheaders - A table containing string keys and values representing the request headers, or nil to add no headerscallback - A function to be called when the request succeeds or fails. The function will be passed three parameters: A number containing the HTTP response status A string containing the response body A table containing the response headers | | Returns | None | | Notes | If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.If the request fails, the callback function's first parameter will be negative and the second parameter will contain an error message. The third parameter will be nil |"]},{"l":"asyncPost","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.http.asyncPost(url, data, headers, callback) | | Type | Function | | Description | Sends an HTTP POST request asynchronously | | Parameters | url - A string containing the URL to submit todata - A string containing the request body, or nil to send no bodyheaders - A table containing string keys and values representing the request headers, or nil to add no headerscallback - A function to be called when the request succeeds or fails. The function will be passed three parameters: A number containing the HTTP response status A string containing the response body A table containing the response headers | | Returns | None | | Notes | If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.If the request fails, the callback function's first parameter will be negative and the second parameter will contain an error message. The third parameter will be nil |"]},{"l":"asyncPut","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.http.asyncPut(url, data, headers, callback) | | Type | Function | | Description | Sends an HTTP PUT request asynchronously | | Parameters | url - A string containing the URL to submit todata - A string containing the request body, or nil to send no bodyheaders - A table containing string keys and values representing the request headers, or nil to add no headerscallback - A function to be called when the request succeeds or fails. The function will be passed three parameters: A number containing the HTTP response status A string containing the response body A table containing the response headers | | Returns | None | | Notes | If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.If the request fails, the callback function's first parameter will be negative and the second parameter will contain an error message. The third parameter will be nil |"]},{"l":"convertHtmlEntities","p":["Signature","hs.http.convertHtmlEntities(inString) - outString","Type","Function","Description","Convert all recognized HTML Entities in the inString to appropriate UTF8 byte sequences and returns the converted text.","Parameters","inString -- A string containing any number of HTML Entities (&whatever;) in the text.","Returns","outString -- the input string with all recognized HTML Entity sequences converted to UTF8 byte sequences.","Notes","Recognized HTML Entities are those registered in hs.http.htmlEntities or numeric entity sequences: &#n; where n can be any integer number. This function is especially useful as a post-filter to data retrieved by the hs.http.get and hs.http.asyncGet functions."]},{"l":"doAsyncRequest","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.http.doAsyncRequest(url, method, data, headers, callback, [cachePolicy|enableRedirect]) | | Type | Function | | Description | Creates an HTTP request and executes it asynchronously | | Parameters | url - A string containing the URLmethod - A string containing the HTTP method to use (e.g. \"GET\", \"POST\", etc)data - A string containing the request body, or nil to send no bodyheaders - A table containing string keys and values representing request header keys and values, or nil to add no headerscallback - A function to called when the response is received. The function should accept three arguments: code - A number containing the HTTP response code body - A string containing the body of the response headers - A table containing the HTTP headers of the responsecachePolicy - An optional string containing the cache policy (\"protocolCachePolicy\", \"ignoreLocalCache\", \"ignoreLocalAndRemoteCache\", \"returnCacheOrLoad\", \"returnCacheDontLoad\" or \"reloadRevalidatingCache\"). Defaults to protocolCachePolicy.enableRedirect - An optional boolean to indicate whether to redirect the http request. Defaults to true. | | Returns | None | | Notes | If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user:password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials.If the Content-Type response header begins text/ then the response body return value is a UTF8 string. Any other content type passes the response body, unaltered, as a stream of bytes.If enableRedirect is set to true, response body will be empty string. Http body will be dropped even though response has the body. This seems the limitation of 'connection:willSendRequest:redirectResponse' method. |"]},{"l":"doRequest","p":["Signature","hs.http.doRequest(url, method, [data, headers, cachePolicy]) - int, string, table","Type","Function","Description","Creates an HTTP request and executes it synchronously","Parameters","url - A string containing the URL method - A string containing the HTTP method to use (e.g. \"GET\", \"POST\", etc) data - An optional string containing the data to POST to the URL, or nil to send no data headers - An optional table of string keys and values used as headers for the request, or nil to add no headers cachePolicy - An optional string containing the cache policy (\"protocolCachePolicy\", \"ignoreLocalCache\", \"ignoreLocalAndRemoteCache\", \"returnCacheOrLoad\", \"returnCacheDontLoad\" or \"reloadRevalidatingCache\"). Defaults to protocolCachePolicy.","Returns","A number containing the HTTP response status code A string containing the response body A table containing the response headers","Notes","If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user: password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials. This function is synchronous and will therefore block all Lua execution until it completes. You are encouraged to use the asynchronous functions. If you attempt to connect to a local Hammerspoon server created with hs.httpserver, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the hs.httpserver callback function will be invoked (so any side effects of the function will occur, but it's results will be lost). Use hs.http.doAsyncRequest to avoid this. If the Content-Type response header begins text/ then the response body return value is a UTF8 string. Any other content type passes the response body, unaltered, as a stream of bytes."]},{"l":"encodeForQuery","p":["Signature","hs.http.encodeForQuery(string) - string","Type","Function","Description","Returns a copy of the provided string in which characters that are not valid within an HTTP query key or value are escaped with their %## equivalent.","Parameters","originalString - the string to make safe as a key or value for a query","Returns","the converted string","Notes","The intent of this function is to provide a valid key or a valid value for a query string, not to validate the entire query string. For this reason, ?, =, +, and & are included in the converted characters."]},{"l":"get","p":["Signature","hs.http.get(url, headers) - int, string, table","Type","Function","Description","Sends an HTTP GET request to a URL","Parameters","url - A string containing the URL to retrieve headers - A table containing string keys and values representing the request headers, or nil to add no headers","Returns","A number containing the HTTP response status A string containing the response body A table containing the response headers","Notes","If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user: password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials. This function is synchronous and will therefore block all other Lua execution while the request is in progress, you are encouraged to use the asynchronous functions If you attempt to connect to a local Hammerspoon server created with hs.httpserver, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the hs.httpserver callback function will be invoked (so any side effects of the function will occur, but it's results will be lost). Use hs.http.asyncGet to avoid this."]},{"l":"post","p":["Signature","hs.http.post(url, data, headers) - int, string, table","Type","Function","Description","Sends an HTTP POST request to a URL","Parameters","url - A string containing the URL to submit to data - A string containing the request body, or nil to send no body headers - A table containing string keys and values representing the request headers, or nil to add no headers","Returns","A number containing the HTTP response status A string containing the response body A table containing the response headers","Notes","If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user: password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials. This function is synchronous and will therefore block all other Lua execution while the request is in progress, you are encouraged to use the asynchronous functions If you attempt to connect to a local Hammerspoon server created with hs.httpserver, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the hs.httpserver callback function will be invoked (so any side effects of the function will occur, but it's results will be lost). Use hs.http.asyncPost to avoid this."]},{"l":"put","p":["Signature","hs.http.put(url, data, headers) - int, string, table","Type","Function","Description","Sends an HTTP PUT request to a URL","Parameters","url - A string containing the URL to submit to data - A string containing the request body, or nil to send no body headers - A table containing string keys and values representing the request headers, or nil to add no headers","Returns","A number containing the HTTP response status A string containing the response body A table containing the response headers","Notes","If authentication is required in order to download the request, the required credentials must be specified as part of the URL (e.g. \"http://user: password@host.com/\"). If authentication fails, or credentials are missing, the connection will attempt to continue without credentials. This function is synchronous and will therefore block all other Lua execution while the request is in progress, you are encouraged to use the asynchronous functions If you attempt to connect to a local Hammerspoon server created with hs.httpserver, then Hammerspoon will block until the connection times out (60 seconds), return a failed result due to the timeout, and then the hs.httpserver callback function will be invoked (so any side effects of the function will occur, but it's results will be lost). Use hs.http.asyncPost to avoid this."]},{"l":"registerEntity","p":["Signature","hs.http.registerEntity(entity, codepoint) - string","Type","Function","Description","Registers an HTML Entity with the specified Unicode codepoint which can later referenced in your code as hs.http.htmlEntity[entity] for convenience and readability.","Parameters","entity -- The full text of the HTML Entity as it appears in HTML encoded documents. A proper entity starts with & and ends with ; and entity labels which do not meet this will have them added -- future dereferences to get the corresponding UTF8 must include this initiator and terminator or they will not be recognized. codepoint -- a Unicode codepoint in numeric or U+xxxx format to register with as the given entity.","Returns","Returns the UTF8 byte sequence for the entity registered.","Notes","If an entity label was previously registered, this will overwrite the previous value with a new one. The return value is merely syntactic sugar and you do not need to save it locally; it can be safely ignored -- future access to the pre-converted entity should be retrieved as hs.http.htmlEntities[entity] in your code. It looks good when invoked from the console, though ☺."]},{"l":"urlParts","p":["Signature","hs.http.urlParts(url) - table","Type","Function","Description","Returns a table of keys containing the individual components of the provided url.","Parameters","url - the url to parse into it's individual components","Returns","a table containing any of the following keys which apply to the specified url: absoluteString - The URL string for the URL as an absolute URL. absoluteURL - An absolute URL that refers to the same resource as the provided URL. baseURL - the base URL, if the URL is relative fileSystemRepresentation - the URL’s unescaped path specified as a file system path fragment - the fragment, if specified in the URL host - the host for the URL isFileURL - a boolean value indicating whether or not the URL represents a local file lastPathComponent - the last path component specified in the URL parameterString - the parameter string, if specified in the URL password - the password, if specified in the URL path - the unescaped path specified in the URL pathComponents - an array containing the path components of the URL pathExtension - the file extension, if specified in the URL port - the port, if specified in the URL query - the query, if specified in the URL queryItems - if the URL contains a query string, then this field contains an array of the unescaped key-value pairs for each item. Each key-value pair is represented as a table in the array to preserve order. See notes for more information. relativePath - the relative path of the URL without resolving against its base URL. If the path has a trailing slash it is stripped. If the URL is already an absolute URL, this contains the same value as path. relativeString - a string representation of the relative portion of the URL. If the URL is already an absolute URL this contains the same value as absoluteString. resourceSpecifier - the resource specified in the URL scheme - the scheme of the URL standardizedURL - the URL with any instances of \"..\" or \".\" removed from its path user - the username, if specified in the URL","Notes","This function assumes that the URL conforms to RFC 1808. If the URL is malformed or does not conform to RFC1808, then many of these fields may be missing. A contrived example for the url http://user:password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1query2=a%28#fragment:> hs.inspect(hs.http.urlParts(\"http://user: password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\")){ absoluteString = \"http://user: password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\", absoluteURL = \"http://user: password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\", fileSystemRepresentation = \"/path/to a/../file.txt\", fragment = \"fragment\", host = \"host.site.com\", isFileURL = false, lastPathComponent = \"file.txt\", parameterString = \"parameter\", password = \"password\", path = \"/path/to a/../file.txt\", pathComponents = { \"/\", \"path\", \"to a\", \"..\", \"file.txt\" }, pathExtension = \"txt\", port = 80, query = \"query1=1&query2=a%28\", queryItems = { { query1 = \"1\"}, { query2 = \"a(\"} }, relativePath = \"/path/to a/../file.txt\", relativeString = \"http://user: password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\", resourceSpecifier = \"//user: password@host.site.com:80/path/to%20a/../file.txt;parameter?query1=1&query2=a%28#fragment\", scheme = \"http\", standardizedURL = \"http://user: password@host.site.com:80/path/file.txt;parameter?query1=1&query2=a%28#fragment\", user = \"user\"} Because it is valid for a query key-value pair to be missing either the key or the value or both, the following conventions are used: a missing key (e.g. '=value') will be represented as { \"\" = value } a missing value (e.g. 'key=') will be represented as a missing value with no = (e.g. 'key') will be represented as a missing key and value (e.g. '=') will be represented as { \"\" = \"\" } an empty query item (e.g. a query ending in '&' or a query containing && between two other query items) will be represented as { \"\" } At present Hammerspoon does not provide a way to represent a URL as a true Objective-C object within the OS X API. This affects the following keys: relative URLs are not possible to express properly so baseURL will always be nil and relativePath and relativeString will always match path and absoluteString. These limitations may change in a future update if the need for a more fully compliant URL treatment is determined to be necessary."]}],[{"i":"hshttpserver","l":"hs.httpserver","p":["Simple HTTP server","Notes:","Running an HTTP server is potentially dangerous, you should seriously consider the security implications of exposing your Hammerspoon instance to a network - especially to the Internet","As a user of Hammerspoon, you are assumed to be highly capable, and aware of the security issues"]},{"l":"Submodules","p":["hs.httpserver.hsminweb"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","getInterface","getName","getPort","maxBodySize","Methods- API calls which can only be made on an object returned by a constructor","new","send","setCallback","setInterface","setName","setPassword","setPort","start","stop","websocket"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"new","p":["Signature","hs.httpserver.new([ssl], [bonjour]) - object","Type","Function","Description","Creates a new HTTP or HTTPS server","Parameters","ssl - An optional boolean. If true, the server will start using HTTPS. Defaults to false. bonjour - An optional boolean. If true, the server will advertise itself with Bonjour. Defaults to true. Note that in order to change this, you must supply a true or false value for the ssl argument.","Returns","An hs.httpserver object","Notes","By default, the server will start on a random TCP port and advertise itself with Bonjour. You can check the port with hs.httpserver:getPort() By default, the server will listen on all network interfaces. You can override this with hs.httpserver:setInterface() before starting the server Currently, in HTTPS mode, the server will use a self-signed certificate, which most browsers will warn about. If you want/need to be able to use hs.httpserver with a certificate signed by a trusted Certificate Authority, please file an bug on Hammerspoon requesting support for this."]},{"l":"Methods"},{"l":"getInterface","p":["Signature","hs.httpserver:getInterface() - string or nil","Type","Method","Description","Gets the network interface the server is configured to listen on","Parameters","None","Returns","A string containing the network interface name, or nil if the server will listen on all interfaces","Notes"]},{"l":"getName","p":["Signature","hs.httpserver:getName() - string","Type","Method","Description","Gets the Bonjour name the server is configured to advertise itself as","Parameters","None","Returns","A string containing the Bonjour name of this server","Notes","This is not the hostname of the server, just its name in Bonjour service lists (e.g. Safari's Bonjour bookmarks menu)"]},{"l":"getPort","p":["Signature","hs.httpserver:getPort() - number","Type","Method","Description","Gets the TCP port the server is configured to listen on","Parameters","None","Returns","A number containing the TCP port","Notes"]},{"l":"maxBodySize","p":["Signature","hs.httpserver:maxBodySize([size]) - object | current-value","Type","Method","Description","Get or set the maximum allowed body size for an incoming HTTP request.","Parameters","size - An optional integer value specifying the maximum body size allowed for an incoming HTTP request in bytes. Defaults to 10485760 (10 MB).","Returns","If a new size is specified, returns the hs.httpserver object; otherwise the current value.","Notes","Because the Hammerspoon http server processes incoming requests completely in memory, this method puts a limit on the maximum size for a POST or PUT request."]},{"l":"send","p":["Signature","hs.httpserver:send(message) - object","Type","Method","Description","Sends a message to the websocket client","Parameters","message - A string containing the message to send","Returns","The hs.httpserver object","Notes"]},{"l":"setCallback","p":["Signature","hs.httpserver:setCallback([callback]) - object","Type","Method","Description","Sets the request handling callback for an HTTP server object","Parameters","callback - An optional function that will be called to process each incoming HTTP request, or nil to remove an existing callback. See the notes section below for more information about this callback","Returns","The hs.httpserver object","Notes","The callback will be passed four arguments: A string containing the type of request (i.e. GET/ POST/ DELETE/etc) A string containing the path element of the request (e.g. /index.html) A table containing the request headers A string containing the raw contents of the request body, or the empty string if no body is included in the request. The callback must return three values: A string containing the body of the response An integer containing the response code (e.g. 200 for a successful request) A table containing additional HTTP headers to set (or an empty table, {}, if no extra headers are required) A POST request, often used by HTML forms, will store the contents of the form in the body of the request."]},{"l":"setInterface","p":["Signature","hs.httpserver:setInterface(interface) - object","Type","Method","Description","Sets the network interface the server is configured to listen on","Parameters","interface - A string containing an interface name","Returns","The hs.httpserver object","Notes","As well as real interface names (e.g. en0) the following values are valid: An IP address of one of your interfaces localhost loopback nil (which means all interfaces, and is the default)"]},{"l":"setName","p":["Signature","hs.httpserver:setName(name) - object","Type","Method","Description","Sets the Bonjour name the server should advertise itself as","Parameters","name - A string containing the Bonjour name for the server","Returns","The hs.httpserver object","Notes","This is not the hostname of the server, just its name in Bonjour service lists (e.g. Safari's Bonjour bookmarks menu)"]},{"l":"setPassword","p":["Signature","hs.httpserver:setPassword([password]) - object","Type","Method","Description","Sets a password for an HTTP server object","Parameters","password - An optional string that contains the server password, or nil to remove an existing password","Returns","The hs.httpserver object","Notes","It is not currently possible to set multiple passwords for different users, or passwords only on specific paths"]},{"l":"setPort","p":["Signature","hs.httpserver:setPort(port) - object","Type","Method","Description","Sets the TCP port the server is configured to listen on","Parameters","port - An integer containing a TCP port to listen on","Returns","The hs.httpserver object","Notes"]},{"l":"start","p":["Signature","hs.httpserver:start() - object","Type","Method","Description","Starts an HTTP server object","Parameters","None","Returns","The hs.httpserver object","Notes"]},{"l":"stop","p":["Signature","hs.httpserver:stop() - object","Type","Method","Description","Stops an HTTP server object","Parameters","None","Returns","The hs.httpserver object","Notes"]},{"l":"websocket","p":["Signature","hs.httpserver:websocket(path, callback) - object","Type","Method","Description","Enables a websocket endpoint on the HTTP server","Parameters","path - A string containing the websocket path such as '/ws' callback - A function returning a string for each received websocket message","Returns","The hs.httpserver object","Notes","The callback is passed one string parameter containing the received message The callback must return a string containing the response message Given a path '/mysock' and a port of 8000, the websocket URL is as follows: ws://localhost:8000/mysock wss://localhost:8000/mysock (if SSL enabled)"]}],[{"i":"hshttpserverhsminweb","l":"hs.httpserver.hsminweb","p":["Minimalist Web Server for Hammerspoon","This module aims to be a minimal, but (mostly) standards-compliant web server for use within Hammerspoon. Expanding upon the Hammerspoon module, hs.httpserver, this module adds support for serving static pages stored at a specified document root as well as serving dynamic content from Lua Template Files interpreted within the Hammerspoon environment and external executables which support the CGI/1.1 framework.","This module aims to provide a fully functional, and somewhat extendable, web server foundation, but will never replace a true dedicated web server application. Some limitations include:","It is single threaded within the Hammerspoon environment and can only serve one resource at a time","As with all Hammerspoon modules, while dynamic content is being generated, Hammerspoon cannot respond to other callback functions -- a complex or time consuming script may block other Hammerspoon activity in a noticeable manner.","All document requests and responses are handled in memory only -- because of this, maximum resource size is limited to what you are willing to allow Hammerspoon to consume and memory limitations of your computer.","While some of these limitations may be mitigated to an extent in the future with additional modules and additions to hs.httpserver, Hammerspoon's web serving capabilities will never replace a dedicated web server when volume or speed is required.","An example web site is provided in the hsdocs folder of the hs.doc module. This web site can serve documentation for Hammerspoon dynamically generated from the json file included with the Hammerspoon application for internal documentation. It serves as a basic example of what is possible with this module.","You can start this web server by typing the following into your Hammerspoon console: require(hs.doc.hsdocs).start() and then visiting http://localhost:12345/ with your web browser."]},{"l":"Submodules","p":["hs.httpserver.hsminweb.cgilua"]},{"l":"API Overview","p":["_accessLog","_errorHandlers","_serverAdmin","_supportMethods","accessList","allowDirectory","bonjour","cgiEnabled","cgiExtensions","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","dateFormatString","directoryIndex","dnsLookup","documentRoot","formattedDate","Functions- API calls offered directly by the extension","interface","log","luaTemplateExtension","maxBodySize","Methods- API calls which can only be made on an object returned by a constructor","name","new","password","port","queryLogging","scriptTimeout","ssl","start","statusCodes","stop","urlParts","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"dateFormatString","p":["Signature","hs.httpserver.hsminweb.dateFormatString","Type","Constant","Description","A format string, usable with os.date, which will display a date in the format expected for HTTP communications as described in RFC 822, updated by RFC 1123."]},{"l":"statusCodes","p":["Signature","hs.httpserver.hsminweb.statusCodes","Type","Constant","Description","HTTP Response Status Codes","Notes","The keys and labels in this table have been combined from a variety of sources including, but not limited to:\"Official\" list at https://en.wikipedia.org/wiki/List_of_HTTP_status_codes KeplerProject's wsapi at https://github.com/keplerproject/wsapi IIS additions from https://support.microsoft.com/en-us/kb/943891 This table has metatable additions which allow you to review its contents from the Hammerspoon console by typing hs.httpserver.hsminweb.statusCodes"]},{"l":"Variables"},{"l":"_accessLog","p":["Signature","hs.httpserver.hsminweb._accessLog","Type","Variable","Description","Accessed as self._accessLog. If query logging is enabled for the web server, an Apache style common log entry will be appended to this string for each request. See hs.httpserver.hsminweb:queryLogging."]},{"l":"_errorHandlers","p":["Signature","hs.httpserver.hsminweb._errorHandlers","Type","Variable","Description","Accessed as self._errorHandlers[errorCode]. A table whose keyed entries specify the function to generate the error response page for an HTTP error."]},{"l":"_serverAdmin","p":["Signature","hs.httpserver.hsminweb._serverAdmin","Type","Variable","Description","Accessed as self._serverAdmin. A string containing the administrator for the web server. Defaults to the currently logged in user's short form username and the computer's localized name as returned by hs.host.localizedName()(e.g. \" user@computer\")."]},{"l":"_supportMethods","p":["Signature","hs.httpserver.hsminweb._supportMethods","Type","Variable","Description","Accessed as self._supportMethods[method]. A table whose keyed entries specify whether or not a specified HTTP method is supported by this server."]},{"l":"log","p":["Signature","hs.httpserver.hsminweb.log","Type","Variable","Description","The hs.logger instance for the hs.httpserver.hsminweb module. See the documentation for hs.logger for more information."]},{"l":"Functions"},{"l":"formattedDate","p":["Signature","hs.httpserver.hsminweb.formattedDate([date]) - string","Type","Function","Description","Returns the current or specified time in the format expected for HTTP communications as described in RFC 822, updated by RFC 1123.","Parameters","date - an optional integer specifying the date as the number of seconds since 00:00:00 UTC on 1 January 1970. Defaults to the current time as returned by os.time()","Returns","the time indicated as a string in the format expected for HTTP communications as described in RFC 822, updated by RFC 1123.","Notes"]},{"l":"urlParts","p":["Signature","hs.httpserver.hsminweb.urlParts(url) - table","Type","Function","Description","Parse the specified URL into its constituent parts.","Parameters","url - the url to parse","Returns","a table containing the constituent parts of the provided url. The table will contain one or more of the following key-value pairs: fragment - the anchor name a URL refers to within an HTML document. Appears after '#' at the end of a URL. Note that not all web clients include this in an HTTP request since its normal purpose is to indicate where to scroll to within a page after the content has been retrieved. host - the host name portion of the URL, if any lastPathComponent - the last component of the path portion of the URL password - the password specified in the URL. Note that this is not the password that would be entered when using Basic or Digest authentication; rather it is a password included in the URL itself -- for security reasons, use of this field has been deprecated in most situations and modern browsers will often prompt for confirmation before allowing URL's which contain a password to be transmitted. path - the full path specified in the URL pathComponents - an array containing the path components as individual strings. Components which specify a sub-directory of the path will end with a \"/\" character. pathExtension - if the final component of the path refers to a file, the file's extension, if any. port - the port specified in the URL, if any query - the portion of the URL after a '?' character, if any; used to contain query information often from a form submitting it's input with the GET method. resourceSpecifier - the portion of the URL after the scheme scheme - the URL scheme; for web traffic, this will be \"http\" or \"https\" standardizedURL - the URL with any path components of \"..\" or \".\" normalized. The use of \"..\" that would cause the URL to refer to something preceding its root is simply removed. URL - the URL as it was provided to this function (no changes) user - the user name specified in the URL. Note that this is not the user name that would be entered when using Basic or Digest authentication; rather it is a user name included in the URL itself -- for security reasons, use of this field has been deprecated in most situations and modern browsers will often prompt for confirmation before allowing URL's which contain a user name to be transmitted.","Notes","This function differs from the similar function hs.http.urlParts in a few ways: To simplify the logic used by this module to determine if a request for a directory is properly terminated with a \"/\", the path components returned by this function do not remove this character from the component, if present. Some extraneous or duplicate keys have been removed. This function is patterned after RFC 3986 while hs.http.urlParts uses OS X API functions which are patterned after RFC 1808. RFC 3986 obsoletes 1808. The primary distinction that affects this module is in regards to parameters for path components in the URI -- RFC 3986 disallows them in schema based URI's (like the URL's that are used for web based traffic)."]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.httpserver.hsminweb.new([documentRoot]) - hsminwebTable","Type","Constructor","Description","Create a new hsminweb table object representing a Hammerspoon Web Server.","Parameters","documentRoot - an optional string specifying the document root for the new web server. Defaults to the Hammerspoon users Sites sub-directory (i.e. os.getenv(HOME)../Sites).","Returns","a table representing the hsminweb object.","Notes","a web server's document root is the directory which contains the documents or files to be served by the web server. while an hs.minweb object is actually represented by a Lua table, it has been assigned a meta-table which allows methods to be called directly on it like a user-data object. For most purposes, you should think of this table as the module's userdata."]},{"l":"Methods"},{"l":"accessList","p":["Signature","hs.httpserver.hsminweb:accessList([table]) - hsminwebTable | current-value","Type","Method","Description","Get or set the access-list table for the hsminweb web server","Parameters","table - an optional table or nil containing the access list for the web server, default nil.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","The access-list feature works by comparing the request headers against a list of tests which either accept or reject the request. If no access list is set (i.e. it is assigned a value of nil), then all requests are served. If a table is passed into this method, then any request which is not explicitly accepted by one of the tests provided is rejected (i.e. there is an implicit \"reject\" at the end of the list). The access-list table is a list of tests which are evaluated in order. The first test which matches a given request determines whether or not the request is accepted or rejected. Each entry in the access-list table is also a table with the following format:{ 'header', 'value', isPattern, isAccepted } header - a string value matching the name of a header. While the header name must match exactly, the comparison is case-insensitive (i.e. \"X-Remote-addr\" and \"x-remote-addr\" will both match the actual header name used, which is \"X-Remote-Addr\"). value - a string value specifying the value to compare the header key's value to. isPattern - a boolean indicating whether or not the header key's value should be compared to value as a pattern match (true) -- see Lua documentation 6.4.1, help.lua._man._6_4_1 in the console, or as an exact match (false) isAccepted - a boolean indicating whether or not a match should be accepted (true) or rejected (false) A special entry of the form { '*', '*', '*', true } accepts all further requests and can be used as the final entry if you wish for the access list to function as a list of requests to reject, but to accept any requests which do not match a previous test. A special entry of the form { '*', '*', '*', false } rejects all further requests and can be used as the final entry if you wish for the access list to function as a list of requests to accept, but to reject any requests which do not match a previous test. This is the implicit \"default\" final test if a table is assigned with the access-list method and does not actually need to be specified, but is included for completeness. Note that any entry after an entry in which the first two parameters are equal to '*' will never actually be used. The tests are performed in order; if you wich to allow one IP address in a range, but reject all others, you should list the accepted IP addresses first. For example:~~~{{ 'X-Remote-Addr', '192.168.1.100', false, true }, -- accept requests from 192.168.1.100{ 'X-Remote-Addr', '^ 192%.168%.1%.', true, false }, -- reject all others from the 192.168.1 subnet{ '', '', '*', true } -- accept all other requests}~~~ Most of the headers available are provided by the requesting web browser, so the exact headers available will vary. You can find some information about common HTTP request headers at: https://en.wikipedia.org/wiki/List_of_HTTP_header_fields. The following headers are inserted automatically by hs.httpserver and are probably the most useful for use in an access list: X-Remote-Addr - the remote IPv4 or IPv6 address of the machine making the request, X-Remote-Port - the TCP port of the remote machine where the request originated. X-Server-Addr - the server IPv4 or IPv6 address that the web server received the request from. For machines with multiple interfaces, this will allow you to determine which interface the request was received on. X-Server-Port - the TCP port of the web server that received the request."]},{"l":"allowDirectory","p":["Signature","hs.httpserver.hsminweb:allowDirectory([flag]) - hsminwebTable | current-value","Type","Method","Description","Get or set the whether or not a directory index is returned when the requested URL specifies a directory and no file matching an entry in the directory indexes table is found.","Parameters","flag - an optional boolean, defaults to false, indicating whether or not a directory index can be returned when a default file cannot be located.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","if this value is false, then an attempt to retrieve a URL specifying a directory that does not contain a default file as identified by one of the entries in the hs.httpserver.hsminweb:directoryIndex list will result in a \"403.2\" error."]},{"l":"bonjour","p":["Signature","hs.httpserver.hsminweb:bonjour([flag]) - hsminwebTable | current-value","Type","Method","Description","Get or set the whether or not the web server should advertise itself via Bonjour when it is running.","Parameters","flag - an optional boolean, defaults to true, indicating whether or not the server should advertise itself via Bonjour when it is running.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","this flag can only be changed when the server is not running (i.e. the hs.httpserver.hsminweb:start method has not yet been called, or the hs.httpserver.hsminweb:stop method is called first.)"]},{"l":"cgiEnabled","p":["Signature","hs.httpserver.hsminweb:cgiEnabled([flag]) - hsminwebTable | current-value","Type","Method","Description","Get or set the whether or not CGI file execution is enabled.","Parameters","flag - an optional boolean, defaults to false, indicating whether or not CGI script execution is enabled for the web server.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes"]},{"l":"cgiExtensions","p":["Signature","hs.httpserver.hsminweb:cgiExtensions([table]) - hsminwebTable | current-value","Type","Method","Description","Get or set the file extensions which identify files which should be executed as CGI scripts to provide the results to an HTTP request.","Parameters","table - an optional table or nil, defaults to { cgi, pl }, specifying a list of file extensions which indicate that a file should be executed as CGI scripts to provide the content for an HTTP request.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","this list is ignored if hs.httpserver.hsminweb:cgiEnabled is not also set to true."]},{"l":"directoryIndex","p":["Signature","hs.httpserver.hsminweb:directoryIndex([table]) - hsminwebTable | current-value","Type","Method","Description","Get or set the file names to look for when the requested URL specifies a directory.","Parameters","table - an optional table or nil, defaults to { index.html, index.htm }, specifying a list of file names to look for when the requested URL specifies a directory. If a file with one of the names is found in the directory, this file is served instead of the directory.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","Files listed in this table are checked in order, so the first matched is served. If no file match occurs, then the server will return a generated list of the files in the directory, or a \"403.2\" error, depending upon the value controlled by hs.httpserver.hsminweb:allowDirectory."]},{"l":"dnsLookup","p":["Signature","hs.httpserver.hsminweb:dnsLookup([flag]) - hsminwebTable | current-value","Type","Method","Description","Get or set the whether or not DNS lookups are performed.","Parameters","flag - an optional boolean, defaults to false, indicating whether or not DNS lookups are performed.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","DNS lookups can be time consuming or even block Hammerspoon for a short time, so they are disabled by default. Currently DNS lookups are (optionally) performed for CGI scripts, but may be added for other purposes in the future (logging, etc.)."]},{"l":"documentRoot","p":["Signature","hs.httpserver.hsminweb:documentRoot([path]) - hsminwebTable | current-value","Type","Method","Description","Get or set the document root for the web server.","Parameters","path - an optional string, default os.getenv(HOME) .. /Sites, specifying where documents for the web server should be served from.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes"]},{"l":"interface","p":["Signature","hs.httpserver.hsminweb:interface([interface]) - hsminwebTable | current-value","Type","Method","Description","Get or set the network interface that the hsminweb web server will listen on","Parameters","interface - an optional string, or nil, specifying the network interface the web server will listen on. An explicit nil specifies that the web server should listen on all active interfaces for the machine. Defaults to nil.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","See hs.httpserver.setInterface for a description of valid values that can be specified as the interface argument to this method. the interface can only be specified before the hsminweb web server has been started. If you wish to change the listening interface for a running web server, you must stop it with hs.httpserver.hsminweb:stop before invoking this method and then restart it with hs.httpserver.hsminweb:start."]},{"l":"luaTemplateExtension","p":["Signature","hs.httpserver.hsminweb:luaTemplateExtension([string]) - hsminwebTable | current-value","Type","Method","Description","Get or set the extension of files which contain Lua code which should be executed within Hammerspoon to provide the results to an HTTP request.","Parameters","string - an optional string or nil, defaults to nil, specifying the file extension which indicates that a file should be executed as Lua code within the Hammerspoon environment to provide the content for an HTTP request.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","This extension is checked after the extensions given to hs.httpserver.hsminweb:cgiExtensions; this means that if the same extension set by this method is also in the CGI extensions list, then the file will be interpreted as a CGI script and ignore this setting."]},{"l":"maxBodySize","p":["Signature","hs.httpserver.hsminweb:maxBodySize([size]) - hsminwebTable | current-value","Type","Method","Description","Get or set the maximum body size for an HTTP request","Parameters","size - An optional integer value specifying the maximum body size allowed for an incoming HTTP request in bytes. Defaults to 10485760 (10 MB).","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","Because the Hammerspoon http server processes incoming requests completely in memory, this method puts a limit on the maximum size for a POST or PUT request. If the request body exceeds this size, hs.httpserver will respond with a status code of 405 for the method before this module ever receives the request."]},{"l":"name","p":["Signature","hs.httpserver.hsminweb:name([name]) - hsminwebTable | current-value","Type","Method","Description","Get or set the name the web server uses in Bonjour advertisement when the web server is running.","Parameters","name - an optional string specifying the name the server advertises itself as when Bonjour is enabled and the web server is running. Defaults to nil, which causes the server to be advertised with the computer's name as defined in the Sharing preferences panel for the computer.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes"]},{"l":"password","p":["Signature","hs.httpserver.hsminweb:password([password]) - hsminwebTable | boolean","Type","Method","Description","Set a password for the hsminweb web server, or return a boolean indicating whether or not a password is currently set for the web server.","Parameters","password - An optional string that contains the server password, or an explicit nil to remove an existing password.","Returns","the hsminwebTable object if a parameter is provided, or a boolean indicating whether or not a password has been set if no parameter is specified.","Notes","the password, if set, is server wide and causes the server to use the Basic authentication scheme with an empty string for the username. this module is an extension to the Hammerspoon core module hs.httpserver, so it has the same limitations regarding server passwords. See the documentation for hs.httpserver.setPassword( help.hs.httpserver.setPassword in the Hammerspoon console)."]},{"l":"port","p":["Signature","hs.httpserver.hsminweb:port([port]) - hsminwebTable | current-value","Type","Method","Description","Get or set the name the port the web server listens on","Parameters","port - an optional integer specifying the TCP port the server listens for requests on when it is running. Defaults to nil, which causes the server to randomly choose a port when it is started.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","due to security restrictions enforced by OS X, the port must be a number greater than 1023"]},{"l":"queryLogging","p":["Signature","hs.httpserver.hsminweb:queryLogging([flag]) - hsminwebTable | current-value","Type","Method","Description","Get or set the whether or not requests to this web server are logged.","Parameters","flag - an optional boolean, defaults to false, indicating whether or not query requests are logged.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","If logging is enabled, an Apache common style log entry is appended to self._accesslog for each request made to the web server. Error messages during content generation are always logged to the Hammerspoon console via the hs.logger instance saved to hs.httpserver.hsminweb.log."]},{"l":"scriptTimeout","p":["Signature","hs.httpserver.hsminweb:scriptTimeout([integer]) - hsminwebTable | current-value","Type","Method","Description","Get or set the timeout for a CGI script","Parameters","integer - an optional integer, defaults to 30, specifying the length of time in seconds a CGI script should be allowed to run before being forcibly terminated if it has not yet completed its task.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","With the current functionality available in hs.httpserver, any script which is expected to return content for an HTTP request must run in a blocking manner -- this means that no other Hammerspoon activity can be occurring while the script is executing. This parameter lets you set the maximum amount of time such a script can hold things up before being terminated. An alternative implementation of at least some of the methods available in hs.httpserver is being considered which may make it possible to use hs.task for these scripts, which would alleviate this blocking behavior. However, even if this is addressed, a timeout for scripts is still desirable so that a client making a request doesn't sit around waiting forever if a script is malformed."]},{"l":"ssl","p":["Signature","hs.httpserver.hsminweb:ssl([flag]) - hsminwebTable | current-value","Type","Method","Description","Get or set the whether or not the web server utilizes SSL for HTTP request and response communications.","Parameters","flag - an optional boolean, defaults to false, indicating whether or not the server utilizes SSL for HTTP request and response traffic.","Returns","the hsminwebTable object if a parameter is provided, or the current value if no parameter is specified.","Notes","this flag can only be changed when the server is not running (i.e. the hs.httpserver.hsminweb:start method has not yet been called, or the hs.httpserver.hsminweb:stop method is called first.) this module is an extension to the Hammerspoon core module hs.httpserver, so it has the same considerations regarding SSL. See the documentation for hs.httpserver.new( help.hs.httpserver.new in the Hammerspoon console)."]},{"l":"start","p":["Signature","hs.httpserver.hsminweb:start() - hsminwebTable","Type","Method","Description","Start serving pages for the hsminweb web server.","Parameters","None","Returns","the hsminWebTable object","Notes"]},{"l":"stop","p":["Signature","hs.httpserver.hsminweb:stop() - hsminwebTable","Type","Method","Description","Stop serving pages for the hsminweb web server.","Parameters","None","Returns","the hsminWebTable object","Notes","this method is called automatically during garbage collection."]}],[{"i":"hshttpserverhsminwebcgilua","l":"hs.httpserver.hsminweb.cgilua","p":["Provides support functions in the cgilua module for Hammerspoon Minimal Web Server Lua templates.","This file contains functions which attempt to mimic as closely as possible the functions available to lua template files in the CGILua module provided by the Kepler Project at http://keplerproject.github.io/cgilua/index.html","The goal of this file is to provide most of the same functionality that CGILua does for template files. Any differences in the results or errors are most likely due to this code and you should direct all error reports or code change suggestions to the Hammerspoon GitHub repository.","Do not include this file directly in your Lua templates. This library is provided automatically in the cgilua table (module) in Lua template web server files. This submodule will only work from within that environment and should not be used in any other code."]},{"l":"Submodules","p":["hs.httpserver.hsminweb.cgilua.lp","hs.httpserver.hsminweb.cgilua.urlcode"]},{"l":"API Overview","p":["contentheader","doif","doscript","errorlog","Functions- API calls offered directly by the extension","header","htmlheader","mkabsoluteurl","mkurlpath","print","put","redirect","script_file","script_path","script_pdir","script_vdir","script_vpath","servervariable","splitfirst","splitonlast","tmp_path","tmpfile","tmpname","urlpath","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"script_file","p":["Signature","hs.httpserver.hsminweb.cgilua.script_file","Type","Variable","Description","The file name of the running script. Obtained from cgilua.script_path.","Notes","CGILua supports being invoked through a URL that amounts to set of chained paths and script names; this is not necessary for this module, so these variables may differ somewhat from a true CGILua installation; the intent of the variable has been maintained as closely as I can determine at present. If this changes, so will this documentation."]},{"l":"script_path","p":["Signature","hs.httpserver.hsminweb.cgilua.script_path","Type","Variable","Description","The system path of the running script. Equivalent to the CGI environment variable SCRIPT_FILENAME.","Notes","CGILua supports being invoked through a URL that amounts to set of chained paths and script names; this is not necessary for this module, so these variables may differ somewhat from a true CGILua installation; the intent of the variable has been maintained as closely as I can determine at present. If this changes, so will this documentation."]},{"l":"script_pdir","p":["Signature","hs.httpserver.hsminweb.cgilua.script_pdir","Type","Variable","Description","The directory of the running script. Obtained from cgilua.script_path.","Notes","CGILua supports being invoked through a URL that amounts to set of chained paths and script names; this is not necessary for this module, so these variables may differ somewhat from a true CGILua installation; the intent of the variable has been maintained as closely as I can determine at present. If this changes, so will this documentation."]},{"l":"script_vdir","p":["Signature","hs.httpserver.hsminweb.cgilua.script_vdir","Type","Variable","Description","If PATH_INFO represents a directory (i.e. ends with \"/\"), then this is equal to cgilua.script_vpath. Otherwise, this contains the directory portion of cgilua.script_vpath.","Notes","CGILua supports being invoked through a URL that amounts to set of chained paths and script names; this is not necessary for this module, so these variables may differ somewhat from a true CGILua installation; the intent of the variable has been maintained as closely as I can determine at present. If this changes, so will this documentation."]},{"l":"script_vpath","p":["Signature","hs.httpserver.hsminweb.cgilua.script_vpath","Type","Variable","Description","Equivalent to the CGI environment variable PATH_INFO or \"/\", if no PATH_INFO is set.","Notes","CGILua supports being invoked through a URL that amounts to set of chained paths and script names; this is not necessary for this module, so these variables may differ somewhat from a true CGILua installation; the intent of the variable has been maintained as closely as I can determine at present. If this changes, so will this documentation."]},{"l":"tmp_path","p":["Signature","hs.httpserver.hsminweb.cgilua.tmp_path","Type","Variable","Description","The directory used by cgilua.tmpfile"]},{"l":"urlpath","p":["Signature","hs.httpserver.hsminweb.cgilua.urlpath","Type","Variable","Description","The name of the script as requested in the URL. Equivalent to the CGI environment variable SCRIPT_NAME.","Notes","CGILua supports being invoked through a URL that amounts to set of chained paths and script names; this is not necessary for this module, so these variables may differ somewhat from a true CGILua installation; the intent of the variable has been maintained as closely as I can determine at present. If this changes, so will this documentation."]},{"l":"Functions"},{"l":"contentheader","p":["Signature","hs.httpserver.hsminweb.cgilua.contentheader(maintype, subtype) - none","Type","Function","Description","Sets the HTTP response type for the content being generated to maintype/subtype.","Parameters","maintype - the primary content type (e.g. \"text\") subtype - the sub-type for the content (e.g. \"plain\")","Returns","None","Notes","This sets the Content-Type header field for the HTTP response being generated. This will override any previous setting, including the default of \"text/html\"."]},{"l":"doif","p":["Signature","hs.httpserver.hsminweb.cgilua.doif(filename) - results","Type","Function","Description","Executes a lua file (given by filepath) if it exists.","Parameters","filepath - the file to interpret as Lua code","Returns","the values returned by the execution, or nil followed by an error message if the file does not exists.","Notes","This function only interprets the file if it exists; if the file does not exist, it returns an error to the calling code (not the web client) During the processing of a web request, the local directory is temporarily changed to match the local directory of the path of the file being served, as determined by the URL of the request. This is usually different than the Hammerspoon default directory which corresponds to the directory which contains the init.lua file for Hammerspoon."]},{"l":"doscript","p":["Signature","hs.httpserver.hsminweb.cgilua.doscript(filename) - results","Type","Function","Description","Executes a lua file (given by filepath).","Parameters","filepath - the file to interpret as Lua code","Returns","the values returned by the execution, or nil followed by an error message if the file does not exists.","Notes","If the file does not exist, an Internal Server error is returned to the client and an error is logged to the Hammerspoon console. During the processing of a web request, the local directory is temporarily changed to match the local directory of the path of the file being served, as determined by the URL of the request. This is usually different than the Hammerspoon default directory which corresponds to the directory which contains the init.lua file for Hammerspoon."]},{"l":"errorlog","p":["Signature","hs.httpserver.hsminweb.cgilua.errorlog(msg) - nil","Type","Function","Description","Sends the message to the hs.httpserver.hsminweb log, tagged as an error.","Parameters","msg - the message to send to the module's error log","Returns","None","Notes","Available within a lua template file as cgilua.errorlog By default, messages logged with this method will appear in the Hammerspoon console and are available in the hs.logger history."]},{"l":"header","p":["Signature","hs.httpserver.hsminweb.cgilua.header(key, value) - none","Type","Function","Description","Sets the HTTP response header key to value","Parameters","key - the HTTP response header to set a value to. This should be a string. value - the value for the header. This should be a string or a value representable as a string.","Returns","None","Notes","You should not use this function to set the value for the \"Content-Type\" key; instead use cgilua.contentheader or cgilua.htmlheader."]},{"l":"htmlheader","p":["Signature","hs.httpserver.hsminweb.cgilua.htmlheader() - none","Type","Function","Description","Sets the HTTP response type to \"text/html\"","Parameters","None","Returns","Notes","This sets the Content-Type header field for the HTTP response being generated to \"text/html\". This is the default value, so generally you should not need to call this function unless you have previously changed it with the cgilua.contentheader function."]},{"l":"mkabsoluteurl","p":["Signature","hs.httpserver.hsminweb.cgilua.mkabsoluteurl(uri) - string","Type","Function","Description","Returns an absolute URL for the given URI by prepending the path with the scheme, hostname, and port of this web server.","Parameters","URI - A path to a resource served by this web server. A \"/\" will be prepended to the path if it is not present.","Returns","An absolute URL for the given path of the form \"scheme://hostname:port/path\" where scheme will be either \"http\" or \"https\", and the hostname and port will match that of this web server.","Notes","If you wish to append query items to the path or expand a relative path into it's full path, see cgilua.mkurlpath."]},{"l":"mkurlpath","p":["Signature","hs.httpserver.hsminweb.cgilua.mkurlpath(uri, [args]) - string","Type","Function","Description","Creates a full document URI from a partial URI, including query arguments if present.","Parameters","uri - the full or partial URI (path and file component of a URL) of the document args - an optional table which should have key-value pairs that will be encoded to form a valid query at the end of the URI (see cgilua.urlcode.encodetable.","Returns","A full URI including any query arguments, if present.","Notes","This function is intended to be used in conjunction with cgilua.mkabsoluteurl to generate a full URL. If the uri provided does not begin with a \"/\", then the current directory path is prepended to the uri and any query arguments are appended. e.g. cgilua.mkabsoluteurl(cgiurl.mkurlpath(file.lp, { key = value, ... })) will return a full URL specifying the file file.lp in the current directory with the specified key-value pairs as query arguments."]},{"l":"print","p":["Signature","hs.httpserver.hsminweb.cgilua.print(...) - nil","Type","Function","Description","Appends the given arguments to the response body.","Parameters","... - a list of comma separated arguments to add to the response body","Returns","None","Notes","Available within a lua template file as cgilua.print This function works like the lua builtin print command in that it converts all its arguments to strings, separates them with tabs (\\t), and ends the line with a newline (\\n) before appending them to the current response body."]},{"l":"put","p":["Signature","hs.httpserver.hsminweb.cgilua.put(...) - nil","Type","Function","Description","Appends the given arguments to the response body.","Parameters","... - a list of comma separated arguments to add to the response body","Returns","None","Notes","Available within a lua template file as cgilua.put This function works by flattening tables and converting all values except for nil and false to their string representation and then appending them in order to the response body. Unlike cgilua.print, it does not separate values with a tab character or terminate the line with a newline character."]},{"l":"redirect","p":["Signature","hs.httpserver.hsminweb.cgilua.redirect(url, [args]) - none","Type","Function","Description","Sends the headers to force a redirection to the given URL adding the parameters in table args to the new URL.","Parameters","url - the URL the client should be redirected to args - an optional table which should have key-value pairs that will be encoded to form a valid query at the end of the URL (see cgilua.urlcode.encodetable.","Returns","None","Notes","This function should generally be followed by a return in your lua template page as no additional processing or output should occur when a request is to be redirected."]},{"l":"servervariable","p":["Signature","hs.httpserver.hsminweb.cgilua.servervariable(varname) - string","Type","Function","Description","Returns a string with the value of the CGI environment variable corresponding to varname.","Parameters","varname - the name of the CGI variable to get the value of.","Returns","the value of the CGI variable as a string, or nil if no such variable exists.","Notes","CGI Variables include server defined values commonly shared with CGI scripts and the HTTP request headers from the web request. The server variables include the following (note that depending upon the request and type of resource the URL refers to, not all values may exist for every request):\"AUTH_TYPE\" - If the server supports user authentication, and the script is protected, this is the protocol-specific authentication method used to validate the user.\"CONTENT_LENGTH\" - The length of the content itself as given by the client.\"CONTENT_TYPE\" - For queries which have attached information, such as HTTP POST and PUT, this is the content type of the data.\"DOCUMENT_ROOT\" - the real directory on the server that corresponds to a DOCUMENT_URI of \"/\". This is the first directory which contains files or sub-directories which are served by the web server.\"DOCUMENT_URI\" - the path portion of the HTTP URL requested\"GATEWAY_INTERFACE\" - The revision of the CGI specification to which this server complies. Format: CGI/revision\"PATH_INFO\" - The extra path information, as given by the client. In other words, scripts can be accessed by their virtual pathname, followed by extra information at the end of this path. The extra information is sent as PATH_INFO. This information should be decoded by the server if it comes from a URL before it is passed to the CGI script.\"PATH_TRANSLATED\" - The server provides a translated version of PATH_INFO, which takes the path and does any virtual-to-physical mapping to it.\"QUERY_STRING\" - The information which follows the \"?\" in the URL which referenced this script. This is the query information. It should not be decoded in any fashion. This variable should always be set when there is query information, regardless of command line decoding.\"REMOTE_ADDR\" - The IP address of the remote host making the request.\"REMOTE_HOST\" - The hostname making the request. If the server does not have this information, it should set REMOTE_ADDR and leave this unset.\"REMOTE_IDENT\" - If the HTTP server supports RFC 931 identification, then this variable will be set to the remote user name retrieved from the server. Usage of this variable should be limited to logging only.\"REMOTE_USER\" - If the server supports user authentication, and the script is protected, this is the username they have authenticated as.\"REQUEST_METHOD\" - The method with which the request was made. For HTTP, this is \"GET\", \"HEAD\", \"POST\", etc.\"REQUEST_TIME\" - the time the server received the request represented as the number of seconds since 00:00:00 UTC on 1 January 1970. Usable with os.date to provide the date and time in whatever format you require.\"REQUEST_URI\" - the DOCUMENT_URI with any query string present in the request appended. Usually this corresponds to the URL without the scheme or host information.\"SCRIPT_FILENAME\" - the actual path to the script being executed.\"SCRIPT_NAME\" - A virtual path to the script being executed, used for self-referencing URLs.\"SERVER_NAME\" - The server's hostname, DNS alias, or IP address as it would appear in self-referencing URLs.\"SERVER_PORT\" - The port number to which the request was sent.\"SERVER_PROTOCOL\" - The name and revision of the information protocol this request came in with. Format: protocol/revision\"SERVER_SOFTWARE\" - The name and version of the web server software answering the request (and running the gateway). Format: name/version* The HTTP Request header names are prefixed with \"HTTP_\", converted to all uppercase, and have all hyphens converted into underscores. Common headers (converted to their CGI format) might include, but are not limited to: HTTP_ACCEPT, HTTP_ACCEPT_ENCODING, HTTP_ACCEPT_LANGUAGE, HTTP_CACHE_CONTROL, HTTP_CONNECTION, HTTP_DNT, HTTP_HOST, HTTP_USER_AGENT This server also defines the following (which are replicated in the CGI variables above, so those should be used for portability): HTTP_X_REMOTE_ADDR, HTTP_X_REMOTE_PORT, HTTP_X_SERVER_ADDR, HTTP_X_SERVER_PORT A list of common request headers and their definitions can be found at https://en.wikipedia.org/wiki/List_of_HTTP_header_fields"]},{"l":"splitfirst","p":["Signature","hs.httpserver.hsminweb.cgilua.splitfirst(path) - path component, path remainder","Type","Function","Description","Returns two strings with the \"first directory\" and the \"remaining path\" of the given path string splitted on the first separator (\"/\" or \"\").","Parameters","path - the path to split","Returns","the first directory component, the remainder of the path","Notes"]},{"l":"splitonlast","p":["Signature","hs.httpserver.hsminweb.cgilua.splitonlast(path) - directory, file","Type","Function","Description","Returns two strings with the \"directory path\" and \"file\" parts of the given path string splitted on the last separator (\"/\" or \"\").","Parameters","path - the path to split","Returns","the directory path, the file","Notes","This function used to be called cgilua.splitpath and still can be accessed by this name for compatibility reasons. cgilua.splitpath may be deprecated in future versions."]},{"l":"tmpfile","p":["Signature","hs.httpserver.hsminweb.cgilua.tmpfile([dir], [namefunction]) - file[, err]","Type","Function","Description","Returns the file handle to a temporary file for writing, or nil and an error message if the file could not be created for any reason.","Parameters","dir - the system directory where the temporary file should be created. Defaults to cgilua.tmp_path. namefunction - an optional function used to generate unique file names for use as temporary files. Defaults to cgilua.tmpname.","Returns","the created file's handle and the filename or nil and an error message if the file could not be created.","Notes","The file is automatically deleted when the HTTP request has been completed, so if you need for the data to persist, make sure to io.flush or io.close the file handle yourself and copy the file to a more permanent location."]},{"l":"tmpname","p":["Signature","hs.httpserver.hsminweb.cgilua.tmpname() - string","Type","Function","Description","Returns a temporary file name used by cgilua.tmpfile.","Parameters","None","Returns","a temporary filename, without the path.","Notes","This function uses hs.host.globallyUniqueString to generate a unique file name."]}],[{"i":"hshttpserverhsminwebcgilualp","l":"hs.httpserver.hsminweb.cgilua.lp","p":["Support functions for the CGILua compatibility module for including and translating Lua template pages into Lua code for execution within the Hammerspoon environment to provide dynamic content for http requests.","The most commonly used function is likely to be cgilua.lp.include, which allows including a template driven file during rendering so that common code can be reused more easily. While passing in your own environment table for upvalues is possible, this is not recommended for general use because the default environment passed to each included file ensures that all server variables and the CGILua compatibility functions are available with the same names, and any new non-local (i.e. \"global\") variable defined are shared with the calling environment and not shared with the Hammerspoon global environment.","If your template file requires the ability to create variables in the Hammerspoon global environment, access the global environment directly through _G.","Note that the above considerations only apply to creating new \"global\" variables. Any currently defined global variables (for example, the hs table where Hammerspoon module functions are stored) are available within the template file as long as no local or CGILua environment variable shares the same name (e.g. _G[hs] and hs refer to the same table.","See the documentation for the cgilua.lp.include for more information."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","compile","include","translate"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"compile","p":["Signature","hs.httpserver.hsminweb.cgilua.lp.compile(source, name, [env]) - function","Type","Function","Description","Converts the specified Lua template source into a Lua function.","Parameters","source - a string containing the contents of a Lua/HTML template to be converted into a function name - a label used in an error message if execution of the returned function results in a run-time error env - an optional table specifying the environment to be used by the lua builtin function load when converting the source into a function. By default, the function will inherit its caller's environment.","Returns","A lua function which should take no arguments.","Notes","The source provided is first compared to a stored cache of previously translated templates and will re-use an existing translation if the template has been seen before. If the source is unique, cgilua.lp.translate is called on the template source. This function is used internally by cgilua.lp.include, and probably won't be useful unless you want to translate a dynamically generated template -- which has security implications, depending upon what inputs you use to generate this template, because the resulting Lua code will execute within your Hammerspoon environment. Be very careful about your inputs if you choose to ignore this warning."]},{"l":"include","p":["Signature","hs.httpserver.hsminweb.cgilua.lp.include(file, [env]) - none","Type","Function","Description","Includes the template specified by the file parameter.","Parameters","file - a string containing the file system path to the template to include. env - an optional table specifying the environment to be used by the included template. By default, the template will inherit its caller's environment.","Returns","None","Notes","* This function is called by the web server to process the template specified by the requested URL. Subsequent invocations of this function can be used to include common or re-used code from other template files and will be included in-line where the cgilua.lp.include function is invoked in the originating template. During the processing of a web request, the local directory is temporarily changed to match the local directory of the path of the file being served, as determined by the URL of the request. This is usually different than the Hammerspoon default directory which corresponds to the directory which contains the init.lua file for Hammerspoon.* The default template environment provides the following: the __index metamethod points to the _G environment variable in the Hammerspoon Lua instance; this means that any global variable in the Hammerspoon environment is available to the lua code in a template file. the __newindex metamethod points to a function which creates new \"global\" variables in the template files environment; this means that if a template includes another template file, and that second template file creates a \"global\" variable, that new variable will be available in the environment of the calling template, but will not be shared with the Hammerspoon global variable space; \"global\" variables created in this manner will be released when the HTTP request is completed. print is overridden so that its output is streamed into the response body to be returned when the web request completes. It follows the traditional pattern of the print builtin function: multiple arguments are separated by a tab character, the output is terminated with a new-line character, non-string arguments are converted to strings via the tostring builtin function. write is defined as an alternative to print and differs in the following ways from the print function described above: no intermediate tabs or newline are included in the output streamed to the response body. cgilua is defined as a table containing all of the functions included in this support sub-module. hsminweb is defined as a table which contains the following tables which may be of use: CGIVariables - a table containing key-value pairs of the same data available through the cgilua.servervariable function. id - a string, generated via hs.host.globallyUniqueString, unique to this specific HTTP request. log - a table/object representing the hs.httpserver.hsminweb instance of hs.logger. This can be used to log messages to the Hammerspoon console as described in the documentation for hs.logger. request - a table containing data representing the details of the HTTP request as it was made by the web client to the server. The following keys are commonly found: headers - a table containing key-value pairs representing the headers included in the HTTP request; unlike the values available through cgilua.servervariable or found in CGIVariables, these are available in their raw form. this table also contains a table with the key \"_\". This table contains functions and data used internally, and is described more fully in a supporting document (TBD). It is targeted primarily at custom error functions designed for use with hs.httpserver.hsminweb and should not generally be necessary for Lua template files. method - the method of the HTTP request, most commonly \"GET\" or \"POST\" path - the path portion of the requested URL. response - a table containing data representing the response being formed for the response to the HTTP request. This is generally handled for you by the cgilua support functions, but for special cases, you can modify it directly; this should contain only the following keys: body - a string containing the response body. As the lua template outputs content, this string is appended to. code - an integer representing the currently expected response code for the HTTP request. headers - a table containing key-value pairs of the currently defined response headers_ tmpfiles - used internally to track temporary files used in the completion of this HTTP request; do not modify directly."]},{"l":"translate","p":["Signature","hs.httpserver.hsminweb.cgilua.lp.translate(source) - luaCode","Type","Function","Description","Converts the specified Lua template source into Lua code executable within the Hammerspoon environment.","Parameters","source - a string containing the contents of a Lua/HTML template to be converted into true Lua code","Returns","The lua code corresponding to the provided source which can be fed into the load lua builtin to generate a Lua function.","Notes","This function is used internally by cgilua.lp.include, and probably won't be useful unless you want to translate a dynamically generated template -- which has security implications, depending upon what inputs you use to generate this template, because the resulting Lua code will execute within your Hammerspoon environment. Be very careful about your inputs if you choose to ignore this warning. To ensure that the translated code has access to the cgilua support functions, pass _ENV as the environment argument to the load lua builtin; otherwise any output generated by the resulting function will be sent to the Hammerspoon console and not included in the HTTP response sent back to the client."]}],[{"i":"hshttpserverhsminwebcgiluaurlcode","l":"hs.httpserver.hsminweb.cgilua.urlcode","p":["Support functions for the CGILua compatibility module for encoding and decoding URL components in accordance with RFC 3986."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","encodetable","escape","insertfield","parsequery","unescape"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"encodetable","p":["Signature","hs.httpserver.hsminweb.cgilua.urlcode.encodetable(table) - string","Type","Function","Description","Encodes the table of key-value pairs as a query string suitable for inclusion in a URL.","Parameters","table - a table of key-value pairs to be converted into a query string","Returns","a query string as specified in RFC 3986.","Notes","the string will be of the form: \"key1=value1&key2=value2...\" where all of the keys and values are properly escaped using cgilua.urlcode.escape. If you are crafting a URL by hand, the result of this function should be appended to the end of the URL after a \"?\" character to specify where the query string begins."]},{"l":"escape","p":["Signature","hs.httpserver.hsminweb.cgilua.urlcode.escape(string) - string","Type","Function","Description","URL encodes the provided string, making it safe as a component within a URL.","Parameters","string - the string to encode","Returns","a string with non-alphanumeric characters percent encoded and spaces converted into \"+\" as per RFC 3986.","Notes","this function assumes that the provided string is a single component and URL encodes all non-alphanumeric characters. Do not use this function to generate a URL query string -- use cgilua.urlcode.encodetable."]},{"l":"insertfield","p":["Signature","hs.httpserver.hsminweb.cgilua.urlcode.insertfield(table, key, value) - none","Type","Function","Description","Inserts the specified key and value into the table of key-value pairs.","Parameters","table - the table of arguments being built key - the key name value - the value to assign to the key specified","Returns","None","Notes","If the key already exists in the table, its value is converted to a table (if it isn't already) and the new value is added to the end of the array of values for the key. This function is used internally by cgilua.urlcode.parsequery or can be used to prepare a table of key-value pairs for cgilua.urlcode.encodetable."]},{"l":"parsequery","p":["Signature","hs.httpserver.hsminweb.cgilua.urlcode.parsequery(query, table) - none","Type","Function","Description","Parse the query string and store the key-value pairs in the provided table.","Parameters","query - a URL encoded query string, either from a URL or from the body of a POST request encoded in the \"x-www-form-urlencoded\" format. table - the table to add the key-value pairs to","Returns","None","Notes","The specification allows for the same key to be assigned multiple values in an encoded string, but does not specify the behavior; by convention, web servers assign these multiple values to the same key in an array (table). This function follows that convention. This is most commonly used by forms which allow selecting multiple options via check boxes or in a selection list. This function uses cgilua.urlcode.insertfield to build the key-value table."]},{"l":"unescape","p":["Signature","hs.httpserver.hsminweb.cgilua.urlcode.unescape(string) - string","Type","Function","Description","Removes any URL encoding in the provided string.","Parameters","string - the string to decode","Returns","a string with all \"+\" characters converted to spaces and all percent encoded sequences converted to their ascii equivalents.","Notes"]}],[{"i":"hsimage","l":"hs.image","p":["A module for capturing and manipulating image objects from other modules for use with hs.drawing."]},{"l":"API Overview","p":["additionalImageNames","bitmapRepresentation","colorAt","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","copy","croppedCopy","encodeAsURLString","Functions- API calls offered directly by the extension","getExifFromPath","getLoupedeckArray","iconForFile","iconForFileType","imageFromAppBundle","imageFromASCII","imageFromMediaFile","imageFromName","imageFromPath","imageFromURL","Methods- API calls which can only be made on an object returned by a constructor","name","saveToFile","setName","setSize","size","systemImageNames","template","toASCII"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"additionalImageNames","p":["Signature","hs.image.additionalImageNames[]","Type","Constant","Description","Table of arrays containing the names of additional internal system images which may also be available for use with hs.drawing.image and hs.image.imageFromName.","Notes","The list of these images was pulled from a collection located in the repositories at https://github.com/hetima?tab=repositories. As these image names are (for the most part) not formally listed in Apple's documentation or published APIs, their use cannot be guaranteed across all OS X versions. If you identify any images which may be missing or could be added, please file an issue at https://github.com/Hammerspoon/hammerspoon."]},{"l":"systemImageNames","p":["Signature","hs.image.systemImageNames[]","Type","Constant","Description","Table containing the names of internal system images for use with hs.drawing.image","Notes","Image names pulled from NSImage.h This table has a __ tostring() metamethod which allows listing it's contents in the Hammerspoon console by typing hs.image.systemImageNames."]},{"l":"Functions"},{"l":"getExifFromPath","p":["Signature","hs.image.getExifFromPath(path) - table | nil","Type","Function","Description","Gets the EXIF metadata information from an image file.","Parameters","path - The path to the image file.","Returns","A table of EXIF metadata, or nil if no metadata can be found or the file path is invalid.","Notes"]},{"l":"Constructors"},{"l":"iconForFile","p":["Signature","hs.image.iconForFile(file) - object","Type","Constructor","Description","Creates an hs.image object for the file or files specified","Parameters","file - the path to a file or an array of files to generate an icon for.","Returns","An hs.image object or nil, if there was an error. The image will be the icon for the specified file or an icon representing multiple files if an array of multiple files is specified.","Notes"]},{"l":"iconForFileType","p":["Signature","hs.image.iconForFileType(fileType) - object","Type","Constructor","Description","Creates an hs.image object of the icon for the specified file type.","Parameters","fileType - the file type, specified as a filename extension or a universal type identifier (UTI).","Returns","An hs.image object or nil, if there was an error","Notes"]},{"l":"imageFromAppBundle","p":["Signature","hs.image.imageFromAppBundle(bundleID) - object","Type","Constructor","Description","Creates an hs.image object using the icon from an App","Parameters","bundleID - A string containing the bundle identifier of an application","Returns","An hs.image object or nil, if no app icon was found","Notes"]},{"l":"imageFromASCII","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.image.imageFromASCII(ascii[, context]) - object | | Type | Constructor | | Description | Creates an image from an ASCII representation with the specified context. | | Parameters | ascii - A string containing a representation of an imagecontext - An optional table containing the context for each shape in the image. A shape is considered a single drawing element (point, ellipse, line, or polygon) as defined at https://github.com/cparnot/ASCIImage and http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstring/. The context table is an optional (possibly sparse) array in which the index represents the order in which the shapes are defined. The last (highest) numbered index in the sparse array specifies the default settings for any unspecified index and any settings which are not explicitly set in any other given index. Each index consists of a table which can contain one or more of the following keys:fillColor - the color with which the shape will be filled (defaults to black) Color is defined in a table containing color component values between 0.0 and 1.0 for each of the keys:red (default 0.0)green (default 0.0)blue (default 0.0)alpha (default 1.0)strokeColor - the color with which the shape will be stroked (defaults to black)lineWidth - the line width (number) for the stroke of the shape (defaults to 1 if anti-aliasing is on or (√2)/2 if it is off -- approximately 0.7)shouldClose - a boolean indicating whether or not the shape should be closed (defaults to true)antialias - a boolean indicating whether or not the shape should be antialiased (defaults to true) | | Returns | An hs.image object, or nil if an error occurred | | Notes | To use the ASCII diagram image support, see https://github.com/cparnot/ASCIImage and http://cocoamine.net/blog/2015/03/20/replacing-photoshop-with-nsstringThe default for lineWidth, when antialiasing is off, is defined within the ASCIImage library. Geometrically it represents one half of the hypotenuse of the unit right-triangle and is a more accurate representation of a \"real\" point size when dealing with arbitrary angles and lines than 1.0 would be. |"]},{"l":"imageFromMediaFile","p":["Signature","hs.image.imageFromMediaFile(file) - object","Type","Constructor","Description","Creates an hs.image object from a video file or the album artwork of an audio file or directory","Parameters","file - A string containing the path to an audio or video file or an album directory","Returns","An hs.image object","Notes","If a thumbnail can be generated for a video file, it is returned as an hs.image object, otherwise the filetype icon For audio files, this function first determines the containing directory (if not already a directory) It checks if any of the following common filenames for album art are present: cover.jpg front.jpg art.jpg album.jpg folder.jpg If one of the common album art filenames is found, it is returned as an hs.image object This is faster than extracting image metadata and allows for obtaining artwork associated with file formats such as .flac/.ogg If no common album art filenames are found, it attempts to extract image metadata from the file. This works for .mp3/.m4a files If embedded image metadata is found, it is returned as an hs.image object, otherwise the filetype icon"]},{"l":"imageFromName","p":["Signature","hs.image.imageFromName(string) - object","Type","Constructor","Description","Returns the hs.image object for the specified name, if it exists.","Parameters","Name - the name of the image to return.","Returns","An hs.image object or nil, if no image was found with the specified name.","Notes","Some predefined labels corresponding to OS X System default images can be found in hs.image.systemImageNames. Names are not required to be unique: The search order is as follows, and the first match found is returned: an image whose name was explicitly set with the setName method since the last full restart of Hammerspoon Hammerspoon's main application bundle the Application Kit framework (this is where most of the images listed in hs.image.systemImageNames are located) Image names can be assigned by the image creator or by calling the hs.image:setName method on an hs.image object."]},{"l":"imageFromPath","p":["Signature","hs.image.imageFromPath(path) - object","Type","Constructor","Description","Loads an image file","Parameters","path - A string containing the path to an image file on disk","Returns","An hs.image object, or nil if an error occurred","Notes"]},{"l":"imageFromURL","p":["Signature","hs.image.imageFromURL(url[, callbackFn]) - object","Type","Constructor","Description","Creates an hs.image object from the contents of the specified URL.","Parameters","url - a web url specifying the location of the image to retrieve callbackFn - an optional callback function to be called when the image fetching is complete","Returns","An hs.image object or nil, if the url does not specify image contents or is unreachable, or if a callback function is supplied","Notes","If a callback function is supplied, this function will return nil immediately and the image will be fetched asynchronously"]},{"l":"Methods"},{"l":"bitmapRepresentation","p":["Signature","hs.image:bitmapRepresentation([size], [gray]) - imageObject","Type","Method","Description","Creates a new bitmap representation of the image and returns it as a new hs.image object","Parameters","size- an optional table specifying the height and width the image should be scaled to in the bitmap. The size is specified as table with h and w keys set. Defaults to the size of the source image object. gray- an optional boolean, default false, specifying whether or not the bitmap should be converted to grayscale (true) or left as RGB color (false).","Returns","a new hs.image object","Notes","a bitmap representation of an image is rendered at the specific size specified (or inherited) when it is generated -- if you later scale it to a different size, the bitmap will be scaled as larger or smaller pixels rather than smoothly. this method may be useful when preparing images for other devices (e.g. hs.streamdeck)."]},{"l":"colorAt","p":["Signature","hs.image:colorAt(point) - table","Type","Method","Description","Reads the color of the pixel at the specified location.","Parameters","point- a hs.geometry.point","Returns","A hs.drawing.color object","Notes"]},{"l":"copy","p":["Signature","hs.image:copy() - imageObject","Type","Method","Description","Returns a copy of the image","Parameters","None","Returns","a new hs.image object","Notes"]},{"l":"croppedCopy","p":["Signature","hs.image:croppedCopy(rectangle) - object","Type","Method","Description","Returns a copy of the portion of the image specified by the rectangle specified.","Parameters","rectangle - a table with 'x', 'y', 'h', and 'w' keys specifying the portion of the image to return in the new image.","Returns","a copy of the portion of the image specified","Notes"]},{"l":"encodeAsURLString","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.image:encodeAsURLString([scale], [type]) - string | | Type | Method | | Description | Returns a bitmap representation of the image as a base64 encoded URL string | | Parameters | scale - an optional boolean, default false, which indicates that the image size (which macOS represents as points) should be scaled to pixels. For images that have Retina scale representations, this may result in an encoded image which is scaled down from the original source.type - optional case-insensitive string parameter specifying the bitmap image type for the encoded string (default PNG) PNG - save in Portable Network Graphics (PNG) format TIFF - save in Tagged Image File Format (TIFF) format BMP - save in Windows bitmap image (BMP) format GIF - save in Graphics Image Format (GIF) format JPEG - save in Joint Photographic Experts Group (JPEG) format | | Returns | the bitmap image representation as a Base64 encoded string | | Notes | You can convert the string back into an image object with hs.image.imageFromURL, e.g. hs.image.imageFromURL(string) |"]},{"l":"getLoupedeckArray","p":["Signature","hs.image:getLoupedeckArray() - table","Type","Method","Description","Translates an hs.image object into an RGB array string suitable for the Loupedeck CT device.","Parameters","None","Returns","A string containing the RGB data","Notes"]},{"l":"name","p":["Signature","hs.image:name([name]) - imageObject | string","Type","Method","Description","Get or set the name of the image represented by the hs.image object.","Parameters","name- an optional string specifying the new name for the hs.image object.","Returns","if no argument is provided, returns the current name. If a new name is specified, returns the hs.image object or nil if the name cannot be changed.","Notes","see also hs.image:setName for a variant that returns a boolean instead."]},{"l":"saveToFile","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.image:saveToFile(filename, [scale], [filetype]) - boolean | | Type | Method | | Description | Save the hs.image object as an image of type filetype to the specified filename. | | Parameters | filename - the path and name of the file to save.scale - an optional boolean, default false, which indicates that the image size (which macOS represents as points) should be scaled to pixels. For images that have Retina scale representations, this may result in a saved image which is scaled down from the original source.filetype - optional case-insensitive string parameter specifying the file type to save (default PNG) PNG - save in Portable Network Graphics (PNG) format TIFF - save in Tagged Image File Format (TIFF) format BMP - save in Windows bitmap image (BMP) format GIF - save in Graphics Image Format (GIF) format JPEG - save in Joint Photographic Experts Group (JPEG) format | | Returns | Status - a boolean value indicating success (true) or failure (false) | | Notes | Saves image at the size in points (or pixels, if scale is true) as reported by hs.image:size() for the image object |"]},{"l":"setName","p":["Signature","hs.image:setName(Name) - boolean","Type","Method","Description","Assigns the name assigned to the hs.image object.","Parameters","Name - the name to assign to the hs.image object.","Returns","Status - a boolean value indicating success (true) or failure (false) when assigning the specified name.","Notes","This method is included for backwards compatibility and is considered deprecated. It is equivalent to hs.image:name(name) and true or false."]},{"l":"setSize","p":["Signature","hs.image:setSize(size [, absolute]) - object","Type","Method","Description","Returns a copy of the image resized to the height and width specified in the size table.","Parameters","size - a table with 'h' and 'w' keys specifying the size for the new image. absolute - an optional boolean specifying whether or not the copied image should be resized to the height and width specified (true), or whether the copied image should be scaled proportionally to fit within the height and width specified (false). Defaults to false.","Returns","a copy of the image object at the new size","Notes","This method is included for backwards compatibility and is considered deprecated. It is equivalent to hs.image:copy():size(size, [absolute])."]},{"l":"size","p":["Signature","hs.image:size([size, [absolute]] ) - imageObject | size","Type","Method","Description","Get or set the size of the image represented by the hs.image object.","Parameters","size- an optional table with 'h' and 'w' keys specifying the size for the image. absolute- when specifying a new size, an optional boolean, default false, specifying whether or not the image should be resized to the height and width specified (true), or whether the copied image should be scaled proportionally to fit within the height and width specified (false).","Returns","If arguments are provided, return the hs.image object; otherwise returns the current size","Notes","See also hs.image:setSize for creating a copy of the image at a new size."]},{"l":"template","p":["Signature","hs.image:template([state]) - imageObject | boolean","Type","Method","Description","Get or set whether the image is considered a template image.","Parameters","state- an optional boolean specifying whether or not the image should be a template.","Returns","if a parameter is provided, returns the hs.image object; otherwise returns the current value","Notes","Template images consist of black and clear colors (and an alpha channel). Template images are not intended to be used as standalone images and are usually mixed with other content to create the desired final appearance. Images with this flag set to true usually appear lighter than they would with this flag set to false."]},{"l":"toASCII","p":["Signature","hs.image:toASCII([width, height]) - string","Type","Method","Description","Converts an image to an ASCII representation of the image in the form of a string.","Parameters","width - An optional width in pixels (defaults to image width if nothing supplied). height - An optional height in pixels (defaults to image height if nothing supplied).","Returns","A string.","Notes"]}],[{"i":"hsinspect","l":"hs.inspect","p":["Produce human-readable representations of Lua variables (particularly tables)","This extension is based on inspect.lua by Enrique García Cota https://github.com/kikito/inspect.lua"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","inspect"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"inspect","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.inspect.inspect(variable[, options]) - string | | Type | Function | | Description | Gets a human readable version of the supplied Lua variable | | Parameters | variable - A lua variable of some kindoptions - An optional table which can be used to influence the inspector. Valid keys are as follows: depth - A number representing the maximum depth to recurse into variable. Below that depth, data will be displayed as {...} newline - A string to use for line breaks. Defaults to \\n indent - A string to use for indentation. Defaults to (two spaces) process - A function that will be called for each item. It should accept two arguments, item (the current item being processed) and path (the item's position in the variable being inspected. The function should either return a processed form of the variable, the original variable itself if it requires no processing, or nil to remove the item from the inspected output. metatables - If true, include (and traverse) metatables | | Returns | A string containing the human readable version of variable | | Notes | For convenience, you can call this function as hs.inspect(variable)To view the output in Hammerspoon's Console, use print(hs.inspect(variable))For more information on the options, and some examples, see the upstream docs |"]}],[{"i":"hsipc","l":"hs.ipc","p":["Provides Hammerspoon with the ability to create both local and remote message ports for inter-process communication.","The most common use of this module is to provide support for the command line tool hs which can be added to your terminal shell environment with hs.ipc.cliInstall. The command line tool will not work unless the hs.ipc module is loaded first, so it is recommended that you add require(hs.ipc) to your Hammerspoon init.lua file (usually located at ~/.hammerspoon/init.lua) so that it is always available when Hammerspoon is running.","This module is based heavily on code from Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["cliColors","cliGetColors","cliInstall","cliResetColors","cliSaveHistory","cliSaveHistorySize","cliSetColors","cliStatus","cliUninstall","Constructors- API calls which return an object, typically one that offers API methods","delete","Deprecateds- API features which will be removed in an future release","Functions- API calls offered directly by the extension","isRemote","isValid","localPort","Methods- API calls which can only be made on an object returned by a constructor","name","remotePort","sendMessage"]},{"l":"API Documentation"},{"l":"Deprecateds"},{"l":"cliGetColors","p":["Signature","hs.ipc.cliGetColors() - table","Type","Deprecated","Description","See hs.ipc.cliColors."]},{"l":"cliResetColors","p":["Signature","hs.ipc.cliResetColors()","Type","Deprecated","Description","See hs.ipc.cliColors."]},{"l":"cliSetColors","p":["Signature","hs.ipc.cliSetColors(table) - table","Type","Deprecated","Description","See hs.ipc.cliColors."]},{"l":"Functions"},{"l":"cliColors","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.ipc.cliColors([colors]) - table | | Type | Function | | Description | Get or set the terminal escape codes used to produce colorized output in the hs command line tool | | Parameters | colors - an optional table or explicit nil specifying the colors to use when colorizing output for the command line tool. If you specify an explicit nil, the colors will revert to their defaults. If you specify a table it must contain one or more of the following keys with the terminal key sequence as a string for the value: initial - this color is used for the initial tagline when starting the command line tool and for output to the Hammerspoon console that is redirected to the instance. Defaults to \"\\27[35m\" (foreground magenta). input - this color is used for input typed in by the user into the cli instance. Defaults to \"\\27[33m\" (foreground yellow). output - this color is used for output generated by the commands executed within the instance and the results returned. Defaults to \"\\27[36m\" (foreground cyan). error - this color is used for lua errors generated by the commands executed within the instance. Defaults to \"\\27[31m\" (foreground red). | | Returns | a table describing the colors used when colorizing output in the hs command line tool. | | Notes | For a brief intro into terminal colors, you can visit a web site like this one http://jafrog.com/2013/11/23/colors-in-terminal.htmlLua doesn't support octal escapes in it's strings, so use \\x1b or \\27 to indicate the escape character e.g. ipc.cliSetColors{ initial = , input = \\27[33m, output = \\27[38;5;11m }Changes made with this function are saved with hs.settings with the following labels and will persist through a reload or restart of Hammerspoon: \"ipc.cli.color_initial\", \"ipc.cli.color_input\", \"ipc.cli.color_output\", and \"ipc.cli.color_error\" |"]},{"l":"cliInstall","p":["Signature","hs.ipc.cliInstall([path][,silent]) - bool","Type","Function","Description","Installs the cmdpost command line tool","Parameters","path - An optional string containing a path to install the tool in. Defaults to /usr/local silent - An optional boolean indicating whether or not to print errors to the CommandPost Error Log","Returns","A boolean, true if the tool was successfully installed, otherwise false","Notes","If this function fails, it is likely that you have some old/broken symlinks. You can use hs.ipc.cliUninstall() to forcibly tidy them up You may need to pre-create /usr/local/bin and /usr/local/share/man/man1 in a terminal using sudo, and adjust permissions so your login user can write to them"]},{"l":"cliSaveHistory","p":["Signature","hs.ipc.cliSaveHistory([state]) - boolean","Type","Function","Description","Get or set whether or not the command line tool saves a history of the commands you type.","Parameters","state - an optional boolean (default false) specifying whether or not a history of the commands you type into the command line tool should be saved between sessions.","Returns","the current, possibly changed, value","Notes","If this is enabled, your history is saved in hs.configDir .. .cli.history, which is usually \"~/.hammerspoon/.cli.history\". If you have multiple invocations of the command line tool running at the same time, only the history of the last one cleanly exited is saved; this is a limitation of the readline wrapper Apple has provided for libedit and at present no workaround is known. Changes made with this function are saved with hs.settings with the label \"ipc.cli.saveHistory\" and will persist through a reload or restart of Hammerspoon."]},{"l":"cliSaveHistorySize","p":["Signature","hs.ipc.cliSaveHistorySize([size]) - number","Type","Function","Description","Get or set whether the maximum number of commands saved when command line tool history saving is enabled.","Parameters","size - an optional integer (default 1000) specifying the maximum number of commands to save when hs.ipc.cliSaveHistory is set to true.","Returns","the current, possibly changed, value","Notes","When hs.ipc.cliSaveHistory is enabled, your history is saved in hs.configDir .. .cli.history, which is usually \"~/.hammerspoon/.cli.history\". If you have multiple invocations of the command line tool running at the same time, only the history of the last one cleanly exited is saved; this is a limitation of the readline wrapper Apple has provided for libedit and at present no workaround is known. Changes made with this function are saved with hs.settings with the label \"ipc.cli.historyLimit\" and will persist through a reload or restart of Hammerspoon."]},{"l":"cliStatus","p":["Signature","hs.ipc.cliStatus([path][,silent]) - bool","Type","Function","Description","Gets the status of the hs command line tool","Parameters","path - An optional string containing a path to look for the hs tool. Defaults to /usr/local silent - An optional boolean indicating whether or not to print errors to the Hammerspoon Console","Returns","A boolean, true if the hs command line tool is correctly installed, otherwise false","Notes"]},{"l":"cliUninstall","p":["Signature","hs.ipc.cliUninstall([path][,silent]) - bool","Type","Function","Description","Uninstalls the hs command line tool","Parameters","path - An optional string containing a path to remove the tool from. Defaults to /usr/local silent - An optional boolean indicating whether or not to print errors to the CommandPost Error Log","Returns","A boolean, true if the tool was successfully removed, otherwise false","Notes","This function used to be very conservative and refuse to remove symlinks it wasn't sure about, but now it will unconditionally remove whatever it finds at path/bin/cmdpost and path/share/man/man1/cmdpost.1. This is more likely to be useful in situations where this command is actually needed (please open an Issue on GitHub if you disagree!)"]},{"l":"Constructors"},{"l":"localPort","p":["Signature","hs.ipc.localPort(name, fn) - ipcObject","Type","Constructor","Description","Create a new local ipcObject for receiving and responding to messages from a remote port","Parameters","name - a string acting as the message port name. fn - the callback function which will receive messages.","Returns","the ipc object","Notes","a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port"]},{"l":"remotePort","p":["Signature","hs.ipc.remotePort(name) - ipcObject","Type","Constructor","Description","Create a new remote ipcObject for sending messages asynchronously to a local port","Parameters","name - a string acting as the message port name.","Returns","the ipc object","Notes","a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port"]},{"l":"Methods"},{"l":"delete","p":["Signature","hs.ipc:delete() - None","Type","Method","Description","Deletes the ipcObject, stopping it as well if necessary","Parameters","None","Returns","Notes"]},{"l":"isRemote","p":["Signature","hs.ipc:isRemote() - boolean","Type","Method","Description","Returns whether or not the ipcObject represents a remote or local port","Parameters","None","Returns","true if the object is a remote port, otherwise false","Notes","a remote port can send messages at any time to a local port; a local port can only respond to messages from a remote port"]},{"l":"isValid","p":["Signature","hs.ipc:isValid() - boolean","Type","Method","Description","Returns whether or not the ipcObject port is still valid or not","Parameters","None","Returns","true if the object is a valid port, otherwise false","Notes"]},{"l":"name","p":["Signature","hs.ipc:name() - string","Type","Method","Description","Returns the name the ipcObject uses for its port when active","Parameters","None","Returns","the port name as a string","Notes"]},{"l":"sendMessage","p":["Signature","hs.ipc:sendMessage(data, msgID, [waitTimeout], [oneWay]) - status, response","Type","Method","Description","Sends a message from a remote port to a local port","Parameters","data - any data type which is to be sent to the local port. The data will be converted into its string representation msgID - an integer message ID waitTimeout - an optional number, default 2.0, representing the number of seconds the method will wait to send the message and then wait for a response. The method may block up to twice this number of seconds, though usually it will be shorter. oneWay - an optional boolean, default false, indicating whether or not to wait for a response. It this is true, the second returned argument will be nil.","Returns","status - a boolean indicating whether or not the local port responded before the timeout (true) or if an error or timeout occurred waiting for the response (false) response - the response from the local port, usually a string, but may be nil if there was no response returned. If status is false, will contain an error message describing the error.","Notes"]}],[{"i":"hsitunes","l":"hs.itunes","p":["Controls for iTunes music player"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","displayCurrentTrack","ff","Functions- API calls offered directly by the extension","getCurrentAlbum","getCurrentArtist","getCurrentTrack","getDuration","getPlaybackState","getPosition","getVolume","isPlaying","isRunning","next","pause","play","playpause","previous","rw","setPosition","setVolume","state_paused","state_playing","state_stopped","volumeDown","volumeUp"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"state_paused","p":["Signature","hs.itunes.state_paused","Type","Constant","Description","Returned by hs.itunes.getPlaybackState() to indicates iTunes is paused"]},{"l":"state_playing","p":["Signature","hs.itunes.state_playing","Type","Constant","Description","Returned by hs.itunes.getPlaybackState() to indicates iTunes is playing"]},{"l":"state_stopped","p":["Signature","hs.itunes.state_stopped","Type","Constant","Description","Returned by hs.itunes.getPlaybackState() to indicates iTunes is stopped"]},{"l":"Functions"},{"l":"displayCurrentTrack","p":["Signature","hs.itunes.displayCurrentTrack()","Type","Function","Description","Displays information for current track on screen","Parameters","None","Returns","Notes"]},{"l":"ff","p":["Signature","hs.itunes.ff()","Type","Function","Description","Skips the current playback forwards by 5 seconds","Parameters","None","Returns","Notes"]},{"l":"getCurrentAlbum","p":["Signature","hs.itunes.getCurrentAlbum() - string or nil","Type","Function","Description","Gets the name of the current Album","Parameters","None","Returns","A string containing the Album of the current track, or nil if an error occurred","Notes"]},{"l":"getCurrentArtist","p":["Signature","hs.itunes.getCurrentArtist() - string or nil","Type","Function","Description","Gets the name of the current Artist","Parameters","None","Returns","A string containing the Artist of the current track, or nil if an error occurred","Notes"]},{"l":"getCurrentTrack","p":["Signature","hs.itunes.getCurrentTrack() - string or nil","Type","Function","Description","Gets the name of the current track","Parameters","None","Returns","A string containing the name of the current track, or nil if an error occurred","Notes"]},{"l":"getDuration","p":["Signature","hs.itunes.getDuration()","Type","Function","Description","Gets the duration (in seconds) of the current song","Parameters","None","Returns","The number of seconds long the current song is, 0 if no song is playing","Notes"]},{"l":"getPlaybackState","p":["Signature","hs.itunes.getPlaybackState()","Type","Function","Description","Gets the current playback state of iTunes","Parameters","None","Returns","A string containing one of the following constants:- hs.itunes.state_stopped- hs.itunes.state_paused- hs.itunes.state_playing","Notes"]},{"l":"getPosition","p":["Signature","hs.itunes.getPosition()","Type","Function","Description","Gets the playback position (in seconds) of the current song","Parameters","None","Returns","A number indicating the current position in the song","Notes"]},{"l":"getVolume","p":["Signature","hs.itunes.getVolume()","Type","Function","Description","Gets the current iTunes volume setting","Parameters","None","Returns","A number, between 1 and 100, containing the current iTunes playback volume","Notes"]},{"l":"isPlaying","p":["Signature","hs.itunes.isPlaying()","Type","Function","Description","Returns whether iTunes is currently playing","Parameters","None","Returns","A boolean value indicating whether iTunes is currently playing a track, or nil if an error occurred (unknown player state). Also returns false if the application is not running","Notes"]},{"l":"isRunning","p":["Signature","hs.itunes.isRunning()","Type","Function","Description","Returns whether iTunes is currently open. Most other functions in hs.itunes will automatically start the application, so this function can be used to guard against that.","Parameters","None","Returns","A boolean value indicating whether the iTunes application is running.","Notes"]},{"l":"next","p":["Signature","hs.itunes.next()","Type","Function","Description","Skips to the next itunes track","Parameters","None","Returns","Notes"]},{"l":"pause","p":["Signature","hs.itunes.pause()","Type","Function","Description","Pauses the current iTunes track","Parameters","None","Returns","Notes"]},{"l":"play","p":["Signature","hs.itunes.play()","Type","Function","Description","Plays the current iTunes track","Parameters","None","Returns","Notes"]},{"l":"playpause","p":["Signature","hs.itunes.playpause()","Type","Function","Description","Toggles play/pause of current iTunes track","Parameters","None","Returns","Notes"]},{"l":"previous","p":["Signature","hs.itunes.previous()","Type","Function","Description","Skips to previous itunes track","Parameters","None","Returns","Notes"]},{"l":"rw","p":["Signature","hs.itunes.rw()","Type","Function","Description","Skips the current playback backwards by 5 seconds","Parameters","None","Returns","Notes"]},{"l":"setPosition","p":["Signature","hs.itunes.setPosition(pos)","Type","Function","Description","Sets the playback position of the current song","Parameters","pos - A number indicating the playback position (in seconds) to skip to","Returns","None","Notes"]},{"l":"setVolume","p":["Signature","hs.itunes.setVolume(vol)","Type","Function","Description","Sets the iTunes playback volume","Parameters","vol - A number, between 1 and 100","Returns","None","Notes"]},{"l":"volumeDown","p":["Signature","hs.itunes.volumeDown()","Type","Function","Description","Decreases the iTunes playback volume by 5","Parameters","None","Returns","Notes"]},{"l":"volumeUp","p":["Signature","hs.itunes.volumeUp()","Type","Function","Description","Increases the iTunes playback volume by 5","Parameters","None","Returns","Notes"]}],[{"i":"hsjavascript","l":"hs.javascript","p":["Execute JavaScript code","This module has been replaced by: hs.osascript.javascript"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"hsjson","l":"hs.json","p":["JSON encoding and decoding","This module is based partially on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","decode","encode","read","write"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"decode","p":["Signature","hs.json.decode(jsonString) - table","Type","Function","Description","Decodes JSON into a table","Parameters","jsonString - A string containing some JSON data","Returns","A table representing the supplied JSON data","Notes","This is useful for retrieving some of the more complex lua table structures as a persistent setting (see hs.settings)"]},{"l":"encode","p":["Signature","hs.json.encode(val[, prettyprint]) - string","Type","Function","Description","Encodes a table as JSON","Parameters","val - A table containing data to be encoded as JSON prettyprint - An optional boolean, true to format the JSON for human readability, false to format the JSON for size efficiency. Defaults to false","Returns","A string containing a JSON representation of the supplied table","Notes","This is useful for storing some of the more complex lua table structures as a persistent setting (see hs.settings)"]},{"l":"read","p":["Signature","hs.json.read(path) - table | nil","Type","Function","Description","Decodes JSON file into a table.","Parameters","path - The path and filename of the JSON file to read.","Returns","A table representing the supplied JSON data, or nil if an error occurs.","Notes"]},{"l":"write","p":["Signature","hs.json.write(data, path, [prettyprint], [replace]) - boolean","Type","Function","Description","Encodes a table as JSON to a file","Parameters","data - A table containing data to be encoded as JSON path - The path and filename of the JSON file to write to prettyprint - An optional boolean, true to format the JSON for human readability, false to format the JSON for size efficiency. Defaults to false replace - An optional boolean, true to replace an existing file at the same path if one exists. Defaults to false","Returns","true if successful otherwise false if an error has occurred","Notes"]}],[{"i":"hskeycodes","l":"hs.keycodes","p":["Convert between key-strings and key-codes. Also provides functionality for querying and changing keyboard layouts."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","map","Functions- API calls offered directly by the extension","currentLayout","currentLayoutIcon","currentMethod","currentSourceID","iconForLayoutOrMethod","inputSourceChanged","layouts","methods","setLayout","setMethod"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"map","p":["Signature","hs.keycodes.map","Type","Constant","Description","A mapping from string representation of a key to its keycode, and vice versa.","Notes","For example: keycodes[1] == \"s\", and keycodes[\"s\"] == 1, and so on. This is primarily used by the hs.eventtap and hs.hotkey extensions. Valid strings are any single-character string, or any of the following strings: f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12, f13, f14, f15, f16, f17, f18, f19, f20, pad., pad*, pad+, pad/, pad-, pad=, pad0, pad1, pad2, pad3, pad4, pad5, pad6, pad7, pad8, pad9, padclear, padenter, return, tab, space, delete, escape, help, home, pageup, forwarddelete, end, pagedown, left, right, down, up, shift, rightshift, cmd, rightcmd, alt, rightalt, ctrl, rightctrl, capslock, fn"]},{"l":"Functions"},{"l":"currentLayout","p":["Signature","hs.keycodes.currentLayout() - string","Type","Function","Description","Gets the name of the current keyboard layout","Parameters","None","Returns","A string containing the name of the current keyboard layout","Notes"]},{"l":"currentLayoutIcon","p":["Signature","hs.keycodes.currentLayoutIcon() - hs.image object","Type","Function","Description","Gets the icon of the current keyboard layout","Parameters","None","Returns","An hs.image object containing the icon, if available","Notes"]},{"l":"currentMethod","p":["Signature","hs.keycodes.currentMethod() - string","Type","Function","Description","Get current input method","Parameters","None","Returns","Name of current input method, or nil","Notes"]},{"l":"currentSourceID","p":["Signature","hs.keycodes.currentSourceID([sourceID]) - string | boolean","Type","Function","Description","Get or set the source id for the keyboard input source","Parameters","sourceID - an optional string specifying the input source to set for keyboard input","Returns","If no parameter is provided, returns a string containing the source id for the current keyboard layout or input method; if a parameter is provided, returns true or false specifying whether or not the input source was able to be changed.","Notes"]},{"l":"iconForLayoutOrMethod","p":["Signature","hs.keycodes.iconForLayoutOrMethod(sourceName) - hs.image object","Type","Function","Description","Gets an hs.image object for a given keyboard layout or input method","Parameters","sourceName - A string containing the name of an input method or keyboard layout","Returns","An hs.image object, or nil if no image could be found","Notes","Not all layouts/methods have icons, so you should assume this will return nil at some point"]},{"l":"inputSourceChanged","p":["Signature","hs.keycodes.inputSourceChanged(fn)","Type","Function","Description","Sets the function to be called when your input source (i.e. qwerty, dvorak, colemac) changes.","Parameters","fn - A function that will be called when the input source changes. No arguments are supplied to the function.","Returns","None","Notes","This may be helpful for rebinding your hotkeys to appropriate keys in the new layout Setting this will un-set functions previously registered by this function."]},{"l":"layouts","p":["Signature","hs.keycodes.layouts([sourceID]) - table","Type","Function","Description","Gets all of the enabled keyboard layouts that the keyboard input source can be switched to","Parameters","sourceID - an optional boolean, default false, indicating whether the keyboard layout names should be returned (false) or their source IDs (true).","Returns","A table containing a list of keyboard layouts enabled in System Preferences","Notes","Only those layouts which can be explicitly switched to will be included in the table. Keyboard layouts which are part of input methods are not included. See hs.keycodes.methods."]},{"l":"methods","p":["Signature","hs.keycodes.methods([sourceID]) - table","Type","Function","Description","Gets all of the enabled input methods that the keyboard input source can be switched to","Parameters","sourceID - an optional boolean, default false, indicating whether the keyboard input method names should be returned (false) or their source IDs (true).","Returns","A table containing a list of input methods enabled in System Preferences","Notes","Keyboard layouts which are not part of an input method are not included in this table. See hs.keycodes.layouts."]},{"l":"setLayout","p":["Signature","hs.keycodes.setLayout(layoutName) - boolean","Type","Function","Description","Changes the system keyboard layout","Parameters","layoutName - A string containing the name of an enabled keyboard layout","Returns","A boolean, true if the layout was successfully changed, otherwise false","Notes"]},{"l":"setMethod","p":["Signature","hs.keycodes.setMethod(methodName) - boolean","Type","Function","Description","Changes the system input method","Parameters","methodName - A string containing the name of an enabled input method","Returns","A boolean, true if the method was successfully changed, otherwise false","Notes"]}],[{"i":"hslayout","l":"hs.layout","p":["Window layout manager","This extension allows you to trigger window placement/sizing to a number of windows at once"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","left25","left30","left50","left70","left75","maximized","right25","right30","right50","right70","right75","Functions- API calls offered directly by the extension","apply"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"left25","p":["Signature","hs.layout.left25","Type","Constant","Description","A unit rect which will make a window occupy the left 25% of a screen"]},{"l":"left30","p":["Signature","hs.layout.left30","Type","Constant","Description","A unit rect which will make a window occupy the left 30% of a screen"]},{"l":"left50","p":["Signature","hs.layout.left50","Type","Constant","Description","A unit rect which will make a window occupy the left 50% of a screen"]},{"l":"left70","p":["Signature","hs.layout.left70","Type","Constant","Description","A unit rect which will make a window occupy the left 70% of a screen"]},{"l":"left75","p":["Signature","hs.layout.left75","Type","Constant","Description","A unit rect which will make a window occupy the left 75% of a screen"]},{"l":"maximized","p":["Signature","hs.layout.maximized","Type","Constant","Description","A unit rect which will make a window occupy all of a screen"]},{"l":"right25","p":["Signature","hs.layout.right25","Type","Constant","Description","A unit rect which will make a window occupy the right 25% of a screen"]},{"l":"right30","p":["Signature","hs.layout.right30","Type","Constant","Description","A unit rect which will make a window occupy the right 30% of a screen"]},{"l":"right50","p":["Signature","hs.layout.right50","Type","Constant","Description","A unit rect which will make a window occupy the right 50% of a screen"]},{"l":"right70","p":["Signature","hs.layout.right70","Type","Constant","Description","A unit rect which will make a window occupy the right 70% of a screen"]},{"l":"right75","p":["Signature","hs.layout.right75","Type","Constant","Description","A unit rect which will make a window occupy the right 75% of a screen"]},{"l":"Functions"},{"l":"apply","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.layout.apply(table[, windowTitleComparator]) | | Type | Function | | Description | Applies a layout to applications/windows | | Parameters | table - A table describing your desired layout. Each element in the table should be another table describing a set of windows to match, and their desired size/position. The fields in each of these tables are: A string containing an application name, or an hs.application object, or nil A string containing a window title, or an hs.window object, or a function, or nil A string containing a screen name, or an hs.screen object, or a function that accepts no parameters and returns an hs.screen object, or nil to select the first available screen A Unit rect, or a function which is called for each window and returns a unit rect (see hs.window.moveToUnit()). The function should accept one parameter, which is the window object. A Frame rect, or a function which is called for each window and returns a frame rect (see hs.screen:frame()). The function should accept one parameter, which is the window object. A Full-frame rect, of a function which is called for each window and returns a full-frame rect (see hs.screen:fullFrame()). The function should accept one parameter, which is the window object.windowTitleComparator - (optional) Function to use for window title comparison. It is called with two string arguments (below) and its return value is evaluated as a boolean. If no comparator is provided, the '==' operator is used windowTitle: The :title() of the window object being examined layoutWindowTitle: The window title string (second field) specified in each element of the layout table Optionally a final element, the key \"options\" and a table value that can contain the following keys:absolute_x: A boolean indicating that the x value in a frame rect above, is an absolute co-ordinate (ie useful for negative absolute co-ordinates)absolute_y: A boolean indicating that the y value in a frame rect above, is an absolute co-ordinate (ie useful for negative absolute co-ordinates) | | Returns | None | | Notes | If the application name argument is nil, window titles will be matched regardless of which app they belong toIf the window title argument is nil, all windows of the specified application will be matchedIf the window title argument is a function, the function will be called with the application name argument (which may be nil), and should return a table of hs.window objects (even if there is only one window it must be in a table)You can specify both application name and window title if you want to match only one window of a particular applicationIf you specify neither application name or window title, no windows will be matched :)Monitor name is a string, as found in hs.screen:name() or hs.screen:getUUID(). You can also pass an hs.screen object, or a function that returns an hs.screen object. If you pass nil, the first screen will be selectedThe final three arguments use hs.geometry.rect() objects to describe the desired position and size of matched windows: Unit rect will be passed to hs.window.moveToUnit() Frame rect will be passed to hs.window.setFrame() (including menubar and dock) Full-frame rect will be passed to hs.window.setFrame() (ignoring menubar and dock)If either the x or y components of frame/full-frame rect are negative, they will be applied as offsets against the opposite edge of the screen (e.g. If x is -100 then the left edge of the window will be 100 pixels from the right edge of the screen)Only one of the rect arguments will apply to any matched windows. If you specify more than one, the first will winAn example usage: lua/lili layout1 = {/lili {Mail, nil, Color LCD, hs.layout.maximized, nil, nil},/lili {Safari, nil, Thunderbolt Display, hs.layout.maximized, nil, nil},/lili {iTunes, iTunes, Color LCD, hs.layout.maximized, nil, nil},/lili {iTunes, MiniPlayer, Color LCD, nil, nil, hs.geometry.rect(0, -48, 400, 48)},/lili }An example of a function that works well as a windowTitleComparator is the Lua built-in string.match, which uses Lua Patterns to match strings |"]}],[{"i":"hslocation","l":"hs.location","p":["altitude- a number indicating altitude above (positive) or below (negative) sea-level. When not specified in a table being used as an argument, this defaults to 0.0.","course- a number specifying the direction in which the device is traveling. If this value is negative, then the value is invalid and should not be trusted. On current Macintosh models, this will almost always be a negative number. When not specified in a table being used as an argument, this defaults to -1.0.","Determine the machine's location and useful information about that location","horizontalAccuracy- a number specifying the radius of uncertainty for the location, measured in meters. If negative, the latitude and longitude keys are invalid and should not be trusted. When not specified in a table being used as an argument, this defaults to 0.0.","hs.location.get- no longer requires that you invoke hs.location.start before using this function. The information returned will be the last cached value, which is updated internally whenever additional WiFi networks are detected or lost (not necessarily joined). When update tracking is enabled with the hs.location.start function, calculations based upon the RSSI of all currently seen networks are preformed more often to provide a more precise fix, but it's still based on the WiFi networks near you. In many cases, the value retrieved when the WiFi state is changed should be sufficiently accurate.","hs.location.servicesEnabled- replaces hs.location.services_enabled. While the earlier function is included for backwards compatibility, it will display a deprecation warning to the console the first time it is invoked and may go away completely in the future.","identifier- a string for use in identifying the region. When not specified in a table being used as an argument, a new value is generated with hs.host.uuid.","latitude- a number specifying the latitude in degrees. Positive values indicate latitudes north of the equator. Negative values indicate latitudes south of the equator. When not specified in a table being used as an argument, this defaults to 0.0.","locationTable- a table specifying location coordinates containing one or more of the following key-value pairs:","longitude- a number specifying the latitude in degrees. Positive values indicate latitudes north of the equator. Negative values indicate latitudes south of the equator. When not specified in a table being used as an argument, this defaults to 0.0.","longitude- a number specifying the longitude in degrees. Measurements are relative to the zero meridian, with positive values extending east of the meridian and negative values extending west of the meridian. When not specified in a table being used as an argument, this defaults to 0.0.","notifyOnEntry- a boolean specifying whether or not a callback with the \"didEnterRegion\" message should be generated when the machine enters the region. When not specified in a table being used as an argument, this defaults to true.","notifyOnExit- a boolean specifying whether or not a callback with the \"didExitRegion\" message should be generated when the machine exits the region. When not specified in a table being used as an argument, this defaults to true.","radius- a number specifying the radius (measured in meters) that defines the region’s outer boundary. When not specified in a table being used as an argument, this defaults to 0.0.","regionTable- a table specifying a circular region containing one or more of the following key-value pairs:","speed- a number specifying the instantaneous speed of the device in meters per second. If this value is negative, then the value is invalid and should not be trusted. On current Macintosh models, this will almost always be a negative number. When not specified in a table being used as an argument, this defaults to -1.0.","The following labels are used to describe tables which are used by functions and methods as parameters or return values in this module and in hs.location.geocoder. These tables are described as follows:","This module is backwards compatible with its predecessor with the following changes:","This module provides functions for getting current location information and tracking location changes. It expands on the earlier version of the module by adding the ability to create independent locationObjects which can enable/disable location tracking independent of other uses of Location Services by Hammerspoon, adds region monitoring for exit and entry, and adds the retrieval of geocoding information through the hs.location.geocoder submodule.","timestamp- a number specifying the time at which this location was determined. This number is the number of seconds since January 1, 1970 at midnight, GMT, and is a floating point number, so you should use math.floor on this number before using it as an argument to Lua's os.date function. When not specified in a table being used as an argument, this defaults to the current time.","verticalAccuracy- a number specifying the accuracy of the altitude value in meters. If negative, the altitude key is invalid and should not be trusted. When not specified in a table being used as an argument, this defaults to -1.0."]},{"l":"Submodules","p":["hs.location.geocoder"]},{"l":"API Overview","p":["addMonitoredRegion","authorizationStatus","callback","Constructors- API calls which return an object, typically one that offers API methods","currentRegion","distance","distanceFrom","dstOffset","Functions- API calls offered directly by the extension","get","location","Methods- API calls which can only be made on an object returned by a constructor","monitoredRegions","new","register","removeMonitoredRegion","servicesEnabled","start","startTracking","stop","stopTracking","sunrise","sunset","unregister"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"authorizationStatus","p":["Signature","hs.location.authorizationStatus() - string","Type","Function","Description","Returns a string describing the authorization status of Hammerspoon's use of Location Services.","Parameters","None","Returns","a string matching one of the following:\"undefined\" - The user has not yet made a choice regarding whether Hammerspoon can use location services.\"restricted\" - Hammerspoon is not authorized to use location services. The user cannot change this status, possibly due to active restrictions such as parental controls being in place.\"denied\" - The user explicitly denied the use of location services for Hammerspoon or location services are currently disabled in System Preferences.\"authorized\" - Hammerspoon is authorized to use location services.","Notes","The first time you use a function which requires Location Services, you will be prompted to grant Hammerspoon access. If you wish to change this permission after the initial prompt, you may do so from the Location Services section of the Security & Privacy section in the System Preferences application."]},{"l":"distance","p":["Signature","hs.location.distance(from, to) - meters","Type","Function","Description","Measures the distance between two points of latitude and longitude","Parameters","from- A locationTable as described in the module header to- A locationTable as described in the module header","Returns","A number containing the distance between from and to in meters. The measurement is made by tracing a line that follows an idealised curvature of the earth","Notes","This function does not require Location Services to be enabled for Hammerspoon."]},{"l":"dstOffset","p":["Signature","hs.location.dstOffset() - number","Type","Function","Description","Returns a number giving the current daylight savings time offset","Parameters","None","Returns","The number of minutes of daylight savings offset, zero if there is no offset","Notes","This value is derived from the currently configured system timezone, it does not use Location Services"]},{"l":"get","p":["Signature","hs.location.get() - locationTable or nil","Type","Function","Description","Returns a table representing the current location","Parameters","None","Returns","If successful, a locationTable as described in the module header, otherwise nil.","Notes","This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services. If access to Location Services is enabled for Hammerspoon, this function will return the most recent cached data for the computer's location. Internally, the Location Services cache is updated whenever additional WiFi networks are detected or lost (not necessarily joined). When update tracking is enabled with the hs.location.start function, calculations based upon the RSSI of all currently seen networks are preformed more often to provide a more precise fix, but it's still based on the WiFi networks near you."]},{"l":"register","p":["Signature","hs.location.register(tag, fn[, distance])","Type","Function","Description","Registers a callback function to be called when the system location is updated","Parameters","tag- A string containing a unique tag, used to identify the callback later fn- A function to be called when the system location is updated. The function should expect a single argument which will be a locationTable as described in the module header. distance- An optional number containing the minimum distance in meters that the system should have moved, before calling the callback. Defaults to 0","Returns","None","Notes"]},{"l":"servicesEnabled","p":["Signature","hs.location.servicesEnabled() - bool","Type","Function","Description","Gets the state of OS X Location Services","Parameters","None","Returns","True if Location Services are enabled, otherwise false","Notes"]},{"l":"start","p":["Signature","hs.location.start() - boolean","Type","Function","Description","Begins location tracking using OS X's Location Services so that registered callback functions can be invoked as the computer location changes.","Parameters","None","Returns","True if the operation succeeded, otherwise false","Notes","This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."]},{"l":"stop","p":["Signature","hs.location.stop()","Type","Function","Description","Stops location tracking. Registered callback functions will cease to receive notification of location changes.","Parameters","None","Returns","Notes"]},{"l":"sunrise","p":["Signature","hs.location.sunrise(latitude, longitude, offset[, date]) - number or string","Type","Function","Description","Returns the time of official sunrise for the supplied location","Parameters","latitude- A number containing a latitude longitude- A number containing a longitude offset- A number containing the offset from UTC (in hours) for the given latitude/longitude. date- An optional table containing date information (equivalent to the output of os.date(*t)). Defaults to the current date","Returns","A number containing the time of sunrise (represented as seconds since the epoch) for the given date. If no date is given, the current date is used. If the sun doesn't rise on the given day, the string \"N/R\" is returned.","Notes","You can turn the return value into a more useful structure, with os.date(*t, returnvalue) For compatibility with the locationTable object returned by hs.location.get, this function can also be invoked as hs.location.sunrise(locationTable, offset[, date])."]},{"l":"sunset","p":["Signature","hs.location.sunset(latitude, longitude, offset[, date]) - number or string","Type","Function","Description","Returns the time of official sunset for the supplied location","Parameters","latitude- A number containing a latitude longitude- A number containing a longitude offset- A number containing the offset from UTC (in hours) for the given latitude/longitude. date- An optional table containing date information (equivalent to the output of os.date(*t)). Defaults to the current date","Returns","A number containing the time of sunset (represented as seconds since the epoch) for the given date. If no date is given, the current date is used. If the sun doesn't set on the given day, the string \"N/S\" is returned.","Notes","You can turn the return value into a more useful structure, with os.date(*t, returnvalue) For compatibility with the locationTable object returned by hs.location.get, this function can also be invoked as hs.location.sunset(locationTable, offset[, date])."]},{"l":"unregister","p":["Signature","hs.location.unregister(tag)","Type","Function","Description","Unregisters a callback","Parameters","tag- A string containing the unique tag a callback was registered with","Returns","None","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.location.new() - locationObject","Type","Constructor","Description","Create a new location object which can receive callbacks independent of other Hammerspoon use of Location Services.","Parameters","None","Returns","a locationObject","Notes","The locationObject created will receive callbacks independent of all other locationObjects and the legacy callback functions created with hs.location.register. It can also receive callbacks for region changes which are not available through the legacy callback mechanism."]},{"l":"Methods"},{"l":"addMonitoredRegion","p":["Signature","hs.location:addMonitoredRegion(regionTable) - locationObject | nil","Type","Method","Description","Adds a region to be monitored by Location Services","Parameters","regionTable- a region table as described in the module header","Returns","if the region table was able to be added to Location Services for monitoring, returns the locationObject; otherwise returns nil","Notes","This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services. If the identifier key is not provided, a new UUID string is generated and used as the identifier. If the identifier key matches an already monitored region, this region will replace the existing one."]},{"l":"callback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.location:callback(fn) - locationObject | | Type | Method | | Description | Sets or removes the callback function for this locationObject | | Parameters | a function, or nil to remove the current function, which will be invoked as a callback for messages generated by this locationObject. The callback function should expect 3 or 4 arguments as follows: the locationObject itself a string specifying the message generated by the locationObject:\"didChangeAuthorizationStatus\" - the user has changed the authorization status for Hammerspoon's use of Location Services. The third argument will be a string as described in the hs.location.authorizationStatus function.\"didUpdateLocations\" - the current location has changed or been refined. This message will only occur if location tracking has been enabled with hs.location:startTracking. The third argument will be a table containing one or more locationTables as array elements. The most recent location update is contained in the last element of the array.\"didFailWithError\" - there was an error retrieving location information. The third argument will be a string describing the error that occurred.\"didStartMonitoringForRegion\" - a new region has successfully been added to the regions being monitored. The third argument will be the regionTable for the region which was just added.\"monitoringDidFailForRegion\" - an error occurred while trying to add a new region to the list of monitored regions. The third argument will be the regionTable for the region that could not be added, and the fourth argument will be a string containing an error message describing why monitoring for the region failed.\"didEnterRegion\" - the current location has entered a region with the notifyOnEntry field set to true specified with the hs.location:addMonitoredRegion method. The third argument will be the regionTable for the region entered.\"didExitRegion\" - the current location has exited a region with the notifyOnExit field set to true specified with the hs.location:addMonitoredRegion method. The third argument will be the regionTable for the region exited. | | Returns | the locationObject | | Notes | |"]},{"l":"currentRegion","p":["Signature","hs.location:currentRegion() - identifier | nil","Type","Method","Description","Returns the string identifier for the current region","Parameters","None","Returns","the string identifier for the region that the current location is within, or nil if the current location is not within a currently monitored region or location services cannot be enabled for Hammerspoon.","Notes","This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."]},{"l":"distanceFrom","p":["Signature","hs.location:distanceFrom(locationTable) - distance | nil","Type","Method","Description","Enable callbacks for location changes/refinements for this locationObject","Parameters","None","Returns","the distance the specified location is from the current location in meters or nil if Location Services cannot be enabled for Hammerspoon. The measurement is made by tracing a line that follows an idealised curvature of the earth","Notes","This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."]},{"l":"location","p":["Signature","hs.location:location() - locationTable | nil","Type","Method","Description","Returns the current location","Parameters","None","Returns","If successful, a locationTable as described in the module header, otherwise nil.","Notes","This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services. If access to Location Services is enabled for Hammerspoon, this function will return the most recent cached data for the computer's location. Internally, the Location Services cache is updated whenever additional WiFi networks are detected or lost (not necessarily joined). When update tracking is enabled with the hs.location.start function, calculations based upon the RSSI of all currently seen networks are preformed more often to provide a more precise fix, but it's still based on the WiFi networks near you."]},{"l":"monitoredRegions","p":["Signature","hs.location:monitoredRegions() - table | nil","Type","Method","Description","Returns a table containing the regionTables for the regions currently being monitored for this locationObject","Parameters","None","Returns","if Location Services can be enabled for Hammerspoon, returns a table containing regionTables for each region which is being monitored for this locationObject; otherwise nil","Notes","This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."]},{"l":"removeMonitoredRegion","p":["Signature","hs.location:removeMonitoredRegion(identifier) - locationObject | false | nil","Type","Method","Description","Removes a monitored region from Location Services","Parameters","identifier- a string which should contain the identifier of the region to remove from monitoring","Returns","if the region identifier matches a currently monitored region, returns the locationObject; if it does not match a currently monitored region, returns false; returns nil if an error occurs or if Location Services is not currently active (no function or method which activates Location Services has been invoked yet) or enabled for Hammerspoon.","Notes","This method activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services. If the identifier key is not provided, a new UUID string is generated and used as the identifier. If the identifier key matches an already monitored region, this region will replace the existing one."]},{"l":"startTracking","p":["Signature","hs.location:startTracking() - locationObject","Type","Method","Description","Enable callbacks for location changes/refinements for this locationObject","Parameters","None","Returns","the locationObject","Notes","This function activates Location Services for Hammerspoon, so the first time you call this, you may be prompted to authorise Hammerspoon to use Location Services."]},{"l":"stopTracking","p":["Signature","hs.location:stopTracking() - locationObject","Type","Method","Description","Disable callbacks for location changes/refinements for this locationObject","Parameters","None","Returns","the locationObject","Notes"]}],[{"i":"hslocationgeocoder","l":"hs.location.geocoder","p":["A placemarkTable is returned to the callback functions used by the constructor methods of this module. These tables may contain one or more of the following keys:","addressDictionary- a table containing key-value pairs for the components of the address for the placemark","administrativeArea- a string containing the state or province associated with the placemark","areasOfInterest- a table as an array of strings describing areas of interest associated with the placemark","Converts between GPS coordinates and more user friendly representations like an address or points of interest.","country- a string containing the name of the country associated with the placemark","countryCode- a string containing the standard abbreviation for the country associated with the placemark","inlandWater- a string containing the name of the inland water body associated with the placemark","locality- a string containing the city associated with the placemark","location- the locationTable, as described in the hs.location module header, for the placemark","name- a string containing the name of the placemark","ocean- a string containing the name of the ocean associated with the placemark","postalCode- a string containing the postal code associated with the placemark","region- a regionTable, as described in the hs.location module header, specifying the he geographic region associated with the placemark","subAdministrativeArea- a string containing additional administrative area information for the placemark","subLocality- a string containing additional city-level information for the placemark","subThoroughfare- a string containing additional street-level information for the placemark","This module converts between GPS coordinates and the user-friendly representation of that coordinate. A user-friendly representation of the coordinate typically consists of the street, city, state, and country information corresponding to the given location, but it may also contain a relevant point of interest, landmarks, or other identifying information.","thoroughfare- a string containing the street address associated with the placemark","timeZone- a string containing the time zone associated with the placemark","Use of this module does not require Location Services to be enabled for Hammerspoon.","Your computer must have network access for the geocoder object to return detailed placemark information and is rate limited. Geocoding requests are rate-limited, so making too many requests in a short period of time may cause some of the requests to fail with a network error."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","lookupAddress","lookupAddressNear","lookupLocation","Methods- API calls which can only be made on an object returned by a constructor","cancel","geocoding"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"lookupAddress","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.location.geocoder.lookupAddress(address, fn) - geocoderObject | | Type | Constructor | | Description | Look up geocoding information for the specified address. | | Parameters | address - a string containing address information as commonly expressed in your locale.fn - A callback function which should expect 2 arguments and return none: state - a boolean indicating whether or not geocoding data was provided result - if state is true indicating that geocoding was successful, this argument will be a table containing one or more placemarkTables (as described in the module header) containing the geocoding data available for the location. If state is false, this argument will be a string containing an error message describing the problem encountered. | | Returns | a geocodingObject | | Notes | This constructor requires internet access and the callback will be invoked with an error message if the internet is not currently accessible.This constructor does not require Location Services to be enabled for Hammerspoon. |"]},{"l":"lookupAddressNear","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.location.geocoder.lookupAddressNear(address, [regionTable], fn) - geocoderObject | | Type | Constructor | | Description | Look up geocoding information for the specified address. | | Parameters | address - a string containing address information as commonly expressed in your locale.regionTable - an optional regionTable as described in the hs.location header used to prioritize the order of the results found. If this parameter is not provided and Location Services is enabled for Hammerspoon, a region containing current location is used.fn - A callback function which should expect 2 arguments and return none: state - a boolean indicating whether or not geocoding data was provided result - if state is true indicating that geocoding was successful, this argument will be a table containing one or more placemarkTables (as described in the module header) containing the geocoding data available for the location. If state is false, this argument will be a string containing an error message describing the problem encountered. | | Returns | a geocodingObject | | Notes | This constructor requires internet access and the callback will be invoked with an error message if the internet is not currently accessible.This constructor does not require Location Services to be enabled for Hammerspoon.While a partial address can be given, the more information you provide, the more likely the results will be useful. The regionTable only determines sort order if multiple entries are returned, it does not constrain the search. |"]},{"l":"lookupLocation","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.location.geocoder.lookupLocation(locationTable, fn) - geocoderObject | | Type | Constructor | | Description | Look up geocoding information for the specified location. | | Parameters | locationTable - a locationTable as described in the hs.location header specifying a location to obtain geocoding information about.fn - A callback function which should expect 2 arguments and return none: state - a boolean indicating whether or not geocoding data was provided result - if state is true indicating that geocoding was successful, this argument will be a table containing one or more placemarkTables (as described in the module header) containing the geocoding data available for the location. If state is false, this argument will be a string containing an error message describing the problem encountered. | | Returns | a geocodingObject | | Notes | This constructor requires internet access and the callback will be invoked with an error message if the internet is not currently accessible.This constructor does not require Location Services to be enabled for Hammerspoon. |"]},{"l":"Methods"},{"l":"cancel","p":["Signature","hs.location.geocoder:cancel() - nil","Type","Method","Description","Cancels the pending or in progress geocoding request.","Parameters","None","Returns","nil to facilitate garbage collection by assigning this result to the geocodeObject","Notes","This method has no effect if the geocoding process has already completed."]},{"l":"geocoding","p":["Signature","hs.location.geocoder:geocoding() - boolean","Type","Method","Description","Returns a boolean indicating whether or not the geocoding process is still active.","Parameters","None","Returns","a boolean indicating if the geocoding process is still active. If false, then the callback function either has already been called or will be as soon as the main thread of Hammerspoon becomes idle again.","Notes"]}],[{"i":"hslogger","l":"hs.logger","p":["Simple logger for debugging purposes","Note: \"methods\" in this module are actually \"static\" functions - see hs.logger.new()"]},{"l":"API Overview","p":["d","defaultLogLevel","df","e","ef","f","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getLogLevel","history","historySize","i","level","Methods- API calls which can only be made on an object returned by a constructor","new","printHistory","setGlobalLogLevel","setLogLevel","setModulesLogLevel","v","Variables- Configurable values","vf","w","wf"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"defaultLogLevel","p":["Signature","hs.logger.defaultLogLevel","Type","Variable","Description","Default log level for new logger instances."]},{"l":"Functions"},{"l":"history","p":["Signature","hs.logger.history() - list of log entries","Type","Function","Description","Returns the global log history","Parameters","None","Returns","a list of (at most hs.logger.historySize()) log entries produced by all the logger instances, in chronological order; each entry is a table with the following fields: time - timestamp in seconds since the epoch level - a number between 1 (error) and 5 (verbose) id - a string containing the id of the logger instance that produced this entry message - a string containing the logged message","Notes"]},{"l":"historySize","p":["Signature","hs.logger.historySize([size]) - number","Type","Function","Description","Sets or gets the global log history size","Parameters","size - (optional) the desired number of log entries to keep in the history; if omitted, will return the current size; the starting value is 0 (disabled)","Returns","the current or new history size","Notes","if you change history size (other than from 0) after creating any logger instances, things will likely break"]},{"l":"new","p":["Signature","hs.logger.new(id, loglevel) - logger","Type","Function","Description","Creates a new logger instance","Parameters","id - a string identifier for the instance (usually the module name) loglevel - (optional) can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose', or a corresponding number between 0 and 5; uses hs.logger.defaultLogLevel if omitted","Returns","the new logger instance","Notes","the logger instance created by this method is not a regular object, but a plain table with \"static\" functions; therefore, do not use the colon syntax for so-called \"methods\" in this module (as in mylogger.setLogLevel(3)); you must instead use the regular dot syntax: mylogger.setLogLevel(3) Example: lua/lililocal log = hs.logger.new('mymodule','debug')/lililog.i('Initializing') -- will print [mymodule] Initializing to the console"]},{"l":"printHistory","p":["Signature","hs.logger.printHistory([entries[, level[, filter[, caseSensitive]]]])","Type","Function","Description","Prints the global log history to the console","Parameters","entries - (optional) the maximum number of entries to print; if omitted, all entries in the history will be printed level - (optional) the desired log level (see hs.logger.setLogLevel()); if omitted, defaults to verbose filter - (optional) a string to filter the entries (by logger id or message) via string.find plain matching caseSensitive - (optional) if true, filtering is case sensitive","Returns","None","Notes"]},{"l":"setGlobalLogLevel","p":["Signature","hs.logger.setGlobalLogLevel(lvl)","Type","Function","Description","Sets the log level for all logger instances (including objects' loggers)","Parameters","lvl","Returns","None","Notes"]},{"l":"setModulesLogLevel","p":["Signature","hs.logger.setModulesLogLevel(lvl)","Type","Function","Description","Sets the log level for all currently loaded modules","Parameters","lvl","Returns","None","Notes","This function only affects module-level loggers, object instances with their own loggers (e.g. windowfilters) won't be affected; you can use hs.logger.setGlobalLogLevel() for those"]},{"l":"Fields"},{"l":"level","p":["Signature","hs.logger.level","Type","Field","Description","The log level of the logger instance, as a number between 0 and 5"]},{"l":"Methods"},{"l":"d","p":["Signature","hs.logger.d(...)","Type","Method","Description","Logs debug info to the console","Parameters","... - one or more message strings","Returns","None","Notes"]},{"l":"df","p":["Signature","hs.logger.df(fmt,...)","Type","Method","Description","Logs formatted debug info to the console","Parameters","fmt - formatting string as per string.format... - arguments to fmt","Returns","None","Notes"]},{"l":"e","p":["Signature","hs.logger.e(...)","Type","Method","Description","Logs an error to the console","Parameters","... - one or more message strings","Returns","None","Notes"]},{"l":"ef","p":["Signature","hs.logger.ef(fmt,...)","Type","Method","Description","Logs a formatted error to the console","Parameters","fmt - formatting string as per string.format... - arguments to fmt","Returns","None","Notes"]},{"l":"f","p":["Signature","hs.logger.f(fmt,...)","Type","Method","Description","Logs formatted info to the console","Parameters","fmt - formatting string as per string.format... - arguments to fmt","Returns","None","Notes"]},{"l":"getLogLevel","p":["Signature","hs.logger.getLogLevel() - number","Type","Method","Description","Gets the log level of the logger instance","Parameters","None","Returns","The log level of this logger as a number between 0 and 5","Notes"]},{"l":"i","p":["Signature","hs.logger.i(...)","Type","Method","Description","Logs info to the console","Parameters","... - one or more message strings","Returns","None","Notes"]},{"l":"setLogLevel","p":["Signature","hs.logger.setLogLevel(loglevel)","Type","Method","Description","Sets the log level of the logger instance","Parameters","loglevel - can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose'; or a corresponding number between 0 and 5","Returns","None","Notes"]},{"l":"v","p":["Signature","hs.logger.v(...)","Type","Method","Description","Logs verbose info to the console","Parameters","... - one or more message strings","Returns","None","Notes"]},{"l":"vf","p":["Signature","hs.logger.vf(fmt,...)","Type","Method","Description","Logs formatted verbose info to the console","Parameters","fmt - formatting string as per string.format... - arguments to fmt","Returns","None","Notes"]},{"l":"w","p":["Signature","hs.logger.w(...)","Type","Method","Description","Logs a warning to the console","Parameters","... - one or more message strings","Returns","None","Notes"]},{"l":"wf","p":["Signature","hs.logger.wf(fmt,...)","Type","Method","Description","Logs a formatted warning to the console","Parameters","fmt - formatting string as per string.format... - arguments to fmt","Returns","None","Notes"]}],[{"i":"hsmath","l":"hs.math","p":["Additional functions and values that are specific to Hammerspoon which provide expanded math support are documented here.","hs.math.abs - help available via help.lua.math.abs","hs.math.acos - help available via help.lua.math.acos","hs.math.asin - help available via help.lua.math.asin","hs.math.atan - help available via help.lua.math.atan","hs.math.ceil - help available via help.lua.math.ceil","hs.math.cos - help available via help.lua.math.cos","hs.math.deg - help available via help.lua.math.deg","hs.math.exp - help available via help.lua.math.exp","hs.math.floor - help available via help.lua.math.floor","hs.math.fmod - help available via help.lua.math.fmod","hs.math.huge - help available via help.lua.math.huge","hs.math.log - help available via help.lua.math.log","hs.math.max - help available via help.lua.math.max","hs.math.maxinteger - help available via help.lua.math.maxinteger","hs.math.min - help available via help.lua.math.min","hs.math.mininteger - help available via help.lua.math.mininteger","hs.math.modf - help available via help.lua.math.modf","hs.math.pi - help available via help.lua.math.pi","hs.math.rad - help available via help.lua.math.rad","hs.math.random - help available via help.lua.math.random","hs.math.randomseed - help available via help.lua.math.randomseed","hs.math.sin - help available via help.lua.math.sin","hs.math.sqrt - help available via help.lua.math.sqrt","hs.math.tan - help available via help.lua.math.tan","hs.math.tointeger - help available via help.lua.math.tointeger","hs.math.type - help available via help.lua.math.type","hs.math.ult - help available via help.lua.math.ult","The documentation for the math library can be found at http://www.lua.org/manual/5.3/ or from the Hammerspoon console via the help command: help.lua.math. This includes the following functions and variables:","This module includes, and is a superset of the built-in Lua math library so it is safe to do something like the following in your own code and still have access to both libraries:","Various helpful mathematical functions"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","minFloat","Functions- API calls offered directly by the extension","isFinite","isInfinite","isNaN","randomFloat","randomFromRange"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"minFloat","p":["Signature","hs.math.minFloat","Type","Constant","Description","Smallest positive floating point number representable in Hammerspoon","Notes","Because specifying a delay of 0 to hs.timer.doAfter results in the event not triggering, use this value to indicate that the action should occur as soon as possible after the current code block has completed execution."]},{"l":"Functions"},{"l":"isFinite","p":["Signature","hs.math.isFinite(value) - boolean","Type","Function","Description","Returns whether or not the value is a finite number","Parameters","value- the value to be tested","Returns","true if the value is a finite number, or false otherwise","Notes","This function returns true if the value is a number and both hs.math.isNaN and hs.math.isInfinite return false."]},{"l":"isInfinite","p":["Signature","hs.math.isInfinite(value) - 1, -1, false","Type","Function","Description","Returns whether or not the value is the mathematical equivalent of either positive or negative \"Infinity\"","Parameters","value- the value to be tested","Returns","1 if the value is equivalent to positive infinity, -1 if the value is equivalent to negative infinity, or false otherwise.","Notes","This function specifically checks if the value is equivalent to positive or negative infinity --- it does not do type checking. If value is not a numeric value (e.g. a string), it cannot be equivalent to positive or negative infinity and will return false. Because lua treats any value other than nil and false as true, the return value of this function can be safely used in conditionals when you don't care about the sign of the infinite value."]},{"l":"isNaN","p":["Signature","hs.math.isNaN(value) - boolean","Type","Function","Description","Returns whether or not the value is the mathematical equivalent of \"Not-A-Number\"","Parameters","value- the value to be tested","Returns","true if value is equal to the mathematical \"value\" of NaN, or false otherwise","Notes","Mathematical NaN represents an impossible value, usually the result of a calculation, yet is still considered within the domain of mathematics. The most common case is the result of n / 0 as division by 0 is considered undefined or \"impossible\". This function specifically checks if the value is NaN--- it does not do type checking. If value is not a numeric value (e.g. a string), it cannot be equivalent to NaN and this function will return false."]},{"l":"randomFloat","p":["Signature","hs.math.randomFloat() - number","Type","Function","Description","Returns a random floating point number between 0 and 1","Parameters","None","Returns","A random number between 0 and 1","Notes"]},{"l":"randomFromRange","p":["Signature","hs.math.randomFromRange(start, end) - integer","Type","Function","Description","Returns a random integer between the start and end parameters","Parameters","start - A number to start the range, must be greater than or equal to zero end - A number to end the range, must be greater than zero and greater than start","Returns","A randomly chosen integer between start and end","Notes"]}],[{"i":"hsmenubar","l":"hs.menubar","p":["Create and manage menubar icons"]},{"l":"API Overview","p":["autosaveName","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","delete","frame","icon","imagePosition","imagePositions","isInMenuBar","Methods- API calls which can only be made on an object returned by a constructor","new","popupMenu","removeFromMenuBar","returnToMenuBar","setClickCallback","setIcon","setMenu","setTitle","setTooltip","stateImageSize","title"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"imagePositions","p":["Signature","hs.menubar.imagePositions[]","Type","Constant","Description","Pre-defined list of image positions for a menubar item"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.menubar.new([inMenuBar], [autosaveName]) - menubaritem or nil","Type","Constructor","Description","Creates a new menu bar item object and optionally add it to the system menubar","Parameters","inMenuBar - an optional parameter which defaults to true. If it is true, the menubaritem is added to the system menubar, otherwise the menubaritem is hidden. autosaveName - an optional parameter allowing you to define an autosave name, so that macOS can restore the menubar position between restarts.","Returns","menubar item object to use with other API methods, or nil if it could not be created","Notes","You should call hs.menubar:setTitle() or hs.menubar:setIcon() after creating the object, otherwise it will be invisible Calling this method with inMenuBar equal to false is equivalent to calling hs.menubar.new():removeFromMenuBar(). A hidden menubaritem can be added to the system menubar by calling hs.menubar:returnToMenuBar() or used as a pop-up menu by calling hs.menubar:popupMenu()."]},{"l":"Methods"},{"l":"autosaveName","p":["Signature","hs.menubar:autosaveName([name]) - menubaritem | current-value","Type","Method","Description","Get or set the autosave name of the menubar. By defining an autosave name, macOS can restore the menubar position after reloads.","Parameters","name - An optional string if you want to set the autosave name","Returns","Either the menubar item, if its autosave name was changed, or the current value of the autosave name","Notes"]},{"l":"delete","p":["Signature","hs.menubar:delete()","Type","Method","Description","Removes the menubar item from the menubar and destroys it","Parameters","None","Returns","Notes"]},{"l":"frame","p":["Signature","hs.menubar:frame() - hs.geometry rect","Type","Method","Description","Returns the menubar item frame","Parameters","None","Returns","an hs.geometry rect describing the menubar item's frame or nil if the menubar item is not currently in the menubar.","Notes","This will return a frame even if no icon or title is set"]},{"l":"icon","p":["Signature","hs.menubar:icon() - hs.image object","Type","Method","Description","Returns the current icon of the menubar item object.","Parameters","None","Returns","the menubar item icon as an hs.image object, or nil, if there isn't one.","Notes"]},{"l":"imagePosition","p":["Signature","hs.menubar:imagePosition([position]) - menubaritem | current-value","Type","Method","Description","Get or set the position of a menubar image relative to its text title","Parameters","position - Either one of the values in hs.menubar.imagePositions which will be set, or nothing to return the current position","Returns","Either the menubar item, if its image position was changed, or the current value of the image position","Notes"]},{"l":"isInMenuBar","p":["Signature","hs.menubar:isInMenuBar() - boolean","Type","Method","Description","Returns a boolean indicating whether or not the specified menu is currently in the OS X menubar.","Parameters","None","Returns","a boolean indicating whether or not the specified menu is currently in the OS X menubar","Notes"]},{"l":"popupMenu","p":["Signature","hs.menubar:popupMenu(point[, darkMode]) - menubaritem","Type","Method","Description","Display a menubaritem as a pop up menu at the specified screen point.","Parameters","point - the location of the upper left corner of the pop-up menu to be displayed. darkMode - (optional) true to force the menubar dark (defaults to your macOS General Appearance settings)","Returns","The menubaritem","Notes","Items which trigger hs.menubar:setClickCallback() will invoke the callback function, but we cannot control the positioning of any visual elements the function may create -- calling this method on such an object is the equivalent of invoking its callback function directly. This method is blocking. Hammerspoon will be unable to respond to any other activity while the pop-up menu is being displayed. darkMode uses an undocumented macOS API call, so may break in a future release."]},{"l":"removeFromMenuBar","p":["Signature","hs.menubar:removeFromMenuBar() - menubaritem","Type","Method","Description","Removes a menu from the system menu bar. The item can still be used as a pop-up menu, unless you also delete it.","Parameters","None","Returns","the menubaritem","Notes"]},{"l":"returnToMenuBar","p":["Signature","hs.menubar:returnToMenuBar() - menubaritem","Type","Method","Description","Returns a previously removed menu back to the system menu bar.","Parameters","None","Returns","the menubaritem","Notes"]},{"l":"setClickCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.menubar:setClickCallback([fn]) - menubaritem | | Type | Method | | Description | Registers a function to be called when the menubar item is clicked | | Parameters | fn - An optional function to be called when the menubar item is clicked. If this argument is not provided, any existing function will be removed. The function can optionally accept a single argument, which will be a table containing boolean values indicating which keyboard modifiers were held down when the menubar item was clicked; The possible keys are: cmd alt shift ctrl fn | | Returns | the menubaritem | | Notes | If a menu has been attached to the menubar item, this callback will never be calledHas no affect on the display of a pop-up menu, but changes will be be in effect if hs.menubar:returnToMenuBar() is called on the menubaritem. |"]},{"l":"setIcon","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.menubar:setIcon(imageData[, template]) - menubaritem or nil | | Type | Method | | Description | Sets the image of a menubar item object. The image will be displayed in the system menubar | | Parameters | imageData - This can one of the following: An hs.image object A string containing a path to an image file A string beginning with ASCII: which signifies that the rest of the string is interpreted as a special form of ASCII diagram, which will be rendered to an image and used as the icon. See the notes below for information about the special format of ASCII diagram. nil, indicating that the current image is to be removedtemplate - An optional boolean value which defaults to true. If it's true, the provided image will be treated as a \"template\" image, which allows it to automatically support OS X 10.10's Dark Mode. If it's false, the image will be used as is, supporting colour. | | Returns | the menubaritem if the image was loaded and set, nil if it could not be found or loaded | | Notes | ** API Change ** This method used to return true on success -- this has been changed to return the menubaritem on success to facilitate method chaining. Since Lua treats any value which is not nil or false as \"true\", this should only affect code where the return value was actually being compared to true, e.g. if result == true then... rather than the (unaffected) if result then....If you set a title as well as an icon, they will both be displayed next to each otherHas no affect on the display of a pop-up menu, but changes will be be in effect if hs.menubar:returnToMenuBar() is called on the menubaritem.Icons should be small, transparent images that roughly match the size of normal menubar icons, otherwise they will look very strange. Note that if you're using an hs.image image object as the icon, you can force it to be resized with hs.image:setSize({w=16,h=16})Retina scaling is supported if the image is either scalable (e.g. a PDF produced by Adobe Illustrator) or contain multiple sizes (e.g. a TIFF with small and large images). Images will not automatically do the right thing if you have a @2x version presentIcons are by default specified as \"templates\", which allows them to automatically support OS X 10.10's Dark Mode, but this also means they cannot be complicated, colour images.For examples of images that work well, see Hammerspoon.app/Contents/Resources/statusicon.tiff (for a retina-capable multi-image TIFF icon) or https://github.com/jigish/slate/blob/master/Slate/status.pdf (for a scalable vector PDF icon)For guidelines on the sizing of images, see http://alastairs-place.net/blog/2013/07/23/nsstatusitem-what-size-should-your-icon-be/ |"]},{"l":"setMenu","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.menubar:setMenu(menuTable) - menubaritem | | Type | Method | | Description | Attaches a dropdown menu to the menubar item | | Parameters | menuTable: If this argument is nil: Removes any previously registered menu If this argument is a table: Sets the menu for this menubar item to the supplied table. The format of the table is documented below If this argument is a function: The function will be called each time the user clicks on the menubar item and the function should return a table that specifies the menu to be displayed. The table should be of the same format as described below. The function can optionally accept a single argument, which will be a table containing boolean values indicating which keyboard modifiers were held down when the menubar item was clicked; The possible keys are: cmd alt shift ctrl fn Table Format: lua { { title = my menu item, fn = function() print(you clicked my menu item!) end }, { title = - }, { title = other item, fn = some_function }, { title = disabled item, disabled = true }, { title = checked item, checked = true }, } The available keys for each menu item are (note that title is the only required key -- all other keys are optional): title - A string or hs.styledtext object to be displayed in the menu. If this is the special string - the item will be rendered as a menu separator. This key can be set to the empty string (\"\"), but it must be present. fn - A function to be executed when the menu item is clicked. The function will be called with two arguments. The first argument will be a table containing boolean values indicating which keyboard modifiers were held down when the menubar item was clicked (see menuTable parameter for possible keys) and the second is the table representing the item. checked - A boolean to indicate if the menu item should have a checkmark (by default) next to it or not. Defaults to false. state - a text value of \"on\", \"off\", or \"mixed\" indicating the menu item state. \"on\" and \"off\" are equivalent to checked being true or false respectively, and \"mixed\" will have a dash (by default) beside it. disabled - A boolean to indicate if the menu item should be unselectable or not. Defaults to false (i.e. menu items are selectable by default) menu - a table, in the same format as above, which will be presented as a sub-menu for this menu item.A menu item that is disabled and has a sub-menu will show the arrow at the right indicating that it has a sub-menu, but the items within the sub-menu will not be available, even if the sub-menu items are not disabled themselves.A menu item with a sub-menu is also a clickable target, so it can also have an fn key. image - An image to display in the menu to the right of any state image or checkmark and to the left of the menu item title. This image is not constrained by the size set with hs.menubar:stateImageSize, so you should adjust it with hs.image:setSize if your image is extremely large or small. tooltip - A tool tip to display if you hover the cursor over a menu item for a few seconds. shortcut - A string containing a single character, which will be used as the keyboard shortcut for the menu item. Note that if you use a capital letter, the Shift key will be required to activate the shortcut. indent - An integer from 0 to 15 indicating how far to the right a menu item should be indented. Defaults to 0. onStateImage - An image to display when checked is true or state is set to \"on\". This image size is constrained to the size set by hs.menubar:stateImageSize. If this key is not set, a checkmark will be displayed for checked or \"on\" menu items. offStateImage - An image to display when checked is false or state is set to \"off\". This image size is constrained to the size set by hs.menubar:stateImageSize. If this key is not set, no special marking appears next to the menu item. mixedStateImage - An image to display when state is set to \"mixed\". This image size is constrained to the size set by hs.menubar:stateImageSize. If this key is not set, a dash will be displayed for menu items with a state of \"mixed\". | | Returns | the menubaritem | | Notes | If you are using the callback function, you should take care not to take too long to generate the menu, as you will block the process and the OS may decide to remove the menubar item |"]},{"l":"setTitle","p":["Signature","hs.menubar:setTitle(title) - menubaritem","Type","Method","Description","Sets the title of a menubar item object. The title will be displayed in the system menubar","Parameters","title- A string or hs.styledtext object to use as the title, or nil to remove the title","Returns","the menubar item","Notes","If you set an icon as well as a title, they will both be displayed next to each other Has no affect on the display of a pop-up menu, but changes will be be in effect if hs.menubar:returnToMenuBar() is called on the menubaritem."]},{"l":"setTooltip","p":["Signature","hs.menubar:setTooltip(tooltip) - menubaritem","Type","Method","Description","Sets the tooltip text on a menubar item","Parameters","tooltip- A string to use as the tooltip","Returns","the menubaritem","Notes","Has no affect on the display of a pop-up menu, but changes will be be in effect if hs.menubar:returnToMenuBar() is called on the menubaritem."]},{"l":"stateImageSize","p":["Signature","hs.menubar:stateImageSize([size]) - hs.image object | current value","Type","Method","Description","Get or set the size for state images when the menu is displayed.","Parameters","size - an optional table specifying the size for state images displayed when using the checked or state key in a menu table definition. Defaults to a size determined by the system menu font point size. If you specify an explicit nil, the size is reset to this default.","Returns","if a parameter is provided, returns the menubar item; otherwise returns the current value.","Notes","An image is used rather than a checkmark or dash only when you set them with the onStateImage, offStateImage, or mixedStateImage keys. If you are not using these keys, then this method will have no visible effect on the menu's rendering. See hs.menubar:setMenu for more information. If you are setting the menu contents with a static table, you should invoke this method before invoking hs.menubar:setMenu, as changes will only go into effect when the table is next converted to a menu structure."]},{"l":"title","p":["Signature","hs.menubar:title([styled]) - string | styledtextObject","Type","Method","Description","Returns the current title of the menubar item object.","Parameters","styled - an optional boolean, defaulting to false, indicating that a styledtextObject representing the text of the menu title should be returned","Returns","the menubar item title, or an empty string, if there isn't one. If styled is not set or is false, then a string is returned; otherwise a styledtextObject will be returned.","Notes"]}],[{"i":"hsmessages","l":"hs.messages","p":["Send messages via iMessage and SMS Relay (note, SMS Relay requires OS X 10.10 and an established SMS Relay pairing between your Mac and an iPhone running iOS8)","Note: This extension works by controlling the OS X \"Messages\" app via AppleScript, so you will need that app to be signed into an iMessage account"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","iMessage","SMS"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"iMessage","p":["Signature","hs.messages.iMessage(targetAddress, message)","Type","Function","Description","Sends an iMessage","Parameters","targetAddress - A string containing a phone number or email address registered with iMessage, to send the iMessage to message - A string containing the message to send","Returns","None","Notes"]},{"l":"SMS","p":["Signature","hs.messages.SMS(targetNumber, message)","Type","Function","Description","Sends an SMS using SMS Relay","Parameters","targetNumber - A string containing a phone number to send an SMS to message - A string containing the message to send","Returns","None","Notes"]}],[{"i":"hsmidi","l":"hs.midi","p":["MIDI Extension for Hammerspoon.","This extension supports listening, transmitting and synthesizing MIDI commands.","This extension was thrown together by Chris Hocking for CommandPost.","This extension uses MIKMIDI, an easy-to-use Objective-C MIDI library created by Andrew Madsen and developed by him and Chris Flesner of Mixed In Key.","MIKMIDI LICENSE: Copyright (c) 2013 Mixed In Key, LLC. Original author: Andrew R. Madsen( andrew@mixedinkey.com)","Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."]},{"l":"API Overview","p":["callback","commandTypes","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","deviceCallback","devices","displayName","Functions- API calls offered directly by the extension","identityRequest","isOnline","isVirtual","manufacturer","Methods- API calls which can only be made on an object returned by a constructor","model","name","new","newVirtualSource","sendCommand","sendSysex","synthesize","virtualSources"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"commandTypes","p":["Signature","hs.midi.commandTypes[]","Type","Constant","Description","A table containing the numeric value for the possible flags returned by the commandType parameter of the callback function."]},{"l":"Functions"},{"l":"deviceCallback","p":["Signature","hs.midi.deviceCallback(callbackFn) - none","Type","Function","Description","A callback that's triggered when a physical or virtual MIDI device is added or removed from the system.","Parameters","callbackFn - the callback function to trigger.","Returns","None","Notes","The callback function should expect 2 argument and should not return anything: devices- A table containing the names of any physically connected MIDI devices as strings. virtualDevices- A table containing the names of any virtual MIDI devices as strings. Example Usage: lua/lili hs.midi.deviceCallback(function(devices, virtualDevices)/lili print(hs.inspect(devices))/lili print(hs.inspect(virtualDevices))/lili end)"]},{"l":"devices","p":["Signature","hs.midi.devices() - table","Type","Function","Description","Returns a table of currently connected physical MIDI devices.","Parameters","None","Returns","A table containing the names of any physically connected MIDI devices as strings.","Notes"]},{"l":"virtualSources","p":["Signature","hs.midi.virtualSources() - table","Type","Function","Description","Returns a table of currently available Virtual MIDI sources. This includes devices, such as Native Instruments controllers which present as virtual endpoints rather than physical devices.","Parameters","None","Returns","A table containing the names of any virtual MIDI sources as strings.","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.midi.new(deviceName) - hs.midi object","Type","Constructor","Description","Creates a new hs.midi object.","Parameters","deviceName - A string containing the device name of the MIDI device. A valid device name can be found by checking hs.midi.devices() and/or hs.midi.virtualSources().","Returns","An hs.midi object or nil if an error occurred.","Notes","Example Usage: hs.midi.new(hs.midi.devices()[1])"]},{"l":"newVirtualSource","p":["Signature","hs.midi.newVirtualSource(virtualSource) - hs.midi object","Type","Constructor","Description","Creates a new hs.midi object.","Parameters","virtualSource - A string containing the virtual source name of the MIDI device. A valid virtual source name can be found by checking hs.midi.virtualSources().","Returns","An hs.midi object or nil if an error occurred.","Notes","Example Usage: hs.midi.newVirtualSource(hs.midi.virtualSources()[1])"]},{"l":"Methods"},{"l":"callback","p":["Signature","hs.midi:callback(callbackFn)","Type","Method","Description","Sets or removes a callback function for the hs.midi object.","Parameters","callbackFn- a function to set as the callback for this hs.midi object. If the value provided is nil, any currently existing callback function is removed.","Returns","The hs.midi object","Notes","Most MIDI keyboards produce a noteOn when you press a key, then noteOff when you release. However, some MIDI keyboards will return a noteOn with 0 velocity instead of noteOff, so you will receive two noteOn commands for every key press/release. The callback function should expect 5 arguments and should not return anything: object- The hs.midi object. deviceName- The device name as a string. commandType- Type of MIDI message as defined as a string. See hs.midi.commandTypes[] for a list of possibilities. description- Description of the event as a string. This is only really useful for debugging. metadata- A table of data for the MIDI command (see below). The metadata table will return the following, depending on the commandType for the callback: noteOff- Note off command: note - The note number for the command. Must be between 0 and 127. velocity - The velocity for the command. Must be between 0 and 127. channel - The channel for the command. Must be a number between 15. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. noteOn- Note on command: note - The note number for the command. Must be between 0 and 127. velocity - The velocity for the command. Must be between 0 and 127. channel - The channel for the command. Must be a number between 15. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. polyphonicKeyPressure- Polyphonic key pressure command: note - The note number for the command. Must be between 0 and 127. pressure - Key pressure of the polyphonic key pressure message. In the range 0-127. channel - The channel for the command. Must be a number between 15. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. controlChange- Control change command. This is the most common command sent by MIDI controllers: controllerNumber - The MIDI control number for the command. controllerValue - The controllerValue of the command. Only the lower 7-bits of this are used. channel - The channel for the command. Must be a number between 15. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. fourteenBitValue - The 14-bit value of the command. fourteenBitCommand - true if the command contains 14-bit value data otherwise, false. isVirtual - true if Virtual MIDI Source otherwise false. programChange- Program change command: programNumber - The program (aka patch) number. From 0-127. channel - The channel for the command. Must be a number between 15. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. channelPressure- Channel pressure command: pressure - Key pressure of the channel pressure message. In the range 0-127. channel - The channel for the command. Must be a number between 15. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. pitchWheelChange- Pitch wheel change command: pitchChange - A 14-bit value indicating the pitch bend. Center is 0x2000 (8192). Valid range is from 0-16383. channel - The channel for the command. Must be a number between 15. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemMessage- System message command: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemExclusive- System message command: manufacturerID - The manufacturer ID for the command. This is used by devices to determine if the message is one they support. sysexChannel - The channel of the message. Only valid for universal exclusive messages, will always be 0 for non-universal messages. sysexData - The system exclusive data for the message. For universal messages subID's are included in sysexData, for non-universal messages, any device specific information (such as modelID, versionID or whatever manufactures decide to include) will be included in sysexData. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemTimecodeQuarterFrame- System exclusive (SysEx) command: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemSongPositionPointer- System song position pointer command: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemSongSelect- System song select command: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemTuneRequest- System tune request command: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemTimingClock- System timing clock command: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemStartSequence- System timing clock command: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemContinueSequence- System start sequence command: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemStopSequence- System continue sequence command: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. systemKeepAlive- System keep alive message: dataByte1 - Data Byte 1 as integer. dataByte2 - Data Byte 2 as integer. timestamp - The timestamp for the command as a string. data - Raw MIDI Data as Hex String. isVirtual - true if Virtual MIDI Source otherwise false. Example Usage: lua/lili midiDevice = hs.midi.new(hs.midi.devices()[3])/lili midiDevice:callback(function(object, deviceName, commandType, description, metadata)/lili print(object: .. tostring(object))/lili print(deviceName: .. deviceName)/lili print(commandType: .. commandType)/lili print(description: .. description)/lili print(metadata: .. hs.inspect(metadata))/lili end)"]},{"l":"displayName","p":["Signature","hs.midi:displayName() - string","Type","Method","Description","Returns the display name of a hs.midi object.","Parameters","None","Returns","The name as a string.","Notes"]},{"l":"identityRequest","p":["Signature","hs.midi:identityRequest() - none","Type","Method","Description","Sends an Identity Request message to the hs.midi device. You can use hs.midi:callback() to receive the systemExclusive response.","Parameters","None","Returns","Notes","Example Usage: lua/lili midiDevice = hs.midi.new(hs.midi.devices()[3])/lili midiDevice:callback(function(object, deviceName, commandType, description, metadata)/lili print(object: .. tostring(object))/lili print(deviceName: .. deviceName)/lili print(commandType: .. commandType)/lili print(description: .. description)/lili print(metadata: .. hs.inspect(metadata))/lili end)/lili midiDevice:identityRequest()"]},{"l":"isOnline","p":["Signature","hs.midi:isOnline() - boolean","Type","Method","Description","Returns the online status of a hs.midi object.","Parameters","None","Returns","true if online, otherwise false","Notes"]},{"l":"isVirtual","p":["Signature","hs.midi:isVirtual() - boolean","Type","Method","Description","Returns true if an hs.midi object is virtual, otherwise false.","Parameters","None","Returns","true if virtual, otherwise false","Notes"]},{"l":"manufacturer","p":["Signature","hs.midi:manufacturer() - string","Type","Method","Description","Returns the manufacturer name of a hs.midi object.","Parameters","None","Returns","The manufacturer name as a string.","Notes"]},{"l":"model","p":["Signature","hs.midi:model() - string","Type","Method","Description","Returns the model name of a hs.midi object.","Parameters","None","Returns","The model name as a string.","Notes"]},{"l":"name","p":["Signature","hs.midi:name() - string","Type","Method","Description","Returns the name of a hs.midi object.","Parameters","None","Returns","The name as a string.","Notes"]},{"l":"sendCommand","p":["Signature","hs.midi:sendCommand(commandType, metadata) - boolean","Type","Method","Description","Sends a command to the hs.midi object.","Parameters","commandType- The type of command you want to send as a string. See hs.midi.commandTypes[]. metadata- A table of data for the MIDI command (see notes below).","Returns","true if successful, otherwise false","Notes","The metadata table can accept following, depending on the commandType supplied: noteOff- Note off command: note - The note number for the command. Must be between 0 and 127. Defaults to 0. velocity - The velocity for the command. Must be between 0 and 127. Defaults to 0. channel - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels. noteOn- Note on command: note - The note number for the command. Must be between 0 and 127. Defaults to 0. velocity - The velocity for the command. Must be between 0 and 127. Defaults to 0. channel - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels. polyphonicKeyPressure- Polyphonic key pressure command: note - The note number for the command. Must be between 0 and 127. Defaults to 0. pressure - Key pressure of the polyphonic key pressure message. In the range 0-127. Defaults to 0. channel - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels. controlChange- Control change command. This is the most common command sent by MIDI controllers: controllerNumber - The MIDI control number for the command. Defaults to 0. controllerValue - The controllerValue of the command. Only the lower 7-bits of this are used. Defaults to 0. channel - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels. fourteenBitValue - The 14-bit value of the command. Must be between 0 and 16383. Defaults to 0. fourteenBitCommand must be true. fourteenBitCommand - true if the command contains 14-bit value data otherwise, false. controllerValue will be ignored if this is set to true. programChange- Program change command: programNumber - The program (aka patch) number. From 0-127. Defaults to 0. channel - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels. channelPressure- Channel pressure command: pressure - Key pressure of the channel pressure message. In the range 0-127. Defaults to 0. channel - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels. pitchWheelChange- Pitch wheel change command: pitchChange - A 14-bit value indicating the pitch bend. Center is 0x2000 (8192). Valid range is from 0-16383. Defaults to 0. channel - The channel for the command. Must be a number between 0 and 16. Defaults to 0, which sends the command to All Channels. Example Usage: lua/lili midiDevice = hs.midi.new(hs.midi.devices()[1])/lili midiDevice:sendCommand(noteOn, {/lili [note] = 72,/lili [velocity] = 50,/lili [channel] = 0,/lili })/lili hs.timer.usleep(500000)/lili midiDevice:sendCommand(noteOn, {/lili [note] = 74,/lili [velocity] = 50,/lili [channel] = 0,/lili })/lili hs.timer.usleep(500000)/lili midiDevice:sendCommand(noteOn, {/lili [note] = 76,/lili [velocity] = 50,/lili [channel] = 0,/lili })/lili midiDevice:sendCommand(pitchWheelChange, {/lili [pitchChange] = 1000,/lili [channel] = 0,/lili })/lili hs.timer.usleep(100000)/lili midiDevice:sendCommand(pitchWheelChange, {/lili [pitchChange] = 2000,/lili [channel] = 0,/lili })/lili hs.timer.usleep(100000)/lili midiDevice:sendCommand(pitchWheelChange, {/lili [pitchChange] = 3000,/lili [channel] = 0,/lili })"]},{"l":"sendSysex","p":["Signature","hs.midi:sendSysex(command) - none","Type","Method","Description","Sends a System Exclusive Command to the hs.midi object.","Parameters","command- The system exclusive command you wish to send as a string. White spaces in the string will be ignored.","Returns","None","Notes","Example Usage: lua/lili midiDevice:sendSysex(f07e7f06 01f7)"]},{"l":"synthesize","p":["Signature","hs.midi:synthesize([value]) - boolean","Type","Method","Description","Set or display whether or not the MIDI device should synthesize audio on your computer.","Parameters","[value] - true if you want to synthesize audio, otherwise false.","Returns","true if enabled otherwise false","Notes"]}],[{"i":"hsmilight","l":"hs.milight","p":["Simple controls for the MiLight LED WiFi bridge (also known as LimitlessLED and EasyBulb)"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","maxBrightness","minBrightness","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","delete","disco","send","zoneBrightness","zoneColor","zoneOff","zoneOn","zoneWhite"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"maxBrightness","p":["Signature","hs.milight.maxBrightness","Type","Constant","Description","Specifies the maximum brightness value that can be used. Defaults to 25"]},{"l":"minBrightness","p":["Signature","hs.milight.minBrightness","Type","Constant","Description","Specifies the minimum brightness value that can be used. Defaults to 0"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.milight.new(ip[, port]) - bridge","Type","Constructor","Description","Creates a new bridge object, which will be connected to the supplied IP address and port","Parameters","ip - A string containing the IP address of the MiLight WiFi bridge device. For convenience this can be the broadcast address of your network (e.g. 192.168.0.255) port - An optional number containing the UDP port to talk to the bridge on. Defaults to 8899","Returns","An hs.milight object","Notes","You can not use 255.255.255.255 as the IP address, to do so requires elevated privileges for the Hammerspoon process"]},{"l":"Methods"},{"l":"delete","p":["Signature","hs.milight:delete()","Type","Method","Description","Deletes an hs.milight object","Parameters","None","Returns","Notes"]},{"l":"disco","p":["Signature","hs.milight:disco() - bool","Type","Method","Description","Cycles through the disco modes","Parameters","None","Returns","True if the command was sent correctly, otherwise false","Notes"]},{"l":"send","p":["Signature","hs.milight:send(cmd[, value]) - bool","Type","Method","Description","Sends a command to the bridge","Parameters","cmd - A command from the hs.milight.cmd table value - An optional value, if appropriate for the command (defaults to 0x00)","Returns","True if the command was sent, otherwise false","Notes","This is a low level command, you typically should use a specific method for the operation you want to perform"]},{"l":"zoneBrightness","p":["Signature","hs.milight:zoneBrightness(zone, value) - integer","Type","Method","Description","Sets brightness for the specified zone","Parameters","zone - A number specifying which zone to operate on. 0 for all zones, 1-4 for zones one through four value - A number containing the brightness level to set, between hs.milight.minBrightness and hs.milight.maxBrightness","Returns","A number containing the value that was sent to the WiFi bridge, or -1 if an error occurred","Notes"]},{"l":"zoneColor","p":["Signature","hs.milight:zoneColor(zone, value) - bool","Type","Method","Description","Sets RGB color for the specified zone","Parameters","zone - A number specifying which zone to operate on. 0 for all zones, 1-4 for zones one through four value - A number between 0 and 255 that represents a color","Returns","True if the command was sent correctly, otherwise false","Notes","The color value is not a normal RGB colour, but rather a lookup in an internal table in the light hardware. While any number between 0 and 255 is valid, there are some useful values worth knowing: 00 - Violet 16 - Royal Blue 32 - Baby Blue 48 - Aqua 64 - Mint Green 80 - Seafoam Green 96 - Green 112 - Lime Green 128 - Yellow 144 - Yellowy Orange 160 - Orange 176 - Red 194 - Pink 210 - Fuchsia 226 - Lilac 240 - Lavender"]},{"l":"zoneOff","p":["Signature","hs.milight:zoneOff(zone) - bool","Type","Method","Description","Turns off the specified zone","Parameters","zone - A number specifying which zone to operate on. 0 for all zones, 1-4 for zones one through four","Returns","True if the command was sent correctly, otherwise false","Notes"]},{"l":"zoneOn","p":["Signature","hs.milight:zoneOn(zone) - bool","Type","Method","Description","Turns on the specified zone","Parameters","zone - A number specifying which zone to operate on. 0 for all zones, 1-4 for zones one through four","Returns","True if the command was sent correctly, otherwise false","Notes"]},{"l":"zoneWhite","p":["Signature","hs.milight:zoneWhite(zone) - bool","Type","Method","Description","Sets the specified zone to white","Parameters","zone - A number specifying which zone to operate on. 0 for all zones, 1-4 for zones one through four","Returns","True if the command was sent correctly, otherwise false","Notes"]}],[{"i":"hsmjomatic","l":"hs.mjomatic","p":["tmuxomatic-like window management"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","go"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"go","p":["Signature","hs.mjomatic.go(cfg)","Type","Function","Description","Applies a configuration to the currently open windows","Parameters","cfg - A table containing a series of strings, representing the desired window layout","Returns","None","Notes","An example use: luamjomatic.go({\"CCCCCCCCCCCCCiiiiiiiiiii # <-- The windowgram, it defines the shapes and positions of windows\",\"CCCCCCCCCCCCCiiiiiiiiiii\",\"SSSSSSSSSSSSSiiiiiiiiiii\",\"SSSSSSSSSSSSSYYYYYYYYYYY\",\"SSSSSSSSSSSSSYYYYYYYYYYY\",\"\",\"C Google Chrome # <-- window C has application():title() 'Google Chrome'\",\"i iTerm\",\"Y YoruFukurou\",\"S Sublime Text 2\"})"]}],[{"i":"hsmouse","l":"hs.mouse","p":["Inspect/manipulate the position of the mouse pointer","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis.","This module uses ManyMouse by Ryan C. Gordon.","MANYMOUSE LICENSE:","Copyright (c) 2005-2012 Ryan C. Gordon and others.","This software is provided 'as-is', without any express or implied warranty. In no event will the authors be held liable for any damages arising from the use of this software.","Permission is granted to anyone to use this software for any purpose, including commercial applications, and to alter it and redistribute it freely, subject to the following restrictions:","The origin of this software must not be misrepresented; you must not claim that you wrote the original software. If you use this software in a product, an acknowledgment in the product documentation would be appreciated but is not required.","Altered source versions must be plainly marked as such, and must not be misrepresented as being the original software.","This notice may not be removed or altered from any source distribution.","Ryan C. Gordon icculus@icculus.org"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","absolutePosition","count","currentCursorType","getButtons","getCurrentScreen","getRelativePosition","names","scrollDirection","setRelativePosition","trackingSpeed"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"absolutePosition","p":["Signature","hs.mouse.absolutePosition([point]) - point","Type","Function","Description","Get or set the absolute co-ordinates of the mouse pointer","Parameters","An optional point table containing the absolute x and y co-ordinates to move the mouse pointer to","Returns","A point table containing the absolute x and y co-ordinates of the mouse pointer","Notes","If no parameters are supplied, the current position will be returned. If a point table parameter is supplied, the mouse pointer position will be set and the new co-ordinates returned"]},{"l":"count","p":["Signature","hs.mouse.count([includeInternal]) - number","Type","Function","Description","Gets the total number of mice connected to your system.","Parameters","includeInternal - A boolean which sets whether or not you want to include internal Trackpad's in the count. Defaults to false.","Returns","The number of mice connected to your system","Notes","This function leverages code from ManyMouse. This function considers any mouse labelled as \"Apple Internal Keyboard / Trackpad\" to be an internal mouse."]},{"l":"currentCursorType","p":["Signature","hs.mouse.currentCursorType() - string","Type","Function","Description","Gets the identifier of the current mouse cursor type.","Parameters","None","Returns","A string.","Notes","Possible values include: arrowCursor, contextualMenuCursor, closedHandCursor, crosshairCursor, disappearingItemCursor, dragCopyCursor, dragLinkCursor, IBeamCursor, operationNotAllowedCursor, pointingHandCursor, resizeDownCursor, resizeLeftCursor, resizeLeftRightCursor, resizeRightCursor, resizeUpCursor, resizeUpDownCursor, IBeamCursorForVerticalLayout or unknown if the cursor type cannot be determined. This function can also return daVinciResolveHorizontalArrows, when hovering over mouse-draggable text-boxes in DaVinci Resolve. This is determined using the \"hotspot\" value of the cursor."]},{"l":"getButtons","p":["Signature","hs.mouse.getButtons() - table","Type","Function","Description","Returns a table containing the current mouse buttons being pressed at this instant.","Parameters","None","Returns","Returns an array containing indices starting from 1 up to the highest numbered button currently being pressed where the index is true if the button is currently pressed or false if it is not. Special hash tag synonyms for left(button 1), right(button 2), and middle(button 3) are also set to true if these buttons are currently being pressed.","Notes","This function is a wrapper to hs.eventtap.checkMouseButtons This is an instantaneous poll of the current mouse buttons, not a callback."]},{"l":"getCurrentScreen","p":["Signature","hs.mouse.getCurrentScreen() - screen or nil","Type","Function","Description","Gets the screen the mouse pointer is on","Parameters","None","Returns","An hs.screen object that the mouse pointer is on, or nil if an error occurred","Notes"]},{"l":"getRelativePosition","p":["Signature","hs.mouse.getRelativePosition() - point or nil","Type","Function","Description","Gets the co-ordinates of the mouse pointer, relative to the screen it is on","Parameters","None","Returns","A point-table containing the relative x and y co-ordinates of the mouse pointer, or nil if an error occurred","Notes","The co-ordinates returned by this function are relative to the top left pixel of the screen the mouse is on (see hs.mouse.getAbsolutePosition if you need the location in the full desktop space)"]},{"l":"names","p":["Signature","hs.mouse.names() - table","Type","Function","Description","Gets the names of any mice connected to the system.","Parameters","None","Returns","A table containing strings of all the mice connected to the system.","Notes","This function leverages code from ManyMouse."]},{"l":"scrollDirection","p":["Signature","hs.mouse.scrollDirection() - string","Type","Function","Description","Gets the system-wide direction of scrolling","Parameters","None","Returns","A string, either \"natural\" or \"normal\"","Notes"]},{"l":"setRelativePosition","p":["Signature","hs.mouse.setRelativePosition(point[, screen])","Type","Function","Description","Sets the co-ordinates of the mouse pointer, relative to a screen","Parameters","point - A point-table containing the relative x and y co-ordinates to move the mouse pointer to screen - An optional hs.screen object. Defaults to the screen the mouse pointer is currently on","Returns","None","Notes"]},{"l":"trackingSpeed","p":["Signature","hs.mouse.trackingSpeed([speed]) - number","Type","Function","Description","Gets/Sets the current system mouse tracking speed setting","Parameters","speed - An optional number containing the new tracking speed to set. If this is omitted, the current setting is returned","Returns","A number indicating the current tracking speed setting for mice","Notes","This is represented in the System Preferences as the \"Tracking speed\" setting for mice Note that not all values will work, they should map to the steps defined in the System Preferences app, which are: 0.0, 0.125, 0.5, 0.6875, 0.875, 1.0, 1.5, 2.0, 2.5, 3.0 Note that changes to this value will not be noticed immediately by macOS"]}],[{"i":"hsnetwork","l":"hs.network","p":["This module provides functions for inquiring about and monitoring changes to the network."]},{"l":"Submodules","p":["hs.network.configuration","hs.network.host","hs.network.ping","hs.network.reachability"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","addresses","interfaceDetails","interfaceName","interfaces","primaryInterfaces"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"addresses","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.network.addresses([interface_list]) - table | | Type | Function | | Description | Returns a list of the IPv4 and IPv6 addresses for the specified interfaces, or all interfaces if no arguments are given. | | Parameters | interface_list - The interface names to return the IP addresses for. It should be specified as one of the following: one or more interface names, separated by a comma if the first argument is a table, it is assumes to be a table containing a list of interfaces and this list is used instead, ignoring any additional arguments that may be provided if no arguments are specified, then the results of hs.network.interfaces is used. | | Returns | A table containing a list of the IP addresses for the interfaces as determined by the arguments provided. | | Notes | The order of the IP addresses returned is undefined.If no arguments are provided, then this function returns the same results as hs.host.addresses, but does not block. |"]},{"l":"interfaceDetails","p":["Signature","hs.network.interfaceDetails([interface | favorIPv6]) - table","Type","Function","Description","Returns details about the specified interface or the primary interface if no interface is specified.","Parameters","interface - an optional string specifying the interface to retrieve details about. Defaults to the primary interface if not specified. favorIPv6 - an optional boolean specifying whether or not to prefer the primary IPv6 or the primary IPv4 interface if interface is not specified. Defaults to false.","Returns","A table containing key-value pairs describing interface details. Returns an empty table if no primary interface can be determined. Logs an error and returns nil if there was a problem retrieving this information.","Notes","When determining the primary interface, the favorIPv6 flag only determines interface search order. If you specify true for this flag, but no primary IPv6 interface exists (i.e. your DHCP server only provides an IPv4 address an IPv6 is limited to local only traffic), then the primary IPv4 interface will be used instead."]},{"l":"interfaceName","p":["Signature","hs.network.interfaceName([interface | favorIPv6]) - string","Type","Function","Description","Returns the user defined name for the specified interface or the primary interface if no interface is specified.","Parameters","interface - an optional string specifying the interface to retrieve the name for. Defaults to the primary interface if not specified. favorIPv6 - an optional boolean specifying whether or not to prefer the primary IPv6 or the primary IPv4 interface if interface is not specified. Defaults to false.","Returns","A string containing the user defined name for the interface, if one exists, or false if the interface does not have a user defined name. Logs an error and returns nil if there was a problem retrieving this information.","Notes","Only interfaces which show up in the System Preferences Network panel will have a user defined name. When determining the primary interface, the favorIPv6 flag only determines interface search order. If you specify true for this flag, but no primary IPv6 interface exists (i.e. your DHCP server only provides an IPv4 address an IPv6 is limited to local only traffic), then the primary IPv4 interface will be used instead."]},{"l":"interfaces","p":["Signature","hs.network.interfaces() - table","Type","Function","Description","Returns a list of interfaces currently active for the system.","Parameters","None","Returns","A table containing a list of the interfaces active for the system. Logs an error and returns nil if there was a problem retrieving this information.","Notes","The names of the interfaces returned by this function correspond to the interface's BSD name, not the user defined name that shows up in the System Preferences's Network panel. This function returns all interfaces, even ones used by the system that are not directly manageable by the user."]},{"l":"primaryInterfaces","p":["Signature","hs.network.primaryInterfaces() - ipv4Interface, ipv6Interface","Type","Function","Description","Returns the names of the primary IPv4 and IPv6 interfaces.","Parameters","None","Returns","The name of the primary IPv4 interface or false if there isn't one, and the name of the IPv6 interface or false if there isn't one. Logs an error and returns a single nil if there was a problem retrieving this information.","Notes","The IPv4 and IPv6 interface names are often, but not always, the same."]}],[{"i":"hsnetworkconfiguration","l":"hs.network.configuration","p":["This sub-module provides access to the current location set configuration settings in the system's dynamic store."]},{"l":"API Overview","p":["computerName","consoleUser","Constructors- API calls which return an object, typically one that offers API methods","contents","dhcpInfo","hostname","keys","location","locations","Methods- API calls which can only be made on an object returned by a constructor","monitorKeys","open","proxies","setCallback","setLocation","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"open","p":["Signature","hs.network.configuration.open() - storeObject","Type","Constructor","Description","Opens a session to the dynamic store maintained by the System Configuration server.","Parameters","None","Returns","the storeObject","Notes"]},{"l":"Methods"},{"l":"computerName","p":["Signature","hs.network.configuration:computerName() - name, encoding","Type","Method","Description","Returns the name of the computer as specified in the Sharing Preferences, and its string encoding","Parameters","None","Returns","name - the computer name encoding - the encoding type","Notes","You can also retrieve this information as key-value pairs with hs.network.configuration:contents(Setup:/System)"]},{"l":"consoleUser","p":["Signature","hs.network.configuration:consoleUser() - name, uid, gid","Type","Method","Description","Returns the name of the user currently logged into the system, including the users id and primary group id","Parameters","None","Returns","name - the user name uid - the user ID for the user gid - the user's primary group ID","Notes","You can also retrieve this information as key-value pairs with hs.network.configuration:contents(State:/Users/ConsoleUser)"]},{"l":"contents","p":["Signature","hs.network.configuration:contents([keys], [pattern]) - table","Type","Method","Description","Return the contents of the store for the specified keys or keys matching the specified pattern(s)","Parameters","keys - a string or table of strings containing the keys or patterns of keys, if pattern is true. Defaults to all keys. pattern - a boolean indicating wether or not the string(s) provided are to be considered regular expression patterns (true) or literal strings to match (false). Defaults to false.","Returns","a table of key-value pairs from the dynamic store which match the specified keys or key patterns.","Notes","if no parameters are provided, then all key-value pairs in the dynamic store are returned."]},{"l":"dhcpInfo","p":["Signature","hs.network.configuration:dhcpInfo([serviceID]) - table","Type","Method","Description","Return the DHCP information for the specified service or the primary service if no parameter is specified.","Parameters","serviceID - an optional string containing the service ID of the interface for which to return DHCP info. If this parameter is not provided, then the default (primary) service is queried.","Returns","a table containing DHCP information including lease time and DHCP options","Notes","a list of possible Service ID's can be retrieved with hs.network.configuration:contents(Setup:/Network/Global/IPv4) generates an error if the service ID is invalid or was not assigned an IP address via DHCP."]},{"l":"hostname","p":["Signature","hs.network.configuration:hostname() - name","Type","Method","Description","Returns the current local host name for the computer","Parameters","None","Returns","name - the local host name","Notes","You can also retrieve this information as key-value pairs with hs.network.configuration:contents(Setup:/System)"]},{"l":"keys","p":["Signature","hs.network.configuration:keys([keypattern]) - table","Type","Method","Description","Return the keys in the dynamic store which match the specified pattern","Parameters","keypattern - a regular expression specifying which keys to return (defaults to \".*\", or all keys)","Returns","a table of keys from the dynamic store.","Notes"]},{"l":"location","p":["Signature","hs.network.configuration:location() - location","Type","Method","Description","Returns the current location identifier","Parameters","None","Returns","location - the UUID for the currently active network location","Notes","You can also retrieve this information as key-value pairs with hs.network.configuration:contents(Setup:) If you have different locations defined in the Network preferences panel, this can be used to determine the currently active location."]},{"l":"locations","p":["Signature","hs.network.configuration:locations() - table","Type","Method","Description","Returns all configured locations","Parameters","None","Returns","a table of key-value pairs mapping location UUIDs to their names","Notes"]},{"l":"monitorKeys","p":["Signature","hs.network.configuration:monitorKeys([keys], [pattern]) - storeObject","Type","Method","Description","Specify the key(s) or key pattern(s) to monitor for changes.","Parameters","keys - a string or table of strings containing the keys or patterns of keys, if pattern is true. Defaults to all keys. pattern - a boolean indicating wether or not the string(s) provided are to be considered regular expression patterns (true) or literal strings to match (false). Defaults to false.","Returns","the store Object","Notes","if no parameters are provided, then all key-value pairs in the dynamic store are monitored for changes."]},{"l":"proxies","p":["Signature","hs.network.configuration:proxies() - table","Type","Method","Description","Returns information about the currently active proxies, if any","Parameters","None","Returns","a table of key-value pairs describing the current proxies in effect, both globally, and scoped to specific interfaces.","Notes","You can also retrieve this information as key-value pairs with hs.network.configuration:contents(State:/Network/Global/Proxies)"]},{"l":"setCallback","p":["Signature","hs.network.configuration:setCallback(function) - storeObject","Type","Method","Description","Set or remove the callback function for a store object","Parameters","a function or nil to set or remove the store object callback function","Returns","the store object","Notes","The callback function will be invoked each time a monitored key changes value and the callback function should accept two parameters: the storeObject itself, and an array of the keys which contain values that have changed. This method just sets the callback function. You specify which keys to watch with hs.network.configuration:monitorKeys and start or stop the watcher with hs.network.configuration:start or hs.network.configuration:stop"]},{"l":"setLocation","p":["Signature","hs.network.configuration:setLocation(location) - boolean","Type","Method","Description","Switches to a new location","Parameters","location - string containing name or UUID of new location","Returns","bool - true if the location was successfully changed, false if there was an error","Notes"]},{"l":"start","p":["Signature","hs.network.configuration:start() - storeObject","Type","Method","Description","Starts watching the store object for changes to the monitored keys and invokes the callback function (if any) when a change occurs.","Parameters","None","Returns","the store object","Notes","The callback function should be specified with hs.network.configuration:setCallback and the keys to monitor should be specified with hs.network.configuration:monitorKeys."]},{"l":"stop","p":["Signature","hs.network.configuration:stop() - storeObject","Type","Method","Description","Stops watching the store object for changes.","Parameters","None","Returns","the store object","Notes"]}],[{"i":"hsnetworkhost","l":"hs.network.host","p":["This sub-module provides functions for acquiring host information, such as hostnames, addresses, and reachability."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","addressesForHostname","hostnamesForAddress","reachabilityForAddress","reachabilityForHostname","Methods- API calls which can only be made on an object returned by a constructor","cancel","isRunning"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"addressesForHostname","p":["Signature","hs.network.host.addressesForHostname(name[, fn]) - table | hostObject","Type","Function","Description","Get IP addresses for the hostname specified.","Parameters","name - the hostname to lookup IP addresses for fn - an optional callback function which, when provided, will perform the address resolution in an asynchronous, non-blocking manner.","Returns","If this function is called without a callback function, returns a table containing the IP addresses for the specified name. If a callback function is specified, then a host object is returned.","Notes","If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic. If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete. The callback function should take two parameters: the string \"addresses\", indicating that an address resolution occurred, and a table containing the IP addresses identified. Generates an error if network access is currently disabled or the hostname is invalid."]},{"l":"hostnamesForAddress","p":["Signature","hs.network.host.hostnamesForAddress(address[, fn]) - table | hostObject","Type","Function","Description","Get hostnames for the IP address specified.","Parameters","address - a string or number representing an IPv4 or IPv6 network address to lookup hostnames for. If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address. fn - an optional callback function which, when provided, will perform the hostname resolution in an asynchronous, non-blocking manner.","Returns","If this function is called without a callback function, returns a table containing the hostnames for the specified address. If a callback function is specified, then a host object is returned.","Notes","If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic. If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete. The callback function should take two parameters: the string \"names\", indicating that hostname resolution occurred, and a table containing the hostnames identified. Generates an error if network access is currently disabled or the IP address is invalid."]},{"l":"reachabilityForAddress","p":["Signature","hs.network.host.reachabilityForAddress(address[, fn]) - integer | hostObject","Type","Function","Description","Get the reachability status for the IP address specified.","Parameters","address - a string or number representing an IPv4 or IPv6 network address to check the reachability for. If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address. fn - an optional callback function which, when provided, will determine the address reachability in an asynchronous, non-blocking manner.","Returns","If this function is called without a callback function, returns the numeric representation of the address reachability status. If a callback function is specified, then a host object is returned.","Notes","If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic. If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete. The callback function should take two parameters: the string \"reachability\", indicating that reachability was determined, and the numeric representation of the address reachability status. Generates an error if network access is currently disabled or the IP address is invalid. The numeric representation is made up from a combination of the flags defined in hs.network.reachability.flags. Performs the same reachability test as hs.network.reachability.forAddress."]},{"l":"reachabilityForHostname","p":["Signature","hs.network.host.reachabilityForHostname(name[, fn]) - integer | hostObject","Type","Function","Description","Get the reachability status for the IP address specified.","Parameters","name - the hostname to check the reachability for. If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address. fn - an optional callback function which, when provided, will determine the address reachability in an asynchronous, non-blocking manner.","Returns","If this function is called without a callback function, returns the numeric representation of the hostname reachability status. If a callback function is specified, then a host object is returned.","Notes","If no callback function is provided, the resolution occurs in a blocking manner which may be noticeable when network access is slow or erratic. If a callback function is provided, this function acts as a constructor, returning a host object and the callback function will be invoked when resolution is complete. The callback function should take two parameters: the string \"reachability\", indicating that reachability was determined, and the numeric representation of the hostname reachability status. Generates an error if network access is currently disabled or the IP address is invalid. The numeric representation is made up from a combination of the flags defined in hs.network.reachability.flags. Performs the same reachability test as hs.network.reachability.forHostName."]},{"l":"Methods"},{"l":"cancel","p":["Signature","hs.network.host:cancel() - hostObject","Type","Method","Description","Cancels an in-progress asynchronous host resolution.","Parameters","None","Returns","the hostObject","Notes","This method has no effect if the resolution has already completed."]},{"l":"isRunning","p":["Signature","hs.network.host:isRunning() - boolean","Type","Method","Description","Returns whether or not resolution is still in progress for an asynchronous query.","Parameters","None","Returns","true, if resolution is still in progress, or false if resolution has already completed.","Notes"]}],[{"i":"hsnetworkping","l":"hs.network.ping","p":["This module provides a basic ping function which can test host availability. Ping is a network diagnostic tool commonly found in most operating systems which can be used to test if a route to a specified host exists and if that host is responding to network traffic."]},{"l":"Submodules","p":["hs.network.ping.echoRequest"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","ping","Methods- API calls which can only be made on an object returned by a constructor","address","cancel","count","isPaused","isRunning","packets","pause","resume","sent","server","setCallback","summary"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"ping","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.network.ping.ping(server, [count], [interval], [timeout], [class], [fn]) - pingObject | | Type | Constructor | | Description | Test server availability by pinging it with ICMP Echo Requests. | | Parameters | server - a string containing the hostname or ip address of the server to test. Both IPv4 and IPv6 addresses are supported.count - an optional integer, default 5, specifying the number of ICMP Echo Requests to send to the server.interval - an optional number, default 1.0, in seconds specifying the delay between the sending of each echo request. To set this parameter, you must supply count as well.timeout - an optional number, default 2.0, in seconds specifying how long before an echo reply is considered to have timed-out. To set this parameter, you must supply count and interval as well.class - an optional string, default \"any\", specifying whether IPv4 or IPv6 should be used to send the ICMP packets. The string must be one of the following: any - uses the IP version which corresponds to the first address the server resolves to IPv4 - use IPv4; if server cannot resolve to an IPv4 address, or if IPv4 traffic is not supported on the network, the ping will fail with an error. IPv6 - use IPv6; if server cannot resolve to an IPv6 address, or if IPv6 traffic is not supported on the network, the ping will fail with an error.fn - the callback function which receives update messages for the ping process. See the Notes for details regarding the callback function. | | Returns | a pingObject | | Notes | For convenience, you can call this constructor as hs.network.ping(server, ...)the full ping process will take at most count``interval + timeout seconds from didStart to didFinish.the default callback function, if fn is not specified, prints the results of each echo reply as they are received to the Hammerspoon console and a summary once completed. The output should be familiar to anyone who has used ping from the command line.If you provide your own callback function, it should expect between 2 and 4 arguments and return none. The possible arguments which are sent will be one of the following: \"didStart\" - indicates that address resolution has completed and the ping will begin sending ICMP Echo Requests. object - the ping object the callback is for message - the message to the callback, in this case \"didStart\" \"didFail\" - indicates that the ping process has failed, most likely due to a failure in address resolution or because the network connection has dropped. object - the ping object the callback is for message - the message to the callback, in this case \"didFail\" error - a string containing the error message that has occurred \"sendPacketFailed\" - indicates that a specific ICMP Echo Request has failed for some reason. object - the ping object the callback is for message - the message to the callback, in this case \"sendPacketFailed\" sequenceNumber - the sequence number of the ICMP packet which has failed to send error - a string containing the error message that has occurred \"receivedPacket\" - indicates that an ICMP Echo Request has received the expected ICMP Echo Reply object - the ping object the callback is for message - the message to the callback, in this case \"receivedPacket\" sequenceNumber - the sequence number of the ICMP packet received \"didFinish\" - indicates that the ping has finished sending all ICMP Echo Requests or has been cancelled object - the ping object the callback is for message - the message to the callback, in this case \"didFinish\" |"]},{"l":"Methods"},{"l":"address","p":["Signature","hs.network.ping:address() - string","Type","Method","Description","Returns a string containing the resolved IPv4 or IPv6 address this pingObject is sending echo requests to.","Parameters","None","Returns","A string containing the IPv4 or IPv6 address this pingObject is sending echo requests to or \"\" if the address cannot be resolved.","Notes"]},{"l":"cancel","p":["Signature","hs.network.ping:cancel() - none","Type","Method","Description","Cancels an in progress ping process, terminating it immediately","Parameters","None","Returns","Notes","the didFinish message will be sent to the callback function as its final message."]},{"l":"count","p":["Signature","hs.network.ping:count([count]) - integer | pingObject | nil","Type","Method","Description","Get or set the number of ICMP Echo Requests that will be sent by the ping process","Parameters","count- an optional integer specifying the total number of echo requests that the ping process should send. If specified, this number must be greater than the number of requests already sent.","Returns","if no argument is specified, returns the current number of echo requests the ping process will send; if an argument is specified and the ping process has not completed, returns the pingObject; if the ping process has already completed, then this method returns nil.","Notes"]},{"l":"isPaused","p":["Signature","hs.network.ping:isPaused() - boolean","Type","Method","Description","Returns whether or not the ping process is currently paused.","Parameters","None","Returns","A boolean indicating if the ping process is paused (true) or not (false)","Notes"]},{"l":"isRunning","p":["Signature","hs.network.ping:isRunning() - boolean","Type","Method","Description","Returns whether or not the ping process is currently active.","Parameters","None","Returns","A boolean indicating if the ping process is active (true) or not (false)","Notes","This method will return false only if the ping process has finished sending all echo requests or if it has been cancelled with hs.network.ping:cancel. To determine if the process is currently sending out echo requests, see hs.network.ping:isPaused."]},{"l":"packets","p":["Signature","hs.network.ping:packets([sequenceNumber]) - table","Type","Method","Description","Returns a table containing information about the ICMP Echo packets sent by this pingObject.","Parameters","sequenceNumber- an optional integer specifying the sequence number of the ICMP Echo packet to return information about.","Returns","If sequenceNumber is specified, returns a table with key-value pairs containing information about the specific ICMP Echo packet with that sequence number, or an empty table if no packet with that sequence number has been sent yet. If no sequence number is specified, returns an array table of all ICMP Echo packets this object has sent.","Notes","Sequence numbers start at 0 while Lua array tables are indexed starting at 1. If you do not specify a sequenceNumber to this method, index 1 of the array table returned will contain a table describing the ICMP Echo packet with sequence number 0, index 2 will describe the ICMP Echo packet with sequence number 1, etc. An ICMP Echo packet table will have the following key-value pairs: sent- a number specifying the time at which the echo request for this packet was sent. This number is the number of seconds since January 1, 1970 at midnight, GMT, and is a floating point number, so you should use math.floor on this number before using it as an argument to Lua's os.date function. recv- a number specifying the time at which the echo reply for this packet was received. This number is the number of seconds since January 1, 1970 at midnight, GMT, and is a floating point number, so you should use math.floor on this number before using it as an argument to Lua's os.date function. icmp- a table provided by the hs.network.ping.echoRequest object which contains the details about the specific ICMP packet this entry corresponds to. It will contain the following keys: checksum- The ICMP packet checksum used to ensure data integrity. code- ICMP Control Message Code. Should always be 0. identifier- The ICMP Identifier generated internally for matching request and reply packets. payload- A string containing the ICMP payload for this packet. This has been constructed to cause the ICMP packet to be exactly 64 bytes to match the convention for ICMP Echo Requests. sequenceNumber- The ICMP Sequence Number for this packet. type- ICMP Control Message Type. For ICMPv4, this will be 0 if a reply has been received or 8 no reply has been received yet. For ICMPv6, this will be 129 if a reply has been received or 128 if no reply has been received yet._raw- A string containing the ICMP packet as raw data."]},{"l":"pause","p":["Signature","hs.network.ping:pause() - pingObject | nil","Type","Method","Description","Pause an in progress ping process.","Parameters","None","Returns","if the ping process is currently active, returns the pingObject; if the process has already completed, returns nil.","Notes"]},{"l":"resume","p":["Signature","hs.network.ping:resume() - pingObject | nil","Type","Method","Description","Resume an in progress ping process, if it has been paused.","Parameters","None","Returns","if the ping process is currently active, returns the pingObject; if the process has already completed, returns nil.","Notes"]},{"l":"sent","p":["Signature","hs.network.ping:sent() - integer","Type","Method","Description","Returns the number of ICMP Echo Requests which have been sent.","Parameters","None","Returns","The number of echo requests which have been sent so far.","Notes"]},{"l":"server","p":["Signature","hs.network.ping:server() - string","Type","Method","Description","Returns the hostname or ip address string given to the hs.network.ping.ping constructor.","Parameters","None","Returns","A string matching the hostname or ip address given to the hs.network.ping.ping constructor for this object.","Notes"]},{"l":"setCallback","p":["Signature","hs.network.ping:setCallback(fn) - pingObject","Type","Method","Description","Set or remove the callback function for the pingObject.","Parameters","fn- the function to set as the callback, or nil if you wish use the default callback.","Returns","the pingObject","Notes","Because the ping process begins immediately upon creation with the hs.network.ping.ping constructor, it is preferable to assign the callback with the constructor itself. This method is provided as a means of changing the callback based on other events (a change in the current network or location, perhaps.) If you truly wish to create a pingObject with no callback, you will need to do something like hs.network.ping.ping(...):setCallback(function() end)."]},{"l":"summary","p":["Signature","hs.network.ping:summary() - string","Type","Method","Description","Returns a string containing summary information about the ping process.","Parameters","None","Returns","a summary string for the current state of the ping process","Notes","The summary string will look similar to the following:--- hostname ping statistics 5 packets transmitted, 5 packets received, 0.0 packet lossround-trip min/avg/max = 2.282/4.133/4.926 ms The number of packets received will match the number that has currently been sent, not necessarily the value returned by hs.network.ping:count."]}],[{"i":"hsnetworkpingechorequest","l":"hs.network.ping.echoRequest","p":["Provides lower-level access to the ICMP Echo Request infrastructure used by the hs.network.ping module. In general, you should not need to use this module directly unless you have specific requirements not met by the hs.network.ping module and the hs.network.ping object methods.","This module is based heavily on Apple's SimplePing sample project which can be found at https://developer.apple.com/library/content/samplecode/SimplePing/Introduction/Intro.html.","When a callback function argument is specified as an ICMP table, the Lua table returned will contain the following key-value pairs:","checksum- The ICMP packet checksum used to ensure data integrity.","code- ICMP Control Message Code. This should always be 0 unless the callback has received a \"receivedUnexpectedPacket\" message.","identifier- The ICMP packet identifier. This should match the results of hs.network.ping.echoRequest:identifier unless the callback has received a \"receivedUnexpectedPacket\" message.","payload- A string containing the ICMP payload for this packet. The default payload has been constructed to cause the ICMP packet to be exactly 64 bytes to match the convention for ICMP Echo Requests.","sequenceNumber- The ICMP Sequence Number for this packet.","type- ICMP Control Message Type. Unless the callback has received a \"receivedUnexpectedPacket\" message, this will be 0 (ICMPv4) or 129 (ICMPv6) for packets we receive and 8 (ICMPv4) or 128 (ICMPv6) for packets we send.","_raw- A string containing the ICMP packet as raw data.","In cases where the callback receives a \"receivedUnexpectedPacket\" message because the packet is corrupted or truncated, this table may only contain the _raw field."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","echoRequest","Methods- API calls which can only be made on an object returned by a constructor","acceptAddressFamily","hostAddress","hostAddressFamily","hostName","identifier","isRunning","nextSequenceNumber","seeAllUnexpectedPackets","sendPayload","setCallback","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"echoRequest","p":["Signature","hs.network.ping.echoRequest.echoRequest(server) - echoRequestObject","Type","Constructor","Description","Creates a new ICMP Echo Request object for the server specified.","Parameters","server- a string containing the hostname or ip address of the server to communicate with. Both IPv4 and IPv6 style addresses are supported.","Returns","an echoRequest object","Notes","This constructor returns a lower-level object than the hs.network.ping.ping constructor and is more difficult to use. It is recommended that you use this constructor only if hs.network.ping.ping is not sufficient for your needs. For convenience, you can call this constructor as hs.network.ping.echoRequest(server)"]},{"l":"Methods"},{"l":"acceptAddressFamily","p":["Signature","hs.network.ping.echoRequest:acceptAddressFamily([family]) - echoRequestObject | current value","Type","Method","Description","Get or set the address family the echoRequestObject should communicate with.","Parameters","family- an optional string, default \"any\", which specifies the address family used by this object. Valid values are \"any\", \"IPv4\", and \"IPv6\".","Returns","if an argument is provided, returns the echoRequestObject, otherwise returns the current value.","Notes","Setting this value to \"IPv6\" or \"IPv4\" will cause the echoRequestObject to attempt to resolve the server's name into an IPv6 address or an IPv4 address and communicate via ICMPv6 or ICMP(v4) when the hs.network.ping.echoRequest:start method is invoked. A callback with the message \"didFail\" will occur if the server could not be resolved to an address in the specified family. If this value is set to \"any\", then the first address which is discovered for the server's name will determine whether ICMPv6 or ICMP(v4) is used, based upon the family of the address. Setting a value with this method will have no immediate effect on an echoRequestObject which has already been started with hs.network.ping.echoRequest:start. You must first stop and then restart the object for any change to have an effect."]},{"l":"hostAddress","p":["Signature","hs.network.ping.echoRequest:hostAddress() - string | false | nil","Type","Method","Description","Returns a string representation for the server's IP address, or a boolean if address resolution has not completed yet.","Parameters","None","Returns","If the object has been started and address resolution has completed, then the string representation of the server's IP address is returned. If the object has been started, but resolution is still pending, returns a boolean value of false. If the object has not been started, returns nil.","Notes"]},{"l":"hostAddressFamily","p":["Signature","hs.network.ping.echoRequest:hostAddressFamily() - string","Type","Method","Description","Returns the host address family currently in use by this echoRequestObject.","Parameters","None","Returns","a string indicating the IP address family currently used by this echoRequestObject. It will be one of the following values:\"IPv4\" - indicates that ICMP(v4) packets are being sent and listened for.\"IPv6\" - indicates that ICMPv6 packets are being sent and listened for.\"unresolved\" - indicates that the echoRequestObject has not been started or that address resolution is still in progress.","Notes"]},{"l":"hostName","p":["Signature","hs.network.ping.echoRequest:hostName() - string","Type","Method","Description","Returns the name of the target host as provided to the echoRequestObject's constructor","Parameters","None","Returns","a string containing the hostname as specified when the object was created.","Notes"]},{"l":"identifier","p":["Signature","hs.network.ping.echoRequest:identifier() - integer","Type","Method","Description","Returns the identifier number for the echoRequestObject.","Parameters","None","Returns","an integer specifying the identifier which is embedded in the ICMP packets this object sends.","Notes","ICMP Echo Replies which include this identifier will generate a \"receivedPacket\" message to the object callback, while replies which include a different identifier will generate a \"receivedUnexpectedPacket\" message."]},{"l":"isRunning","p":["Signature","hs.network.ping.echoRequest:isRunning() - boolean","Type","Method","Description","Returns a boolean indicating whether or not this echoRequestObject is currently listening for ICMP Echo Replies.","Parameters","None","Returns","true if the object is currently listening for ICMP Echo Replies, or false if it is not.","Notes"]},{"l":"nextSequenceNumber","p":["Signature","hs.network.ping.echoRequest:nextSequenceNumber() - integer","Type","Method","Description","The sequence number that will be used for the next ICMP packet sent by this object.","Parameters","None","Returns","an integer specifying the sequence number that will be embedded in the next ICMP message sent by this object when hs.network.ping.echoRequest:sendPayload is invoked.","Notes","ICMP Echo Replies which are expected by this object should always be less than this number, with the caveat that this number is a 16-bit integer which will wrap around to 0 after sending a packet with the sequence number 65535. Because of this wrap around effect, this module will generate a \"receivedPacket\" message to the object callback whenever the received packet has a sequence number that is within the last 120 sequence numbers we've sent and a \"receivedUnexpectedPacket\" otherwise. Per the comments in Apple's SimplePing.m file: Why 120? Well, if we send one ping per second, 120 is 2 minutes, which is the standard \"max time a packet can bounce around the Internet\" value."]},{"l":"seeAllUnexpectedPackets","p":["Signature","hs.network.ping.echoRequest:seeAllUnexpectedPackets([state]) - boolean | echoRequestObject","Type","Method","Description","Get or set whether or not the callback should receive all unexpected packets or only those which carry our identifier.","Parameters","state- an optional boolean, default false, specifying whether or not all unexpected packets or only those which carry our identifier should generate a \"receivedUnexpectedPacket\" callback message.","Returns","if an argument is provided, returns the echoRequestObject; otherwise returns the current value","Notes","The nature of ICMP packet reception is such that all listeners receive all ICMP packets, even those which belong to another process or echoRequestObject. By default, a valid packet (i.e. with a valid checksum) which does not contain our identifier is ignored since it was not intended for our receiver. Only corrupt or packets with our identifier but that were otherwise unexpected will generate a \"receivedUnexpectedPacket\" callback message. This method optionally allows the echoRequestObject to receive all incoming packets, even ones which are expected by another process or echoRequestObject. If you wish to examine ICMPv6 router advertisement and neighbor discovery packets, you should set this property to true. Note that this module does not provide the necessary tools to decode these packets at present, so you will have to decode them yourself if you wish to examine their contents."]},{"l":"sendPayload","p":["Signature","hs.network.ping.echoRequest:sendPayload([payload]) - echoRequestObject | false | nil","Type","Method","Description","Sends a single ICMP Echo Request packet.","Parameters","payload- an optional string containing the data to include in the ICMP Echo Request as the packet payload.","Returns","If the object has been started and address resolution has completed, then the ICMP Echo Packet is sent and this method returns the echoRequestObject If the object has been started, but resolution is still pending, the packet is not sent and this method returns a boolean value of false. If the object has not been started, the packet is not sent and this method returns nil.","Notes","By convention, unless you are trying to test for specific network fragmentation or congestion problems, ICMP Echo Requests are generally 64 bytes in length (this includes the 8 byte header, giving 56 bytes of payload data). If you do not specify a payload, a default payload which will result in a packet size of 64 bytes is constructed."]},{"l":"setCallback","p":["Signature","hs.network.ping.echoRequest:setCallback(fn) - echoRequestObject","Type","Method","Description","Set or remove the object callback function","Parameters","fn- a function to set as the callback function for this object, or nil if you wish to remove any existing callback function.","Returns","the echoRequestObject","Notes","The callback function should expect between 3 and 5 arguments and return none. The possible arguments which are sent will be one of the following:\"didStart\" - indicates that the object has resolved the address of the server and is ready to begin sending and receiving ICMP Echo packets. object- the echoRequestObject itself message- the message to the callback, in this case \"didStart\" address- a string representation of the IPv4 or IPv6 address of the server specified to the constructor.\"didFail\" - indicates that the object has failed, either because the address could not be resolved or a network error has occurred. object- the echoRequestObject itself message- the message to the callback, in this case \"didFail\" error- a string describing the error that occurred. Notes: When this message is received, you do not need to call hs.network.ping.echoRequest:stop-- the object will already have been stopped.\"sendPacket\" - indicates that the object has sent an ICMP Echo Request packet. object- the echoRequestObject itself message- the message to the callback, in this case \"sendPacket\" icmp- an ICMP packet table representing the packet which has been sent as described in the header of this module's documentation. seq- the sequence number for this packet. Sequence numbers always start at 0 and increase by 1 every time the hs.network.ping.echoRequest:sendPayload method is called.\"sendPacketFailed\" - indicates that the object failed to send the ICMP Echo Request packet. object- the echoRequestObject itself message- the message to the callback, in this case \"sendPacketFailed\" icmp- an ICMP packet table representing the packet which was to be sent. seq- the sequence number for this packet. error- a string describing the error that occurred. Notes: Unlike \"didFail\", the echoRequestObject is not stopped when this message occurs; you can try to send another payload if you wish without restarting the object first.\"receivedPacket\" - indicates that an expected ICMP Echo Reply packet has been received by the object. object- the echoRequestObject itself message- the message to the callback, in this case \"receivedPacket\" icmp- an ICMP packet table representing the packet received. seq- the sequence number for this packet.\"receivedUnexpectedPacket\" - indicates that an unexpected ICMP packet was received object- the echoRequestObject itself message- the message to the callback, in this case \"receivedUnexpectedPacket\" icmp- an ICMP packet table representing the packet received. Notes: This message can occur for a variety of reasons, the most common being: the ICMP packet is corrupt or truncated and cannot be parsed the ICMP Identifier does not match ours and the sequence number is not one we have sent the ICMP type does not match an ICMP Echo Reply When using IPv6, this is especially common because IPv6 uses ICMP for network management functions like Router Advertisement and Neighbor Discovery. In general, it is reasonably safe to ignore these messages, unless you are having problems receiving anything else, in which case it could indicate problems on your network that need addressing."]},{"l":"start","p":["Signature","hs.network.ping.echoRequest:start() - echoRequestObject","Type","Method","Description","Start the echoRequestObject by resolving the server's address and start listening for ICMP Echo Reply packets.","Parameters","None","Returns","the echoRequestObject","Notes"]},{"l":"stop","p":["Signature","hs.network.ping.echoRequest:stop() - echoRequestObject","Type","Method","Description","Stop listening for ICMP Echo Reply packets with this object.","Parameters","None","Returns","the echoRequestObject","Notes"]}],[{"i":"hsnetworkreachability","l":"hs.network.reachability","p":["This sub-module can be used to determine the reachability of a target host. A remote host is considered reachable when a data packet, sent by an application into the network stack, can leave the local device. Reachability does not guarantee that the data packet will actually be received by the host.","It is important to remember that this module works by determining if the computer has a route for network traffic bound to a specific destination. An active internet connection provides a default route for any network that the host is not a member of, so care must be used when testing for specific VPN or local networks to avoid false positives. Some examples follow:","This is a simple watcher which will be invoked whenever the computer's active internet connection changes state:","Note that when an active internet connection is up (reachable), any specific network test that does not include an address pair will be reachable, since internet reachability is defined as having a default route for all non-local networks.","A specific test for determining if an OpenVPN network is available. This example requires knowing what the local computer's IP address on the VPN network is (OpenVPN does not set the isDirect flag) and has been tested with Tunnelblick."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","flags","Constructors- API calls which return an object, typically one that offers API methods","forAddress","forAddressPair","forHostName","internet","linkLocal","Methods- API calls which can only be made on an object returned by a constructor","setCallback","start","status","statusString","stop"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"flags","p":["Signature","hs.network.reachability.flags[]","Type","Constant","Description","A table containing the numeric value for the possible flags returned by the hs.network.reachability:status method or in the flags parameter of the callback function."]},{"l":"Constructors"},{"l":"forAddress","p":["Signature","hs.network.reachability.forAddress(address) - reachabilityObject","Type","Constructor","Description","Returns a reachability object for the specified network address.","Parameters","address - a string or number representing an IPv4 or IPv6 network address to get or track reachability status for. If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address.","Returns","a reachability object for the specified network address.","Notes","this object will reflect reachability status for any interface available on the computer. To check for reachability from a specific interface, use hs.network.reachability.forAddressPair."]},{"l":"forAddressPair","p":["Signature","hs.network.reachability.forAddressPair(localAddress, remoteAddress) - reachabilityObject","Type","Constructor","Description","Returns a reachability object for the specified network address from the specified localAddress.","Parameters","localAddress - a string or number representing a local IPv4 or IPv6 network address. If the address specified is not present on the computer, the remote address will be unreachable. remoteAddress - a string or number representing an IPv4 or IPv6 network address to get or track reachability status for. If the argument is a number, it is treated as the 32 bit numerical representation of an IPv4 address.","Returns","a reachability object for the specified network address.","Notes","this object will reflect reachability status for a specific interface on the computer. To check for reachability from any interface, use hs.network.reachability.forAddress. this constructor can be used to test for a specific local network."]},{"l":"forHostName","p":["Signature","hs.network.reachability.forHostName(hostName) - reachabilityObject","Type","Constructor","Description","Returns a reachability object for the specified host.","Parameters","hostName - a string containing the hostname of a machine to check or track the reachability status for.","Returns","a reachability object for the specified host.","Notes","this object will reflect reachability status for any interface available on the computer. this constructor relies on the hostname being resolvable, possibly through DNS, Bonjour, locally defined, etc."]},{"l":"internet","p":["Signature","hs.network.reachability.internet() - reachabilityObject","Type","Constructor","Description","Creates a reachability object for testing internet access","Parameters","None","Returns","a reachability object","Notes","This is equivalent to hs.network.reachability.forAddress(0.0.0.0) This constructor assumes that a default route for IPv4 traffic is sufficient to determine internet access. If you are on an IPv6 only network which does not also provide IPv4 route mapping, you should probably use something along the lines of hs.network.reachability.forAddress(::) instead."]},{"l":"linkLocal","p":["Signature","hs.network.reachability.linkLocal() - reachabilityObject","Type","Constructor","Description","Creates a reachability object for testing IPv4 link local networking","Parameters","None","Returns","a reachability object","Notes","This is equivalent to hs.network.reachability.forAddress(169.254.0.0) You can use this to determine if any interface has an IPv4 link local address (i.e. zero conf or local only networking) by checking the \"isDirect\" flag: hs.network.reachability.linklocal():status() hs.network.reachability.flags.isDirect If the internet is reachable, then this network will also be reachable by default -- use the isDirect flag to ensure that the route is local."]},{"l":"Methods"},{"l":"setCallback","p":["Signature","hs.network.reachability:setCallback(function) - reachabilityObject","Type","Method","Description","Set or remove the callback function for a reachability object","Parameters","a function or nil to set or remove the reachability object callback function","Returns","the reachability object","Notes","The callback function will be invoked each time the status for the given reachability object changes. The callback function should expect 2 arguments, the reachability object itself and a numeric representation of the reachability flags, and should not return anything. This method just sets the callback function. You can start or stop the watcher with hs.network.reachability:start or hs.network.reachability:stop"]},{"l":"start","p":["Signature","hs.network.reachability:start() - reachabilityObject","Type","Method","Description","Starts watching the reachability object for changes and invokes the callback function (if any) when a change occurs.","Parameters","None","Returns","the reachability object","Notes","The callback function should be specified with hs.network.reachability:setCallback."]},{"l":"status","p":["Signature","hs.network.reachability:status() - number","Type","Method","Description","Returns the reachability status for the object","Parameters","None","Returns","a numeric representation of the reachability status","Notes","The numeric representation is made up from a combination of the flags defined in hs.network.reachability.flags."]},{"l":"statusString","p":["'-' indicates if the destination is actually a local address'd'","'-' indicates if the destination is directly connected","'-' indicates if the destination is reachable through a transient connection'R'","'-' indicates if the destination is reachable'c'","'-' indicates if the destination requires a connection which will be initiated on demand through the CFSocketStream interface'l'","'-' indicates if the destination requires a connection which will be initiated when traffic to the destination is present'i'","'-' indicates if the destination requires a connection which will require user activity to initiate'D'","'-' indicates that a connection of some sort is required for the destination to be reachable'C'","a string representation of the reachability status for the object","Description","hs.network.reachability:statusString() - string","Method","None","Notes","Parameters","Returns","Returns a string representation of the reachability status for the object","Signature","This is included primarily for debugging, but may be more useful when you just want a quick look at the reachability status for display or testing. The string will be made up of the following flags:'t'","Type"]},{"l":"stop","p":["Signature","hs.network.reachability:stop() - reachabilityObject","Type","Method","Description","Stops watching the reachability object for changes.","Parameters","None","Returns","the reachability object","Notes"]}],[{"i":"hsnoises","l":"hs.noises","p":["Contains two low latency audio recognizers for different mouth noises, which can be used to trigger actions like scrolling or clicking. The recognizers are also high accuracy and don't use much CPU time.","This module was written by Tristan Hume. If you have any issues with or questions about the recognition, email him. All first person references in this module's documentation refer to him.","The detectors are tuned so that they work for most people and most microphones. For best results use a highly directional headset microphone so that it doesn't pick up other people and background noises around you, and put the boom off to the side of your mouth so you aren't directly breathing on it.","The two mouth noises (and their corresponding event numbers) are:"]},{"i":"sssssssssss","l":"\"sssssssssss\"","p":["The \"sssss\" noise/syllable is easy to make and can be made continuously. The detector emits an event 1 when you start saying \"sss\" and a 2 after you stop. It's good to hook up to variable-length actions like clicking/dragging and scrolling. It can detect very quiet noises so even just barely saying \"ssss\" under your breath should trigger it without annoying anybody else around you too much. It works with most \"sss\" syllables but I find sharper is better, in crispness that is, loudness doesn't matter much. It has a very low false negative rate, but often has false positives. It will obviously trigger in english speech since \"s\" is a common syllable, but with some microphones breathing in certain ways will trigger it as well. Personally I use this to scroll down, it allows me to read long articles and books lying down with my laptop without awkward hand positioning to scroll with the trackpad."]},{"l":"Lip Popping","p":["Popping your lips is harder to do reliably and can't be done for variable lengths of time. The detector calls your callback with the number 3 when it detects one. This detector has an almost zero false positive rate in my experience and a very low false negative rate (when you manage to make the sound). Personally I use this to scroll up by a large increment in case I scroll down too far with \"sss\", and when my RSS reader is focused it moves to the next article. The only false positives I've ever had with this detector are various rare throat clearing noises that make a pop sound very much like a lip pop."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","hs.noises.new(fn) - listener","Type","Constructor","Description","Creates a new listener for mouth noise recognition","Parameters","A function that is called when a mouth noise is recognized. It should accept a single parameter which will be a number representing the event type (see module docs).","Returns","An hs.noises object","Notes"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.noises:start() - self","Type","Method","Description","Starts listening to the microphone and passing the audio to the recognizer.","Parameters","None","Returns","The hs.noises object","Notes"]},{"l":"stop","p":["Signature","hs.noises:stop() - self","Type","Method","Description","Stops the listener from recording and analyzing microphone input.","Parameters","None","Returns","The hs.noises object","Notes"]}],[{"i":"hsnotify","l":"hs.notify","p":["This module allows you to create on screen notifications in the User Notification Center located at the right of the users screen.","Notifications can be sent immediately or scheduled for delivery at a later time, even if that scheduled time occurs when Hammerspoon is not currently running. Currently, if you take action on a notification while Hammerspoon is not running, the callback function is not honored for the first notification clicked upon -- This is expected to be fixed in a future release.","When setting up a callback function, you have the option of specifying it with the creation of the notification (hs.notify.new) or by pre-registering it with hs.notify.register and then referring it to by the tag name specified with hs.notify.register. If you use this registration method for defining your callback functions, and make sure to register all expected callback functions within your init.lua file or files it includes, then callback functions will remain available for existing notifications in the User Notification Center even if Hammerspoon's configuration is reloaded or if Hammerspoon is restarted. If the callback tag is not present when the user acts on the notification, the Hammerspoon console will be raised as a default action.","A shorthand, based upon the original inspiration for this module from Hydra and Mjolnir, hs.notify.show, is provided if you just require a quick and simple informative notification without the bells and whistles.","This module is based in part on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["actionButtonTitle","activationType","activationTypes","actualDeliveryDate","additionalActions","additionalActivationAction","alwaysPresent","alwaysShowAdditionalActions","autoWithdraw","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","contentImage","defaultNotificationSound","delivered","deliveredNotifications","Functions- API calls offered directly by the extension","getFunctionTag","hasActionButton","hasReplyButton","informativeText","Methods- API calls which can only be made on an object returned by a constructor","new","otherButtonTitle","presented","register","registry","response","responsePlaceholder","schedule","scheduledNotifications","send","setIdImage","show","soundName","subTitle","title","unregister","unregisterall","Variables- Configurable values","warnAboutMissingFunctionTag","withdraw","withdrawAfter","withdrawAll","withdrawAllScheduled"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"activationTypes","p":["Signature","hs.notify.activationTypes[]","Type","Constant","Description","Convenience array of the possible activation types for a notification, and their reverse for reference.","Notes","Count starts at zero. (implemented in Objective-C)"]},{"l":"defaultNotificationSound","p":["Signature","hs.notify.defaultNotificationSound","Type","Constant","Description","The string representation of the default notification sound. Use hs.notify:soundName() or set the soundName attribute in hs:notify.new(), to this constant, if you want to use the default sound"]},{"l":"Variables"},{"l":"registry","p":["Signature","hs.notify.registry[]","Type","Variable","Description","A table containing the registered callback functions and their tags.","Notes","This table should not be modified directly. Use the hs.notify.register(tag, fn) and hs.notify.unregister(id) functions. This table has a __ tostring metamethod so you can see the list of registered function tags in the console by typing hs.notify.registry See hs.notify.warnAboutMissingFunctionTag for determining the behavior when a notification attempts to perform a callback to a function tag which is not present in this table. This occurrence is most common with notifications which are acted upon by the user after Hammerspoon has been reloaded."]},{"l":"warnAboutMissingFunctionTag","p":["Signature","hs.notify.warnAboutMissingFunctionTag","Type","Variable","Description","A value indicating whether or not a missing notification function tag should cause a warning. Defaults to true."]},{"l":"Functions"},{"l":"deliveredNotifications","p":["Signature","hs.notify.deliveredNotifications() - table","Type","Function","Description","Returns a table containing notifications which have been delivered.","Parameters","None","Returns","a table containing the notification userdata objects for all Hammerspoon notifications currently in the notification center","Notes","Only notifications which have been presented but not cleared, either by the user clicking on the hs.notify:otherButtonTitle or through auto-withdrawal (see hs.notify:autoWithdraw for more details), will be in the array returned. You can use this function along with hs.notify:getFunctionTag to re=register necessary callback functions with hs.notify.register when Hammerspoon is restarted. Since notifications which the user has closed (or cancelled) do not trigger a callback, you can check this table with a timer to see if the user has cleared a notification, e.g. luamyNotification = hs.notify.new():send()clearCheck = hs.timer.doEvery(10, function() if not hs.fnutils.contains(hs.notify.deliveredNotifications(), myNotification) then if myNotification:activationType() == hs.notify.activationTypes.none then print(\"You dismissed me!\") else print(\"A regular action occurred, so callback (if any) was invoked\") end clearCheck:stop() -- either way, no need to keep polling clearCheck = nil endend)"]},{"l":"register","p":["Signature","hs.notify.register(tag, fn) - id","Type","Function","Description","Registers a function callback with the specified tag for a notification. The callback function will be invoked when the user clicks on or interacts with a notification.","Parameters","tag - a string tag to identify the registered callback function. Use this as the function tag in hs.notify.new and hs.notify.show fn - the function which should be invoked when a notification with this tag is interacted with.","Returns","a numerical id representing the entry in hs.notify.registry for this function. This number can be used with hs.notify.unregister to unregister a function later if you wish.","Notes","If a function is already registered with the specified tag, it is replaced by with the new one."]},{"l":"scheduledNotifications","p":["Signature","hs.notify.scheduledNotifications() - table","Type","Function","Description","Returns a table containing notifications which are scheduled but have not yet been delivered.","Parameters","None","Returns","a table containing the notification userdata objects for all Hammerspoon notifications currently scheduled to be delivered.","Notes","Once a notification has been delivered, it is moved to hs.notify.deliveredNotifications or removed, depending upon the users action. You can use this function along with hs.notify:getFunctionTag to re=register necessary callback functions with hs.notify.register when Hammerspoon is restarted."]},{"l":"unregister","p":["Signature","hs.notify.unregister(id|tag)","Type","Function","Description","Unregisters a function callback so that it is no longer available as a callback when notifications corresponding to the specified entry are interacted with.","Parameters","id - the numerical id provided by hs.notify.register tag - a string tag representing the callback function to be removed","Returns","None","Notes"]},{"l":"unregisterall","p":["Signature","hs.notify.unregisterall()","Type","Function","Description","Unregisters all functions registered as callbacks.","Parameters","None","Returns","Notes","This does not remove the notifications from the User Notification Center, it just removes their callback function for when the user interacts with them. To remove all notifications, see hs.notify.withdrawAll and hs.notify.withdrawAllScheduled"]},{"l":"withdrawAll","p":["Signature","hs.notify.withdrawAll()","Type","Function","Description","Withdraw all delivered notifications from Hammerspoon","Parameters","None","Returns","Notes","This will withdraw all notifications for Hammerspoon, including those not sent by this module or that linger from a previous load of Hammerspoon."]},{"l":"withdrawAllScheduled","p":["Signature","hs.notify.withdrawAllScheduled()","Type","Function","Description","Withdraw all scheduled notifications from Hammerspoon","Parameters","None","Returns","Notes"]},{"l":"Constructors"},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.notify.new([fn,][attributes]) - notification | | Type | Constructor | | Description | Creates a new notification object | | Parameters | fn - An optional function or function-tag, which will be called when the user interacts with notifications. The notification object will be passed as an argument to the function. If you leave this parameter out or specify nil, then no callback will be attached to the notification.attributes - An optional table for applying attributes to the notification. Possible keys are: alwaysPresent - see hs.notify:alwaysPresent autoWithdraw - see hs.notify:autoWithdraw contentImage - see hs.notify:contentImage informativeText - see hs.notify:informativeText soundName - see hs.notify:soundName subTitle - see hs.notify:subTitle title - see hs.notify:title setIdImage - see hs.notify:setIdImage -- note the border will automatically be set to false if assigned as an attribute in this table. The following can also be set, but will only have an apparent effect on the notification when the user has set Hammerspoon's notification style to \"Alert\" in the Notification Center panel of System Preferences: actionButtonTitle - see hs.notify:actionButtonTitle hasActionButton - see hs.notify:hasActionButton otherButtonTitle - see hs.notify:otherButtonTitle additionalActions - see hs.notify:additionalActions hasReplyButton - see hs.notify:hasReplyButton responsePlaceholder - see hs.notify:responsePlaceholder alwaysShowAdditionalActions - see hs.notify:alwaysShowAdditionalActions withdrawAfter - see hs.notify:withdrawAfter | | Returns | A notification object | | Notes | A function-tag is a string key which corresponds to a function stored in the hs.notify.registry table with the hs.notify.register() function.If a notification does not have a title attribute set, OS X will not display it, so by default it will be set to \"Notification\". You can use the title key in the attributes table, or call hs.notify:title() before displaying the notification to change this. |"]},{"l":"show","p":["Signature","hs.notify.show(title, subTitle, information[, tag]) - notification","Type","Constructor","Description","Shorthand constructor to create and show simple notifications","Parameters","title - the title for the notification subTitle - the subtitle, or second line, of the notification information - the main textual body of the notification tag - a function tag corresponding to a function registered with hs.notify.register","Returns","a notification object","Notes","All three textual parameters are required, though they can be empty strings This function is really a shorthand for hs.notify.new(...):send() Notifications created using this function will inherit the default withdrawAfter value, which is 5 seconds. To produce persistent notifications you should use hs.notify.new() with a withdrawAfter attribute of 0."]},{"l":"Methods"},{"l":"actionButtonTitle","p":["Signature","hs.notify:actionButtonTitle([buttonTitle]) - notificationObject | current-setting","Type","Method","Description","Get or set the label of a notification's action button","Parameters","buttonTitle - An optional string containing the title for the notification's action button. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if buttonTitle is present; otherwise the current setting.","Notes","The affects of this method only apply if the user has set Hammerspoon notifications to Alert in the Notification Center pane of System Preferences This value is ignored if hs.notify:hasReplyButton is true."]},{"l":"activationType","p":["Signature","hs.notify:activationType() - number","Type","Method","Description","Returns how the notification was activated by the user.","Parameters","None","Returns","the integer value corresponding to how the notification was activated by the user. See the table hs.notify.activationTypes[] for more information.","Notes"]},{"l":"actualDeliveryDate","p":["Signature","hs.notify:actualDeliveryDate() - number","Type","Method","Description","Returns the date and time when a notification was delivered","Parameters","None","Returns","A number containing the delivery date/time of the notification, in seconds since the epoch (i.e. 1970-01-01 00:00:00 +0000)","Notes","You can turn epoch times into a human readable string or a table of date elements with the os.date() function."]},{"l":"additionalActions","p":["Signature","hs.notify:additionalActions([actionsTable]) - notificationObject | table","Type","Method","Description","Get or set additional actions which will be displayed for an alert type notification when the user clicks and holds down the action button of the alert.","Parameters","an optional table containing an array of strings specifying the additional options to list for the user to select from the notification.","Returns","The notification object, if an argument is present; otherwise the current value","Notes","The additional items will be listed in a pop-up menu when the user clicks and holds down the mouse button in the action button of the alert. If the user selects one of the additional actions, hs.notify:activationType will equal hs.notify.activationTypes.additionalActionClicked See also hs.notify:additionalActivationAction"]},{"l":"additionalActivationAction","p":["Signature","hs.notify:additionalActivationAction() - string | nil","Type","Method","Description","Return the additional action that the user selected from an alert type notification that has additional actions available.","Parameters","None","Returns","If the notification has additional actions assigned with hs.notify:additionalActions and the user selects one, returns a string containing the selected action; otherwise returns nil.","Notes","If the user selects one of the additional actions, hs.notify:activationType will equal hs.notify.activationTypes.additionalActionClicked See also hs.notify:additionalActions"]},{"l":"alwaysPresent","p":["Signature","hs.notify:alwaysPresent([alwaysPresent]) - notificationObject | current-setting","Type","Method","Description","Get or set whether a notification should be presented even if this overrides Notification Center's decision process.","Parameters","alwaysPresent - An optional boolean parameter indicating whether the notification should override Notification Center's decision about whether to present the notification or not. Defaults to true. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if alwaysPresent is provided; otherwise the current setting.","Notes","This does not affect the return value of hs.notify:presented()-- that will still reflect the decision of the Notification Center Examples of why the users Notification Center would choose not to display a notification would be if Hammerspoon is the currently focussed application, being attached to a projector, or the user having set Do Not Disturb. if the notification was not created by this module, this method will return nil"]},{"l":"alwaysShowAdditionalActions","p":["Signature","hs.notify:alwaysShowAdditionalActions([state]) - notificationObject | boolean","Type","Method","Description","Get or set whether an alert notification should always show an alternate action menu.","Parameters","state - An optional boolean, default false, indicating whether the notification should always show an alternate action menu.","Returns","The notification object, if an argument is present; otherwise the current value.","Notes","This method has no effect unless the user has set Hammerspoon notifications to Alert in the Notification Center pane of System Preferences. hs.notify:additionalActions must also be used for this method to have any effect. WARNING: This method uses a private API. It could break at any time. Please file an issue if it does."]},{"l":"autoWithdraw","p":["Signature","hs.notify:autoWithdraw([shouldWithdraw]) - notificationObject | current-setting","Type","Method","Description","Get or set whether a notification should automatically withdraw once activated","Parameters","shouldWithdraw - An optional boolean indicating whether the notification should automatically withdraw. Defaults to true. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if shouldWithdraw is present; otherwise the current setting.","Notes","This method has no effect if the user has set Hammerspoon notifications to Alert in the Notification Center pane of System Preferences: clicking on either the action or other button will clear the notification automatically. If a notification which was created before your last reload (or restart) of Hammerspoon and is clicked upon before hs.notify has been loaded into memory, this setting will not be honored because the initial application delegate is not aware of this option and is set to automatically withdraw all notifications which are acted upon. if the notification was not created by this module, this method will return nil"]},{"l":"contentImage","p":["Signature","hs.notify:contentImage([image]) - notificationObject | current-setting","Type","Method","Description","Get or set a notification's content image.","Parameters","image - An optional hs.image parameter containing the image to display. Defaults to nil. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if image is provided; otherwise the current setting.","Notes","See hs.image for details on how to specify or define an image This method is only supported in OS X 10.9 or greater. A warning will be displayed in the console and the method will be treated as a no-op if used on an unsupported system."]},{"l":"delivered","p":["Signature","hs.notify:delivered() - bool","Type","Method","Description","Returns whether the notification has been delivered to the Notification Center","Parameters","None","Returns","A boolean indicating whether the notification has been delivered to the users Notification Center","Notes"]},{"l":"getFunctionTag","p":["Signature","hs.notify:getFunctionTag() - functiontag","Type","Method","Description","Return the name of the function tag the notification will call when activated.","Parameters","None","Returns","The function tag for this notification as a string.","Notes","This tag should correspond to a function in hs.notify.registry and can be used to either add a replacement with hs.notify.register(...) or remove it with hs.notify.unregister(...) if the notification was not created by this module, this method will return nil"]},{"l":"hasActionButton","p":["Signature","hs.notify:hasActionButton([hasButton]) - notificationObject | current-setting","Type","Method","Description","Get or set the presence of an action button in a notification","Parameters","hasButton - An optional boolean indicating whether an action button should be present. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if hasButton is present; otherwise the current setting.","Notes","The affects of this method only apply if the user has set Hammerspoon notifications to Alert in the Notification Center pane of System Preferences"]},{"l":"hasReplyButton","p":["Signature","hs.notify:hasReplyButton([state]) - notificationObject | boolean","Type","Method","Description","Get or set whether an alert notification has a \"Reply\" button for additional user input.","Parameters","state - An optional boolean, default false, indicating whether the notification should include a reply button for additional user input.","Returns","The notification object, if an argument is present; otherwise the current value","Notes","This method has no effect unless the user has set Hammerspoon notifications to Alert in the Notification Center pane of System Preferences. hs.notify:hasActionButton must also be true or the \"Reply\" button will not be displayed. If this is set to true, the action button will be \"Reply\" even if you have set another one with hs.notify:actionButtonTitle."]},{"l":"informativeText","p":["Signature","hs.notify:informativeText([informativeText]) - notificationObject | current-setting","Type","Method","Description","Get or set the informative text of a notification","Parameters","informativeText - An optional string containing the informative text to be set on the notification object. This can be an empty string. If nil is passed, any existing informative text will be removed. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if informativeText is present; otherwise the current setting.","Notes"]},{"l":"otherButtonTitle","p":["Signature","hs.notify:otherButtonTitle([buttonTitle]) - notificationObject | current-setting","Type","Method","Description","Get or set the label of a notification's other button","Parameters","buttonTitle - An optional string containing the title for the notification's other button. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if buttonTitle is present; otherwise the current setting.","Notes","The affects of this method only apply if the user has set Hammerspoon notifications to Alert in the Notification Center pane of System Preferences Due to OSX limitations, it is NOT possible to get a callback for this button."]},{"l":"presented","p":["Signature","hs.notify:presented() - bool","Type","Method","Description","Returns whether the users Notification Center decided to display the notification","Parameters","None","Returns","A boolean indicating whether the users Notification Center decided to display the notification","Notes","Examples of why the users Notification Center would choose not to display a notification would be if Hammerspoon is the currently focussed application, being attached to a projector, or the user having set Do Not Disturb."]},{"l":"response","p":["Signature","hs.notify:response() - string | nil","Type","Method","Description","Get the users input from an alert type notification with a reply button.","Parameters","None","Returns","If the notification has a reply button and the user clicks on it, returns a string containing the user input (may be an empty string); otherwise returns nil.","Notes","hs.notify:activationType will equal hs.notify.activationTypes.replied if the user clicked on the Reply button and then clicks on Send. See also hs.notify:hasReplyButton"]},{"l":"responsePlaceholder","p":["Signature","hs.notify:responsePlaceholder([string]) - notificationObject | string","Type","Method","Description","Set a placeholder string for alert type notifications with a reply button.","Parameters","string- an optional string specifying placeholder text to display in the reply box before the user has types anything in an alert type notification with a reply button.","Returns","The notification object, if an argument is present; otherwise the current value","Notes","In macOS 10.13, this text appears so light that it is almost unreadable; so far no workaround has been found. See also hs.notify:hasReplyButton"]},{"l":"schedule","p":["Signature","hs.notify:schedule(date) - notificationObject","Type","Method","Description","Schedules a notification for delivery in the future.","Parameters","date - the date the notification should be delivered to the users Notification Center specified as the number of seconds since 1970-01-01 00:00:00Z or as a string in rfc3339 format: \"YYYY-MM-DD[T]HH:MM:SS[Z]\".","Returns","The notification object","Notes","See also hs.notify:send() hs.settings.dateFormat specifies a lua format string which can be used with os.date() to properly present the date and time as a string for use with this method."]},{"l":"send","p":["Signature","hs.notify:send() - notificationObject","Type","Method","Description","Delivers the notification immediately to the users Notification Center.","Parameters","None","Returns","The notification object","Notes","See also hs.notify:schedule() If a notification has been modified, then this will resend it. You can invoke this multiple times if you wish to repeat the same notification."]},{"l":"setIdImage","p":["Signature","hs.notify:setIdImage(image[, withBorder]) - notificationObject","Type","Method","Description","Set a notification's identification image (replace the Hammerspoon icon with a custom image)","Parameters","image - An hs.image object, a string containing an image path, or a string defining an ASCIImage withBorder - An optional boolean to give the notification image a border. Defaults to false","Returns","The notification object","Notes","See hs.image for details on how to specify or define an image WARNING: This method uses a private API. It could break at any time. Please file an issue if it does"]},{"l":"soundName","p":["Signature","hs.notify:soundName([soundName]) - notificationObject | current-setting","Type","Method","Description","Get or set the sound for a notification","Parameters","soundName - An optional string containing the name of a sound to play with the notification. If nil, no sound will be played. Defaults to nil. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if soundName is present; otherwise the current setting.","Notes","Sounds will first be matched against the names of system sounds. If no matches can be found, they will then be searched for in the following paths, in order:~/Library/Sounds/Library/Sounds/Network/Sounds/System/Library/Sounds"]},{"l":"subTitle","p":["Signature","hs.notify:subTitle([subtitleText]) - notificationObject | current-setting","Type","Method","Description","Get or set the subtitle of a notification","Parameters","subtitleText - An optional string containing the subtitle to be set on the notification object. This can be an empty string. If nil is passed, any existing subtitle will be removed. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if subtitleText is present; otherwise the current setting.","Notes"]},{"l":"title","p":["Signature","hs.notify:title([titleText]) - notificationObject | current-setting","Type","Method","Description","Get or set the title of a notification","Parameters","titleText - An optional string containing the title to be set on the notification object. The default value is \"Notification\". If nil is passed, then the title is set to the empty string. If no parameter is provided, then the current setting is returned.","Returns","The notification object, if titleText is present; otherwise the current setting.","Notes"]},{"l":"withdraw","p":["Signature","hs.notify:withdraw() - notificationObject","Type","Method","Description","Withdraws a delivered notification from the Notification Center.","Parameters","None","Returns","The notification object This method allows you to unlock a dispatched notification so that it can be modified and resent. if the notification was not created by this module, it will still be withdrawn if possible","Notes"]},{"l":"withdrawAfter","p":["Signature","hs.notify:withdrawAfter([seconds]) - notificationObject | number","Type","Method","Description","Get or set the number of seconds after which to automatically withdraw a notification","Parameters","seconds - An optional number, default 5, of seconds after which to withdraw a notification. A value of 0 will not withdraw a notification automatically","Returns","The notification object, if an argument is present; otherwise the current value.","Notes","While this setting applies to both Banner and Alert styles of notifications, it is functionally meaningless for Banner styles A value of 0 will disable auto-withdrawal if the notification was not created by this module, this method will return nil"]}],[{"i":"hsosascript","l":"hs.osascript","p":["Execute Open Scripting Architecture (OSA) code - AppleScript and JavaScript"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","_osascript","applescript","applescriptFromFile","javascript","javascriptFromFile"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"_osascript","p":["Signature","hs.osascript._osascript(source, language) - bool, object, descriptor","Type","Function","Description","Runs osascript code","Parameters","source - Some osascript code to execute language - A string containing the OSA language, either 'AppleScript' or 'JavaScript'. Defaults to AppleScript if invalid language","Returns","A boolean value indicating whether the code succeeded or not An object containing the parsed output that can be any type, or nil if unsuccessful A string containing the raw output of the code and/or its errors","Notes"]},{"l":"applescript","p":["Signature","hs.osascript.applescript(source) - bool, object, descriptor","Type","Function","Description","Runs AppleScript code","Parameters","source - A string containing some AppleScript code to execute","Returns","A boolean value indicating whether the code succeeded or not An object containing the parsed output that can be any type, or nil if unsuccessful If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary","Notes","Use hs.osascript._ osascript(source, \"AppleScript\") if you always want the result as a string, even when a failure occurs"]},{"l":"applescriptFromFile","p":["Signature","hs.osascript.applescriptFromFile(fileName) - bool, object, descriptor","Type","Function","Description","Runs AppleScript code from a source file.","Parameters","fileName - A string containing the file name of an AppleScript file to execute.","Returns","A boolean value indicating whether the code succeeded or not An object containing the parsed output that can be any type, or nil if unsuccessful If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary","Notes","This function uses hs.osascript.applescript for execution. Use hs.osascript._ osascript(source, \"AppleScript\") if you always want the result as a string, even when a failure occurs. However, this function can only take a string, and not a file name."]},{"l":"javascript","p":["Signature","hs.osascript.javascript(source) - bool, object, descriptor","Type","Function","Description","Runs JavaScript code","Parameters","source - A string containing some JavaScript code to execute","Returns","A boolean value indicating whether the code succeeded or not An object containing the parsed output that can be any type, or nil if unsuccessful If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary","Notes","Use hs.osascript._ osascript(source, \"JavaScript\") if you always want the result as a string, even when a failure occurs"]},{"l":"javascriptFromFile","p":["Signature","hs.osascript.javascriptFromFile(fileName) - bool, object, descriptor","Type","Function","Description","Runs JavaScript code from a source file.","Parameters","fileName - A string containing the file name of an JavaScript file to execute.","Returns","A boolean value indicating whether the code succeeded or not An object containing the parsed output that can be any type, or nil if unsuccessful If the code succeeded, the raw output of the code string. If the code failed, a table containing an error dictionary","Notes","This function uses hs.osascript.javascript for execution. Use hs.osascript._ osascript(source, \"JavaScript\") if you always want the result as a string, even when a failure occurs. However, this function can only take a string, and not a file name."]}],[{"i":"hsosc","l":"hs.osc","p":["Open Sound Control (OSC) support.","This extension allows you to create both OSC Servers and Clients.","This extension was thrown together by Chris Hocking for CommandPost.","This extension uses F53OSC.","F53OSC LICENSE: Copyright (c) 2010-2020 Figure 53 LLC, https://figure53.com","Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","newClient","newServer","Methods- API calls which can only be made on an object returned by a constructor","callback","host","isActive","listeningPort","port","send","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"newClient","p":["Signature","hs.osc.newClient(host, port) - oscObject","Type","Constructor","Description","Creates a new OSC Client.","Parameters","host - A string of the host path. port - A number of the port.","Returns","An hs.osc object or nil if an error occured.","Notes"]},{"l":"newServer","p":["Signature","hs.osc.newServer(listeningPort) - oscObject","Type","Constructor","Description","Creates a new OSC Server.","Parameters","listeningPort - A number for the listening port.","Returns","An hs.osc object or nil if an error occured.","Notes"]},{"l":"Methods"},{"l":"callback","p":["Signature","hs.osc:callback(callbackFn) - oscObject","Type","Method","Description","Sets or removes a callback function for a OSC Server.","Parameters","callbackFn- a function to set as the callback for this OSC Server. If the value provided is nil, any currently existing callback function is removed.","Returns","The hs.osc object","Notes","The callback function should expect 3 arguments and should not return anything: oscObject- The OSC object that triggered the callback. addressParts- A table of address parts. arguments- A table of arguments."]},{"l":"host","p":["Signature","hs.osc:host() - string","Type","Method","Description","Returns the host path of a OSC Client.","Parameters","None","Returns","The host as a string.","Notes"]},{"l":"isActive","p":["Signature","hs.osc:isActive() - boolean","Type","Method","Description","Gets whether or not a OSC Server or Client is active.","Parameters","None","Returns","true if open, otherwise false.","Notes"]},{"l":"listeningPort","p":["Signature","hs.osc:listeningPort() - number","Type","Method","Description","Returns the listening port of a OSC Server.","Parameters","None","Returns","The port as a number.","Notes"]},{"l":"port","p":["Signature","hs.osc:port() - number","Type","Method","Description","Returns the port of a OSC Client.","Parameters","None","Returns","The port as a number.","Notes"]},{"l":"send","p":["Signature","hs.osc:send(address, arguments) - oscObject","Type","Method","Description","Sends a message from an OSC Client.","Parameters","address - A string of the OSC address. arguments - A table of arguments.","Returns","The hs.osc object.","Notes"]},{"l":"start","p":["Signature","hs.osc:start() - oscObject","Type","Method","Description","Starts an OSC Server or Client.","Parameters","None","Returns","The hs.osc object.","Notes"]},{"l":"stop","p":["Signature","hs.osc:stop() - oscObject","Type","Method","Description","Stops an OSC Server or Client.","Parameters","None","Returns","The hs.osc object.","Notes"]}],[{"i":"hspasteboard","l":"hs.pasteboard","p":["Inspect/manipulate pasteboards (more commonly called clipboards). Both the system default pasteboard and custom named pasteboards can be interacted with.","This module is based partially on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"Submodules","p":["hs.pasteboard.watcher"]},{"l":"API Overview","p":["allContentTypes","callbackWhenChanged","changeCount","clearContents","contentTypes","deletePasteboard","Functions- API calls offered directly by the extension","getContents","pasteboardTypes","readAllData","readArchiverDataForUTI","readColor","readDataForUTI","readImage","readPListForUTI","readSound","readString","readStyledText","readURL","setContents","typesAvailable","uniquePasteboard","writeAllData","writeArchiverDataForUTI","writeDataForUTI","writeObjects","writePListForUTI"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"allContentTypes","p":["Signature","hs.pasteboard.allContentTypes([name]) - table","Type","Function","Description","An array whose elements are a table containing the content types for each element on the clipboard.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard.","Returns","an array with each index representing an object on the pasteboard. If the pasteboard contains only one element, this is equivalent to { hs.pasteboard.contentTypes(name) }.","Notes"]},{"l":"callbackWhenChanged","p":["Signature","hs.pasteboard.callbackWhenChanged([name], [timeout], callback) - None","Type","Function","Description","Invokes callback when the specified pasteboard has changed or the timeout is reached.","Parameters","name- an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. timeout- an optional number, default 2.0, specifying the time in seconds that this function should wait for a change to the specified pasteboard before timing out. callback- a required callback function that will be invoked when either the specified pasteboard contents have changed or the timeout has been reached. The function should expect one boolean argument, true if the pasteboard contents have changed or false if timeout has been reached.","Returns","None","Notes","This function can be used to capture the results of a copy operation issued programmatically with hs.application:selectMenuItem or hs.eventtap.keyStroke without resorting to creating your own timers:~~~ hs.eventtap.keyStroke({\"cmd\"}, \"c\", 0) -- or whatever method you want to trigger the copy hs.pasteboard.callbackWhenChanged(5, function(state) if state then local contents = hs.pasteboard.getContents()-- do what you want with contents else error(\"copy timeout\") -- or whatever fallback you want when it times out end end)~~~"]},{"l":"changeCount","p":["Signature","hs.pasteboard.changeCount([name]) - number","Type","Function","Description","Gets the number of times the pasteboard owner has changed","Parameters","name - An optional string containing the name of the pasteboard. Defaults to the system pasteboard","Returns","A number containing a count of the times the pasteboard owner has changed","Notes","This is useful for seeing if the pasteboard has been updated by another process"]},{"l":"clearContents","p":["Signature","hs.pasteboard.clearContents([name])","Type","Function","Description","Clear the contents of the pasteboard","Parameters","name - An optional string containing the name of the pasteboard. Defaults to the system pasteboard","Returns","None","Notes"]},{"l":"contentTypes","p":["Signature","hs.pasteboard.contentTypes([name]) - table","Type","Function","Description","Return the UTI strings of the data types for the first pasteboard item on the specified pasteboard.","Parameters","name - An optional string containing the name of the pasteboard. Defaults to the system pasteboard","Returns","a table containing the UTI strings of the data types for the first pasteboard item.","Notes"]},{"l":"deletePasteboard","p":["Signature","hs.pasteboard.deletePasteboard(name)","Type","Function","Description","Deletes a custom pasteboard","Parameters","name - A string containing the name of the pasteboard","Returns","None","Notes","You can not delete the system pasteboard, this function should only be called on custom pasteboards you have created"]},{"l":"getContents","p":["Signature","hs.pasteboard.getContents([name]) - string or nil","Type","Function","Description","Gets the contents of the pasteboard","Parameters","name - An optional string containing the name of the pasteboard. Defaults to the system pasteboard","Returns","A string containing the contents of the pasteboard, or nil if an error occurred","Notes"]},{"l":"pasteboardTypes","p":["Signature","hs.pasteboard.pasteboardTypes([name]) - table","Type","Function","Description","Return the pasteboard type identifier strings for the specified pasteboard.","Parameters","name - An optional string containing the name of the pasteboard. Defaults to the system pasteboard","Returns","a table containing the pasteboard type identifier strings","Notes"]},{"l":"readAllData","p":["Signature","hs.pasteboard.readAllData([name]) - table","Type","Function","Description","Returns all values in the first item on the pasteboard in a table that maps a UTI value to the raw data of the item","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard.","Returns","a mapping from a UTI value to the raw data","Notes"]},{"l":"readArchiverDataForUTI","p":["Signature","hs.pasteboard.readArchiverDataForUTI([name], uti) - any","Type","Function","Description","Returns the first item on the pasteboard with the specified UTI. The data on the pasteboard must be encoded as a keyed archive object conforming to NSKeyedArchiver.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. uti - a string specifying the UTI of the pasteboard item to retrieve.","Returns","a lua item representing the archived data if it can be decoded. Generates an error if the data is in the wrong format.","Notes","NSKeyedArchiver specifies an architecture-independent format that is often used in OS X applications to store and transmit objects between applications and when storing data to a file. It works by recording information about the object types and key-value pairs which make up the objects being stored. Only objects which have conversion functions built into Hammerspoon can be converted. A string representation describing unrecognized types wil be returned. If you find a common data type that you believe may be of interest to Hammerspoon users, feel free to contribute a conversion function or make a request in the Hammerspoon Google group or GitHub site. Some applications may define their own classes which can be archived. Hammerspoon will be unable to recognize these types if the application does not make the object type available in one of its frameworks. You may be able to load the necessary framework with package.loadlib(/Applications/appname.app/Contents/Frameworks/frameworkname.framework/frameworkname, *) before retrieving the data, but a full representation of the data in Hammerspoon is probably not possible without support from the Application's developers."]},{"l":"readColor","p":["Signature","hs.pasteboard.readColor([name], [all]) - hs.drawing.color table or array of hs.drawing.color tables","Type","Function","Description","Returns one or more hs.drawing.color tables from the clipboard, or nil if no compatible objects are present.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. all - an optional boolean indicating whether or not all (true) of the colors on the clipboard should be returned, or just the first (false). Defaults to false.","Returns","By default the first color on the clipboard, or a table of all colors on the clipboard if the all parameter is provided and set to true. Returns nil if no colors are present.","Notes"]},{"l":"readDataForUTI","p":["Signature","hs.pasteboard.readDataForUTI([name], uti) - string","Type","Function","Description","Returns the first item on the pasteboard with the specified UTI as raw data","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. uti - a string specifying the UTI of the pasteboard item to retrieve.","Returns","a lua string containing the raw data of the specified pasteboard item","Notes","The UTI's of the items on the pasteboard can be determined with the hs.pasteboard.allContentTypes and hs.pasteboard.contentTypes functions."]},{"l":"readImage","p":["Signature","hs.pasteboard.readImage([name], [all]) - hs.image object or array of hs.image objects","Type","Function","Description","Returns one or more hs.image objects from the clipboard, or nil if no compatible objects are present.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. all - an optional boolean indicating whether or not all (true) of the urls on the clipboard should be returned, or just the first (false). Defaults to false.","Returns","By default the first image on the clipboard, or a table of all images on the clipboard if the all parameter is provided and set to true. Returns nil if no images are present.","Notes"]},{"l":"readPListForUTI","p":["Signature","hs.pasteboard.readPListForUTI([name], uti) - any","Type","Function","Description","Returns the first item on the pasteboard with the specified UTI as a property list item","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. uti - a string specifying the UTI of the pasteboard item to retrieve.","Returns","a lua item representing the property list value of the pasteboard item specified","Notes","The UTI's of the items on the pasteboard can be determined with the hs.pasteboard.allContentTypes and hs.pasteboard.contentTypes functions. Property lists consist only of certain types of data: tables, strings, numbers, dates, binary data, and Boolean values."]},{"l":"readSound","p":["Signature","hs.pasteboard.readSound([name], [all]) - hs.sound object or array of hs.sound objects","Type","Function","Description","Returns one or more hs.sound objects from the clipboard, or nil if no compatible objects are present.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. all - an optional boolean indicating whether or not all (true) of the urls on the clipboard should be returned, or just the first (false). Defaults to false.","Returns","By default the first sound on the clipboard, or a table of all sounds on the clipboard if the all parameter is provided and set to true. Returns nil if no sounds are present.","Notes"]},{"l":"readString","p":["Signature","hs.pasteboard.readString([name], [all]) - string or array of strings","Type","Function","Description","Returns one or more strings from the clipboard, or nil if no compatible objects are present.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. all - an optional boolean indicating whether or not all (true) of the urls on the clipboard should be returned, or just the first (false). Defaults to false.","Returns","By default the first string on the clipboard, or a table of all strings on the clipboard if the all parameter is provided and set to true. Returns nil if no strings are present.","Notes","almost all string and styledText objects are internally convertible and will be available with this method as well as hs.pasteboard.readStyledText. If the item is actually an hs.styledtext object, the string will be just the text of the object."]},{"l":"readStyledText","p":["Signature","hs.pasteboard.readStyledText([name], [all]) - hs.styledtext object or array of hs.styledtext objects","Type","Function","Description","Returns one or more hs.styledtext objects from the clipboard, or nil if no compatible objects are present.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. all - an optional boolean indicating whether or not all (true) of the urls on the clipboard should be returned, or just the first (false). Defaults to false.","Returns","By default the first styledtext object on the clipboard, or a table of all styledtext objects on the clipboard if the all parameter is provided and set to true. Returns nil if no styledtext objects are present.","Notes","almost all string and styledText objects are internally convertible and will be available with this method as well as hs.pasteboard.readString. If the item on the clipboard is actually just a string, the hs.styledtext object representation will have no attributes set"]},{"l":"readURL","p":["Signature","hs.pasteboard.readURL([name], [all]) - string or array of strings representing file or resource urls","Type","Function","Description","Returns one or more strings representing file or resource urls from the clipboard, or nil if no compatible objects are present.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. all - an optional boolean indicating whether or not all (true) of the urls on the clipboard should be returned, or just the first (false). Defaults to false.","Returns","By default the first url on the clipboard, or a table of all urls on the clipboard if the all parameter is provided and set to true. Returns nil if no urls are present.","Notes"]},{"l":"setContents","p":["Signature","hs.pasteboard.setContents(contents[, name]) - boolean","Type","Function","Description","Sets the contents of the pasteboard","Parameters","contents - A string to be placed in the pasteboard name - An optional string containing the name of the pasteboard. Defaults to the system pasteboard","Returns","True if the operation succeeded, otherwise false","Notes"]},{"l":"typesAvailable","p":["Signature","hs.pasteboard.typesAvailable([name]) - table","Type","Function","Description","Returns a table indicating what content types are available on the pasteboard.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard.","Returns","a table which may contain any of the following keys set to the value true: string - at least one element which can be represented as a string is on the pasteboard styledText - at least one element which can be represented as an hs.styledtext object is on the pasteboard sound - at least one element which can be represented as an hs.sound object is on the pasteboard image - at least one element which can be represented as an hs.image object is on the pasteboard URL - at least one element on the pasteboard represents a URL, either to a local file or a remote resource color - at least one element on the pasteboard represents a color, representable as a table as described in hs.drawing.color","Notes","almost all string and styledText objects are internally convertible and will return true for both keys if the item on the clipboard is actually just a string, the hs.styledtext object representation will have no attributes set if the item is actually an hs.styledtext object, the string representation will be the text without any attributes."]},{"l":"uniquePasteboard","p":["Signature","hs.pasteboard.uniquePasteboard() - string","Type","Function","Description","Returns the name of a new pasteboard with a name that is guaranteed to be unique with respect to other pasteboards on the computer.","Parameters","None","Returns","a unique pasteboard name","Notes","to properly manage system resources, you should release the created pasteboard with hs.pasteboard.deletePasteboard when you are certain that it is no longer necessary."]},{"l":"writeAllData","p":["Signature","hs.pasteboard.writeAllData([name], table) - boolean","Type","Function","Description","Stores in the pasteboard a given table of UTI to data mapping all at once","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. a mapping from a UTI value to the raw data","Returns","True if the operation succeeded, otherwise false (which most likely means ownership of the pasteboard has changed)","Notes"]},{"l":"writeArchiverDataForUTI","p":["Signature","hs.pasteboard.writeArchiverDataForUTI([name], uti, data, [add]) - boolean","Type","Function","Description","Sets the pasteboard to the contents of the data and assigns its type to the specified UTI. The data will be encoded as an archive conforming to NSKeyedArchiver.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. uti - a string specifying the UTI of the pasteboard item to set. data - any type representable in Lua which will be converted into the appropriate NSObject types and archived with NSKeyedArchiver. All Lua basic types are supported as well as those NSObject types handled by Hammerspoon modules (NSColor, NSStyledText, NSImage, etc.) add - an optional boolean value specifying if data with other UTI values should retain. This value must be strictly either true or false if given, to avoid ambiguity with preceding parameters.","Returns","True if the operation succeeded, otherwise false (which most likely means ownership of the pasteboard has changed)","Notes","NSKeyedArchiver specifies an architecture-independent format that is often used in OS X applications to store and transmit objects between applications and when storing data to a file. It works by recording information about the object types and key-value pairs which make up the objects being stored. Only objects which have conversion functions built into Hammerspoon can be converted. A full list of NSObjects supported directly by Hammerspoon is planned in a future Wiki article."]},{"l":"writeDataForUTI","p":["Signature","hs.pasteboard.writeDataForUTI([name], uti, data, [add]) - boolean","Type","Function","Description","Sets the pasteboard to the contents of the data and assigns its type to the specified UTI.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. uti - a string specifying the UTI of the pasteboard item to set. data - a string specifying the raw data to assign to the pasteboard. add - an optional boolean value specifying if data with other UTI values should retain. This value must be strictly either true or false if given, to avoid ambiguity with preceding parameters.","Returns","True if the operation succeeded, otherwise false (which most likely means ownership of the pasteboard has changed)","Notes","The UTI's of the items on the pasteboard can be determined with the hs.pasteboard.allContentTypes and hs.pasteboard.contentTypes functions."]},{"l":"writeObjects","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.pasteboard.writeObjects(object, [name]) - boolean | | Type | Function | | Description | Sets the pasteboard contents to the object or objects specified. | | Parameters | object - an object or table of objects to set the pasteboard to. The following objects are recognized: a lua string, which can be received by most applications that can accept text from the clipboard hs.styledtext object, which can be received by most applications that can accept a raw NSAttributedString (often converted internally to RTF, RTFD, HTML, etc.) hs.sound object, which can be received by most applications that can accept a raw NSSound object hs.image object, which can be received by most applications that can accept a raw NSImage object a table with the url key and value representing a file or resource url, which can be received by most applications that can accept an NSURL object to represent a file or a remote resource a table with keys as described in hs.drawing.color to represent a color, which can be received by most applications that can accept a raw NSColor object an array of one or more of the above objects, allowing you to place more than one object onto the clipboard.name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. | | Returns | true or false indicating whether or not the clipboard contents were updated. | | Notes | Most applications can only receive the first item on the clipboard. Multiple items on a clipboard are most often used for intra-application communication where the sender and receiver are specifically written with multiple objects in mind. |"]},{"l":"writePListForUTI","p":["Signature","hs.pasteboard.writePListForUTI([name], uti, data, [add]) - boolean","Type","Function","Description","Sets the pasteboard to the contents of the data and assigns its type to the specified UTI.","Parameters","name - an optional string indicating the pasteboard name. If nil or not present, defaults to the system pasteboard. uti - a string specifying the UTI of the pasteboard item to set. data - a lua type which can be represented as a property list value. add - an optional boolean value specifying if data with other UTI values should retain. This value must be strictly either true or false if given, to avoid ambiguity with preceding parameters.","Returns","True if the operation succeeded, otherwise false (which most likely means ownership of the pasteboard has changed)","Notes","The UTI's of the items on the pasteboard can be determined with the hs.pasteboard.allContentTypes and hs.pasteboard.contentTypes functions. Property lists consist only of certain types of data: tables, strings, numbers, dates, binary data, and Boolean values."]}],[{"i":"hspasteboardwatcher","l":"hs.pasteboard.watcher","p":["Watch for Pasteboard Changes. macOS doesn't offer any API for getting Pasteboard notifications, so this extension uses polling to check for Pasteboard changes at a chosen interval (defaults to 0.25)."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","interval","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","running","start","stop"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"interval","p":["Signature","hs.pasteboard.watcher.interval([value]) - number","Type","Function","Description","Gets or sets the polling interval (i.e. the frequency the pasteboard watcher checks the pasteboard).","Parameters","value - an optional number to set the polling interval to.","Returns","The polling interval as a number.","Notes","This only affects new watchers, not existing/running ones. The default value is 0.25."]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.pasteboard.watcher.new(callbackFn[, name]) - pasteboardWatcher","Type","Constructor","Description","Creates and starts a new hs.pasteboard.watcher object for watching for Pasteboard changes.","Parameters","callbackFn - A function that will be called when the Pasteboard contents has changed. It should accept one parameter:","A string containing the pasteboard contents or nil if the contents is not a valid string. name - An optional string containing the name of the pasteboard. Defaults to the system pasteboard.","Returns","An hs.pasteboard.watcher object","Notes","Internally this extension uses a single NSTimer to check for changes to the pasteboard count every half a second. Example usage: lua/lili generalPBWatcher = hs.pasteboard.watcher.new(function(v) print(string.format(General Pasteboard Contents: %s, v)) end)/lili specialPBWatcher = hs.pasteboard.watcher.new(function(v) print(string.format(Special Pasteboard Contents: %s, v)) end, special)/lili hs.pasteboard.writeObjects(This is on the general pasteboard.)/lili hs.pasteboard.writeObjects(This is on the special pasteboard., special)"]},{"l":"Methods"},{"l":"running","p":["Signature","hs.pasteboard.watcher:running() - boolean","Type","Method","Description","Returns a boolean indicating whether or not the Pasteboard Watcher is currently running.","Parameters","None","Returns","A boolean value indicating whether or not the timer is currently running.","Notes"]},{"l":"start","p":["Signature","hs.pasteboard.watcher:start() - timer","Type","Method","Description","Starts an hs.pasteboard.watcher object","Parameters","None","Returns","The hs.pasteboard.watcher object","Notes"]},{"l":"stop","p":["Signature","hs.pasteboard.watcher:stop() - timer","Type","Method","Description","Stops an hs.pasteboard.watcher object","Parameters","None","Returns","The hs.pasteboard.watcher object","Notes"]}],[{"i":"hspathwatcher","l":"hs.pathwatcher","p":["Watch paths recursively for changes","This simple example watches your Hammerspoon directory for changes, and when it sees a change, reloads your configs:","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.pathwatcher.new(path, fn) - watcher | | Type | Constructor | | Description | Creates a new path watcher object | | Parameters | path - A string containing the path to be watchedfn - A function to be called when changes are detected. It should accept two arguments: paths: a table containing a list of file paths that have changed flagTables: a table containing a list of tables denoting how each corresponding file in paths has changed, each containing boolean values indicating which types of events occurred; The possible keys are:mustScanSubDirsuserDroppedkernelDroppedeventIdsWrappedhistoryDonerootChangedmountunmountitemCreateditemRemoveditemInodeMetaModitemRenameditemModifieditemFinderInfoModitemChangeOwneritemXattrModitemIsFileitemIsDiritemIsSymlinkownEvent (OS X 10.9+)itemIsHardlink (OS X 10.10+)itemIsLastHardlink (OS X 10.10+) | | Returns | An hs.pathwatcher object | | Notes | For more information about the event flags, see the official documentation |"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.pathwatcher:start()","Type","Method","Description","Starts a path watcher","Parameters","None","Returns","The hs.pathwatcher object","Notes"]},{"l":"stop","p":["Signature","hs.pathwatcher:stop()","Type","Method","Description","Stops a path watcher","Parameters","None","Returns","Notes"]}],[{"i":"hsplist","l":"hs.plist","p":["Read and write Property List files"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","read","readString","write","writeString"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"read","p":["Signature","hs.plist.read(filepath) - table","Type","Function","Description","Loads a Property List file","Parameters","filepath - The path and filename of a plist file to read","Returns","The contents of the plist as a Lua table","Notes"]},{"l":"readString","p":["Signature","hs.plist.readString(value, [binary]) - table | nil","Type","Function","Description","Interprets a property list file within a string into a table.","Parameters","value - The contents of the property list as a string binary - an optional boolean, specifying whether the value should be treated as raw binary (true) or as an UTF8 encoded string (false). If you do not provide this argument, the function will attempt to auto-detect the type.","Returns","The contents of the property list as a Lua table or nil if an error occurs","Notes"]},{"l":"write","p":["Signature","hs.plist.write(filepath, data[, binary]) - boolean","Type","Function","Description","Writes a Property List file","Parameters","filepath - The path and filename of the plist file to write data - A Lua table containing the data to write into the plist binary - An optional boolean, if true, the plist will be written as a binary file. Defaults to false","Returns","A boolean, true if the plist was written successfully, otherwise false","Notes","Only simple types can be converted to plist items: Strings Numbers Booleans Tables You should be careful when reading a plist, modifying and writing it - Hammerspoon may not be able to preserve all of the datatypes via Lua"]},{"l":"writeString","p":["Signature","hs.plist.writeString(data, [binary]) - string | nil","Type","Function","Description","Interprets a property list file within a string into a table.","Parameters","data - A Lua table containing the data to write into a plist string binary - an optional boolean, default false, specifying that the resulting string should be encoded as a binary plist.","Returns","A string representing the data as a plist or nil if there was a problem with the date or serialization.","Notes"]}],[{"i":"hsrazer","l":"hs.razer","p":["AppleUSBDefinitions.h","By default, the Razer keypads triggers regular keyboard commands(i.e. pressing the \"01\" key will type \"1\"). However, you can use the:defaultKeyboardLayout(false) method to prevent this. This works by remapping the default shortcut keys to \"dummy\" keys, so that they don't trigger regular keypresses in macOS.","HID Device Property Keys","hidutil key remapping generator for macOS","Information on USB Packets","It allows you to trigger callbacks when you press buttons and use the scroll wheel, as well as allowing you to change the LED backlights on the buttons and scroll wheel, and control the three status lights.","Like the hs.streamdeck extension, this extension has been designed to be modular, so it's possible for others to develop support for additional Razer devices later down the line, if there's interest.","macOS function key remapping with hidutil","Razer device support.","Razer Nostromo","Razer Orbweaver","Razer Orbweaver Chroma","Razer Tartarus","Razer Tartarus Chroma","Razer Tartarus Pro","Razer Tartarus V2","Special thanks to the authors of these awesome documents & resources:","This extension is based off the hs.streamdeck extension by Chris Jones.","This extension supports the following Razer keypad devices:","This extension was thrown together by Chris Hocking for CommandPost."]},{"l":"API Overview","p":["backlightsBreathing","backlightsCustom","backlightsMode","backlightsOff","backlightsReactive","backlightsSpectrum","backlightsStarlight","backlightsStatic","backlightsWave","blueStatusLight","brightness","callback","defaultKeyboardLayout","discoveryCallback","Functions- API calls offered directly by the extension","getDevice","greenStatusLight","init","Methods- API calls which can only be made on an object returned by a constructor","name","numDevices","orangeStatusLight","redStatusLight","unitTests","yellowStatusLight"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"discoveryCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.razer.discoveryCallback(fn) - none | | Type | Function | | Description | Sets/clears a callback for reacting to device discovery events | | Parameters | fn - A function that will be called when a Razer device is connected or disconnected. It should take the following arguments: A boolean, true if a device was connected, false if a device was disconnected An hs.razer object, being the device that was connected/disconnected | | Returns | None | | Notes | |"]},{"l":"getDevice","p":["Signature","hs.razer.getDevice(num) - razerObject | nil","Type","Function","Description","Gets an hs.razer object for the specified device","Parameters","num - A number that should be within the bounds of the number of connected devices","Returns","An hs.razer object or nil if something goes wrong","Notes"]},{"l":"init","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.razer.init(fn) | | Type | Function | | Description | Initialises the Razer driver and sets a discovery callback. | | Parameters | fn - A function that will be called when a Razer device is connected or disconnected. It should take the following arguments: A boolean, true if a device was connected, false if a device was disconnected An hs.razer object, being the device that was connected/disconnected | | Returns | None | | Notes | This function must be called before any other parts of this module are used |"]},{"l":"numDevices","p":["Signature","hs.razer.numDevices() - number","Type","Function","Description","Gets the number of Razer devices connected","Parameters","None","Returns","A number containing the number of Razer devices attached to the system","Notes"]},{"l":"unitTests","p":["Signature","hs.razer.unitTests() - none","Type","Function","Description","Runs some basic unit tests when a Razer Tartarus V2 is connected.","Parameters","None","Returns","Notes","Because hs.razer relies on a physical device to be connected for testing, this method exists so that Hammerspoon developers can test the extension outside of the usual GitHub tests. It can also be used for user troubleshooting. This feature currently only works on the Razer Tartarus V2."]},{"l":"Methods"},{"l":"backlightsBreathing","p":["Signature","hs.razer:backlightsBreathing([color], [secondaryColor]) - razerObject, boolean, string | nil","Type","Method","Description","Changes the keyboard backlights to the breath mode.","Parameters","[color] - An optional hs.drawing.color value[secondaryColor] - An optional secondary hs.drawing.color","Returns","The hs.razer object. true if successful otherwise false A plain text error message if not successful.","Notes","If neither color nor secondaryColor is provided, then random colors will be used."]},{"l":"backlightsCustom","p":["Signature","hs.razer:backlightsCustom(colors) - razerObject, boolean, string | nil","Type","Method","Description","Changes the keyboard backlights to custom colours.","Parameters","colors - A table of hs.drawing.color objects for each individual button on your device (i.e. if there's 20 buttons, you should have twenty colors in the table).","Returns","The hs.razer object. true if successful otherwise false A plain text error message if not successful.","Notes","The order is top to bottom, left to right. You can use nil for any buttons you don't want to light up. Example usage: lua/lili hs.razer.new(0):backlightsCustom({hs.drawing.color.red, nil, hs.drawing.color.green, hs.drawing.color.blue})/lili"]},{"l":"backlightsMode","p":["Signature","hs.razer:backlightsMode(mode) - razerObject, boolean, string | nil","Type","Method","Description","Changes the keyboard backlights mode.","Parameters","mode - \"static\", \"flashing\", \"fading\"","Returns","The hs.razer object. true if successful otherwise false. A plain text error message if not successful.","Notes"]},{"l":"backlightsOff","p":["Signature","hs.razer:backlightsOff() - razerObject, boolean, string | nil","Type","Method","Description","Turns all the keyboard backlights off.","Parameters","None","Returns","The hs.razer object. true if successful otherwise false. A plain text error message if not successful.","Notes"]},{"l":"backlightsReactive","p":["Signature","hs.razer:backlightsReactive(speed, color) - razerObject, boolean, string | nil","Type","Method","Description","Changes the keyboard backlights to the reactive mode.","Parameters","speed - A number between 1 (fast) and 4 (slow) color - A hs.drawing.color object","Returns","The hs.razer object. true if successful otherwise false A plain text error message if not successful.","Notes"]},{"l":"backlightsSpectrum","p":["Signature","hs.razer:backlightsSpectrum() - razerObject, boolean, string | nil","Type","Method","Description","Changes the keyboard backlights to the spectrum mode.","Parameters","None","Returns","The hs.razer object. true if successful otherwise false A plain text error message if not successful.","Notes"]},{"l":"backlightsStarlight","p":["Signature","hs.razer:backlightsStarlight(speed, [color], [secondaryColor]) - razerObject, boolean, string | nil","Type","Method","Description","Changes the keyboard backlights to the Starlight mode.","Parameters","speed - A number between 1 (fast) and 3 (slow)[color] - An optional hs.drawing.color value[secondaryColor] - An optional secondary hs.drawing.color","Returns","The hs.razer object. true if successful otherwise false A plain text error message if not successful.","Notes","If neither color nor secondaryColor is provided, then random colors will be used."]},{"l":"backlightsStatic","p":["Signature","hs.razer:backlightsStatic(color) - razerObject, boolean, string | nil","Type","Method","Description","Changes the keyboard backlights to a single static color.","Parameters","color - A hs.drawing.color object.","Returns","The hs.razer object. true if successful otherwise false. A plain text error message if not successful.","Notes"]},{"l":"backlightsWave","p":["Signature","hs.razer:backlightsWave(speed, direction) - razerObject, boolean, string | nil","Type","Method","Description","Changes the keyboard backlights to the wave mode.","Parameters","speed - A number between 1 (fast) and 255 (slow) direction - \"left\" or \"right\" as a string","Returns","The hs.razer object. true if successful otherwise false A plain text error message if not successful.","Notes"]},{"l":"blueStatusLight","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.razer:blueStatusLight(value) - razerObject, boolean | nil, string | nil | | Type | Method | | Description | Gets or sets the blue status light. | | Parameters | value - true for on, false for off/li/ul | | **Returns** | ulliThe hs.razer object./lilitruefor on,false for off, or nil if something has gone wrongA plain text error message if not successful. | | Notes | |"]},{"l":"brightness","p":["Signature","hs.razer:brightness(value) - razerObject, number | nil, string | nil","Type","Method","Description","Gets or sets the brightness of a Razer keyboard.","Parameters","value - The brightness value - a number between 0 (off) and 100 (brightest).","Returns","The hs.razer object. The brightness as a number or nil if something goes wrong. A plain text error message if not successful.","Notes"]},{"l":"callback","p":["Signature","hs.razer:callback(callbackFn) - razerObject","Type","Method","Description","Sets or removes a callback function for the hs.razer object.","Parameters","callbackFn- a function to set as the callback for this hs.razer object. If the value provided is nil, any currently existing callback function is removed.","Returns","The hs.razer object","Notes","The callback function should expect 4 arguments and should not return anything: razerObject- The serial port object that triggered the callback. buttonName- The name of the button as a string. buttonAction- A string containing \"pressed\", \"released\", \"up\" or \"down\"."]},{"l":"defaultKeyboardLayout","p":["Signature","hs.razer:defaultKeyboardLayout(enabled) - boolean","Type","Method","Description","Allows you to remap the default Keyboard Layout on a Razer device so that the buttons no longer trigger their factory default actions, or restore the default keyboard layout.","Parameters","enabled - If true the Razer default will use its default keyboard layout.","Returns","The hs.razer object. true if successful otherwise false","Notes"]},{"l":"greenStatusLight","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.razer:greenStatusLight(value) - razerObject, boolean | nil, string | nil | | Type | Method | | Description | Gets or sets the green status light. | | Parameters | value - true for on, false for off/li/ul | | **Returns** | ulliThe hs.razer object./lilitruefor on,false for off, or nil if something has gone wrongA plain text error message if not successful. | | Notes | |"]},{"l":"name","p":["Signature","hs.razer:name() - string","Type","Method","Description","Returns the human readable device name of the Razer device.","Parameters","None","Returns","The device name as a string.","Notes"]},{"l":"orangeStatusLight","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.razer:orangeStatusLight(value) - razerObject, boolean | nil, string | nil | | Type | Method | | Description | Gets or sets the orange status light. | | Parameters | value - true for on, false for off/li/ul | | **Returns** | ulliThe hs.razer object./lilitruefor on,false for off, or nil if something has gone wrongA plain text error message if not successful. | | Notes | |"]},{"l":"redStatusLight","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.razer:redStatusLight(value) - razerObject, boolean | nil, string | nil | | Type | Method | | Description | Gets or sets the red status light. | | Parameters | value - true for on, false for off/li/ul | | **Returns** | ulliThe hs.razer object./lilitruefor on,false for off, or nil if something has gone wrongA plain text error message if not successful. | | Notes | |"]},{"l":"yellowStatusLight","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.razer:yellowStatusLight(value) - razerObject, boolean | nil, string | nil | | Type | Method | | Description | Gets or sets the orange status light. | | Parameters | value - true for on, false for off/li/ul | | **Returns** | ulliThe hs.razer object./lilitruefor on,false for off, or nil if something has gone wrongA plain text error message if not successful. | | Notes | |"]}],[{"i":"hsredshift","l":"hs.redshift","p":["Inverts and/or lowers the color temperature of the screen(s) on a schedule, for a more pleasant experience at night","Usage:","Note:","As of macOS 10.12.4, Apple provides \"Night Shift\", which implements a simple red-shift effect, as part of the OS. It seems unlikely that hs.redshift will see significant future development."]},{"l":"API Overview","p":["Variables- Configurable values","COLORRAMP","Functions- API calls offered directly by the extension","invertSubscribe","invertUnsubscribe","isInverted","requestInvert","start","stop","toggle","toggleInvert"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"COLORRAMP","p":["Signature","hs.redshift.COLORRAMP","Type","Variable","Description","A table holding the gamma values for given color temperatures; each key must be a color temperature number in K (useful values are between","Notes","hs.inspect(hs.redshift.COLORRAMP) from the console will show you how the table is built the default ramp has entries from 1000K to 10000K every 100K"]},{"l":"Functions"},{"l":"invertSubscribe","p":["Signature","hs.redshift.invertSubscribe([id,]fn)","Type","Function","Description","Subscribes a callback to be notified when the color inversion status changes","Parameters","id - (optional) a string identifying the requester (usually the module name); if omitted, fn itself will be the identifier; this identifier must be passed to hs.redshift.invertUnsubscribe() fn - a function that will be called whenever color inversion status changes; it must accept a single parameter, a string or false as per the return value of hs.redshift.isInverted()","Returns","None","Notes","You can use this to dynamically adjust the UI colors in your modules or configuration, if appropriate."]},{"l":"invertUnsubscribe","p":["Signature","hs.redshift.invertUnsubscribe(id)","Type","Function","Description","Unsubscribes a previously subscribed color inversion change callback","Parameters","id - a string identifying the requester or the callback function itself, depending on how you called hs.redshift.invertSubscribe()","Returns","None","Notes"]},{"l":"isInverted","p":["Signature","hs.redshift.isInverted() - string or false","Type","Function","Description","Checks if the colors are currently inverted","Parameters","None","Returns","false if the colors are not currently inverted; otherwise, a string indicating the reason, one of:\"user\" for the user override (see hs.redshift.toggleInvert())\"redshift-night\" if hs.redshift.start() was called with invertAtNight set to true, and it's currently night time the ID string (usually the module name) provided to hs.redshift.requestInvert(), if another module requested color inversion","Notes"]},{"l":"requestInvert","p":["Signature","hs.redshift.requestInvert(id,v)","Type","Function","Description","Sets or clears a request for color inversion","Parameters","id - a string identifying the requester (usually the module name) v - a boolean indicating whether to invert the colors (if true) or clear any previous requests (if false or nil)","Returns","None","Notes","you can use this function e.g. to automatically invert colors if the ambient light sensor reading drops below a certain threshold ( hs.brightness.DDCauto() can optionally do exactly that) if the user's configuration doesn't explicitly start the redshift module, calling this will have no effect"]},{"l":"start","p":["Signature","hs.redshift.start(colorTemp,nightStart,nightEnd[,transition[,invertAtNight[,windowfilterDisable[,dayColorTemp]]]])","Type","Function","Description","Sets the schedule and (re)starts the module","Parameters","colorTemp - a number indicating the desired color temperature (Kelvin) during the night cycle; the recommended range is between 3600K and 1400K; lower values (minimum 1000K) result in a more pronounced adjustment nightStart - a string in the format \"HH:MM\" (24-hour clock) or number of seconds after midnight (see hs.timer.seconds()) indicating when the night cycle should start nightEnd - a string in the format \"HH:MM\" (24-hour clock) or number of seconds after midnight (see hs.timer.seconds()) indicating when the night cycle should end transition - (optional) a string or number of seconds (see hs.timer.seconds()) indicating the duration of the transition to the night color temperature and back; if omitted, defaults to 1 hour invertAtNight - (optional) a boolean indicating whether the colors should be inverted (in addition to the color temperature shift) during the night; if omitted, defaults to false windowfilterDisable - (optional) an hs.window.filter instance that will disable color adjustment (and color inversion) whenever any window is allowed; alternatively, you can just provide a list of application names (typically media apps and/or apps for color-sensitive work) and a windowfilter will be created for you that disables color adjustment whenever one of these apps is focused dayColorTemp - (optional) a number indicating the desired color temperature (in Kelvin) during the day cycle; you can use this to maintain some degree of \"redshift\" during the day as well, or, if desired, you can specify a value higher than 6500K (up to 10000K) for more bluish colors, although that's not recommended; if omitted, defaults to 6500K, which disables color adjustment and restores your screens' original color profiles","Returns","None","Notes"]},{"l":"stop","p":["Signature","hs.redshift.stop()","Type","Function","Description","Stops the module and disables color adjustment and color inversion","Parameters","None","Returns","Notes"]},{"l":"toggle","p":["Signature","hs.redshift.toggle([v])","Type","Function","Description","Sets or clears the user override for color temperature adjustment.","Parameters","v - (optional) a boolean; if true, the override will enable color temperature adjustment on the given schedule; if false, the override will disable color temperature adjustment; if omitted or nil, it will toggle the override, i.e. clear it if it's currently enforced, or set it to the opposite of the current color temperature adjustment status otherwise.","Returns","None","Notes","This function should be bound to a hotkey, e.g.: hs.hotkey.bind('ctrl-cmd','-','Redshift',hs.redshift.toggle)"]},{"l":"toggleInvert","p":["Signature","hs.redshift.toggleInvert([v])","Type","Function","Description","Sets or clears the user override for color inversion.","Parameters","v - (optional) a boolean; if true, the override will invert the colors no matter what; if false, the override will disable color inversion no matter what; if omitted or nil, it will toggle the override, i.e. clear it if it's currently enforced, or set it to the opposite of the current color inversion status otherwise.","Returns","None","Notes","This function should be bound to a hotkey, e.g.: hs.hotkey.bind('ctrl-cmd','=','Invert',hs.redshift.toggleInvert)"]}],[{"i":"hsscreen","l":"hs.screen","p":["Manipulate screens (i.e. monitors)","The macOS coordinate system used by Hammerspoon assumes a grid that spans all the screens (positioned as per System Preferences->Displays->Arrangement). The origin 0,0 is at the top left corner of the primary screen.(Screens to the left of the primary screen, or above it, and windows on these screens, will have negative coordinates)"]},{"l":"Submodules","p":["hs.screen.watcher"]},{"l":"API Overview","p":["absoluteToLocal","accessibilitySettings","allScreens","availableModes","Constructors- API calls which return an object, typically one that offers API methods","currentMode","desktopImageURL","find","frame","fromUnitRect","fullFrame","Functions- API calls offered directly by the extension","getBrightness","getForceToGray","getGamma","getInfo","getInvertedPolarity","getUUID","id","localToAbsolute","mainScreen","Methods- API calls which can only be made on an object returned by a constructor","mirrorOf","mirrorStop","name","next","position","previous","primaryScreen","restoreGamma","rotate","screenPositions","setBrightness","setForceToGray","setGamma","setInvertedPolarity","setMode","setOrigin","setPrimary","shotAsJPG","shotAsPNG","snapshot","strictScreenInDirection","toEast","toNorth","toSouth","toUnitRect","toWest","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"strictScreenInDirection","p":["Signature","hs.screen.strictScreenInDirection","Type","Variable","Description","If set to true, the methods hs.screen:toEast(), :toNorth() etc. will disregard screens that lie perpendicularly to the desired axis"]},{"l":"Functions"},{"l":"accessibilitySettings","p":["Signature","hs.screen.accessibilitySettings() - table","Type","Function","Description","Gets the current state of the screen-related accessibility settings","Parameters","None","Returns","A table containing the following keys, and corresponding boolean values for whether the user has enabled these options: ReduceMotion (only available on macOS 10.12 or later) ReduceTransparency IncreaseContrast InvertColors (only available on macOS 10.12 or later) DifferentiateWithoutColor","Notes"]},{"l":"find","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.screen.find(hint) - hs.screen object(s) | | Type | Function | | Description | Finds screens | | Parameters | hint - search criterion for the desired screen(s); it can be: a number as per hs.screen:id() a string containing the UUID of the desired screen a string pattern that matches (via string.match) the screen name as per hs.screen:name() (for convenience, the matching will be done on lowercased strings) an hs.geometry point object, or constructor argument, with the x and y position of the screen in the current layout as per hs.screen:position() an hs.geometry size object, or constructor argument, with the resolution of the screen as per hs.screen:fullFrame() an hs.geometry rect object, or constructor argument, with an arbitrary rect in absolute coordinates; the screen containing the largest part of the rect will be returned | | Returns | one or more hs.screen objects that match the supplied search criterion, or nil if none found | | Notes | for convenience you call this as hs.screen(hint)Example:lua/lilihs.screen(724562417) -- Color LCD - by id/lilihs.screen'Dell' -- DELL U2414M - by name/lilihs.screen'Built%-in' -- Built-in Retina Display, note the % to escape the hyphen repetition character/lilihs.screen'0,0' -- PHL BDM4065 - by position, same as hs.screen.primaryScreen()/lilihs.screen{x=-1,y=0} -- DELL U2414M - by position, screen to the immediate left of the primary screen/lilihs.screen'3840x2160' -- PHL BDM4065 - by screen resolution/lilihs.screen'-500,240 700x1300' -- DELL U2414M, by arbitrary rect/lili |"]},{"l":"restoreGamma","p":["Signature","hs.screen.restoreGamma()","Type","Function","Description","Restore the gamma settings to defaults","Parameters","None","Returns","Notes","This returns all displays to the gamma tables specified by the user's selected ColorSync display profiles"]},{"l":"screenPositions","p":["Signature","hs.screen.screenPositions() - table","Type","Function","Description","Returns a list of all connected and enabled screens, along with their \"position\" relative to the primary screen","Parameters","None","Returns","a table where each key is an hs.screen object, and the corresponding value is a table , where X and Y attempt to indicate each screen's position relative to the primary screen (which is at ); so e.g. a value of indicates a screen immediately to the left of the primary screen, and a value of indicates a screen positioned below the primary screen, with another screen inbetween.","Notes","grid-like arrangements of same-sized screens should behave consistently; but there's no guarantee of a consistent result for more \"exotic\" screen arrangements"]},{"l":"Constructors"},{"l":"allScreens","p":["Signature","hs.screen.allScreens() - hs.screen[]","Type","Constructor","Description","Returns all the screens","Parameters","None","Returns","A table containing one or more hs.screen objects","Notes"]},{"l":"mainScreen","p":["Signature","hs.screen.mainScreen() - screen","Type","Constructor","Description","Returns the 'main' screen, i.e. the one containing the currently focused window","Parameters","None","Returns","An hs.screen object","Notes"]},{"l":"primaryScreen","p":["Signature","hs.screen.primaryScreen() - screen","Type","Constructor","Description","Gets the primary screen","Parameters","None","Returns","An hs.screen object","Notes"]},{"l":"Methods"},{"l":"absoluteToLocal","p":["Signature","hs.screen:absoluteToLocal(geom) - hs.geometry object","Type","Method","Description","Transforms from the absolute coordinate space used by OSX/Hammerspoon to the screen's local coordinate space, where 0,0 is at the screen's top left corner","Parameters","geom - an hs.geometry point or rect, or arguments to construct one","Returns","an hs.geometry point or rect, transformed to the screen's local coordinate space","Notes"]},{"l":"availableModes","p":["Signature","hs.screen:availableModes() - table","Type","Method","Description","Returns a table containing the screen modes supported by the screen. A screen mode is a combination of resolution, scaling factor and colour depth","Parameters","None","Returns","A table containing the supported screen modes. The keys of the table take the form of \" 1440x900@2x\" (for a HiDPI mode) or \" 1680x1050@1x\" (for a native DPI mode). The values are tables which contain the keys: w - A number containing the width of the screen mode in points h - A number containing the height of the screen mode in points scale - A number containing the scaling factor of the screen mode (typically 1 for a native mode, 2 for a HiDPI mode) freq - A number containing the vertical refresh rate in Hz depth - A number containing the bit depth of the display mode","Notes","Prior to 0.9.83, only 32-bit colour modes would be returned, but now all colour depths are returned. This has necessitated changing the naming of the modes in the returned table.\"points\" are not necessarily the same as pixels, because they take the scale factor into account (e.g. \" 1440x900@2x\" is a 2880x1800 screen resolution, with a scaling factor of 2, i.e. with HiDPI pixel-doubled rendering enabled), however, they are far more useful to work with than native pixel modes, when a Retina screen is involved. For non-retina screens, points and pixels are equivalent."]},{"l":"currentMode","p":["Signature","hs.screen:currentMode() - table","Type","Method","Description","Returns a table describing the current screen mode","Parameters","None","Returns","A table containing the current screen mode. The keys of the table are: w - A number containing the width of the screen mode in points h - A number containing the height of the screen mode in points scale - A number containing the scaling factor of the screen mode (typically 1 for a native mode, 2 for a HiDPI mode) freq - A number containing the vertical refresh rate in Hz depth - A number containing the bit depth desc - A string containing a representation of the mode as used in hs.screen:availableModes()- e.g. \" 1920x1080@2x 60Hz 4bpp\"","Notes"]},{"l":"desktopImageURL","p":["Signature","hs.screen:desktopImageURL([imageURL])","Type","Method","Description","Gets/Sets the desktop background image for a screen","Parameters","imageURL - An optional file:// URL to an image file to set as the background. If omitted, the current file URL is returned","Returns","the hs.screen object if a new URL was set, otherwise a string containing the current URL","Notes","If the user has set a folder of pictures to be alternated as the desktop background, the path to that folder will be returned."]},{"l":"frame","p":["Signature","hs.screen:frame() - hs.geometry rect","Type","Method","Description","Returns the screen frame, without the dock or menu.","Parameters","None","Returns","an hs.geometry rect describing this screen's \"usable\" frame (i.e. without the dock and menu bar) in absolute coordinates","Notes"]},{"l":"fromUnitRect","p":["Signature","hs.screen:fromUnitRect(unitrect) - hs.geometry rect","Type","Method","Description","Returns the absolute rect of a given unit rect within this screen","Parameters","unitrect - an hs.geometry unit rect, or arguments to construct one","Returns","an hs.geometry rect describing the given unit rect in absolute coordinates","Notes","this method is just a convenience wrapper for hs.geometry.fromUnitRect(unitrect,this_screen:frame())"]},{"l":"fullFrame","p":["Signature","hs.screen:fullFrame() - hs.geometry rect","Type","Method","Description","Returns the screen frame, including the dock and menu.","Parameters","None","Returns","an hs.geometry rect describing this screen's frame in absolute coordinates","Notes"]},{"l":"getBrightness","p":["Signature","hs.screen:getBrightness() - number or nil","Type","Method","Description","Gets the screen's brightness","Parameters","None","Returns","A floating point number between 0 and 1, containing the current brightness level, or nil if the display does not support brightness queries","Notes"]},{"l":"getForceToGray","p":["Signature","hs.screen.getForceToGray() - boolean","Type","Method","Description","Gets the screen's ForceToGray setting","Parameters","None","Returns","A boolean, true if the ForceToGray mode is set, otherwise false","Notes"]},{"l":"getGamma","p":["Signature","hs.screen:getGamma() - [whitepoint, blackpoint] or nil","Type","Method","Description","Gets the current whitepoint and blackpoint of the screen","Parameters","None","Returns","A table containing the white point and black point of the screen, or nil if an error occurred. The keys whitepoint and blackpoint each have values of a table containing the following keys, with corresponding values between 0.0 and 1.0: red green blue","Notes"]},{"l":"getInfo","p":["Signature","hs.screen:getInfo() - table or nil","Type","Method","Description","Gets a table of information about an hs.screen object","Parameters","None","Returns","A table containing various information, or nil if an error occurred.","Notes"]},{"l":"getInvertedPolarity","p":["Signature","hs.screen.getInvertedPolarity() - boolean","Type","Method","Description","Gets the screen's InvertedPolarity setting","Parameters","None","Returns","A boolean, true if the InvertedPolarity mode is set, otherwise false","Notes"]},{"l":"getUUID","p":["Signature","hs.screen:getUUID() - string","Type","Method","Description","Gets the UUID of an hs.screen object","Parameters","None","Returns","A string containing the UUID, or nil if an error occurred.","Notes"]},{"l":"id","p":["Signature","hs.screen:id() - number","Type","Method","Description","Returns a screen's unique ID","Parameters","None","Returns","A number containing the ID of the screen","Notes"]},{"l":"localToAbsolute","p":["Signature","hs.screen:localToAbsolute(geom) - hs.geometry object","Type","Method","Description","Transforms from the screen's local coordinate space, where 0,0 is at the screen's top left corner, to the absolute coordinate space used by OSX/Hammerspoon","Parameters","geom - an hs.geometry point or rect, or arguments to construct one","Returns","an hs.geometry point or rect, transformed to the absolute coordinate space","Notes"]},{"l":"mirrorOf","p":["Signature","hs.screen:mirrorOf(aScreen[, permanent]) - bool","Type","Method","Description","Make this screen mirror another","Parameters","aScreen - an hs.screen object you wish to mirror permanent - an optional bool, true if this should be configured permanently, false if it should apply just for this login session. Defaults to false.","Returns","true if the operation succeeded, otherwise false","Notes"]},{"l":"mirrorStop","p":["Signature","hs.screen:mirrorStop([permanent]) - bool","Type","Method","Description","Stops this screen mirroring another","Parameters","permanent - an optional bool, true if this should be configured permanently, false if it should apply just for this login session. Defaults to false.","Returns","true if the operation succeeded, otherwise false","Notes"]},{"l":"name","p":["Signature","hs.screen:name() - string or nil","Type","Method","Description","Returns the preferred name for the screen set by the manufacturer","Parameters","None","Returns","A string containing the name of the screen, or nil if an error occurred","Notes"]},{"l":"next","p":["Signature","hs.screen:next() - screen","Type","Method","Description","Gets the screen 'after' this one (in arbitrary order); this method wraps around to the first screen.","Parameters","None","Returns","An hs.screen object","Notes"]},{"l":"position","p":["Signature","hs.screen:position() - x, y","Type","Method","Description","Return a given screen's position relative to the primary screen - see 'hs.screen.screenPositions()'","Parameters","None","Returns","two integers indicating the screen position in the current screen arrangement, in the x and y axis respectively.","Notes"]},{"l":"previous","p":["Signature","hs.screen:previous() - screen","Type","Method","Description","Gets the screen 'before' this one (in arbitrary order); this method wraps around to the last screen.","Parameters","None","Returns","An hs.screen object","Notes"]},{"l":"rotate","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.screen:rotate([degrees]) - bool or rotation angle | | Type | Method | | Description | Gets/Sets the rotation of a screen | | Parameters | degrees - An optional number indicating how many degrees clockwise, to rotate. If no number is provided, the current rotation will be returned. This number must be one of: 0 90 180 270 | | Returns | If the rotation is being set, a boolean, true if the operation succeeded, otherwise false. If the rotation is being queried, a number will be returned | | Notes | |"]},{"l":"setBrightness","p":["Signature","hs.screen:setBrightness(brightness) - hs.screen object","Type","Method","Description","Sets the screen's brightness","Parameters","brightness - A floating point number between 0 and 1","Returns","The hs.screen object","Notes"]},{"l":"setForceToGray","p":["Signature","hs.screen.setForceToGray(ForceToGray) - None","Type","Method","Description","Sets the screen's ForceToGray mode","Parameters","ForceToGray - A boolean if ForceToGray mode should be enabled","Returns","None","Notes"]},{"l":"setGamma","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.screen:setGamma(whitepoint, blackpoint) - boolean | | Type | Method | | Description | Sets the current white point and black point of the screen | | Parameters | whitepoint - A table containing color component values between 0.0 and 1.0 for each of the keys: red green blueblackpoint - A table containing color component values between 0.0 and 1.0 for each of the keys: red green blue | | Returns | A boolean, true if the gamma settings were applied, false if an error occurred | | Notes | If the whitepoint and blackpoint specified, are very similar, it will be impossible to read the screen. You should exercise caution, and may wish to bind a hotkey to hs.screen.restoreGamma() when experimenting |"]},{"l":"setInvertedPolarity","p":["Signature","hs.screen.setInvertedPolarity(InvertedPolarity) - None","Type","Method","Description","Sets the screen's InvertedPolarity mode","Parameters","InvertedPolarity - A boolean if InvertedPolarity mode should be enabled","Returns","None","Notes"]},{"l":"setMode","p":["Signature","hs.screen:setMode(width, height, scale, frequency, depth) - boolean","Type","Method","Description","Sets the screen to a new mode","Parameters","width - A number containing the width in points of the new mode height - A number containing the height in points of the new mode scale - A number containing the scaling factor of the new mode (typically 1 for native pixel resolutions, 2 for HiDPI/Retina resolutions) frequency - A number containing the vertical refresh rate, in Hertz of the new mode depth - A number containing the bit depth of the new mode","Returns","A boolean, true if the requested mode was set, otherwise false","Notes","The available widths/heights/scales can be seen in the output of hs.screen:availableModes(), however, it should be noted that the CoreGraphics subsystem seems to list more modes for a given screen than it is actually prepared to set, so you may find that seemingly valid modes still return false. It is not currently understood why this is so!"]},{"l":"setOrigin","p":["Signature","hs.screen:setOrigin(x, y) - bool","Type","Method","Description","Sets the origin of a screen in the global display coordinate space. The origin of the main or primary display is (0,0). The new origin is placed as close as possible to the requested location, without overlapping or leaving a gap between displays. If you use this function to change the origin of a mirrored display, the display may be removed from the mirroring set.","Parameters","x - The desired x-coordinate for the upper-left corner of the display. y - The desired y-coordinate for the upper-left corner of the display.","Returns","true if the operation succeeded, otherwise false","Notes"]},{"l":"setPrimary","p":["Signature","hs.screen:setPrimary() - boolean","Type","Method","Description","Sets the screen to be the primary display (i.e. contain the menubar and dock)","Parameters","None","Returns","A boolean, true if the operation succeeded, otherwise false","Notes"]},{"l":"shotAsJPG","p":["Signature","hs.screen:shotAsJPG(filePath[, screenRect])","Type","Method","Description","Saves an image of the screen to a JPG file","Parameters","filePath - A string containing a file path to save the screenshot as screenRect - An optional hs.geometry rect (or arguments for its constructor) containing a portion of the screen to capture. Defaults to the whole screen","Returns","None","Notes"]},{"l":"shotAsPNG","p":["Signature","hs.screen:shotAsPNG(filePath[, screenRect])","Type","Method","Description","Saves an image of the screen to a PNG file","Parameters","filePath - A string containing a file path to save the screenshot as screenRect - An optional hs.geometry rect (or arguments for its constructor) containing a portion of the screen to capture. Defaults to the whole screen","Returns","None","Notes"]},{"l":"snapshot","p":["Signature","hs.screen:snapshot([rect]) - object","Type","Method","Description","Captures an image of the screen","Parameters","rect - An optional rect-table containing a portion of the screen to capture. Defaults to the whole screen","Returns","An hs.image object, or nil if an error occurred","Notes"]},{"l":"toEast","p":["Signature","hs.screen:toEast(from, strict) - hs.screen object","Type","Method","Description","Gets the first screen to the east of this one, ordered by proximity to its center or a specified point.","Parameters","from - An hs.geometry.rect or hs.geometry.point object; if omitted, the geometric center of this screen will be used strict - If true, disregard screens that lie completely above or below this one (alternatively, set hs.screen.strictScreenInDirection)","Returns","An hs.screen object, or nil if not found","Notes"]},{"l":"toNorth","p":["Signature","hs.screen:toNorth(from, strict) - hs.screen object","Type","Method","Description","Gets the first screen to the north of this one, ordered by proximity to its center or a specified point.","Parameters","from - An hs.geometry.rect or hs.geometry.point object; if omitted, the geometric center of this screen will be used strict - If true, disregard screens that lie completely to the left or to the right of this one (alternatively, set hs.screen.strictScreenInDirection)","Returns","An hs.screen object, or nil if not found","Notes"]},{"l":"toSouth","p":["Signature","hs.screen:toSouth(from, strict) - hs.screen object","Type","Method","Description","Gets the first screen to the south of this one, ordered by proximity to its center or a specified point.","Parameters","from - An hs.geometry.rect or hs.geometry.point object; if omitted, the geometric center of this screen will be used strict - If true, disregard screens that lie completely to the left or to the right of this one (alternatively, set hs.screen.strictScreenInDirection)","Returns","An hs.screen object, or nil if not found","Notes"]},{"l":"toUnitRect","p":["Signature","hs.screen:toUnitRect(rect) - hs.geometry unitrect","Type","Method","Description","Returns the unit rect of a given rect, relative to this screen","Parameters","rect - an hs.geometry rect, or arguments to construct one","Returns","an hs.geometry unit rect describing the given rect relative to this screen's frame","Notes","this method is just a convenience wrapper for hs.geometry.toUnitRect(rect,this_screen:frame())"]},{"l":"toWest","p":["Signature","hs.screen:toWest(from, strict) - hs.screen object","Type","Method","Description","Gets the first screen to the west of this one, ordered by proximity to its center or a specified point.","Parameters","from - An hs.geometry.rect or hs.geometry.point object; if omitted, the geometric center of this screen will be used strict - If true, disregard screens that lie completely above or below this one (alternatively, set hs.screen.strictScreenInDirection)","Returns","An hs.screen object, or nil if not found","Notes"]}],[{"i":"hsscreenwatcher","l":"hs.screen.watcher","p":["Watch for screen layout changes This could be the addition or removal of a monitor, a screen resolution change, movement of a monitor in the Display preferences pane, etc.","Note that screen events which happen while your Mac is suspended, may not trigger the watcher in various circumstances (e.g. if you have FileVault enabled and the machine resumes out of hibernation - the screen events will be happening before the drive is unlocked and will not be reported to Hammerspoon)","This module is based primarily on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","newWithActiveScreen","Methods- API calls which can only be made on an object returned by a constructor","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","hs.screen.watcher.new(fn) - watcher","Type","Constructor","Description","Creates a new screen-watcher.","Parameters","The function to be called when a change in the screen layout occurs. This function should take no arguments.","Returns","An hs.screen.watcher object","Notes","A screen layout change usually involves a change that is made from the Displays Preferences Panel or when a monitor is attached or removed. It can also be caused by a change in the Dock size or presence."]},{"l":"newWithActiveScreen","p":["Signature","hs.screen.watcher.newWithActiveScreen(fn) - watcher","Type","Constructor","Description","Creates a new screen-watcher that is also called when the active screen changes.","Parameters","The function to be called when a change in the screen layout or active screen occurs. This function can optionally take one argument, a boolean which will indicate if the change was due to a screen layout change (nil) or because the active screen changed (true).","Returns","An hs.screen.watcher object","Notes","A screen layout change usually involves a change that is made from the Displays Preferences Panel or when a monitor is attached or removed. It can also be caused by a change in the Dock size or presence. nil was chosen instead of false for the argument type when this type of change occurs to more closely match the previous behavior of having no argument passed to the callback function. An active screen change indicates that the focused or main screen has changed when the user has \"Displays have separate spaces\" checked in the Mission Control Preferences Panel (the focused display is the display which has the active window and active menubar). Detecting a change in the active display relies on watching for the NSWorkspaceActiveDisplayDidChangeNotification message which is not documented by Apple. While this message has been around at least since OS X 10.9, because it is undocumented, we cannot be positive that Apple won't remove it in a future OS X update. Because this watcher works by listening for posted messages, should Apple remove this notification, your callback function will no longer receive messages about this change -- it won't crash or change behavior in any other way. This documentation will be updated if this status changes. Plugging in or unplugging a monitor can cause both a screen layout callback and an active screen change callback."]},{"l":"Methods"},{"l":"start","p":["Signature","hs.screen.watcher:start() - watcher","Type","Method","Description","Starts the screen watcher, making it so fn is called each time the screen arrangement changes","Parameters","None","Returns","The hs.screen.watcher object","Notes"]},{"l":"stop","p":["Signature","hs.screen.watcher:stop() - watcher","Type","Method","Description","Stops the screen watcher's fn from getting called until started again","Parameters","None","Returns","The hs.screen.watcher object","Notes"]}],[{"i":"hsserial","l":"hs.serial","p":["Communicate with external devices through a serial port (most commonly RS-232).","Powered by ORSSerialPort. Thrown together by @latenitefilms.","Copyright (c) 2011-2012 Andrew R. Madsen ( andrew@openreelsoftware.com)","Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:","The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.","THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE."]},{"l":"API Overview","p":["availablePortDetails","availablePortNames","availablePortPaths","baudRate","callback","close","Constructors- API calls which return an object, typically one that offers API methods","dataBits","deviceCallback","dtr","Functions- API calls offered directly by the extension","isOpen","Methods- API calls which can only be made on an object returned by a constructor","name","newFromName","newFromPath","open","parity","path","rts","sendData","shouldEchoReceivedData","stopBits","usesDTRDSRFlowControl","usesRTSCTSFlowControl"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"availablePortDetails","p":["Signature","hs.serial.availablePortDetails() - table","Type","Function","Description","Returns a table of currently connected serial ports details, organised by port name.","Parameters","None","Returns","A table containing the IOKit details of any connected serial ports, organised by port name.","Notes"]},{"l":"availablePortNames","p":["Signature","hs.serial.availablePortNames() - table","Type","Function","Description","Returns a table of currently connected serial ports names.","Parameters","None","Returns","A table containing the names of any connected serial port names as strings.","Notes"]},{"l":"availablePortPaths","p":["Signature","hs.serial.availablePortPaths() - table","Type","Function","Description","Returns a table of currently connected serial ports paths.","Parameters","None","Returns","A table containing the names of any connected serial port paths as strings.","Notes"]},{"l":"deviceCallback","p":["Signature","hs.serial.deviceCallback(callbackFn) - none","Type","Function","Description","A callback that's triggered when a serial port is added or removed from the system.","Parameters","callbackFn - the callback function to trigger, or nil to remove the current callback","Returns","None","Notes","The callback function should expect 1 argument and should not return anything: devices- A table containing the names of any serial ports connected as strings."]},{"l":"Constructors"},{"l":"newFromName","p":["Signature","hs.serial.newFromName(portName) - serialPortObject","Type","Constructor","Description","Creates a new hs.serial object using the port name.","Parameters","portName - A string containing the port name.","Returns","An hs.serial object or nil if an error occurred.","Notes","A valid port name can be found by checking hs.serial.availablePortNames()."]},{"l":"newFromPath","p":["Signature","hs.serial.newFromPath(path) - serialPortObject","Type","Constructor","Description","Creates a new hs.serial object using a path.","Parameters","path - A string containing the path (i.e. \"/dev/cu.usbserial\").","Returns","An hs.serial object or nil if an error occurred.","Notes","A valid port name can be found by checking hs.serial.availablePortPaths()."]},{"l":"Methods"},{"l":"baudRate","p":["Signature","hs.serial:baudRate([value], [allowNonStandardBaudRates]) - number | serialPortObject","Type","Method","Description","Gets or sets the baud rate for the serial port.","Parameters","value - An optional number to set the baud rate.[allowNonStandardBaudRates] - An optional boolean to enable non-standard baud rates. Defaults to false.","Returns","If a value is specified, then this method returns the serial port object. Otherwise this method returns the baud rate as a number","Notes","This function supports the following standard baud rates as numbers: 300, 1200, 2400, 4800, 9600, 14400, 19200, 28800, 38400, 57600, 115200, 230400. If no baud rate is supplied, it defaults to 115200."]},{"l":"callback","p":["Signature","hs.serial:callback(callbackFn) - serialPortObject","Type","Method","Description","Sets or removes a callback function for the hs.serial object.","Parameters","callbackFn- a function to set as the callback for this hs.serial object. If the value provided is nil, any currently existing callback function is removed.","Returns","The hs.serial object","Notes","The callback function should expect 4 arguments and should not return anything: serialPortObject- The serial port object that triggered the callback. callbackType- A string containing \"opened\", \"closed\", \"received\", \"removed\" or \"error\". message- If the callbackType is \"received\", then this will be the data received as a string. If the callbackType is \"error\", this will be the error message as a string. hexadecimalString- If the callbackType is \"received\", then this will be the data received as a hexadecimal string."]},{"l":"close","p":["Signature","hs.serial:close() - serialPortObject","Type","Method","Description","Closes the serial port.","Parameters","None","Returns","The hs.serial object.","Notes"]},{"l":"dataBits","p":["Signature","hs.serial:dataBits([value]) - number | serialPortObject","Type","Method","Description","Gets or sets the number of data bits for the serial port.","Parameters","value - An optional number to set the number of data bits. It can be 5 to 8.","Returns","If a value is specified, then this method returns the serial port object. Otherwise this method returns the data bits as a number. The default value is 8.","Notes"]},{"l":"dtr","p":["Signature","hs.serial:dtr([value]) - boolean | serialPortObject","Type","Method","Description","Gets or sets the state of the serial port's DTR (Data Terminal Ready) pin.","Parameters","value - An optional boolean.","Returns","If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean.","Notes","The default value is false. Setting this to true is most likely required for Arduino devices prior to opening the serial port."]},{"l":"isOpen","p":["Signature","hs.serial:isOpen() - boolean","Type","Method","Description","Gets whether or not a serial port is open.","Parameters","None","Returns","true if open, otherwise false.","Notes"]},{"l":"name","p":["Signature","hs.serial:name() - string","Type","Method","Description","Returns the name of a hs.serial object.","Parameters","None","Returns","The name as a string.","Notes"]},{"l":"open","p":["Signature","hs.serial:open() - serialPortObject | nil","Type","Method","Description","Opens the serial port.","Parameters","None","Returns","The hs.serial object or nil if the port could not be opened.","Notes"]},{"l":"parity","p":["Signature","hs.serial:parity([value]) - string | serialPortObject","Type","Method","Description","Gets or sets the parity for the serial port.","Parameters","value - An optional string to set the parity. It can be \"none\", \"odd\" or \"even\".","Returns","If a value is specified, then this method returns the serial port object. Otherwise this method returns a string value of \"none\", \"odd\" or \"even\".","Notes"]},{"l":"path","p":["Signature","hs.serial:path() - string","Type","Method","Description","Returns the path of a hs.serial object.","Parameters","None","Returns","The path as a string.","Notes"]},{"l":"rts","p":["Signature","hs.serial:rts([value]) - boolean | serialPortObject","Type","Method","Description","Gets or sets the state of the serial port's RTS (Request to Send) pin.","Parameters","value - An optional boolean.","Returns","If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean.","Notes","The default value is false. Setting this to true is most likely required for Arduino devices prior to opening the serial port."]},{"l":"sendData","p":["Signature","hs.serial:sendData(value) - none","Type","Method","Description","Sends data via a serial port.","Parameters","value - A string of data to send.","Returns","None","Notes"]},{"l":"shouldEchoReceivedData","p":["Signature","hs.serial:shouldEchoReceivedData([value]) - boolean | serialPortObject","Type","Method","Description","Gets or sets whether the port should echo received data.","Parameters","value - An optional boolean.","Returns","If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean.","Notes","The default value is false."]},{"l":"stopBits","p":["Signature","hs.serial:stopBits([value]) - number | serialPortObject","Type","Method","Description","Gets or sets the number of stop bits for the serial port.","Parameters","value - An optional number to set the number of stop bits. It can be 1 or 2.","Returns","If a value is specified, then this method returns the serial port object. Otherwise this method returns the number of stop bits as a number.","Notes","The default value is 1."]},{"l":"usesDTRDSRFlowControl","p":["Signature","hs.serial:usesDTRDSRFlowControl([value]) - boolean | serialPortObject","Type","Method","Description","Gets or sets whether the port should use DTR/DSR Flow Control.","Parameters","value - An optional boolean.","Returns","If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean.","Notes","The default value is false."]},{"l":"usesRTSCTSFlowControl","p":["Signature","hs.serial:usesRTSCTSFlowControl([value]) - boolean | serialPortObject","Type","Method","Description","Gets or sets whether the port should use RTS/CTS Flow Control.","Parameters","value - An optional boolean.","Returns","If a value is specified, then this method returns the serial port object. Otherwise this method returns a boolean.","Notes","The default value is false."]}],[{"i":"hssettings","l":"hs.settings","p":["Serialize simple Lua variables across Hammerspoon launches Settings must have a string key and must be made up of serializable Lua objects (string, number, boolean, nil, tables of such, etc.)","This module is based partially on code from the previous incarnation of Mjolnir by Steven Degutis."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","bundleID","dateFormat","Functions- API calls offered directly by the extension","clear","get","getKeys","set","setData","setDate","watchKey"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"bundleID","p":["Signature","hs.settings.bundleID","Type","Constant","Description","A string representing the ID of the bundle Hammerspoon's settings are stored in . You can use this with the command line tool defaults or other tools which allow access to the User Defaults of applications, to access these outside of Hammerspoon"]},{"l":"dateFormat","p":["Signature","hs.settings.dateFormat","Type","Constant","Description","A string representing the expected format of date and time when presenting the date and time as a string to hs.setDate(). e.g. os.date(hs.settings.dateFormat)"]},{"l":"Functions"},{"l":"clear","p":["Signature","hs.settings.clear(key) - bool","Type","Function","Description","Deletes a setting","Parameters","key - A string containing the name of a setting","Returns","A boolean, true if the setting was deleted, otherwise false","Notes"]},{"l":"get","p":["Signature","hs.settings.get(key) - string or boolean or number or nil or table or binary data","Type","Function","Description","Loads a setting","Parameters","key - A string containing the name of the setting","Returns","The value of the setting","Notes","This function can load all of the datatypes supported by hs.settings.set(), hs.settings.setData() and hs.settings.setDate()"]},{"l":"getKeys","p":["Signature","hs.settings.getKeys() - table","Type","Function","Description","Gets all of the previously stored setting names","Parameters","None","Returns","A table containing all of the settings keys in Hammerspoon's settings","Notes","Use ipairs(hs.settings.getKeys()) to iterate over all available settings Use hs.settings.getKeys()[someKey] to test for the existence of a particular key"]},{"l":"set","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.settings.set(key[, val]) | | Type | Function | | Description | Saves a setting with common datatypes | | Parameters | key - A string containing the name of the settingval - An optional value for the setting. Valid datatypes are: string number boolean nil table (which may contain any of the same valid datatypes) | | Returns | None | | Notes | If no val parameter is provided, it is assumed to be nilThis function cannot set dates or raw data types, see hs.settings.setDate() and hs.settings.setData()Assigning a nil value is equivalent to clearing the value with hs.settings.clear |"]},{"l":"setData","p":["Signature","hs.settings.setData(key, val)","Type","Function","Description","Saves a setting with raw binary data","Parameters","key - A string containing the name of the setting val - Some raw binary data","Returns","None","Notes"]},{"l":"setDate","p":["Signature","hs.settings.setDate(key, val)","Type","Function","Description","Saves a setting with a date","Parameters","key - A string containing the name of the setting val - A number representing seconds since 1970-01-01 00:00:00 +0000(e.g. os.time()), or a string containing a date in RFC3339 format ( YYYY-MM-DD[T]HH:MM:SS[Z])","Returns","None","Notes","See hs.settings.dateFormat for a convenient representation of the RFC3339 format, to use with other time/date related functions"]},{"l":"watchKey","p":["Signature","hs.settings.watchKey(identifier, key, [fn]) - identifier | current value","Type","Function","Description","Get or set a watcher to invoke a callback when the specified settings key changes","Parameters","identifier - a required string used as an identifier for this callback key - the settings key to watch for changes to fn - the callback function to be invoked when the specified key changes. If this is an explicit nil, removes the existing callback.","Returns","if a callback is set or removed, returns the identifier; otherwise returns the current callback function or nil if no callback function is currently defined.","Notes","the identifier is required so that multiple callbacks for the same key can be registered by separate modules; it's value doesn't affect what is being watched but does need to be unique between multiple watchers of the same key. Does not work with keys that include a period (.) in the key name because KVO uses dot notation to specify a sequence of properties. If you know of a way to escape periods so that they are watchable as NSUSerDefault key names, please file an issue and share!"]}],[{"i":"hssharing","l":"hs.sharing","p":["Share items with the macOS Sharing Services under the control of Hammerspoon.","This module will allow you to share Hammerspoon items with registered Sharing Services. Some of the built-in sharing services include sharing through mail, Facebook, AirDrop, etc. Other applications can add additional services as well.","For most sharing services (this has not been tested with all), the user will be prompted with the standard sharing dialog showing what is to be shared and offered a chance to submit or cancel.","This example prepares an email with a screenshot:","Common item data types that can be shared with Sharing Services include (but are not necessarily limited to):","basic data types like strings and numbers","hs.image objects","hs.styledtext objects","web sites and other URLs through the use of the hs.sharing.URL function","local files through the use of file URLs created with the hs.sharing.fileURL function"]},{"l":"API Overview","p":["accountName","alternateImage","attachments","builtinSharingServices","callback","canShareItems","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","fileURL","Functions- API calls offered directly by the extension","image","messageBody","Methods- API calls which can only be made on an object returned by a constructor","newShare","permanentLink","recipients","serviceName","shareItems","shareTypesFor","subject","title","URL"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"builtinSharingServices","p":["Signature","hs.sharing.builtinSharingServices[]","Type","Constant","Description","A table containing the predefined sharing service labels defined by Apple."]},{"l":"Functions"},{"l":"fileURL","p":["Signature","hs.sharing.fileURL(path) - table","Type","Function","Description","Returns a table representing a file URL for the path specified.","Parameters","path - a string specifying a path to represent as a file URL.","Returns","a table containing the necessary labels for converting the specified path into a URL as required by the macOS APIs.","Notes","this function is a wrapper to hs.sharing.URL which sets the second argument to true for you. see hs.sharing.URL for more information about the table format returned by this function."]},{"l":"shareTypesFor","p":["Signature","hs.sharing.shareTypesFor(items) - identifiersTable","Type","Function","Description","Returns a table containing the sharing service identifiers which can share the items specified.","Parameters","items - an array (table) or list of items separated by commas which you wish to share with this module.","Returns","an array (table) containing strings which identify sharing service identifiers which may be used by the hs.sharing.newShare constructor to share the specified data.","Notes","this function is intended to be used to determine the identifiers for sharing services available on your computer and that may not be included in the hs.sharing.builtinSharingServices table."]},{"l":"URL","p":["Signature","hs.sharing.URL(URL, [fileURL]) - table","Type","Function","Description","Returns a table representing the URL specified.","Parameters","URL - a string or table specifying the URL. fileURL - an optional boolean, default false, specifying whether or not the URL is supposed to represent a file on the local computer.","Returns","a table containing the necessary labels for representing the specified URL as required by the macOS APIs.","Notes","If the URL is specified as a table, it is expected to contain a url key with a string value specifying a proper schema and resource locator. Because macOS requires URLs to be represented as a specific object type which has no exact equivalent in Lua, Hammerspoon uses a table with specific keys to allow proper identification of a URL when included as an argument or result type. Use this function or the hs.sharing.fileURL wrapper function when specifying a URL to ensure that the proper keys are defined. At present, the following keys are defined for a URL table (additional keys may be added in the future if future Hammerspoon modules require them to more completely utilize the macOS NSURL class, but these will not change): url - a string containing the URL with a proper schema and resource locator filePath = a string specifying the actual path to the file in case the url is a file reference URL. Note that setting this field with this method will be silently ignored; the field is automatically inserted if appropriate when returning an NSURL object to lua.__ luaSkinType - a string specifying the macOS type this table represents when converted into an Objective-C type"]},{"l":"Constructors"},{"l":"newShare","p":["Signature","hs.sharing.newShare(type) - sharingObject","Type","Constructor","Description","Creates a new sharing object of the type specified by the identifier provided.","Parameters","type - a string specifying a sharing type identifier as listed in the hs.sharing.builtinSharingServices table or returned by the hs.sharing.shareTypesFor.","Returns","a sharingObject or nil if the type identifier cannot be created on this system","Notes"]},{"l":"Methods"},{"l":"accountName","p":["Signature","hs.sharing:accountName() - string | nil","Type","Method","Description","The account name used by the sharing service when posting on Twitter or Sina Weibo.","Parameters","None","Returns","a string containing the account name used by the sharing service, or nil if the sharing service does not provide this.","Notes","According to the Apple API documentation, only the Twitter and Sina Weibo sharing services will set this property, but this has not been fully tested."]},{"l":"alternateImage","p":["Signature","hs.sharing:alternateImage() - hs.image object | nil","Type","Method","Description","Returns an alternate image, if one exists, representing the sharing service provided by this sharing object.","Parameters","None","Returns","an hs.image object or nil, if no alternate image representation for the sharing service is defined.","Notes"]},{"l":"attachments","p":["Signature","hs.sharing:attachments() - table | nil","Type","Method","Description","If the sharing service provides an array of the attachments included when the data was posted, this method will return an array of file URL tables of the attachments.","Parameters","None","Returns","an array (table) containing the attachment file URLs, or nil if the sharing service selected does not provide this.","Notes","not all sharing services will set a value for this property."]},{"l":"callback","p":["Signature","hs.sharing:callback(fn) - sharingObject","Type","Method","Description","Set or clear the callback for the sharingObject.","Parameters","fn - A function, or nil, to set or remove the callback for the sharingObject","Returns","the sharingObject","Notes","the callback should expect 3 or 4 arguments and return no results. The arguments will be as follows: the sharingObject itself the callback message, which will be a string equal to one of the following:\"didFail\" - an error occurred while attempting to share the items\"didShare\" - the sharing service has finished sharing the items\"willShare\" - the sharing service is about to start sharing the items; occurs before sharing actually begins an array (table) containing the items being shared; if the message is \"didFail\" or \"didShare\", the items may be in a different order or converted to a different internal type to facilitate sharing. if the message is \"didFail\", the fourth argument will be a localized description of the error that occurred."]},{"l":"canShareItems","p":["Signature","hs.sharing:canShareItems(items) - boolean","Type","Method","Description","Returns a boolean specifying whether or not all of the items specified can be shared with the sharing service represented by the sharingObject.","Parameters","items - an array (table) or list of items separated by commas which are to be shared by the sharing service","Returns","a boolean value indicating whether or not all of the specified items can be shared with the sharing service represented by the sharingObject.","Notes"]},{"l":"image","p":["Signature","hs.sharing:image() - hs.image object | nil","Type","Method","Description","Returns an image, if one exists, representing the sharing service provided by this sharing object.","Parameters","None","Returns","an hs.image object or nil, if no image representation for the sharing service is defined.","Notes"]},{"l":"messageBody","p":["Signature","hs.sharing:messageBody() - string | nil","Type","Method","Description","If the sharing service provides the message body that was posted when sharing has completed, this method will return the message body as a string.","Parameters","None","Returns","a string containing the message body, or nil if the sharing service selected does not provide this.","Notes","not all sharing services will set a value for this property."]},{"l":"permanentLink","p":["Signature","hs.sharing:permanentLink() - URL table | nil","Type","Method","Description","If the sharing service provides a permanent link to the post when sharing has completed, this method will return the corresponding URL.","Parameters","None","Returns","the URL for the permanent link, or nil if the sharing service selected does not provide this.","Notes","not all sharing services will set a value for this property."]},{"l":"recipients","p":["Signature","hs.sharing:recipients([recipients]) - current value | sharingObject","Type","Method","Description","Get or set the subject to be used when the sharing service performs its sharing method.","Parameters","recipients - an optional array (table) or list of recipient strings separated by commas which specify the recipients of the shared items.","Returns","if an argument is provided, returns the sharingObject; otherwise returns the current value.","Notes","not all sharing services will make use of the value set by this method. the individual recipients should be specified as strings in the format expected by the sharing service; e.g. for items being shared in an email, the recipients should be email address, etc."]},{"l":"serviceName","p":["Signature","hs.sharing:serviceName() - string","Type","Method","Description","The service identifier for the sharing service represented by the sharingObject.","Parameters","None","Returns","a string containing the identifier for the sharing service.","Notes","this string will match the identifier used to create the sharing service object with hs.sharing.newShare"]},{"l":"shareItems","p":["Signature","hs.sharing:shareItems(items) - sharingObject","Type","Method","Description","Shares the items specified with the sharing service represented by the sharingObject.","Parameters","items - an array (table) or list of items separated by commas which are to be shared by the sharing service","Returns","the sharingObject, or nil if one or more of the items cannot be shared with the sharing service represented by the sharingObject.","Notes","You can check to see if all of your items can be shared with the hs.sharing:canShareItems method."]},{"l":"subject","p":["Signature","hs.sharing:subject([subject]) - current value | sharingObject","Type","Method","Description","Get or set the subject to be used when the sharing service performs its sharing method.","Parameters","subject - an optional string specifying the subject for the posting of the shared content","Returns","if an argument is provided, returns the sharingObject; otherwise returns the current value.","Notes","not all sharing services will make use of the value set by this method."]},{"l":"title","p":["Signature","hs.sharing:title() - string","Type","Method","Description","The title for the sharing service represented by the sharingObject.","Parameters","None","Returns","a string containing the title of the sharing service.","Notes","this string differs from the identifier used to create the sharing service object with hs.sharing.newShare and is intended to provide a more friendly label for the service if you need to list or refer to it elsewhere."]}],[{"i":"hsshortcuts","l":"hs.shortcuts","p":["List and run shortcuts from the Shortcuts app","Separate from this extension, Hammerspoon provides an action for use in the Shortcuts app. The action is called \"Execute Lua\" and if it is passed a text block of valid Lua, it will execute that Lua within Hammerspoon. You can use this action to call functions defined in your init.lua or to just execute chunks of Lua.","Your functions/chunks can return text, which will be returned by the action in Shortcuts."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","list","run"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"list","p":["Signature","hs.shortcuts.list() - []","Type","Function","Description","Returns a list of available shortcuts","Parameters","None","Returns","A table of shortcuts, each being a table with the following keys: name - The name of the shortcut id - A unique ID for the shortcut acceptsInput - A boolean indicating if the shortcut requires input actionCount - A number relating to how many actions are in the shortcut","Notes"]},{"l":"run","p":["Signature","hs.shortcuts.run(name)","Type","Function","Description","Execute a Shortcuts shortcut by name","Parameters","name - A string containing the name of the Shortcut to execute","Returns","None","Notes"]}],[{"i":"hssocket","l":"hs.socket","p":["Talk to custom protocols using asynchronous TCP sockets.","For UDP sockets see hs.socket.udp.","hs.socket is implemented with CocoaAsyncSocket. CocoaAsyncSocket's tagging features provide a handy way to implement custom protocols.","For example, you can easily implement a basic HTTP client as follows (though using hs.http is recommended for the real world):","Resulting in the following console output (adjust log verbosity with hs.socket.setLogLevel()) :"]},{"l":"Submodules","p":["hs.socket.udp"]},{"l":"API Overview","p":["connect","connected","connections","Constructors- API calls which return an object, typically one that offers API methods","disconnect","Functions- API calls offered directly by the extension","info","listen","Methods- API calls which can only be made on an object returned by a constructor","new","parseAddress","read","receive","send","server","setCallback","setTimeout","startTLS","timeout","Variables- Configurable values","write"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"timeout","p":["Signature","hs.socket.timeout","Type","Variable","Description","Timeout for the socket operations, in seconds.","Notes","New hs.socket objects will be created with this timeout value, but can individually change it with the hs.socket:setTimeout method. If the timeout value is negative, the operations will not use a timeout. The default value is -1."]},{"l":"Functions"},{"l":"parseAddress","p":[": AF_UNSPEC",":---","0","1","10","16","17","18","2","30","6","A table describing the address with the following keys or nil: host - A string containing the host IP. port - A number containing the port. addressFamily - A number containing the address family.","AF_UNIX","Apple Talk AF_ROUTE","backward compatibility AF_INET","CCITT protocols, X.25 etc AF_APPLETALK","Description","description:---","Function","hs.socket.parseAddress(sockaddr) - table or nil","Internal Routing Protocol AF_LINK","internetwork: UDP, TCP, etc. AF_NS","IPv6","Link layer interface AF_INET6","local to host (pipes) AF_LOCAL","Notes","number","Parameters","Parses a binary socket address structure into a readable table.","Returns","Signature","sockaddr- A binary socket address structure, usually obtained from the info method or in hs.socket.udp's read callback.","Some address family definitions from sys/socket.h: address family","Type","unspecified AF_UNIX","XEROX NS protocols AF_CCITT"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.socket.new([fn]) - hs.socket object","Type","Constructor","Description","Creates an unconnected asynchronous TCP socket object.","Parameters","fn- An optional callback function for reading data from the socket, settable here for convenience.","Returns","An hs.socket object.","Notes"]},{"l":"server","p":["Signature","hs.socket.server(port | path [, fn]) - hs.socket object","Type","Constructor","Description","Creates a TCP socket, and binds it to either a port or path (Unix domain socket) for listening.","Parameters","port- A port number [0-65535]. Ports [1-1023] are privileged. Port 0 allows the OS to select any available port. path- A string containing the path to the Unix domain socket. fn- An optional callback function for reading data from the socket, settable here for convenience.","Returns","An hs.socket object.","Notes"]},{"l":"Methods"},{"l":"connect","p":["Signature","hs.socket:connect(host, port | path [, fn]) - self or nil","Type","Method","Description","Connects an unconnected socket.","Parameters","host- A string containing the hostname or IP address. port- A port number [1-65535]. path- A string containing the path to the Unix domain socket. fn- An optional single-use callback function to execute after establishing the connection. The callback receives no parameters.","Returns","The hs.socket object, or nil if an error occurred.","Notes","Either a host/port pair OR a Unix domain socket path must be supplied. If no port is passed, the first parameter is assumed to be a path to the socket file."]},{"l":"connected","p":["Signature","hs.socket:connected() - bool","Type","Method","Description","Returns the connection status of the socket.","Parameters","None","Returns","true if the socket is connected, otherwise false.","Notes","If the socket is bound for listening, this method returns true if there is at least one connection."]},{"l":"connections","p":["Signature","hs.socket:connections() - number","Type","Method","Description","Returns the number of connections to the socket.","Parameters","None","Returns","The number of connections to the socket.","Notes","This method returns at most 1 for default (non-listening) sockets."]},{"l":"disconnect","p":["Signature","hs.socket:disconnect() - self","Type","Method","Description","Disconnects the socket, freeing it for reuse.","Parameters","None","Returns","The hs.socket object.","Notes","If called on a listening socket with multiple connections, each client is disconnected."]},{"l":"info","p":["Signature","hs.socket:info() - table","Type","Method","Description","Returns information about the socket.","Parameters","None","Returns","A table containing the following keys: connectedAddress - string( sockaddr struct) connectedHost - string connectedPort - number connectedURL - string connections - number isConnected - boolean isDisconnected - boolean isIPv4 - boolean isIPv4Enabled - boolean isIPv4PreferredOverIPv6 - boolean isIPv6 - boolean isIPv6Enabled - boolean isSecure - boolean localAddress - string( sockaddr struct) localHost - string localPort - number timeout - number unixSocketPath - string userData - string","Notes"]},{"l":"listen","p":["Signature","hs.socket:listen(port|path) - self or nil","Type","Method","Description","Binds an unconnected socket to either a port or path (Unix domain socket) for listening.","Parameters","port- A port number [0-65535]. Ports [1-1023] are privileged. Port 0 allows the OS to select any available port. path- A string containing the path to the Unix domain socket.","Returns","The hs.socket object, or nil if an error occurred.","Notes"]},{"l":"read","p":["Signature","hs.socket:read(delimiter[, tag]) - self or nil","Type","Method","Description","Read data from the socket.","Parameters","delimiter- Either a number of bytes to read, or a string delimiter such as \"\\n\" or \"\\r\\n\". Data is read up to and including the delimiter. tag- An optional integer to assist with labeling reads. It is passed to the callback to assist with implementing state machines for processing complex protocols.","Returns","The hs.socket object, or nil if an error occurred.","Notes","Results are passed to the socket's callback function, which must be set to use this method. If called on a listening socket with multiple connections, data is read from each of them."]},{"l":"receive","p":["Signature","hs.socket:receive(delimiter[, tag]) - self","Type","Method","Description","Alias for hs.socket:read","Parameters","Returns","Notes"]},{"l":"send","p":["Signature","hs.socket:send(message[, tag]) - self","Type","Method","Description","Alias for hs.socket:write","Parameters","Returns","Notes"]},{"l":"setCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.socket:setCallback([fn]) - self | | Type | Method | | Description | Sets the read callback for the socket. | | Parameters | fn - An optional callback function to process data read from the socket. nil or no argument clears the callback. The callback receives 2 parameters: data - The data read from the socket as a string. tag - The integer tag associated with the read call, which defaults to -1. | | Returns | The hs.socket object. | | Notes | A callback must be set in order to read data from the socket. |"]},{"l":"setTimeout","p":["Signature","hs.socket:setTimeout(timeout) - self","Type","Method","Description","Sets the timeout for the socket operations.","Parameters","timeout- A number containing the timeout duration, in seconds.","Returns","The hs.socket object.","Notes","If the timeout value is negative, the operations will not use a timeout, which is the default."]},{"l":"startTLS","p":["Signature","hs.socket:startTLS([verify][, peerName]) - self","Type","Method","Description","Secures the socket with TLS.","Parameters","verify- An optional boolean that, if false, allows TLS handshaking with servers with self-signed certificates and does not evaluate the chain of trust. Defaults to true and omitted if peerName is supplied peerName- An optional string containing the fully qualified domain name of the peer to validate against — for example, store.apple.com. It should match the name in the X.509 certificate given by the remote party. See the important security note below.","Returns","The hs.socket object.","Notes","The socket will disconnect immediately if TLS negotiation fails. IMPORTANT SECURITY NOTE: The default settings will check to make sure the remote party's certificate is signed by a trusted 3rd party certificate agency (e.g. verisign) and that the certificate is not expired. However it will not verify the name on the certificate unless you give it a name to verify against via peerName. The security implications of this are important to understand. Imagine you are attempting to create a secure connection to MySecureServer.com, but your socket gets directed to MaliciousServer.com because of a hacked DNS server. If you simply use the default settings, and MaliciousServer.com has a valid certificate, the default settings will not detect any problems since the certificate is valid. To properly secure your connection in this particular scenario you should set peerName to \"MySecureServer.com\"."]},{"l":"write","p":["Signature","hs.socket:write(message[, tag, fn]) - self","Type","Method","Description","Write data to the socket.","Parameters","message- A string containing data to be sent on the socket. tag- An optional integer to assist with labeling writes. fn- An optional single-use callback function to execute after writing data to the socket. The callback receives the tag parameter provided here.","Returns","The hs.socket object.","Notes","If called on a listening socket with multiple connections, data is broadcast to all connected sockets."]}],[{"i":"hssocketudp","l":"hs.socket.udp","p":["Talk to custom protocols using asynchronous UDP sockets.","For TCP sockets see hs.socket.","You can do a lot of neat trivial and non-trivial things with these. A simple ping ponger:","Resulting in the following endless exchange:","You can do some silly things with a callback factory and enabling broadcasting:","Since neither IPv4 nor IPv6 have been disabled, the broadcast is received on both protocols ('dual-stack' IPv6 addresses shown):"]},{"l":"API Overview","p":["broadcast","close","closed","connect","connected","Constructors- API calls which return an object, typically one that offers API methods","enableIPv","Functions- API calls offered directly by the extension","info","listen","Methods- API calls which can only be made on an object returned by a constructor","new","parseAddress","pause","preferIPv","read","readOne","receive","receiveOne","reusePort","send","server","setBufferSize","setCallback","setTimeout","timeout","Variables- Configurable values","write"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"timeout","p":["Signature","hs.socket.udp.timeout","Type","Variable","Description","Timeout for the socket operations, in seconds.","Notes","New hs.socket.udp objects will be created with this timeout value, but can individually change it with the hs.socket.udp:setTimeout method. If the timeout value is negative, the operations will not use a timeout. The default value is -1."]},{"l":"Functions"},{"l":"parseAddress","p":["Signature","hs.socket.udp.parseAddress(sockaddr) - table or nil","Type","Function","Description","Alias for hs.socket.parseAddress","Parameters","Returns","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.socket.udp.new([fn]) - hs.socket.udp object","Type","Constructor","Description","Creates an unconnected asynchronous UDP socket object.","Parameters","fn- An optional callback function for reading data from the socket, settable here for convenience.","Returns","An hs.socket.udp object.","Notes"]},{"l":"server","p":["Signature","hs.socket.udp.server(port[, fn]) - hs.socket.udp object","Type","Constructor","Description","Creates a UDP socket, and binds it to a port for listening.","Parameters","port- A port number [0-65535]. Ports [1-1023] are privileged. Port 0 allows the OS to select any available port. fn- An optional callback function for reading data from the socket, settable here for convenience.","Returns","An hs.socket.udp object.","Notes"]},{"l":"Methods"},{"l":"broadcast","p":["Signature","hs.socket.udp:broadcast([flag]) - self or nil","Type","Method","Description","Enables broadcasting on the underlying socket.","Parameters","flag- An optional boolean: true to enable broadcasting, false to disable it. Defaults to true.","Returns","The hs.socket.udp object, or nil if an error occurred.","Notes","By default, the underlying socket in the OS will not allow you to send broadcast messages. In order to send broadcast messages, you need to enable this functionality in the socket. A broadcast is a UDP message to addresses like \"192.168.255.255\" or \"255.255.255.255\" that is delivered to every host on the network. The reason this is generally disabled by default (by the OS) is to prevent accidental broadcast messages from flooding the network."]},{"l":"close","p":["Signature","hs.socket.udp:close() - self","Type","Method","Description","Immediately closes the socket, freeing it for reuse. Any pending send operations are discarded.","Parameters","None","Returns","The hs.socket.udp object.","Notes"]},{"l":"closed","p":["Signature","hs.socket.udp:closed() - bool","Type","Method","Description","Returns the closed status of the socket.","Parameters","None","Returns","true if the socket is closed, otherwise false.","Notes","UDP sockets are typically meant to be connectionless. Sending a packet anywhere, regardless of whether or not the destination receives it, opens the socket until it is explicitly closed. An active listening socket will not be closed, but will not be 'connected' unless the hs.socket.udp:connect method has been called."]},{"l":"connect","p":["Signature","hs.socket.udp:connect(host, port[, fn]) - self or nil","Type","Method","Description","Connects an unconnected socket.","Parameters","host- A string containing the hostname or IP address. port- A port number [1-65535]. fn- An optional single-use callback function to execute after establishing the connection. The callback receives no parameters.","Returns","The hs.socket.udp object, or nil if an error occurred.","Notes","* By design, UDP is a connectionless protocol, and connecting is not needed.* Choosing to connect to a specific host/port has the following effect: You will only be able to send data to the connected host/port; You will only be able to receive data from the connected host/port; You will receive ICMP messages that come from the connected host/port, such as \"connection refused\".* The actual process of connecting a UDP socket does not result in any communication on the socket, it simply changes the internal state of the socket.* You cannot bind a socket for listening after it has been connected.* You can only connect a socket once."]},{"l":"connected","p":["Signature","hs.socket.udp:connected() - bool","Type","Method","Description","Returns the connection status of the socket.","Parameters","None","Returns","true if connected, otherwise false.","Notes","UDP sockets are typically meant to be connectionless. This method will only return true if the hs.socket.udp:connect method has been explicitly called."]},{"l":"enableIPv","p":["Signature","hs.socket.udp:enableIPv(version[, flag]) - self or nil","Type","Method","Description","Enables or disables IPv4 or IPv6 on the underlying socket. By default, both are enabled.","Parameters","version- A number containing the IP version (4 or 6) to enable or disable. flag- A boolean: true to enable the chosen IP version, false to disable it. Defaults to true.","Returns","The hs.socket.udp object, or nil if an error occurred.","Notes","Must be called before binding the socket. If you want to create an IPv6-only server, do something like: hs.socket.udp.new(callback):enableIPv(4, false):listen(port):receive() The convenience constructor hs.socket.server will automatically bind the socket and requires closing and relistening to use this method."]},{"l":"info","p":["Signature","hs.socket.udp:info() - table","Type","Method","Description","Returns information about the socket.","Parameters","None","Returns","A table containing the following keys: connectedAddress - string( sockaddr struct) connectedHost - string connectedPort - number isClosed - boolean isConnected - boolean isIPv4 - boolean isIPv4Enabled - boolean isIPv4Preferred - boolean isIPv6 - boolean isIPv6Enabled - boolean isIPv6Preferred - boolean isIPVersionNeutral - boolean localAddress - string( sockaddr struct) localAddress_IPv4 - string( sockaddr struct) localAddress_IPv6 - string( sockaddr struct) localHost - string localHost_IPv4 - string localHost_IPv6 - string localPort - number localPort_IPv4 - number localPort_IPv6 - number maxReceiveIPv4BufferSize - number maxReceiveIPv6BufferSize - number timeout - number userData - string","Notes"]},{"l":"listen","p":["Signature","hs.socket.udp:listen(port) - self or nil","Type","Method","Description","Binds an unconnected socket to a port for listening.","Parameters","port- A port number [0-65535]. Ports [1-1023] are privileged. Port 0 allows the OS to select any available port.","Returns","The hs.socket.udp object, or nil if an error occurred.","Notes"]},{"l":"pause","p":["Signature","hs.socket.udp:pause() - self","Type","Method","Description","Suspends reading of packets from the socket.","Parameters","None","Returns","The hs.socket.udp object","Notes","Call one of the receive methods to resume."]},{"l":"preferIPv","p":["Signature","hs.socket.udp:preferIPv([version]) - self","Type","Method","Description","Sets the preferred IP version: IPv4, IPv6, or neutral (first to resolve).","Parameters","version- An optional number containing the IP version to prefer. Anything but 4 or 6 else sets the default neutral behavior.","Returns","The hs.socket.udp object.","Notes","If a DNS lookup returns only IPv4 results, the socket will automatically use IPv4. If a DNS lookup returns only IPv6 results, the socket will automatically use IPv6. If a DNS lookup returns both IPv4 and IPv6 results, then the protocol used depends on the configured preference."]},{"l":"read","p":["Signature","hs.socket.udp:read(delimiter[, tag]) - self","Type","Method","Description","Alias for hs.socket.udp:receive","Parameters","Returns","Notes"]},{"l":"readOne","p":["Signature","hs.socket.udp:readOne(delimiter[, tag]) - self","Type","Method","Description","Alias for hs.socket.udp:receiveOne","Parameters","Returns","Notes"]},{"l":"receive","p":["Signature","hs.socket.udp:receive([fn]) - self or nil","Type","Method","Description","Reads packets from the socket as they arrive.","Parameters","fn- Optionally supply the read callback here.","Returns","The hs.socket.udp object, or nil if an error occurred.","Notes","Results are passed to the callback function, which must be set to use this method. There are two modes of operation for receiving packets: one-at-a-time & continuous. In one-at-a-time mode, you call receiveOne every time you are ready process an incoming UDP packet. Receiving packets one-at-a-time may be better suited for implementing certain state machine code where your state machine may not always be ready to process incoming packets. In continuous mode, the callback is invoked immediately every time incoming udp packets are received. Receiving packets continuously is better suited to real-time streaming applications. You may switch back and forth between one-at-a-time mode and continuous mode. If the socket is currently in one-at-a-time mode, calling this method will switch it to continuous mode."]},{"l":"receiveOne","p":["Signature","hs.socket.udp:receiveOne([fn]) - self or nil","Type","Method","Description","Reads a single packet from the socket.","Parameters","fn- Optionally supply the read callback here.","Returns","The hs.socket.udp object, or nil if an error occurred.","Notes","Results are passed to the callback function, which must be set to use this method. There are two modes of operation for receiving packets: one-at-a-time & continuous. In one-at-a-time mode, you call receiveOne every time you are ready process an incoming UDP packet. Receiving packets one-at-a-time may be better suited for implementing certain state machine code where your state machine may not always be ready to process incoming packets. In continuous mode, the callback is invoked immediately every time incoming udp packets are received. Receiving packets continuously is better suited to real-time streaming applications. You may switch back and forth between one-at-a-time mode and continuous mode. If the socket is currently in continuous mode, calling this method will switch it to one-at-a-time mode"]},{"l":"reusePort","p":["Signature","hs.socket.udp:reusePort([flag]) - self or nil","Type","Method","Description","Enables port reuse on the socket.","Parameters","flag- An optional boolean: true to enable port reuse, false to disable it. Defaults to true.","Returns","The hs.socket.udp object, or nil if an error occurred.","Notes","By default, only one socket can be bound to a given IP address & port at a time. To enable multiple processes to simultaneously bind to the same address & port, you need to enable this functionality in the socket. All processes that wish to use the address & port simultaneously must all enable reuse port on the socket bound to that port. Must be called before binding the socket."]},{"l":"send","p":["Signature","hs.socket.udp:send(message[, host, port][, tag, fn]) - self","Type","Method","Description","Sends a packet to the destination address.","Parameters","message- A string containing data to be sent on the socket. host- A string containing the hostname or IP address. port- A port number [1-65535]. tag- An optional integer to assist with labeling writes. fn- An optional single-use callback function to execute after sending the packet. The callback receives the tag parameter provided here.","Returns","The hs.socket.udp object.","Notes","For non-connected sockets, the remote destination is specified for each packet. If the socket has been explicitly connected with connect, only the message parameter and an optional tag and/or write callback can be supplied. Recall that connecting is optional for a UDP socket. For connected sockets, data can only be sent to the connected address."]},{"l":"setBufferSize","p":["Signature","hs.socket.udp:setBufferSize(size[, version]) - self","Type","Method","Description","Sets the maximum size of the buffer that will be allocated for receive operations.","Parameters","size- An number containing the receive buffer size in bytes. version- An optional number containing the IP version for which to set the buffer size. Anything but 4 or 6 else sets the same size for both.","Returns","The hs.socket.udp object.","Notes","The default maximum size is 9216 bytes. The theoretical maximum size of any IPv4 UDP packet is UINT16_MAX = 65535. The theoretical maximum size of any IPv6 UDP packet is UINT32_MAX = 4294967295. Since the OS notifies us of the size of each received UDP packet, the actual allocated buffer size for each packet is exact. In practice the size of UDP packets is generally much smaller than the max. Most protocols will send and receive packets of only a few bytes, or will set a limit on the size of packets to prevent fragmentation in the IP layer. If you set the buffer size too small, the sockets API in the OS will silently discard any extra data."]},{"l":"setCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.socket.udp:setCallback([fn]) - self | | Type | Method | | Description | Sets the read callback for the socket. | | Parameters | fn - An optional callback function to process data read from the socket. nil or no argument clears the callback. The callback receives 2 parameters: data - The data read from the socket as a string. sockaddr - The sending address as a binary socket address structure. See parseAddress. | | Returns | The hs.socket.udp object. | | Notes | A callback must be set in order to read data from the socket. |"]},{"l":"setTimeout","p":["Signature","hs.socket.udp:setTimeout(timeout) - self","Type","Method","Description","Sets the timeout for the socket operations.","Parameters","timeout- A number containing the timeout duration, in seconds.","Returns","The hs.socket.udp object.","Notes","If the timeout value is negative, the operations will not use a timeout, which is the default."]},{"l":"write","p":["Signature","hs.socket.udp:write(message[, tag]) - self","Type","Method","Description","Alias for hs.socket.udp:send","Parameters","Returns","Notes"]}],[{"i":"hssound","l":"hs.sound","p":["Load/play/manipulate sound files"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","currentTime","device","duration","Functions- API calls offered directly by the extension","getAudioEffectNames","getByFile","getByName","isPlaying","loopSound","Methods- API calls which can only be made on an object returned by a constructor","name","pause","play","resume","setCallback","soundFileTypes","soundTypes","stop","stopOnReload","systemSounds","volume"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"getAudioEffectNames","p":["Signature","hs.sound.getAudioEffectNames() - table","Type","Function","Description","Gets a table of installed Audio Units Effect names.","Parameters","None","Returns","A table containing the names of all installed Audio Units Effects.","Notes","Example usage: hs.inspect(hs.audiounit.getAudioEffectNames())"]},{"l":"soundFileTypes","p":["Signature","hs.sound.soundFileTypes() - table","Type","Function","Description","Gets the supported sound file types","Parameters","None","Returns","A table containing the sound file filename extensions that are supported by the system","Notes","This function is unlikely to be tremendously useful, as filename extensions are essentially meaningless. The data returned by hs.sound.soundTypes() is far more valuable"]},{"l":"soundTypes","p":["Signature","hs.sound.soundTypes() - table","Type","Function","Description","Gets the supported UTI sound file formats","Parameters","None","Returns","A table containing the UTI sound formats that are supported by the system","Notes"]},{"l":"systemSounds","p":["Signature","hs.sound.systemSounds() - table","Type","Function","Description","Gets a table of available system sounds","Parameters","None","Returns","A table containing all of the available sound files (i.e. those found in ~/Library/Sounds, /Library/Sounds, /Network/Library/Sounds and /System/Library/Sounds)","Notes","The sounds listed by this function can be loaded using hs.sound.getByName()"]},{"l":"Constructors"},{"l":"getByFile","p":["Signature","hs.sound.getByFile(path) - sound or nil","Type","Constructor","Description","Creates an hs.sound object from a file","Parameters","path - A string containing the path to a sound file","Returns","An hs.sound object or nil if the file could not be loaded","Notes"]},{"l":"getByName","p":["Signature","hs.sound.getByName(name) - sound or nil","Type","Constructor","Description","Creates an hs.sound object from a named sound","Parameters","name - A string containing the name of a sound","Returns","An hs.sound object or nil if no matching sound could be found","Notes","Sounds can only be loaded by name if they are System Sounds (i.e. those found in ~/Library/Sounds, /Library/Sounds, /Network/Library/Sounds and /System/Library/Sounds) or are sound files that have previously been loaded and named"]},{"l":"Methods"},{"l":"currentTime","p":["Signature","hs.sound:currentTime([seekTime]) - soundObject | seconds","Type","Method","Description","Get or set the current seek offset within an hs.sound object.","Parameters","seekTime - An optional number of seconds to seek to within the sound object","Returns","If a parameter is provided, returns the sound object; otherwise returns the current position.","Notes"]},{"l":"device","p":["Signature","hs.sound:device([deviceUID]) - soundObject | UID string","Type","Method","Description","Get or set the playback device to use for an hs.sound object","Parameters","deviceUID - An optional string containing the UID of an hs.audiodevice object to use for playback of this sound. Use an explicit nil to use the system's default device","Returns","If a parameter is provided, returns the sound object; otherwise returns the current setting.","Notes","To obtain the UID of a sound device, see hs.audiodevice:uid()"]},{"l":"duration","p":["Signature","hs.sound:duration() - seconds","Type","Method","Description","Gets the length of an hs.sound object","Parameters","None","Returns","A number containing the length of the sound, in seconds","Notes"]},{"l":"isPlaying","p":["Signature","hs.sound:isPlaying() - bool","Type","Method","Description","Gets the current playback state of an hs.sound object","Parameters","None","Returns","A boolean, true if the sound is currently playing, otherwise false","Notes"]},{"l":"loopSound","p":["Signature","hs.sound:loopSound([loop]) - soundObject | bool","Type","Method","Description","Get or set the looping behaviour of an hs.sound object","Parameters","loop - An optional boolean, true to loop playback, false to not loop","Returns","If a parameter is provided, returns the sound object; otherwise returns the current setting.","Notes","If you have registered a callback function for completion of a sound's playback, it will not be called when the sound loops"]},{"l":"name","p":["Signature","hs.sound:name([soundName]) - soundObject | name string","Type","Method","Description","Get or set the name of an hs.sound object","Parameters","soundName - An optional string to use as the name of the object; use an explicit nil to remove the name","Returns","If a parameter is provided, returns the sound object; otherwise returns the current setting.","Notes","If remove the sound name by specifying nil, the sound will automatically be set to stop when Hammerspoon is reloaded."]},{"l":"pause","p":["Signature","hs.sound:pause() - soundObject | bool","Type","Method","Description","Pauses an hs.sound object","Parameters","None","Returns","The hs.sound object if the command was successful, otherwise false.","Notes"]},{"l":"play","p":["Signature","hs.sound:play() - soundObject | bool","Type","Method","Description","Plays an hs.sound object","Parameters","None","Returns","The hs.sound object if the command was successful, otherwise false.","Notes"]},{"l":"resume","p":["Signature","hs.sound:resume() - soundObject | bool","Type","Method","Description","Resumes playing a paused hs.sound object","Parameters","None","Returns","The hs.sound object if the command was successful, otherwise false.","Notes"]},{"l":"setCallback","p":["Signature","hs.sound:setCallback(function) - soundObject","Type","Method","Description","Set or remove the callback for receiving completion notification for the sound object.","Parameters","function - A function which should be called when the sound completes playing. Specify an explicit nil to remove the callback function.","Returns","the sound object","Notes","the callback function should accept two parameters and return none. The parameters passed to the callback function are: state - a boolean flag indicating if the sound completed playing. Returns true if playback completes properly, or false if a decoding error occurs or if the sound is stopped early with hs.sound:stop. sound - the soundObject userdata"]},{"l":"stop","p":["Signature","hs.sound:stop() - soundObject | bool","Type","Method","Description","Stops playing an hs.sound object","Parameters","None","Returns","The hs.sound object if the command was successful, otherwise false.","Notes"]},{"l":"stopOnReload","p":["Signature","hs.sound:stopOnReload([stopOnReload]) - soundObject | bool","Type","Method","Description","Get or set whether a sound should be stopped when Hammerspoon reloads its configuration","Parameters","stopOnReload - An optional boolean, true to stop playback when Hammerspoon reloads its config, false to continue playback regardless. Defaults to true.","Returns","If a parameter is provided, returns the sound object; otherwise returns the current setting.","Notes","This method can only be used on a named hs.sound object, see hs.sound:name()"]},{"l":"volume","p":["Signature","hs.sound:volume([level]) - soundObject | number","Type","Method","Description","Get or set the playback volume of an hs.sound object","Parameters","level - A number between 0.0 and 1.0, representing the volume of the sound object relative to the current system volume","Returns","If a parameter is provided, returns the sound object; otherwise returns the current value.","Notes"]}],[{"i":"hsspaces","l":"hs.spaces","p":["This module provides some basic functions for controlling macOS Spaces.","The functionality provided by this module is considered experimental and subject to change. By using a combination of private APIs and Accessibility hacks (via hs.axuielement), some basic functions for controlling the use of Spaces is possible with Hammerspoon, but there are some limitations and caveats.","It should be noted that while the functions provided by this module have worked for some time in third party applications and in a previous experimental module that has received limited testing over the last few years, they do utilize some private APIs which means that Apple could change them at any time.","The functions which allow you to create new spaes, remove spaces, and jump to a specific space utilize hs.axuielement and perform accessibility actions through the Dock application to manipulate Mission Control. Because we are essentially directing the Dock to perform User Interactions, there is some visual feedback which we cannot entirely suppress. You can minimize, but not entirely remove, this by enabling \"Reduce motion\" in System Preferences -> Accessibility -> Display.","It is recommended that you also enable \"Displays have separate Spaces\" in System Preferences -> Mission Control.","This module is a distillation of my previous hs._asm.undocumented.spaces module, changes inspired by reviewing the Yabai source, and some experimentation with hs.axuielement. If you require more sophisticated control, I encourage you to check out https://github.com/koekeishiya/yabai-- it does require some additional setup (changes to SIP, possibly edits to sudoers, etc.) but may be worth the extra steps for some power users."]},{"l":"Submodules","p":["hs.spaces.watcher"]},{"l":"API Overview","p":["activeSpaceOnScreen","activeSpaces","addSpaceToScreen","allSpaces","closeMissionControl","data_managedDisplaySpaces","data_missionControlAXUIElementData","focusedSpace","Functions- API calls offered directly by the extension","gotoSpace","MCwaitTime","missionControlSpaceNames","moveWindowToSpace","openMissionControl","removeSpace","screensHaveSeparateSpaces","setDefaultMCwaitTime","spaceDisplay","spacesForScreen","spaceType","toggleAppExpose","toggleLaunchPad","toggleMissionControl","toggleShowDesktop","Variables- Configurable values","windowsForSpace","windowSpaces"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"MCwaitTime","p":["Signature","hs.spaces.MCwaitTime","Type","Variable","Description","Specifies how long to delay before performing the accessibility actions for hs.spaces.gotoSpace and hs.spaces.removeSpace","Notes","The above mentioned functions require that the Mission Control accessibility objects be fully formed before the necessary action can be triggered. This variable specifies how long to delay before performing the action to complete the function. Experimentation on my machine has found that 0.3 seconds provides sufficient time for reliable functionality. If you find that the above mentioned functions do not work reliably with your setup, you can try adjusting this variable upwards -- the down side is that the larger this value is, the longer the Mission Control display is visible before returning the user to what they were working on. Once you have found a value that works reliably on your system, you can use hs.spaces.setDefaultMCwaitTime to make it the default value for your system each time the hs.spaces module is loaded."]},{"l":"Functions"},{"l":"activeSpaceOnScreen","p":["Signature","hs.spaces.activeSpaceOnScreen([screen]) - integer | nil, error","Type","Function","Description","Returns the currently visible (active) space for the specified screen.","Parameters","screen- an optional screen specification identifying the screen to return the active space for. The screen may be specified by its ID ( hs.screen:id()), its UUID ( hs.screen:getUUID()), the string \"Main\" (a shortcut for hs.screen.mainScreen()), the string \"Primary\" (a shortcut for hs.screen.primaryScreen()), or as an hs.screen object. If no screen is specified, the screen returned by hs.screen.mainScreen() is used.","Returns","an integer specifying the ID of the space displayed, or nil and an error message if an error occurs.","Notes"]},{"l":"activeSpaces","p":["Signature","hs.spaces.activeSpaces() - table | nil, error","Type","Function","Description","Returns a key-value table specifying the active spaces for all screens.","Parameters","None","Returns","a key-value table in which the keys are the UUIDs for the current screens and the value for each key is the space ID of the active space for that display.","Notes","the table returned has its __ tostring metamethod set to hs.inspect to simplify inspecting the results when using the Hammerspoon Console."]},{"l":"addSpaceToScreen","p":["Signature","hs.spaces.addSpaceToScreen([screen], [closeMC]) - true | nil, errMsg","Type","Function","Description","Adds a new space on the specified screen","Parameters","screen- an optional screen specification identifying the screen to create the new space on. The screen may be specified by its ID ( hs.screen:id()), its UUID ( hs.screen:getUUID()), the string \"Main\" (a shortcut for hs.screen.mainScreen()), the string \"Primary\" (a shortcut for hs.screen.primaryScreen()), or as an hs.screen object. If no screen is specified, the screen returned by hs.screen.mainScreen() is used. closeMC- an optional boolean, default true, specifying whether or not the Mission Control display should be closed after adding the new space.","Returns","true on success; otherwise return nil and an error message","Notes","This function creates a new space by opening up the Mission Control display and then programmatically invoking the button to add a new space. This is unavoidable. You can minimize, but not entirely remove, the visual shift to the Mission Control display by by enabling \"Reduce motion\" in System Preferences -> Accessibility -> Display. If you intend to perform multiple actions which require the Mission Control display (( hs.spaces.missionControlSpaceNames, hs.spaces.addSpaceToScreen, hs.spaces.removeSpace, or hs.spaces.gotoSpace), you can pass in false as the final argument to prevent the automatic closure of the Mission Control display -- this will reduce the visual side-affects to one transition instead of many."]},{"l":"allSpaces","p":["Signature","hs.spaces.allSpaces() - table | nil, error","Type","Function","Description","Returns a Kay-Value table containing the IDs of all spaces for all screens.","Parameters","None","Returns","a key-value table in which the keys are the UUIDs for the current screens and the value for each key is a table of space IDs corresponding to the spaces for that screen. Returns nil and an error message if an error occurs.","Notes","the table returned has its __ tostring metamethod set to hs.inspect to simplify inspecting the results when using the Hammerspoon Console."]},{"l":"closeMissionControl","p":["Signature","hs.spaces.closeMissionControl() - None","Type","Function","Description","Opens the Mission Control display","Parameters","None","Returns","Notes","Does nothing if the Mission Control display is not currently visible. This function uses Accessibility features provided by the Dock to close Mission Control and is used internally when performing the hs.spaces.gotoSpace, hs.spaces.addSpaceToScreen, and hs.spaces.removeSpace functions. It is possible to invoke the above mentioned functions and prevent them from auto-closing Mission Control -- this may be useful if you wish to perform multiple actions and want to minimize the visual side-effects. You can then use this function when you are done."]},{"l":"data_managedDisplaySpaces","p":["Signature","hs.spaces.data_managedDisplaySpaces() - table | nil, error","Type","Function","Description","Returns a table containing information about the managed display spaces","Parameters","None","Returns","a table containing information about all of the displays and spaces managed by the OS.","Notes","the format and detail of this table is too complex and varied to describe here; suffice it to say this is the workhorse for this module and a careful examination of this table may be informative, but is not required in the normal course of using this module."]},{"l":"data_missionControlAXUIElementData","p":["Signature","hs.spaces.data_missionControlAXUIElementData(callback) - None","Type","Function","Description","Generate a table containing the results of hs.axuielement.buildTree on the Mission Control Accessibility group of the Dock.","Parameters","callback- a callback function that should expect a table as the results. The table will be formatted as described in the documentation for hs.axuielement.buildTree.","Returns","None","Notes","Like hs.spaces.data_managedDisplaySpaces, this function is not required for general usage of this module; rather it is provided for those who wish to examine the internal data that makes this module possible more closely to see if there might be other information or functionality that they would like to explore. Getting Accessibility elements for Mission Control is somewhat tricky -- they only exist when the Mission Control display is visible, which is the exact time that you can't examine them. What this function does is trigger Mission Control and then builds a tree of the elements, capturing all of the properties and property values while the elements are valid, closes Mission Control, and then returns the results in a table by invoking the provided callback function. Note that the hs.axuielement objects within the table returned will be invalid by the time you can examine them -- this is why the attributes and values will also be contained in the resulting tree. Example usage: hs.spaces.data_missionControlAXUIElementData(function(results) hs.console.clearConsole() ; print(hs.inspect(results)) end)"]},{"l":"focusedSpace","p":["Signature","hs.spaces.focusedSpace() - integer","Type","Function","Description","Returns the space ID of the currently focused space","Parameters","None","Returns","the space ID for the currently focused space. The focused space is the currently active space on the currently active screen (i.e. that the user is working on)","Notes","usually the currently active screen will be returned by hs.screen.mainScreen(); however some full screen applications may have focus without updating which screen is considered \"main\". You can use this function, and look up the screen UUID with hs.spaces.spaceDisplay to determine the \"true\" focused screen if required."]},{"l":"gotoSpace","p":["Signature","hs.spaces.gotoSpace(spaceID) - true | nil, errMsg","Type","Function","Description","Change to the specified space.","Parameters","spaceID- an integer specifying the ID of the space","Returns","true if the space change was initiated, or nil and an error message if there is an error trying to switch spaces.","Notes","This function changes to a space by opening up the Mission Control display and then programmatically invoking the button to activate the space. This is unavoidable. You can minimize, but not entirely remove, the visual shift to the Mission Control display by by enabling \"Reduce motion\" in System Preferences -> Accessibility -> Display. The action of changing to a new space automatically closes the Mission Control display, so unlike ( hs.spaces.missionControlSpaceNames, hs.spaces.addSpaceToScreen, and hs.spaces.removeSpace, there is no flag you can specify to leave Mission Control visible. When possible, you should generally invoke this function last if you are performing multiple actions and want to minimize the amount of time the Mission Control display is visible and reduce the visual side affects. The Accessibility elements required to change to a space are not created until the Mission Control display is fully visible. Because of this, there is a built in delay when invoking this function that can be adjusted by changing the value of hs.spaces.MCwaitTime."]},{"l":"missionControlSpaceNames","p":["Signature","hs.spaces.missionControlSpaceNames([closeMC]) - table | nil, error","Type","Function","Description","Returns a table containing the space names as they appear in Mission Control associated with their space ID. This is provided for informational purposes only -- all of the functions of this module use the spaceID to insure accuracy.","Parameters","closeMC- an optional boolean, default true, specifying whether or not the Mission Control display should be closed after adding the new space.","Returns","a key-value table in which the keys are the UUIDs for each screen and the value is a key-value table where the screen ID is the key and the Mission Control name of the space is the value.","Notes","the table returned has its __ tostring metamethod set to hs.inspect to simplify inspecting the results when using the Hammerspoon Console. This function works by opening up the Mission Control display and then grabbing the names from the Accessibility elements created. This is unavoidable. You can minimize, but not entirely remove, the visual shift to the Mission Control display by by enabling \"Reduce motion\" in System Preferences -> Accessibility -> Display. If you intend to perform multiple actions which require the Mission Control display ( hs.spaces.missionControlSpaceNames, hs.spaces.addSpaceToScreen, hs.spaces.removeSpace, or hs.spaces.gotoSpace), you can pass in false as the final argument to prevent the automatic closure of the Mission Control display -- this will reduce the visual side-affects to one transition instead of many. This function attempts to use the localization strings for the Dock application to properly determine the Mission Control names. If you find that it doesn't provide the correct values for your system, please provide the following information when submitting an issue: the desktop or application name(s) as they appear at the top of the Mission Control screen when you invoke it manually (or with hs.spaces.toggleMissionControl() entered into the Hammerspoon console). the output from the following commands, issued in the Hammerspoon console: hs.host.operatingSystemVersionString() hs.host.locale.current() hs.inspect(hs.host.locale.preferredLanguages()) hs.inspect(hs.host.locale.details()) hs.spaces.screensHaveSeparateSpaces()"]},{"l":"moveWindowToSpace","p":["Signature","hs.spaces.moveWindowToSpace(window, spaceID[, force]) - true | nil, error","Type","Function","Description","Moves the window with the specified windowID to the space specified by spaceID.","Parameters","window- an integer specifying the ID of the window, or an hs.window object spaceID- an integer specifying the ID of the space force- an optional boolean specifying whether the window should be tried to move even if the spaces aren't compatible","Returns","true if the window was moved; otherwise nil and an error message.","Notes","a window can only be moved from a user space to another user space -- you cannot move the window of a full screen (or tiled) application to another space. you also cannot move a window to the same space as a full screen application unless force is set to true and even then it works for floating windows only."]},{"l":"openMissionControl","p":["Signature","hs.spaces.openMissionControl() - None","Type","Function","Description","Opens the Mission Control display","Parameters","None","Returns","Notes","Does nothing if the Mission Control display is already visible. This function uses Accessibility features provided by the Dock to open up Mission Control and is used internally when performing the hs.spaces.gotoSpace, hs.spaces.addSpaceToScreen, and hs.spaces.removeSpace functions. It is unlikely you will need to invoke this by hand, and the public interface to this function may go away in the future."]},{"l":"removeSpace","p":["Signature","hs.spaces.removeSpace(spaceID, [closeMC]) - true | nil, errMsg","Type","Function","Description","Removes the specified space.","Parameters","spaceID- an integer specifying the ID of the space closeMC- an optional boolean, default true, specifying whether or not the Mission Control display should be closed after removing the space.","Returns","true if the space removal was initiated, or nil and an error message if there is an error trying to remove the space.","Notes","You cannot remove a currently active space -- move to another one first with hs.spaces.gotoSpace. If a screen has only one user space (i.e. not a full screen application window or tiled set), it cannot be removed. This function removes a space by opening up the Mission Control display and then programmatically invoking the button to remove the specified space. This is unavoidable. You can minimize, but not entirely remove, the visual shift to the Mission Control display by by enabling \"Reduce motion\" in System Preferences -> Accessibility -> Display. If you intend to perform multiple actions which require the Mission Control display (( hs.spaces.missionControlSpaceNames, hs.spaces.addSpaceToScreen, hs.spaces.removeSpace, or hs.spaces.gotoSpace), you can pass in false as the final argument to prevent the automatic closure of the Mission Control display -- this will reduce the visual side-affects to one transition instead of many. The Accessibility elements required to change to a space are not created until the Mission Control display is fully visible. Because of this, there is a built in delay when invoking this function that can be adjusted by changing the value of hs.spaces.MCwaitTime."]},{"l":"screensHaveSeparateSpaces","p":["Signature","hs.spaces.screensHaveSeparateSpaces() - bool","Type","Function","Description","Determine if the user has enabled the \"Displays Have Separate Spaces\" option within Mission Control.","Parameters","None","Returns","true or false representing the status of the \"Displays Have Separate Spaces\" option within Mission Control.","Notes"]},{"l":"setDefaultMCwaitTime","p":["Signature","hs.spaces.setDefaultMCwaitTime([time]) - None","Type","Function","Description","Sets the initial value for hs.spaces.MCwaitTime to be set to when this module first loads.","Parameters","time- an optional number greater than 0 specifying the initial default for hs.spaces.MCwaitTime. If you do not specify a value, then the current value of hs.spaces.MCwaitTime is used.","Returns","None","Notes","this function uses the hs.settings module to store the default time in the key \"hs_spaces_MCwaitTime\"."]},{"l":"spaceDisplay","p":["Signature","hs.spaces.spaceDisplay(spaceID) - string | nil, error","Type","Function","Description","Returns the screen UUID for the screen that the specified space is on.","Parameters","spaceID- an integer specifying the ID of the space","Returns","a string specifying the UUID of the display the space is on, or nil and error message if an error occurs.","Notes","the space does not have to be currently active (visible) to determine which screen the space belongs to."]},{"l":"spacesForScreen","p":["Signature","hs.spaces.spacesForScreen([screen]) - table | nil, error","Type","Function","Description","Returns a table containing the IDs of the spaces for the specified screen in their current order.","Parameters","screen- an optional screen specification identifying the screen to return the space array for. The screen may be specified by its ID ( hs.screen:id()), its UUID ( hs.screen:getUUID()), the string \"Main\" (a shortcut for hs.screen.mainScreen()), the string \"Primary\" (a shortcut for hs.screen.primaryScreen()), or as an hs.screen object. If no screen is specified, the screen returned by hs.screen.mainScreen() is used.","Returns","a table containing space IDs for the spaces for the screen, or nil and an error message if there is an error.","Notes","the table returned has its __ tostring metamethod set to hs.inspect to simplify inspecting the results when using the Hammerspoon Console."]},{"l":"spaceType","p":["Signature","hs.spaces.spaceType(spaceID) - string | nil, error","Type","Function","Description","Returns a string indicating whether the space is a user space or a full screen/tiled application space.","Parameters","spaceID- an integer specifying the ID of the space","Returns","the string \"user\" if the space is a regular user space, or \"fullscreen\" if the space is a fullscreen or tiled window pair. Returns nil and an error message if the space does not refer to a valid managed space.","Notes"]},{"l":"toggleAppExpose","p":["Signature","hs.spaces.toggleAppExpose() - None","Type","Function","Description","Toggles the current applications Exposé display","Parameters","None","Returns","Notes","this is the same functionality as provided by the System Preferences -> Mission Control -> Hot Corners... -> Application Windows setting or the App Exposé trackpad swipe gesture (3 or 4 fingers down)."]},{"l":"toggleLaunchPad","p":["Signature","hs.spaces.toggleLaunchPad() - None","Type","Function","Description","Toggles the Launch Pad display.","Parameters","None","Returns","Notes","this is the same functionality as provided by the System Preferences -> Mission Control -> Hot Corners... -> Launch Pad setting, the Launch Pad touchbar icon, or the Launch Pad trackpad swipe gesture (Pinch with thumb and three fingers)."]},{"l":"toggleMissionControl","p":["Signature","hs.spaces.toggleMissionControl() - None","Type","Function","Description","Toggles the Mission Control display","Parameters","None","Returns","Notes","this is the same functionality as provided by the System Preferences -> Mission Control -> Hot Corners... -> Mission Control setting, the Mission Control touchbar icon, or the Mission Control trackpad swipe gesture (3 or 4 fingers up)."]},{"l":"toggleShowDesktop","p":["Signature","hs.spaces.toggleShowDesktop() - None","Type","Function","Description","Toggles moving all windows on/off screen to display the desktop underneath.","Parameters","None","Returns","Notes","this is the same functionality as provided by the System Preferences -> Mission Control -> Hot Corners... -> Desktop setting, the Show Desktop touchbar icon, or the Show Desktop trackpad swipe gesture (Spread with thumb and three fingers)."]},{"l":"windowsForSpace","p":["Signature","hs.spaces.windowsForSpace(spaceID) - table | nil, error","Type","Function","Description","Returns a table containing the window IDs of all windows on the specified space","Parameters","spaceID- an integer specifying the ID of the space","Returns","a table containing the window IDs for all windows on the specified space","Notes","the table returned has its __ tostring metamethod set to hs.inspect to simplify inspecting the results when using the Hammerspoon Console. The list of windows includes all items which are considered \"windows\" by macOS -- this includes visual elements usually considered unimportant like overlays, tooltips, graphics, off-screen windows, etc. so expect a lot of false positives in the results. In addition, due to the way Accessibility objects work, only those window IDs that are present on the currently visible spaces will be finable with hs.window or exist within hs.window.allWindows(). This function will prune Hammerspoon canvas elements from the list because we \"own\" these and can identify their window ID's programmatically. This does not help with other applications, however. Reviewing how third-party applications have generally pruned this list, I believe it will be necessary to use hs.window.filter to prune the list and access hs.window objects that are on the non-visible spaces. as hs.window.filter is scheduled to undergo a re-write soon to (hopefully) dramatically speed it up, I am providing this function as is at present for those who wish to experiment with it; however, I hope to make it more useful in the coming months and the contents may change in the future (the format won't, but hopefully the useless extras will disappear requiring less pruning logic on your end)."]},{"l":"windowSpaces","p":["Signature","hs.spaces.windowSpaces(window) - table | nil, error","Type","Function","Description","Returns a table containing the space IDs for all spaces that the specified window is on.","Parameters","window- an integer specifying the ID of the window, or an hs.window object","Returns","a table containing the space IDs of all spaces the window is on, or nil and an error message if an error occurs.","Notes","the table returned has its __ tostring metamethod set to hs.inspect to simplify inspecting the results when using the Hammerspoon Console. If the window ID does not specify a valid window, then an empty array will be returned. For most windows, this will be a single element table; however some applications may create \"sticky\" windows that may appear on more than one space. For example, the container windows for hs.canvas objects which have the canJoinAllSpaces behavior set will appear on all spaces and the table returned by this function will contain all spaceIDs for the screen which displays the canvas."]}],[{"i":"hsspaceswatcher","l":"hs.spaces.watcher","p":["Watches for the current Space being changed NOTE: This extension determines the number of a Space, using OS X APIs that have been deprecated since 10.8 and will likely be removed in a future release. You should not depend on Space numbers being around forever!"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","hs.spaces.watcher.new(handler) - watcher","Type","Constructor","Description","Creates a new watcher for Space change events","Parameters","handler - A function to be called when the active Space changes. It should accept one argument, which will be the number of the new Space (or -1 if the number cannot be determined)","Returns","An hs.spaces.watcher object","Notes"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.spaces.watcher:start()","Type","Method","Description","Starts the Spaces watcher","Parameters","None","Returns","The watcher object","Notes"]},{"l":"stop","p":["Signature","hs.spaces.watcher:stop()","Type","Method","Description","Stops the Spaces watcher","Parameters","None","Returns","The watcher object","Notes"]}],[{"i":"hsspeech","l":"hs.speech","p":["This module provides access to the Speech Synthesizer component of OS X.","The speech synthesizer functions and methods provide access to OS X's Text-To-Speech capabilities and facilitates generating speech output both to the currently active audio device and to an AIFF file.","A discussion concerning the embedding of commands into the text to be spoken can be found at https://developer.apple.com/library/mac/documentation/UserExperience/Conceptual/SpeechSynthesisProgrammingGuide/FineTuning/FineTuning.html#//apple_ref/doc/uid/TP40004365-CH5-SW6. It is somewhat dated and specific to the older MacinTalk style voices, but still contains some information relevant to the more modern higher quality voices as well in its discussion about embedded commands."]},{"l":"Submodules","p":["hs.speech.listener"]},{"l":"API Overview","p":["attributesForVoice","availableVoices","Constructors- API calls which return an object, typically one that offers API methods","continue","defaultVoice","Functions- API calls offered directly by the extension","isAnyApplicationSpeaking","isPaused","isSpeaking","Methods- API calls which can only be made on an object returned by a constructor","modulation","new","pause","phonemes","phoneticSymbols","pitch","rate","reset","setCallback","speak","speaking","speakToFile","stop","usesFeedbackWindow","voice","volume"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"attributesForVoice","p":["Signature","hs.speech.attributesForVoice(voice) - table","Type","Function","Description","Returns a table containing a variety of properties describing and defining the specified voice.","Parameters","voice - the name of the voice to look up attributes for","Returns","a table containing key-value pairs which describe the voice specified. These attributes may include (but is not limited to) information about specific characters recognized, sample text, gender, etc.","Notes","All of the names that have been encountered thus far follow this pattern for their full name: com.apple.speech.synthesis.voice.*name*. You can provide this suffix or not as you prefer when specifying a voice name."]},{"l":"availableVoices","p":["Signature","hs.speech.availableVoices([full]) - array","Type","Function","Description","Returns a list of the currently installed voices for speech synthesis.","Parameters","full - an optional boolean flag indicating whether or not the full internal names should be returned, or if the shorter versions should be returned. Defaults to false.","Returns","an array of the available voice names.","Notes","All of the names that have been encountered thus far follow this pattern for their full name: com.apple.speech.synthesis.voice.*name*. This prefix is normally suppressed unless you pass in true."]},{"l":"defaultVoice","p":["Signature","hs.speech.defaultVoice([full]) - string","Type","Function","Description","Returns the name of the currently selected default voice for the user. This voice is the voice selected in the System Preferences for Dictation & Speech as the System Voice.","Parameters","full - an optional boolean flag indicating whether or not the full internal name should be returned, or if the shorter version should be returned. Defaults to false.","Returns","the name of the system voice.","Notes","All of the names that have been encountered thus far follow this pattern for their full name: com.apple.speech.synthesis.voice.*name*. This prefix is normally suppressed unless you pass in true."]},{"l":"isAnyApplicationSpeaking","p":["Signature","hs.speech.isAnyApplicationSpeaking() - boolean","Type","Function","Description","Returns whether or not the system is currently using a speech synthesizer in any application to generate speech.","Parameters","None","Returns","a boolean value indicating whether or not any application is currently generating speech with a synthesizer.","Notes","See also hs.speech:speaking."]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.speech.new([voice]) - synthesizerObject","Type","Constructor","Description","Creates a new speech synthesizer object for use by Hammerspoon.","Parameters","voice - an optional string specifying the voice the synthesizer should use for generating speech. Defaults to the system voice.","Returns","a speech synthesizer object or nil, if the system was unable to create a new synthesizer.","Notes","All of the names that have been encountered thus far follow this pattern for their full name: com.apple.speech.synthesis.voice.*name*. You can provide this suffix or not as you prefer when specifying a voice name. You can change the voice later with the hs.speech:voice method."]},{"l":"Methods"},{"l":"continue","p":["Signature","hs.speech:continue() - synthesizerObject","Type","Method","Description","Resumes a paused speech synthesizer.","Parameters","None","Returns","the synthesizer object","Notes"]},{"l":"isPaused","p":["Signature","hs.speech:isPaused() - boolean | nil","Type","Method","Description","Returns whether or not the synthesizer is currently paused.","Parameters","None","Returns","True or false indicating whether or not the synthesizer is currently paused. If there is an error, returns nil.","Notes","If an error occurs retrieving this value, the details will be logged in the system logs which can be viewed with the Console application. You can also have such messages logged to the Hammerspoon console by setting the module's log level to at least Information (This can be done with the following, or similar, command: hs.speech.log.level = 3. See hs.logger for more information)"]},{"l":"isSpeaking","p":["Signature","hs.speech:isSpeaking() - boolean | nil","Type","Method","Description","Returns whether or not the synthesizer is currently speaking, either to an audio device or to a file.","Parameters","None","Returns","True or false indicating whether or not the synthesizer is currently producing speech. If there is an error, returns nil.","Notes","If an error occurs retrieving this value, the details will be logged in the system logs which can be viewed with the Console application. You can also have such messages logged to the Hammerspoon console by setting the module's log level to at least Information (This can be done with the following, or similar, command: hs.speech.log.level = 3. See hs.logger for more information)"]},{"l":"modulation","p":["Signature","hs.speech:modulation([modulation]) - synthesizerObject | modulation | nil","Type","Method","Description","Gets or sets the pitch modulation for the synthesizer's voice.","Parameters","modulation - an optional number indicating the pitch modulation for the synthesizer.","Returns","If no parameter is provided, returns the current value; otherwise returns the synthesizer object. Returns nil if an error occurs.","Notes","Pitch modulation is expressed as a floating-point value in the range of 0.000 to 127.000. These values correspond to MIDI note values, where 60.000 is equal to middle C on a piano scale. The most useful speech pitches fall in the range of 40.000 to 55.000. A pitch modulation value of 0.000 corresponds to a monotone in which all speech is generated at the frequency corresponding to the speech pitch. Given a speech pitch value of 46.000, a pitch modulation of 2.000 would mean that the widest possible range of pitches corresponding to the actual frequency of generated text would be 44.000 to 48.000. If an error occurs retrieving or setting this value, the details will be logged in the system logs which can be viewed with the Console application. You can also have such messages logged to the Hammerspoon console by setting the module's log level to at least Information (This can be done with the following, or similar, command: hs.speech.log.level = 3. See hs.logger for more information)"]},{"l":"pause","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.speech:pause([where]) - synthesizerObject | | Type | Method | | Description | Pauses the output of the speech synthesizer. | | Parameters | where - an optional string indicating when to pause the audio output (defaults to \"immediate\"). The string can be one of the following: \"immediate\" - pauses output immediately. If in the middle of a word, when speech is resumed, the word will be repeated. \"word\" - pauses at the end of the current word. \"sentence\" - pauses at the end of the current sentence. | | Returns | the synthesizer object | | Notes | |"]},{"l":"phonemes","p":["Signature","hs.speech:phonemes(text) - string","Type","Method","Description","Returns the phonemes which would be spoken if the text were to be synthesized.","Parameters","text - the text to tokenize into phonemes.","Returns","the text converted into the series of phonemes the synthesizer would use for the provided text if it were to be synthesized.","Notes","This method only returns a phonetic representation of the text if a Macintalk voice has been selected. The more modern higher quality voices do not use a phonetic representation and an empty string will be returned if this method is used. You can modify the phonetic representation and feed it into hs.speech:speak if you find that the default interpretation is not correct. You will need to set the input mode to Phonetic by prefixing the text with \"[[inpt PHON]]\". The specific phonetic symbols recognized by a given voice can be queried by examining the array returned by hs.speech:phoneticSymbols after setting an appropriate voice."]},{"l":"phoneticSymbols","p":["Signature","hs.speech:phoneticSymbols() - array | nil","Type","Method","Description","Returns an array of the phonetic symbols recognized by the synthesizer for the current voice.","Parameters","None","Returns","For MacinTalk voices, this method will return an array of the recognized symbols for the currently selected voice. For the modern higher quality voices, or if an error occurs, returns nil.","Notes","Each entry in the array of phonemes returned will contain the following keys: Symbol - The textual representation of this phoneme when returned by hs.speech:phonemes or that you should use for this sound when crafting a phonetic string yourself. Opcode - The numeric opcode passed to the callback for the \"willSpeakPhoneme\" message corresponding to this phoneme. Example - An example word which contains the sound the phoneme represents HiliteEnd - The character position in the Example where this phoneme's sound begins HiliteStart - The character position in the Example where this phoneme's sound ends Only the older, MacinTalk style voices support phonetic text. The more modern, higher quality voices are not rendered phonetically and will return nil for this method. If an error occurs retrieving this value, the details will be logged in the system logs which can be viewed with the Console application. You can also have such messages logged to the Hammerspoon console by setting the module's log level to at least Information (This can be done with the following, or similar, command: hs.speech.log.level = 3. See hs.logger for more information)"]},{"l":"pitch","p":["Signature","hs.speech:pitch([pitch]) - synthesizerObject | pitch | nil","Type","Method","Description","Gets or sets the base pitch for the synthesizer's voice.","Parameters","pitch - an optional number indicating the pitch base for the synthesizer.","Returns","If no parameter is provided, returns the current value; otherwise returns the synthesizer object. Returns nil if an error occurs.","Notes","Typical voice frequencies range from around 90 hertz for a low-pitched male voice to perhaps 300 hertz for a high-pitched child’s voice. These frequencies correspond to approximate pitch values in the ranges of 30.000 to 40.000 and 55.000 to 65.000, respectively. If an error occurs retrieving or setting this value, the details will be logged in the system logs which can be viewed with the Console application. You can also have such messages logged to the Hammerspoon console by setting the module's log level to at least Information (This can be done with the following, or similar, command: hs.speech.log.level = 3. See hs.logger for more information)"]},{"l":"rate","p":["Signature","hs.speech:rate([rate]) - synthesizerObject | rate","Type","Method","Description","Gets or sets the synthesizers speaking rate (words per minute).","Parameters","rate - an optional number indicating the speaking rate for the synthesizer.","Returns","If no parameter is provided, returns the current value; otherwise returns the synthesizer object.","Notes","The range of supported rates is not predefined by the Speech Synthesis framework; but the synthesizer may only respond to a limited range of speech rates. Average human speech occurs at a rate of 180.0 to 220.0 words per minute."]},{"l":"reset","p":["Signature","hs.speech:reset() - synthesizerObject | nil","Type","Method","Description","Reset a synthesizer back to its default state.","Parameters","None","Returns","Returns the synthesizer object. Returns nil if an error occurs.","Notes","This method will reset a synthesizer to its default state, including pitch, modulation, volume, rate, etc. The changes go into effect immediately, if queried, but will not affect a synthesis in progress. If an error occurs retrieving or setting this value, the details will be logged in the system logs which can be viewed with the Console application. You can also have such messages logged to the Hammerspoon console by setting the module's log level to at least Information (This can be done with the following, or similar, command: hs.speech.log.level = 3. See hs.logger for more information)"]},{"l":"setCallback","p":["Signature","hs.speech:setCallback(fn) - synthesizerObject","Type","Method","Description","Sets or removes a callback function for the synthesizer.","Parameters","fn - a function to set as the callback for this speech synthesizer. If the value provided is nil, any currently existing callback function is removed.","Returns","the synthesizer object","Notes","The callback function should expect between 3 and 5 arguments and should not return anything. The first two arguments will always be the synthesizer object itself and a string indicating the activity which has caused the callback. The value of this string also dictates the remaining arguments as follows:\"willSpeakWord\" - Sent just before a synthesized word is spoken through the sound output device. provides 3 additional arguments: startIndex, endIndex, and the full text being spoken. startIndex and endIndex can be used as string.sub(text, startIndex, endIndex) to get the specific word being spoken.\"willSpeakPhoneme\" - Sent just before a synthesized phoneme is spoken through the sound output device. provides 1 additional argument: the opcode of the phoneme about to be spoken. this callback message will only occur when using Macintalk voices; modern higher quality voices are not phonetically based and will not generate this message. the opcode can be tied to a specific phoneme by looking it up in the table returned by hs.speech:phoneticSymbols.\"didEncounterError\" - Sent when the speech synthesizer encounters an error in text being synthesized. provides 3 additional arguments: the index in the original text where the error occurred, the text being spoken, and an error message. Special Note: I have never been able to trigger this callback message, even with malformed embedded command sequences, so... looking for validation of the code or fixes. File an issue if you have suggestions.\"didEncounterSync\" - Sent when the speech synthesizer encounters an embedded synchronization command. provides 1 additional argument: the synchronization number provided in the text. A synchronization number can be embedded in text to be spoken by including [[sync #]] in the text where you wish the callback to occur. The number is limited to 32 bits and can be presented as a base 10 or base 16 number (prefix with 0x).\"didFinish\" - Sent when the speech synthesizer finishes speaking through the sound output device. provides 1 additional argument: a boolean flag indicating whether or not the synthesizer finished because synthesis is complete (true) or was stopped early with hs.speech:stop(false)."]},{"l":"speak","p":["Signature","hs.speech:speak(textToSpeak) - synthesizerObject","Type","Method","Description","Starts speaking the provided text through the system's current audio device.","Parameters","textToSpeak - the text to speak with the synthesizer.","Returns","the synthesizer object","Notes"]},{"l":"speaking","p":["Signature","hs.speech:speaking() - boolean","Type","Method","Description","Returns whether or not this synthesizer is currently generating speech.","Parameters","None","Returns","A boolean value indicating whether or not this synthesizer is currently generating speech.","Notes","See also hs.speech.isAnyApplicationSpeaking."]},{"l":"speakToFile","p":["Signature","hs.speech:speakToFile(textToSpeak, destination) - synthesizerObject","Type","Method","Description","Starts speaking the provided text and saves the audio as an AIFF file.","Parameters","textToSpeak - the text to speak with the synthesizer. destination - the path to the file to create and store the audio data in.","Returns","the synthesizer object","Notes"]},{"l":"stop","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.speech:stop([where]) - synthesizerObject | | Type | Method | | Description | Stops the output of the speech synthesizer. | | Parameters | where - an optional string indicating when to stop the audio output (defaults to \"immediate\"). The string can be one of the following: \"immediate\" - stops output immediately. \"word\" - stops at the end of the current word. \"sentence\" - stops at the end of the current sentence. | | Returns | the synthesizer object | | Notes | |"]},{"l":"usesFeedbackWindow","p":["Signature","hs.speech:usesFeedbackWindow([flag]) - synthesizerObject | boolean","Type","Method","Description","Gets or sets whether or not the synthesizer uses the speech feedback window.","Parameters","flag - an optional boolean indicating whether or not the synthesizer should user the speech feedback window or not. Defaults to false.","Returns","If no parameter is provided, returns the current value; otherwise returns the synthesizer object.","Notes","Special Note: I am not sure where the visual feedback actually occurs -- I have not been able to locate a feedback window for synthesis in 10.11; however the method is defined and not marked deprecated, so I include it in the module. If anyone has more information, please file an issue and the documentation will be updated."]},{"l":"voice","p":["Signature","hs.speech:voice([full] | [voice]) - synthesizerObject | voice","Type","Method","Description","Gets or sets the active voice for a synthesizer.","Parameters","full - an optional boolean indicating whether or not you wish the full internal voice name to be returned, or if you want the shorter version. Defaults to false. voice - an optional string indicating the name of the voice to change the synthesizer to.","Returns","If no parameter is provided (or the parameter is a boolean value), returns the current value; otherwise returns the synthesizer object or nil if the voice could not be changed for some reason.","Notes","All of the names that have been encountered thus far follow this pattern for their full name: com.apple.speech.synthesis.voice.*name*. You can provide this suffix or not as you prefer when specifying a voice name. The voice cannot be changed while the synthesizer is currently producing output. If you change the voice while a synthesizer is paused, the current synthesis will be terminated and the voice will be changed."]},{"l":"volume","p":["Signature","hs.speech:volume([volume]) - synthesizerObject | volume","Type","Method","Description","Gets or sets the synthesizers speaking volume.","Parameters","volume - an optional number between 0.0 and 1.0 indicating the speaking volume for the synthesizer.","Returns","If no parameter is provided, returns the current value; otherwise returns the synthesizer object.","Notes","Volume units lie on a scale that is linear with amplitude or voltage. A doubling of perceived loudness corresponds to a doubling of the volume."]}],[{"i":"hsspeechlistener","l":"hs.speech.listener","p":["This module provides access to the Speech Recognizer component of OS X.","The speech recognizer functions and methods provide a way to add commands which may be issued to Hammerspoon through spoken words and phrases to trigger a callback."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","blocksOtherRecognizers","commands","delete","foregroundOnly","isListening","setCallback","start","stop","title"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","hs.speech.listener.new([title]) - recognizerObject","Type","Constructor","Description","Creates a new speech recognizer object for use by Hammerspoon.","Parameters","title - an optional parameter specifying the title under which commands assigned to this speech recognizer will be listed in the Dictation Commands display when it is visible. Defaults to \"Hammerspoon\".","Returns","a speech recognizer object or nil, if the system was unable to create a new recognizer.","Notes","You can change the title later with the hs.speech.listener:title method."]},{"l":"Methods"},{"l":"blocksOtherRecognizers","p":["Signature","hs.speech.listener:blocksOtherRecognizers([flag]) - recognizerObject | current value","Type","Method","Description","Get or set whether or not the speech recognizer should block other recognizers when it is active.","Parameters","flag - an optional boolean indicating whether or not the speech recognizer should block other speech recognizers when it is active. Defaults to false.","Returns","If no parameter is provided, returns the current value; otherwise returns the recognizer object.","Notes"]},{"l":"commands","p":["Signature","hs.speech.listener:commands([commandsArray]) - recognizerObject | current value","Type","Method","Description","Get or set the commands this speech recognizer will listen for.","Parameters","commandsArray - an optional array of strings which specify the commands the recognizer will listen for.","Returns","If no parameter is provided, returns the current value; otherwise returns the recognizer object.","Notes","The list of commands will appear in the Dictation Commands window, if it is visible, under the title of this speech recognizer. The text of each command is a possible value which may be sent as the second argument to a callback function for this speech recognizer, if one is defined. Setting this to an empty list does not disable the speech recognizer, but it does make it of limited use, other than to provide a title in the Dictation Commands window. To disable the recognizer, use the hs.speech.listener:stop or hs.speech.listener:delete methods."]},{"l":"delete","p":["Signature","hs.speech.listener:delete() - recognizerObject","Type","Method","Description","Disables the speech recognizer and removes it from the possible available speech recognizers.","Parameters","None.","Returns","None","Notes","this disables the speech recognizer and removes it from the list in the Dictation Commands window. The object is effectively destroyed, so you will need to create a new one with hs.speech.listener.new if you want to bring it back. if this was the only speech recognizer currently available, the Dictation Commands window and feedback display will be removed from the users display. this method is automatically called during a reload or restart of Hammerspoon."]},{"l":"foregroundOnly","p":["Signature","hs.speech.listener:foregroundOnly([flag]) - recognizerObject | current value","Type","Method","Description","Get or set whether or not the speech recognizer is active only when the Hammerspoon application is active.","Parameters","flag - an optional boolean indicating whether or not the speech recognizer should respond to commands only when Hammerspoon is the active application or not. Defaults to true.","Returns","If no parameter is provided, returns the current value; otherwise returns the recognizer object.","Notes"]},{"l":"isListening","p":["Signature","hs.speech.listener:isListening() - boolean","Type","Method","Description","Returns a boolean value indicating whether or not the recognizer is currently enabled (started).","Parameters","None","Returns","true if the listener is listening (has been started) or false if it is not.","Notes"]},{"l":"setCallback","p":["Signature","hs.speech.listener:setCallback(fn) - recognizerObject","Type","Method","Description","Sets or removes a callback function for the speech recognizer.","Parameters","fn - a function to set as the callback for this speech synthesizer. If the value provided is nil, any currently existing callback function is removed. The callback function should accept two arguments and return none. The arguments will be the speech recognizer object itself and the string of the command which was spoken.","Returns","the recognizer object","Notes","Possible string values for the command spoken are set with the hs.speech.listener:commands method. Removing the callback does not disable the speech recognizer, but it does make it of limited use, other than to provide a list in the Dictation Commands window. To disable the recognizer, use the hs.speech.listener:stop or hs.speech.listener:delete methods."]},{"l":"start","p":["Signature","hs.speech.listener:start() - recognizerObject","Type","Method","Description","Make the speech recognizer active.","Parameters","None.","Returns","returns the recognizer object.","Notes"]},{"l":"stop","p":["Signature","hs.speech.listener:stop() - recognizerObject","Type","Method","Description","Disables the speech recognizer.","Parameters","None.","Returns","returns the recognizer object.","Notes","this only disables the speech recognizer. To completely remove it from the list in the Dictation Commands window, use hs.speech.listener:delete."]},{"l":"title","p":["Signature","hs.speech.listener:title([title]) - recognizerObject | current value","Type","Method","Description","Get or set the title for a speech recognizer.","Parameters","title - an optional parameter specifying the title under which commands assigned to this speech recognizer will be listed in the Dictation Commands display when it is visible. If you provide an explicit nil, it will reset to the default of \"Hammerspoon\".","Returns","If no parameter is provided, returns the current value; otherwise returns the recognizer object.","Notes"]}],[{"i":"hsspoons","l":"hs.spoons","p":["Utility and management functions for Spoons Spoons are Lua plugins for Hammerspoon. See https://www.hammerspoon.org/Spoons/ for more information"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","bindHotkeysToSpec","isInstalled","isLoaded","list","newSpoon","resourcePath","scriptPath","use"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"bindHotkeysToSpec","p":["Signature","hs.spoons.bindHotkeysToSpec(def, map) - none","Type","Function","Description","Map a number of hotkeys according to a definition table","Parameters","def - table containing name-to-function definitions for the hotkeys supported by the Spoon. Each key is a hotkey name, and its value must be a function that will be called when the hotkey is invoked. map - table containing name-to-hotkey definitions and an optional message to be displayed via hs.alert() when the hotkey has been triggered, as supported by bindHotkeys in the Spoon API. Not all the entries in def must be bound, but if any keys in map don't have a definition, an error will be produced.","Returns","None","Notes"]},{"l":"isInstalled","p":["Signature","hs.spoons.isInstalled(name) - table | nil","Type","Function","Description","Check if a given Spoon is installed.","Parameters","name - Name of the Spoon to check.","Returns","If the Spoon is installed, it returns a table with the Spoon information as returned by list(). Returns nil if the Spoon is not installed.","Notes"]},{"l":"isLoaded","p":["Signature","hs.spoons.isLoaded(name) - boolean | nil","Type","Function","Description","Check if a given Spoon is loaded.","Parameters","name - Name of the Spoon to check.","Returns","true if the Spoon is loaded, nil otherwise.","Notes"]},{"l":"list","p":["Signature","hs.spoons.list() - table","Type","Function","Description","Return a list of installed/loaded Spoons","Parameters","onlyLoaded - only return loaded Spoons (skips those that are installed but not loaded). Defaults to false","Returns","Table with a list of installed/loaded spoons (depending on the value of onlyLoaded). Each entry is a table with the following entries: name- Spoon name loaded- boolean indication of whether the Spoon is loaded ( true) or only installed ( false) version- Spoon version number. Available only for loaded Spoons.","Notes"]},{"l":"newSpoon","p":["Signature","hs.spoons.newSpoon(name, basedir, metadata, [template]) - string | nil","Type","Function","Description","Create a skeleton for a new Spoon","Parameters","name: name of the new spoon, without the .spoon extension basedir: (optional) directory where to create the template. Defaults to ~/.hammerspoon/Spoons metadata: (optional) table containing metadata values to be inserted in the template. Provided values are merged with the defaults. Defaults to: { version = 0.1, author = Your Name your@email.org, homepage = https://github.com/Hammerspoon/Spoons, license = MIT - https://opensource.org/licenses/MIT, download_url = https://github.com/Hammerspoon/Spoons/raw/master/Spoons/..name...spoon.zip } template: (optional) absolute path of the template to use for the init.lua file of the new Spoon. Defaults to the templates/init.tpl file included with Hammerspoon.","Returns","The full directory path where the template was created, or nil if there was an error.","Notes"]},{"l":"resourcePath","p":["Signature","hs.spoons.resourcePath(partial) - string","Type","Function","Description","Return full path of an object within a spoon directory, given its partial path.","Parameters","partial - path of a file relative to the Spoon directory. For example images/img1.png will refer to a file within the images directory of the Spoon.","Returns","Absolute path of the file. Note: no existence or other checks are done on the path.","Notes"]},{"l":"scriptPath","p":["Signature","hs.spoons.scriptPath([n]) - string","Type","Function","Description","Return path of the current spoon.","Parameters","n - (optional) stack level for which to get the path. Defaults to 2, which will return the path of the spoon which called scriptPath()","Returns","String with the path from where the calling code was loaded.","Notes"]},{"l":"use","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.spoons.use(name, arg, [noerror]) - boolean | nil | | Type | Function | | Description | Declaratively load and configure a Spoon | | Parameters | name - the name of the Spoon to load (without the .spoon extension).arg - if provided, can be used to specify the configuration of the Spoon. The following keys are recognized (all are optional): config - a table containing variables to be stored in the Spoon object to configure it. For example, config = { answer = 42 } will result in spoon.LoadedSpoon.answer being set to 42. hotkeys - a table containing hotkey bindings. If provided, will be passed as-is to the Spoon's bindHotkeys() method. The special string default can be given to use the Spoons defaultHotkeys variable, if it exists. fn - a function which will be called with the freshly-loaded Spoon object as its first argument. loglevel - if the Spoon has a variable called logger, its setLogLevel() method will be called with this value. start - if true, call the Spoon's start() method after configuring everything else.noerror - if true, don't log an error if the Spoon is not installed, simply return nil. | | Returns | true if the spoon was loaded, nil otherwise | | Notes | |"]}],[{"i":"hsspotify","l":"hs.spotify","p":["Controls for Spotify music player"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","displayCurrentTrack","ff","Functions- API calls offered directly by the extension","getCurrentAlbum","getCurrentArtist","getCurrentTrack","getCurrentTrackId","getDuration","getPlaybackState","getPosition","getVolume","isPlaying","isRunning","next","pause","play","playpause","playTrack","previous","rw","setPosition","setVolume","state_paused","state_playing","state_stopped","volumeDown","volumeUp"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"state_paused","p":["Signature","hs.spotify.state_paused","Type","Constant","Description","Returned by hs.spotify.getPlaybackState() to indicates Spotify is paused"]},{"l":"state_playing","p":["Signature","hs.spotify.state_playing","Type","Constant","Description","Returned by hs.spotify.getPlaybackState() to indicates Spotify is playing"]},{"l":"state_stopped","p":["Signature","hs.spotify.state_stopped","Type","Constant","Description","Returned by hs.spotify.getPlaybackState() to indicates Spotify is stopped"]},{"l":"Functions"},{"l":"displayCurrentTrack","p":["Signature","hs.spotify.displayCurrentTrack()","Type","Function","Description","Displays information for current track on screen","Parameters","None","Returns","Notes"]},{"l":"ff","p":["Signature","hs.spotify.ff()","Type","Function","Description","Skips the playback position forwards by 5 seconds","Parameters","None","Returns","Notes"]},{"l":"getCurrentAlbum","p":["Signature","hs.spotify.getCurrentAlbum()","Type","Function","Description","Gets the name of the album of the current track","Parameters","None","Returns","A string containing the Album of the current track, or nil if an error occurred","Notes"]},{"l":"getCurrentArtist","p":["Signature","hs.spotify.getCurrentArtist()","Type","Function","Description","Gets the name of the artist of the current track","Parameters","None","Returns","A string containing the Artist of the current track, or nil if an error occurred","Notes"]},{"l":"getCurrentTrack","p":["Signature","hs.spotify.getCurrentTrack()","Type","Function","Description","Gets the name of the current track","Parameters","None","Returns","A string containing the name of the current track, or nil if an error occurred","Notes"]},{"l":"getCurrentTrackId","p":["Signature","hs.spotify.getCurrentTrackId()","Type","Function","Description","Gets the id of the current track","Parameters","None","Returns","A string containing the id of the current track, or nil if an error occurred","Notes"]},{"l":"getDuration","p":["Signature","hs.spotify.getDuration()","Type","Function","Description","Gets the duration (in seconds) of the current song","Parameters","None","Returns","The number of seconds long the current song is, 0 if no song is playing","Notes"]},{"l":"getPlaybackState","p":["Signature","hs.spotify.getPlaybackState()","Type","Function","Description","Gets the current playback state of Spotify","Parameters","None","Returns","A string containing one of the following constants:- hs.spotify.state_stopped- hs.spotify.state_paused- hs.spotify.state_playing","Notes"]},{"l":"getPosition","p":["Signature","hs.spotify.getPosition()","Type","Function","Description","Gets the playback position (in seconds) in the current song","Parameters","None","Returns","A number indicating the current position in the song","Notes"]},{"l":"getVolume","p":["Signature","hs.spotify.getVolume()","Type","Function","Description","Gets the Spotify volume setting","Parameters","None","Returns","A number containing the volume Spotify is set to between 1 and 100","Notes"]},{"l":"isPlaying","p":["Signature","hs.spotify.isPlaying()","Type","Function","Description","Returns whether Spotify is currently playing","Parameters","None","Returns","A boolean value indicating whether Spotify is currently playing a track, or nil if an error occurred (unknown player state). Also returns false if the application is not running","Notes"]},{"l":"isRunning","p":["Signature","hs.spotify.isRunning()","Type","Function","Description","Returns whether Spotify is currently open. Most other functions in hs.spotify will automatically start the application, so this function can be used to guard against that.","Parameters","None","Returns","A boolean value indicating whether the Spotify application is running.","Notes"]},{"l":"next","p":["Signature","hs.spotify.next()","Type","Function","Description","Skips to the next Spotify track","Parameters","None","Returns","Notes"]},{"l":"pause","p":["Signature","hs.spotify.pause()","Type","Function","Description","Pauses the current Spotify track","Parameters","None","Returns","Notes"]},{"l":"play","p":["Signature","hs.spotify.play()","Type","Function","Description","Plays the current Spotify track","Parameters","None","Returns","Notes"]},{"l":"playpause","p":["Signature","hs.spotify.playpause()","Type","Function","Description","Toggles play/pause of current Spotify track","Parameters","None","Returns","Notes"]},{"l":"playTrack","p":["Signature","hs.spotify.playTrack(id)","Type","Function","Description","Plays the Spotify track with the given id","Parameters","id - The Spotify id of the track to be played","Returns","None","Notes"]},{"l":"previous","p":["Signature","hs.spotify.previous()","Type","Function","Description","Skips to previous Spotify track","Parameters","None","Returns","Notes"]},{"l":"rw","p":["Signature","hs.spotify.rw()","Type","Function","Description","Skips the playback position backwards by 5 seconds","Parameters","None","Returns","Notes"]},{"l":"setPosition","p":["Signature","hs.spotify.setPosition(pos)","Type","Function","Description","Sets the playback position in the current song","Parameters","pos - A number containing the position (in seconds) to jump to in the current song","Returns","None","Notes"]},{"l":"setVolume","p":["Signature","hs.spotify.setVolume(vol)","Type","Function","Description","Sets the Spotify volume setting","Parameters","vol - A number between 1 and 100","Returns","None","Notes"]},{"l":"volumeDown","p":["Signature","hs.spotify.volumeDown()","Type","Function","Description","Reduces the volume by 5","Parameters","None","Returns","Notes"]},{"l":"volumeUp","p":["Signature","hs.spotify.volumeUp()","Type","Function","Description","Increases the volume by 5","Parameters","None","Returns","Notes"]}],[{"i":"hsspotlight","l":"hs.spotlight","p":["This module allows Hammerspoon to preform Spotlight metadata queries.","This module will only be able to perform queries on volumes and folders which are not blocked by the Privacy settings in the System Preferences Spotlight panel.","A Spotlight query consists of two phases: an initial gathering phase where information currently in the Spotlight database is collected and returned, and a live-update phase which occurs after the gathering phase and consists of changes made to the Spotlight database, such as new entries being added, information in existing entries changing, or entities being removed.","The syntax for Spotlight Queries is beyond the scope of this module's documentation. It is a subset of the syntax supported by the Objective-C NSPredicate class. Some references for this syntax can be found at:","https://developer.apple.com/library/content/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html","https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html","Depending upon the callback messages enabled with the hs.spotlight:callbackMessages method, your callback assigned with the hs.spotlight:setCallback method, you can determine the query phase by noting which messages you have received. During the initial gathering phase, the following callback messages may be observed: \"didStart\", \"inProgress\", and \"didFinish\". Once the initial gathering phase has completed, you will only observe \"didUpdate\" messages until the query is stopped with the hs.spotlight:stop method.","You can also check to see if the initial gathering phase is in progress with the hs.spotlight:isGathering method.","You can access the individual results of the query with the hs.spotlight:resultAtIndex method. For convenience, metamethods have been added to the spotlightObject which make accessing individual results easier: an individual spotlightItemObject may be accessed from a spotlightObject by treating the spotlightObject like an array; e.g. spotlightObject[n] will access the n'th spotlightItemObject in the current results."]},{"l":"Submodules","p":["hs.spotlight.group","hs.spotlight.item"]},{"l":"API Overview","p":["callbackMessages","commonAttributeKeys","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","count","definedSearchScopes","groupedResults","groupingAttributes","isGathering","isRunning","Methods- API calls which can only be made on an object returned by a constructor","new","newWithin","queryString","resultAtIndex","searchScopes","setCallback","sortDescriptors","start","stop","updateInterval","valueListAttributes","valueLists"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"commonAttributeKeys","p":["Signature","hs.spotlight.commonAttributeKeys[]","Type","Constant","Description","A list of defined attribute keys as discovered in the macOS 10.12 SDK framework headers.","Notes","This list was generated by searching the Framework header files for string constants which matched one of the following regular expressions: \"kMDItem.+\", \"NSMetadataItem.+\", and \"NSMetadataUbiquitousItem.+\""]},{"l":"definedSearchScopes","p":["Signature","hs.spotlight.definedSearchScopes[]","Type","Constant","Description","A table of key-value pairs describing predefined search scopes for Spotlight queries","Notes","It is uncertain at this time if the iCloud* search scopes are actually useful within Hammerspoon as Hammerspoon is not a sandboxed application that uses the iCloud API fo document storage. Further information on your experiences with these scopes, if you use them, is welcome in the Hammerspoon Google Group or at the Hammerspoon GitHub web site."]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.spotlight.new() - spotlightObject","Type","Constructor","Description","Creates a new spotlightObject to use for Spotlight searches.","Parameters","None","Returns","a new spotlightObject","Notes"]},{"l":"newWithin","p":["Signature","hs.spotlight.newWithin(spotlightObject) - spotlightObject","Type","Constructor","Description","Creates a new spotlightObject that limits its searches to the current results of another spotlightObject.","Parameters","spotlightObject- the object whose current results are to be used to limit the scope of the new Spotlight search.","Returns","a new spotlightObject","Notes"]},{"l":"Methods"},{"l":"callbackMessages","p":["Signature","hs.spotlight:callbackMessages([messages]) - table | spotlightObject","Type","Method","Description","Get or specify the specific messages that should generate a callback.","Parameters","messages- an optional table or list of items specifying the specific callback messages that will generate a callback. Defaults to { \"didFinish\" }.","Returns","if an argument is provided, returns the spotlightObject; otherwise returns the current values","Notes","Valid messages for the table are: \"didFinish\", \"didStart\", \"didUpdate\", and \"inProgress\". See hs.spotlight:setCallback for more details about the messages."]},{"l":"count","p":["Signature","hs.spotlight:count() - integer","Type","Method","Description","Returns the number of results for the spotlightObject's query","Parameters","None","Returns","if the query has collected results, returns the number of results that match the query; if the query has not been started, this value will be 0.","Notes","Just because the result of this method is 0 does not mean that the query has not been started; the query itself may not match any entries in the Spotlight database. A query which ran in the past but has been subsequently stopped will retain its queries unless the parameters have been changed. The result of this method will indicate the number of results still attached to the query, even if it has been previously stopped. For convenience, metamethods have been added to the spotlightObject which allow you to use #spotlightObject as a shortcut for spotlightObject:count()."]},{"l":"groupedResults","p":["Signature","hs.spotlight:groupedResults() - table","Type","Method","Description","Returns the grouped results for a Spotlight query.","Parameters","None","Returns","an array table containing the grouped results for the Spotlight query as specified by the hs.spotlight:groupingAttributes method. Each member of the array will be a spotlightGroupObject which is detailed in the hs.spotlight.group module documentation.","Notes","The spotlightItemObjects available with the hs.spotlight.group:resultAtIndex method are the subset of the full results of the spotlightObject that match the attribute and value of the spotlightGroupObject. The same item is available through the spotlightObject and the spotlightGroupObject, though likely at different indices."]},{"l":"groupingAttributes","p":["Signature","hs.spotlight:groupingAttributes([attributes]) - table | spotlightObject","Type","Method","Description","Get or set the grouping attributes for the Spotlight query.","Parameters","attributes- an optional table or list of items specifying the grouping attributes for the Spotlight query. Defaults to an empty array.","Returns","if an argument is provided, returns the spotlightObject; otherwise returns the current values","Notes","Setting this property while a query is running stops the query and discards the current results. The receiver immediately starts a new query. Setting this property will increase CPU and memory usage while performing the Spotlight query. This method allows you to access results grouped by the values of specific attributes. See hs.spotlight.group for more information on using and accessing grouped results. Note that not all attributes can be used as a grouping attribute. In such cases, the grouped result will contain all results and an attribute value of nil."]},{"l":"isGathering","p":["Signature","hs.spotlight:isGathering() - boolean","Type","Method","Description","Returns a boolean specifying whether or not the query is in the active gathering phase.","Parameters","None","Returns","a boolean value of true if the query is in the active gathering phase or false if it is not.","Notes","An inactive query will also return false for this method since an inactive query is neither gathering nor waiting for updates. To determine if a query is active or inactive, use the hs.spotlight:isRunning method."]},{"l":"isRunning","p":["Signature","hs.spotlight:isRunning() - boolean","Type","Method","Description","Returns a boolean specifying if the query is active or inactive.","Parameters","None","Returns","a boolean value of true if the query is active or false if it is inactive.","Notes","An active query may be gathering query results (in the initial gathering phase) or listening for changes which should cause a \"didUpdate\" message (after the initial gathering phase). To determine which state the query may be in, use the hs.spotlight:isGathering method."]},{"l":"queryString","p":["Signature","hs.spotlight:queryString(query) - spotlightObject","Type","Method","Description","Specify the query string for the spotlightObject","Parameters","a string containing the query for the spotlightObject","Returns","the spotlightObject","Notes","Setting this property while a query is running stops the query and discards the current results. The receiver immediately starts a new query. The query string syntax is not simple enough to fully describe here. It is a subset of the syntax supported by the Objective-C NSPredicate class. Some references for this syntax can be found at: https://developer.apple.com/library/content/documentation/Carbon/Conceptual/SpotlightQuery/Concepts/QueryFormat.html https://developer.apple.com/library/content/documentation/Cocoa/Conceptual/Predicates/Articles/pSyntax.html If the query string does not conform to an NSPredicate query string, this method will return an error. If the query string does conform to an NSPredicate query string, this method will accept the query string, but if it does not conform to the Metadata query format, which is a subset of the NSPredicate query format, the error will be generated when you attempt to start the query with hs.spotlight:start. At present, starting a query is the only way to fully guarantee that a query is in a valid format. Some of the query strings which have been used during the testing of this module are as follows (note that [[]] is a Lua string specifier that allows for double quotes in the content of the string):[[kMDItemContentType == \"com.apple.application-bundle\" ]][[kMDItemFSName like \" Explore\" ]][[kMDItemFSName like \"AppleScript Editor.app\" or kMDItemAlternateNames like \"AppleScript Editor\"]] Not all attributes appear to be usable in a query; see hs.spotlight.item:attributes for a possible explanation. As a convenience, the __ call metamethod has been setup for spotlightObject so that you can use spotlightObject(query) as a shortcut for spotlightObject:queryString(query):start. Because this shortcut includes an explicit start, this should be appended after you have set the callback function if you require a callback (e.g. spotlightObject:setCallback(fn)(query))."]},{"l":"resultAtIndex","p":["Signature","hs.spotlight:resultAtIndex(index) - spotlightItemObject","Type","Method","Description","Returns the spotlightItemObject at the specified index of the spotlightObject","Parameters","index- an integer specifying the index of the result to return.","Returns","the spotlightItemObject at the specified index or an error if the index is out of bounds.","Notes","For convenience, metamethods have been added to the spotlightObject which allow you to use spotlightObject[index] as a shortcut for spotlightObject:resultAtIndex(index)."]},{"l":"searchScopes","p":["Signature","hs.spotlight:searchScopes([scope]) - table | spotlightObject","Type","Method","Description","Get or set the search scopes allowed for the Spotlight query.","Parameters","scope- an optional table or list of items specifying the search scope for the Spotlight query. Defaults to an empty array, specifying that the search is not limited in scope.","Returns","if an argument is provided for scope, returns the spotlightObject; otherwise returns a table containing the current search scopes.","Notes","Setting this property while a query is running stops the query and discards the current results. The receiver immediately starts a new query. Each item listed in the scope table may be a string or a file URL table as described in documentation for the hs.sharing.URL and hs.sharing.fileURL functions. if an item is a string and matches one of the values in the hs.spotlight.definedSearchScopes table, then the scope for that item will be added to the valid search scopes. if an item is a string and does not match one of the predefined values, it is treated as a path on the local system and will undergo tilde prefix expansion befor being added to the search scopes (i.e. \"~/\" will be expanded to \"/Users/username/\"). if an item is a table, it will be treated as a file URL table."]},{"l":"setCallback","p":["Signature","hs.spotlight:setCallback(fn) - spotlightObject","Type","Method","Description","Set or remove the callback function for the Spotlight search object.","Parameters","fn- the function to replace the current callback function. If this argument is an explicit nil, removes the current callback function and does not replace it. The function should expect 2 or 3 arguments and should return none.","Returns","the spotlightObject","Notes","Depending upon the messages set with the hs.spotlight:callbackMessages method, the following callbacks may occur: obj, \"didStart\" -- occurs when the initial gathering phase of a Spotlight search begins. obj- the spotlightObject performing the search message- the message to the callback, in this case \"didStart\" obj, \"inProgress\", updateTable -- occurs during the initial gathering phase at intervals set by the hs.spotlight:updateInterval method. obj- the spotlightObject performing the search message- the message to the callback, in this case \"inProgress\" updateTable- a table containing one or more of the following keys: kMDQueryUpdateAddedItems- an array table of spotlightItem objects that have been added to the results kMDQueryUpdateChangedItems- an array table of spotlightItem objects that have changed since they were first added to the results kMDQueryUpdateRemovedItems- an array table of spotlightItem objects that have been removed since they were first added to the results obj, \"didFinish\" -- occurs when the initial gathering phase of a Spotlight search completes. obj- the spotlightObject performing the search message- the message to the callback, in this case \"didFinish\" obj, \"didUpdate\", updateTable -- occurs after the initial gathering phase has completed. This indicates that a change has occurred after the initial query that affects the result set. obj- the spotlightObject performing the search message- the message to the callback, in this case \"didUpdate\" updateTable- a table containing one or more of the keys described for the updateTable argument of the \"inProgress\" message. All of the results are always available through the hs.spotlight:resultAtIndex method and metamethod shortcuts described in the hs.spotlight and hs.spotlight.item documentation headers; the results provided by the \"didUpdate\" and \"inProgress\" messages are just a convenience and can be used if you wish to parse partial results."]},{"l":"sortDescriptors","p":["Signature","hs.spotlight:sortDescriptors([attributes]) - table | spotlightObject","Type","Method","Description","Get or set the sorting preferences for the results of a Spotlight query.","Parameters","attributes- an optional table or list of items specifying sort descriptors which affect the sorting order of results for a Spotlight query. Defaults to an empty array.","Returns","if an argument is provided, returns the spotlightObject; otherwise returns the current values","Notes","Setting this property while a query is running stops the query and discards the current results. The receiver immediately starts a new query. A sort descriptor may be specified as a string or as a table of key-value pairs. In the case of a string, the sort descriptor will sort items in an ascending manner. When specified as a table, at least the following keys should be specified: key- a string specifying the attribute to sort by ascending- a boolean, default true, specifying whether the sort order should be ascending (true) or descending (false). This method attempts to specify the sorting order of the results returned by the Spotlight query. Note that not all attributes can be used as an attribute in a sort descriptor. In such cases, the sort descriptor will have no affect on the order of returned items."]},{"l":"start","p":["Signature","hs.spotlight:start() - spotlightObject","Type","Method","Description","Begin the gathering phase of a Spotlight query.","Parameters","None","Returns","the spotlightObject","Notes","If the query string set with hs.spotlight:queryString is invalid, an error message will be logged to the Hammerspoon console and the query will not start. You can test to see if the query is actually running with the hs.spotlight:isRunning method."]},{"l":"stop","p":["Signature","hs.spotlight:stop() - spotlightObject","Type","Method","Description","Stop the Spotlight query.","Parameters","None","Returns","the spotlightObject","Notes","This method will prevent further gathering of items either during the initial gathering phase or from updates which may occur after the gathering phase; however it will not discard the results already discovered."]},{"l":"updateInterval","p":["Signature","hs.spotlight:updateInterval([interval]) - number | spotlightObject","Type","Method","Description","Get or set the time interval at which the spotlightObject will send \"didUpdate\" messages during the initial gathering phase.","Parameters","interval- an optional number, default 1.0, specifying how often in seconds the \"didUpdate\" message should be generated during the initial gathering phase of a Spotlight query.","Returns","if an argument is provided, returns the spotlightObject object; otherwise returns the current value.","Notes"]},{"l":"valueListAttributes","p":["Signature","hs.spotlight:valueListAttributes([attributes]) - table | spotlightObject","Type","Method","Description","Get or set the attributes for which value list summaries are produced for the Spotlight query.","Parameters","attributes- an optional table or list of items specifying the attributes for which value list summaries are produced for the Spotlight query. Defaults to an empty array.","Returns","if an argument is provided, returns the spotlightObject; otherwise returns the current values","Notes","Setting this property while a query is running stops the query and discards the current results. The receiver immediately starts a new query. Setting this property will increase CPU and memory usage while performing the Spotlight query. This method allows you to specify attributes for which you wish to gather summary information about. See hs.spotlight:valueLists for more information about value list summaries. Note that not all attributes can be used as a value list attribute. In such cases, the summary for the attribute will specify all results and an attribute value of nil."]},{"l":"valueLists","p":["Signature","hs.spotlight:valueLists() - table","Type","Method","Description","Returns the value list summaries for the Spotlight query","Parameters","None","Returns","an array table of the value list summaries for the Spotlight query as specified by the hs.spotlight:valueListAttributes method. Each member of the array will be a table with the following keys: attribute- the attribute for the summary value- the value of the attribute for the summary count- the number of Spotlight items in the spotlightObject results for which this attribute has this value","Notes","Value list summaries are a quick way to gather statistics about the number of results which match certain criteria - they do not allow you easy access to the matching members, just information about their numbers."]}],[{"i":"hsspotlightgroup","l":"hs.spotlight.group","p":["This sub-module is used to access results to a spotlightObject query which have been grouped by one or more attribute values.","A spotlightGroupObject is a special object created when you specify one or more grouping attributes with hs.spotlight:groupingAttributes. Spotlight items which match the Spotlight query and share a common value for the specified attribute will be grouped in objects you can retrieve with the hs.spotlight:groupedResults method. This method returns an array of spotlightGroupObjects.","For each spotlightGroupObject you can identify the attribute and value the grouping represents with the hs.spotlight.group:attribute and hs.spotlight.group:value methods. An array of the results which belong to the group can be retrieved with the hs.spotlight.group:resultAtIndex method. For convenience, metamethods have been added to the spotlightGroupObject which make accessing individual results easier: an individual spotlightItemObject may be accessed from a spotlightGroupObject by treating the spotlightGroupObject like an array; e.g. spotlightGroupObject[n] will access the n'th spotlightItemObject in the grouped results."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","attribute","count","resultAtIndex","subgroups","value"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"attribute","p":["Signature","hs.spotlight.group:attribute() - string","Type","Method","Description","Returns the name of the attribute the spotlightGroupObject results are grouped by.","Parameters","None","Returns","the attribute name as a string","Notes"]},{"l":"count","p":["Signature","hs.spotlight.group:count() - integer","Type","Method","Description","Returns the number of query results contained in the spotlightGroupObject.","Parameters","None","Returns","an integer specifying the number of results that match the attribute and value represented by this spotlightGroup object.","Notes","For convenience, metamethods have been added to the spotlightGroupObject which allow you to use #spotlightGroupObject as a shortcut for spotlightGroupObject:count()."]},{"l":"resultAtIndex","p":["Signature","hs.spotlight.group:resultAtIndex(index) - spotlightItemObject","Type","Method","Description","Returns the spotlightItemObject at the specified index of the spotlightGroupObject","Parameters","index- an integer specifying the index of the result to return.","Returns","the spotlightItemObject at the specified index or an error if the index is out of bounds.","Notes","For convenience, metamethods have been added to the spotlightGroupObject which allow you to use spotlightGroupObject[index] as a shortcut for spotlightGroupObject:resultAtIndex(index)."]},{"l":"subgroups","p":["Signature","hs.spotlight.group:subgroups() - table","Type","Method","Description","Returns the subgroups of the spotlightGroupObject","Parameters","None","Returns","an array table containing the subgroups of the spotlightGroupObject or nil if no subgroups exist","Notes","Subgroups are created when you supply more than one grouping attribute to hs.spotlight:groupingAttributes."]},{"l":"value","p":["Signature","hs.spotlight.group:value() - value","Type","Method","Description","Returns the value for the attribute the spotlightGroupObject results are grouped by.","Parameters","None","Returns","the attribute value as an appropriate data type","Notes"]}],[{"i":"hsspotlightitem","l":"hs.spotlight.item","p":["This sub-module is used to access the individual results of a spotlightObject or a spotlightGroupObject.","Each Spotlight item contains attributes which you can access with the hs.spotlight.item:valueForAttribute method. An array containing common attributes for the type of entity the item represents can be retrieved with the hs.spotlight.item:attributes method, however this list of attributes is usually not a complete list of the attributes available for a given spotlightItemObject. Many of the known attribute names are included in the hs.spotlight.commonAttributeKeys constant array, but even this is not an exhaustive list -- an application may create and assign any key it wishes to an entity for inclusion in the Spotlight metadata database.","For convenience, metamethods have been added to the spotlightItemObjects as a shortcut to the hs.spotlight.item:valueForAttribute method; e.g. you can access the value of a specific attribute by treating the attribute as a key name: spotlightItemObject.kMDItemPath will return the path to the entity the spotlightItemObject refers to."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","attributes","valueForAttribute"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"attributes","p":["Signature","hs.spotlight.item:attributes() - table","Type","Method","Description","Returns a list of attributes associated with the spotlightItemObject","Parameters","None","Returns","an array table containing a list of attributes associated with the result item.","Notes","This list of attributes is usually not a complete list of the attributes available for a given spotlightItemObject. Many of the known attribute names are included in the hs.spotlight.commonAttributeKeys constant array, but even this is not an exhaustive list -- an application may create and assign any key it wishes to an entity for inclusion in the Spotlight metadata database.* A common attribute, which is not usually included in the results of this method is the \"kMDItemPath\" attribute which specifies the local path to the file the entity represents. This is included here for reference, as it is a commonly desired value that is not obviously available for almost all Spotlight entries. It is believed that only those keys which are explicitly set when an item is added to the Spotlight database are included in the array returned by this method. Any attribute which is calculated or restricted in a sandboxed application appears to require an explicit request. This is, however, conjecture, and when in doubt you should explicitly check for the attributes you require with hs.spotlight.item:valueForAttribute and not rely solely on the results from this method."]},{"l":"valueForAttribute","p":["Signature","hs.spotlight.item:valueForAttribute(attribute) - value","Type","Method","Description","Returns the value for the specified attribute of the spotlightItemObject","Parameters","attribute- a string specifying the attribute to get the value of for the spotlightItemObject","Returns","the attribute value as an appropriate data type or nil if the attribute does not exist or contains no value","Notes","See hs.spotlight.item:attributes for information about possible attribute names. For convenience, metamethods have been added to the spotlightItemObject which allow you to use spotlightItemObject.attribute as a shortcut for spotlightItemObject:valueForAttribute(attribute)."]}],[{"i":"hssqlite3","l":"hs.sqlite3","p":["Interact with SQLite databases","Notes:","This module is LSQLite 0.9.5 as found at http://lua.sqlite.org/index.cgi/index","It is unmodified apart from removing db:load_extension() as this feature is not available in Apple's libsqlite3.dylib","For API documentation please see http://lua.sqlite.org"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"hsstreamdeck","l":"hs.streamdeck","p":["Configure/control an Elgato Stream Deck.","Please note that in order for this module to work, the official Elgato Stream Deck app should not be running.","This extension supports the following devices:","Stream Deck (Original)","Stream Deck (Original V2)","Stream Deck Plus","Stream Deck Mini","Stream Deck Mini (V2)","Stream Deck XL","Stream Deck XL (Mk2)","Stream Deck Pedal","This module would not have been possible without standing on the shoulders of others:","https://github.com/OpenStreamDeck/StreamDeckSharp","https://github.com/Lange/node-elgato-stream-deck","Hopper"]},{"l":"API Overview","p":["buttonCallback","buttonLayout","discoveryCallback","encoderCallback","firmwareVersion","Functions- API calls offered directly by the extension","getDevice","imageSize","init","Methods- API calls which can only be made on an object returned by a constructor","numDevices","reset","screenCallback","serialNumber","setBrightness","setButtonColor","setButtonImage","setScreenImage"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"discoveryCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.streamdeck.discoveryCallback(fn) | | Type | Function | | Description | Sets/clears a callback for reacting to device discovery events | | Parameters | fn - A function that will be called when a Stream Deck is connected or disconnected. It should take the following arguments: A boolean, true if a device was connected, false if a device was disconnected An hs.streamdeck object, being the device that was connected/disconnected | | Returns | None | | Notes | |"]},{"l":"getDevice","p":["Signature","hs.streamdeck.getDevice(num)","Type","Function","Description","Gets an hs.streamdeck object for the specified device","Parameters","num - A number that should be within the bounds of the number of connected devices","Returns","An hs.streamdeck object","Notes"]},{"l":"init","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.streamdeck.init(fn) | | Type | Function | | Description | Initialises the Stream Deck driver and sets a discovery callback | | Parameters | fn - A function that will be called when a Stream Deck is connected or disconnected. It should take the following arguments: A boolean, true if a device was connected, false if a device was disconnected An hs.streamdeck object, being the device that was connected/disconnected | | Returns | None | | Notes | This function must be called before any other parts of this module are used |"]},{"l":"numDevices","p":["Signature","hs.streamdeck.numDevices()","Type","Function","Description","Gets the number of Stream Deck devices connected","Parameters","None","Returns","A number containing the number of Stream Deck devices attached to the system","Notes"]},{"l":"Methods"},{"l":"buttonCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.streamdeck:buttonCallback(fn) | | Type | Method | | Description | Sets/clears the button callback function for a Stream Deck device | | Parameters | fn - A function to be called when a button is pressed/released on the stream deck. It should receive three arguments: The hs.streamdeck userdata object A number containing the button that was pressed/released A boolean indicating whether the button was pressed (true) or released (false) | | Returns | The hs.streamdeck device | | Notes | |"]},{"l":"buttonLayout","p":["Signature","hs.streamdeck:buttonLayout()","Type","Method","Description","Gets the layout of buttons a Stream Deck device has","Parameters","None","Returns","The number of columns The number of rows","Notes"]},{"l":"encoderCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.streamdeck:encoderCallback(fn) | | Type | Method | | Description | Sets/clears the knob/encoder callback function for a Stream Deck Plus. | | Parameters | fn - A function to be called when an encoder button is pressed/released/rotated on a Stream Deck Plus. It should receive five arguments: The hs.streamdeck userdata object A number containing the button that was pressed/released/rotated A boolean indicating whether the button was pressed (true) or released (false) A boolean indicating that the button was turned left A boolean indicating that the button was turned right | | Returns | The hs.streamdeck device | | Notes | |"]},{"l":"firmwareVersion","p":["Signature","hs.streamdeck:firmwareVersion()","Type","Method","Description","Gets the firmware version of a Stream Deck device","Parameters","None","Returns","A string containing the firmware version of the deck","Notes"]},{"l":"imageSize","p":["Signature","hs.streamdeck:imageSize()","Type","Method","Description","Gets the width and height of the buttons in pixels","Parameters","None","Returns","An table with keys w and h containing the width and height, respectively, of images expected by the Stream Deck","Notes"]},{"l":"reset","p":["Signature","hs.streamdeck:reset()","Type","Method","Description","Resets a Stream Deck device","Parameters","None","Returns","The hs.streamdeck object","Notes"]},{"l":"screenCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.streamdeck:screenCallback(fn) | | Type | Method | | Description | Sets/clears the screen callback function for a Stream Deck Plus's touch screen (above the encoder knobs). | | Parameters | fn - A function to be called when a screen is pressed/released/swiped on a Stream Deck Plus. It should receive six arguments: The hs.streamdeck userdata object A string either containing \"shortPress\", \"longPress\" or \"swipe\" The X position of where the screen was first touched The Y position of where the screen was first touched The X position of where the screen was last touched (if swiping) The Y position of where the screen was last touched (if swiping) | | Returns | The hs.streamdeck device | | Notes | |"]},{"l":"serialNumber","p":["Signature","hs.streamdeck:serialNumber()","Type","Method","Description","Gets the serial number of a Stream Deck device","Parameters","None","Returns","A string containing the serial number of the deck","Notes"]},{"l":"setBrightness","p":["Signature","hs.streamdeck:setBrightness(brightness)","Type","Method","Description","Sets the brightness of a Stream Deck device","Parameters","brightness - A whole number between 0 and 100 indicating the percentage brightness level to set","Returns","The hs.streamdeck device","Notes"]},{"l":"setButtonColor","p":["Signature","hs.streamdeck:setButtonColor(button, color)","Type","Method","Description","Sets a button on the Stream Deck device to the specified color","Parameters","button - A number (from 1 to 15) describing which button to set the color on color - An hs.drawing.color object","Returns","The hs.streamdeck object","Notes"]},{"l":"setButtonImage","p":["Signature","hs.streamdeck:setButtonImage(button, image)","Type","Method","Description","Sets the image of a button on the Stream Deck device","Parameters","button - A number (from 1 to 15) describing which button to set the image for image - An hs.image object","Returns","The hs.streamdeck object","Notes"]},{"l":"setScreenImage","p":["Signature","hs.streamdeck:setScreenImage(encoder, image)","Type","Method","Description","Sets the image of the screen on the Stream Deck device","Parameters","encoder - A number (from 1 to 4) describing which encoder to set the image for image - An hs.image object","Returns","The hs.streamdeck object","Notes"]}],[{"i":"hsstyledtext","l":"hs.styledtext","p":["alignment- A string indicating the texts alignment. The string may contain a value of \"left\", \"right\", \"center\", \"justified\", or \"natural\". Default is \"natural\".","allowsTighteningForTruncation- A boolean indicating whether the system may tighten inter-character spacing before truncating text. Only available in macOS 10.11 or newer. Default true.","backgroundColor- Default nil, no background color (transparent).","baselineOffset- A floating point value, as points offset from baseline. Default 0.0.","baseWritingDirection- A string indicating the base writing direction for the lines of text. The string may be one of \"natural\", \"leftToRight\", or \"rightToLeft\". Default is \"natural\".","blurRadius- A floating point value specifying the shadow's blur radius. A value of 0 indicates no blur, while larger values produce correspondingly larger blurring. The default value is 0.","color- A table indicating the color of the text as described in hs.drawing.color. Default is white for hs.drawing text objects; otherwise the default is black.","color- The default shadow color is black with an alpha of 1/3. If you set this property to nil, the shadow is not drawn.","concat:","defaultTabInterval- A positive floating point number specifying the default tab stop distance in points after the last assigned stop in the tabStops field.","eq: object ==/~= object yields a boolean indicating if the text of the two objects is equal or not. Use hs.styledtext:isIdentical if you need to compare attributes as well.","expansion- A floating point value, as log of expansion factor to be applied to glyphs. Default 0.0, no expansion.","firstLineHeadIndent- A positive floating point number specifying the distance, in points, from the leading margin of a frame to the beginning of the paragraph's first line. Default 0.0.","font- A table containing the font name and size, specified by the keys name and size. Default is the System Font at 27 points for hs.drawing text objects; otherwise the default is Helvetica at 12 points. You may also specify this as a string, which will be taken as the font named in the string at the default size, when setting this attribute.","headerLevel- An integer number from 0 to 6 inclusive which specifies whether the paragraph is to be treated as a header, and at what level, for purposes of HTML generation. Defaults to 0.","headIndent- A positive floating point number specifying the distance, in points, from the leading margin of a text container to the beginning of lines other than the first. Default 0.0.","hs.styledtext:byte","hs.styledtext:find","hs.styledtext:gmatch","hs.styledtext:len","hs.styledtext:lower","hs.styledtext:match","hs.styledtext:rep","hs.styledtext:sub","hs.styledtext:upper","hyphenationFactor- The hyphenation factor, a value ranging from 0.0 to 1.0 that controls when hyphenation is attempted. By default, the value is 0.0, meaning hyphenation is off. A factor of 1.0 causes hyphenation to be attempted always.","In addition, the following metamethods have been included:","kerning- A floating point value, as points by which to modify default kerning. Default nil to use default kerning specified in font file; 0.0, kerning off; non-zero, points by which to modify default kerning.","len: #object yields the length of the text contained in the object","ligature- An integer. Default 1, standard ligatures; 0, no ligatures; 2, all ligatures.","lineBreak- A string indicating how text that doesn't fit into the drawingObjects rectangle should be handled. The string may be one of \"wordWrap\", \"charWrap\", \"clip\", \"truncateHead\", \"truncateTail\", or \"truncateMiddle\". Default is \"wordWrap\".","lineHeightMultiple- A positive floating point number specifying the line height multiple. The natural line height of the receiver is multiplied by this factor (if not 0) before being constrained by minimum and maximum line height. Default 0.0.","lineSpacing- A positive floating point number specifying the space in points added between lines within the paragraph (commonly known as leading). Default 0.0.","location- A floating point number indicating the number of points the tab stap is located from the line's starting margin (see baseWritingDirection).","lt, le: allows <, >, <=, and >= comparisons between objects and strings in which the text of an object is compared with the text of another or a Lua string.","maximumLineHeight- A positive floating point number specifying the maximum height that any line in the frame will occupy, regardless of the font size. Glyphs exceeding this height will overlap neighboring lines. A maximum height of 0 implies no line height limit. Default 0.0.","minimumLineHeight- A positive floating point number specifying the minimum height that any line in the frame will occupy, regardless of the font size. Default 0.0.","More detailed documentation is being worked on and will be provided in the Hammerspoon Wiki at https://github.com/Hammerspoon/hammerspoon/wiki. The documentation here is a condensed version provided for use within the Hammerspoon Dash docset and the inline help provided by the help console command within Hammerspoon.","Note that due to differences in the way Lua determines when to use metamethods for equality comparisons versus relative-position comparisons, ==/= cannot compare an object to a Lua string (it will always return false because the types are different). You must use object:getString() ==/= string. (see hs.styledtext:getString)","object.. string yields a new hs.styledtext object with string appended","obliqueness- A floating point value, as skew to be applied to glyphs. Default 0.0, no skew.","offset- A table with h and w keys (a size structure) which specify horizontal and vertical offsets respectively for the shadow. Positive values always extend down and to the right from the user's perspective.","paragraphSpacing- A positive floating point number specifying the space added at the end of the paragraph to separate it from the following paragraph. Default 0.0.","paragraphSpacingBefore- A positive floating point number specifying the distance between the paragraph's top and the beginning of its text content. Default 0.0.","paragraphStyle- A table containing the paragraph style. This table may contain any number of the following keys:","shadow- Default nil, indicating no drop shadow. A table describing the drop shadow effect for the text. The table may contain any of the following keys:","strikethroughColor- Default nil, same as color.","strikethroughStyle- An integer representing the strike-through line style. See hs.styledtext.lineStyles, hs.styledtext.linePatterns and hs.styledtext.lineAppliesTo.","string.. object yields the string values concatenated","strokeColor- Default nil, same as color.","strokeWidth- Default 0, no stroke; positive, stroke alone; negative, stroke and fill (a typical value for outlined text would be 3.0)","superscript- An integer indicating if the text is to be displayed as a superscript (positive) or a subscript (negative) or normal (0).","tabStops- An array of defined tab stops. Default is an array of 12 left justified tab stops 28 points apart. Each element of the array may contain the following keys:","tabStopType- A string indicating the type of the tab stop: \"left\", \"right\", \"center\", or \"decimal\"","tailIndent- A floating point number specifying the distance, in points, from the margin of a frame to the end of lines. If positive, this value is the distance from the leading margin (for example, the left margin in left-to-right text). If 0 or negative, it's the distance from the trailing margin. Default 0.0.","The following list of attributes key-value pairs are recognized by this module and can be adjusted, set, or removed for objects by the various methods provided by this module. The list of attributes is provided here for reference; anywhere in the documentation you see a reference to the attributes key-value pairs, refer back to here for specifics:","This module adds support for controlling the style of the text in Hammerspoon.","tighteningFactorForTruncation- A floating point number. When the line break mode specifies truncation, the system attempts to tighten inter character spacing as an alternative to truncation, provided that the ratio of the text width to the line fragment width does not exceed 1.0 + the value of tighteningFactorForTruncation. Otherwise the text is truncated at a location determined by the line break mode. The default value is 0.05.","To make the hs.styledtext objects easier to use, in addition to the module specific functions and methods defined, some of the Lua String library has been reproduced to perform similar functions on these objects. See the help section for each method for more information on their use:","two hs.styledtext objects yields a new hs.styledtext object containing the concatenation of the two objects","underlineColor- Default nil, same as color.","underlineStyle- An integer representing the underline style. See hs.styledtext.lineStyles, hs.styledtext.linePatterns and hs.styledtext.lineAppliesTo."]},{"l":"API Overview","p":["ansi","asTable","byte","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","convert","convertFont","copy","defaultFonts","find","fontFamilies","fontInfo","fontNames","fontNamesWithTraits","fontPath","fontsForFamily","fontTraits","Functions- API calls offered directly by the extension","getString","getStyledTextFromData","getStyledTextFromFile","gmatch","isIdentical","len","lineAppliesTo","linePatterns","lineStyles","loadFont","lower","match","Methods- API calls which can only be made on an object returned by a constructor","new","removeStyle","rep","setString","setStyle","sub","upper","validFont"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"defaultFonts","p":["Signature","hs.styledtext.defaultFonts","Type","Constant","Description","A table containing the system default fonts and sizes.","Notes","These are useful when defining a styled text object which should be similar to or based on a specific system element type. Because the user can change font defaults while Hammerspoon is running, this table is actually generated dynamically on request. This should not affect of your use of this constant as a table; however, you can generate a static table if desired by invoking hs.styledtext._defaultFonts() directly instead."]},{"l":"fontTraits","p":["Signature","hs.styledtext.fontTraits - table","Type","Constant","Description","A table for containing Font Trait masks for use with hs.styledtext.fontNamesWithTraits(...)"]},{"l":"lineAppliesTo","p":["Signature","hs.styledtext.lineAppliesTo","Type","Constant","Description","A table of values indicating how the line for underlining or strike-through are applied to the text.","Notes","Valid keys are as follows: line - the underline or strike-through is applied to an entire line of text word - the underline or strike-through is only applied to words and not the spaces in a line of text When specifying a line type for underlining or strike-through, you can combine one entry from each of the following tables: hs.styledtext.lineStyles hs.styledtext.linePatterns hs.styledtext.lineAppliesTo The entries chosen should be combined with the or operator to provide a single value. for example: hs.styledtext.lineStyles.single","hs.styledtext.linePatterns.dash","hs.styledtext.lineAppliesToWord"]},{"l":"linePatterns","p":["Signature","hs.styledtext.linePatterns","Type","Constant","Description","A table of patterns which apply to the line for underlining or strike-through.","Notes","Valid line pattern keys are as follows: solid - a solid line dot - a dotted line dash - a dashed line dashDot - a pattern of a dash followed by a dot dashDotDot - a pattern of a dash followed by two dots When specifying a line type for underlining or strike-through, you can combine one entry from each of the following tables: hs.styledtext.lineStyles hs.styledtext.linePatterns hs.styledtext.lineAppliesTo The entries chosen should be combined with the or operator to provide a single value. for example: hs.styledtext.lineStyles.single","hs.styledtext.linePatterns.dash","hs.styledtext.lineAppliesToWord"]},{"l":"lineStyles","p":["Signature","hs.styledtext.lineStyles","Type","Constant","Description","A table of styles which apply to the line for underlining or strike-through.","Notes","Valid line style keys are as follows: none - no line style single - a single thin line thick - a single thick line (usually double the single line's thickness) double - double think lines When specifying a line type for underlining or strike-through, you can combine one entry from each of the following tables: hs.styledtext.lineStyles hs.styledtext.linePatterns hs.styledtext.lineAppliesTo The entries chosen should be combined with the or operator to provide a single value. for example: hs.styledtext.lineStyles.single","hs.styledtext.linePatterns.dash","hs.styledtext.lineAppliesToWord"]},{"l":"Functions"},{"l":"convertFont","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.styledtext.convertFont(fontTable, trait) - table | | Type | Function | | Description | Returns the font which most closely matches the given font and the trait change requested. | | Parameters | font - a string or a table which specifies a font. If a string is given, the default system font size is assumed. If a table is provided, it should contain the following keys: name - the name of the font (defaults to the system font) size - the point size of the font (defaults to the default system font size)trait - a number corresponding to a trait listed in hs.styledtext.fontTraits you wish to add or remove (unboldFont and unitalicFont) from the given font, or a boolean indicating whether you want a heavier version (true) or a lighter version (false). | | Returns | a table containing the name and size of the font which most closely matches the specified font and the trait change requested. If no such font is available, then the original font is returned unchanged. | | Notes | |"]},{"l":"fontFamilies","p":["Signature","hs.styledtext.fontFamilies() - table","Type","Function","Description","Returns the names of all font families installed for the system.","Parameters","None","Returns","a table containing the names of every font family installed for the system.","Notes"]},{"l":"fontInfo","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.styledtext.fontInfo(font) - table | | Type | Function | | Description | Get information about the font Specified in the attributes table. | | Parameters | font - a string or a table which specifies a font. If a string is given, the default system font size is assumed. If a table is provided, it should contain the following keys: name - the name of the font (defaults to the system font) size - the point size of the font (defaults to the default system font size) | | Returns | a table containing the following keys: fontName - The font's internally recognized name. familyName - The font's family name. displayName - The font’s display name is typically localized for the user’s language. fixedPitch - A boolean value indicating whether all glyphs in the font have the same advancement. ascender - The top y-coordinate, offset from the baseline, of the font’s longest ascender. boundingRect - A table containing the font’s bounding rectangle, scaled to the font’s size. This rectangle is the union of the bounding rectangles of every glyph in the font. capHeight - The cap height of the font. descender - The bottom y-coordinate, offset from the baseline, of the font’s longest descender. italicAngle - The number of degrees that the font is slanted counterclockwise from the vertical. (read-only) leading - The leading value of the font. maximumAdvancement - A table containing the maximum advance of any of the font’s glyphs. numberOfGlyphs - The number of glyphs in the font. pointSize - The point size of the font. underlinePosition - The baseline offset to use when drawing underlines with the font. underlineThickness - The thickness to use when drawing underlines with the font. xHeight - The x-height of the font. | | Notes | |"]},{"l":"fontNames","p":["Signature","hs.styledtext.fontNames() - table","Type","Function","Description","Returns the names of all installed fonts for the system.","Parameters","None","Returns","a table containing the names of every font installed for the system. The individual names are strings which can be used in the hs.drawing:setTextFont(fontname) method.","Notes"]},{"l":"fontNamesWithTraits","p":["Signature","hs.styledtext.fontNamesWithTraits(fontTraitMask) - table","Type","Function","Description","Returns the names of all installed fonts for the system with the specified traits.","Parameters","traits - a number, specifying the fontTraitMask, or a table containing traits listed in hs.styledtext.fontTraits which are logically 'OR'ed together to create the fontTraitMask used.","Returns","a table containing the names of every font installed for the system which matches the fontTraitMask specified. The individual names are strings which can be used in the hs.drawing:setTextFont(fontname) method.","Notes","specifying 0 or an empty table will match all fonts that are neither italic nor bold. This would be the same list as you'd get with { hs.styledtext.fontTraits.unBold, hs.styledtext.fontTraits.unItalic } as the parameter."]},{"l":"fontPath","p":["Signature","hs.styledtext.fontPath(font) - table","Type","Function","Description","Get the path of a font.","Parameters","font - a string containing the name of the font you want to check.","Returns","The path to the font or nil if the font name is not valid.","Notes"]},{"l":"fontsForFamily","p":["Signature","hs.styledtext.fontsForFamily(familyName) - table","Type","Function","Description","Returns an array containing fonts available for the specified font family or nil if no fonts for the specified family are present.","Parameters","familyName- a string specifying the font family to return available fonts for. The strings should be one of the values returned by the hs.styledtext.fontFamilies function.","Returns","a table containing an array of available fonts for the specified family. Each array entry will be a table, also as an array, in the following order: a string specifying the font name which can be used in the hs.drawing:setTextFont(fontname) method. a string specifying the basic style of the font (e.g. Bold, Italic, Roman, etc.) a table containing one or more strings specifying common names for the weight of the font. ISO equivalent names are preceded with \"ISO:\". Possible values are:{ ultralight }{ thin, ISO:ultralight }{ light, extralight, ISO:extralight }{ book, ISO:light }{ regular, plain, display, roman, ISO:semilight }{ medium, ISO:medium }{ demi, demibold }{ semi, semibold, ISO:semibold }{ bold, ISO:bold }{ extra, extrabold, ISO:extrabold }{ heavy, heavyface }{ black, super, ISO:ultrabold }{ ultra, ultrablack, fat }{ extrablack, obese, nord } a table specifying zero or more traits for the font as defined in the hs.styledtext.fontTraits table. A field with the key _numeric is also set which specified the numeric value corresponding to the traits for easy use with the hs.styledtext.convertFont function.","Notes"]},{"l":"loadFont","p":["Signature","hs.styledtext.loadFont(path) - boolean[, string]","Type","Function","Description","Loads a font from a file at the specified path.","Parameters","path- the path and filename of the font file to attempt to load","Returns","If the font can be registered returns true, otherwise false and an error message as string.","Notes"]},{"l":"validFont","p":["Signature","hs.styledtext.validFont(font) - boolean","Type","Function","Description","Checks to see if a font is valid.","Parameters","font - a string containing the name of the font you want to check.","Returns","true if valid, otherwise false.","Notes"]},{"l":"Constructors"},{"l":"ansi","p":["Signature","hs.styledtext.ansi(string, [attributes]) - styledText object","Type","Constructor","Description","Create an hs.styledtext object from the string provided, converting ANSI SGR color and some font sequences into the appropriate attributes. Attributes to apply to the resulting string may also be optionally provided.","Parameters","string - The string containing the text with ANSI SGR sequences to be converted. attributes - an optional table containing attribute key-value pairs to apply to the entire hs.styledtext object to be returned.","Returns","an hs.styledtext object","Notes","Because a font is required for the SGR sequences indicating Bold and Italic, the base font is determined using the following logic:* if no attributes table is provided, the font is assumed to be the default for hs.drawing as returned by the hs.drawing.defaultTextStyle function* if an attributes table is provided and it defines a font attribute, this font is used.* if an attributes table is provided, but it does not provide a font attribute, the NSAttributedString default of Helvetica at 12 points is used. As the most common use of this constructor is likely to be from the output of a terminal shell command, you will most likely want to specify a fixed-pitch (monospace) font. You can get a list of installed fixed-pitch fonts by typing hs.styledtext.fontNamesWithTraits(hs.styledtext.fontTraits.fixedPitchFont) into the Hammerspoon console. See the module description documentation ( help.hs.styledtext) for a description of the attributes table format which can be provided for the optional second argument. This function was modeled after the ANSIEscapeHelper.m file at https://github.com/balthamos/geektool-3 in the /NerdTool/classes directory."]},{"l":"getStyledTextFromData","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.styledtext.getStyledTextFromData(data, [type]) - styledText object | | Type | Constructor | | Description | Converts the provided data into a styled text string. | | Parameters | data - the data, as a lua string, which contains the raw data to be converted to a styledText objecttype - a string indicating the format of the contents in data. Defaults to \"html\". The string may be one of the following (not all formats may be fully representable as a simple string container - see also hs.styledtext.setTextFromFile): \"text\" - Plain text document. \"rtf\" - Rich text format document. \"rtfd\" - Rich text format with attachments document. \"simpleText\" - Macintosh SimpleText document. \"html\" - Hypertext Markup Language (HTML) document. \"word\" - Microsoft Word document. \"wordXML\" - Microsoft Word XML (WordML schema) document. \"webArchive\" - Web Kit WebArchive document. \"openXML\" - ECMA Office Open XML text document format. \"open\" - OASIS Open Document text document format. | | Returns | the styledText object | | Notes | See also hs.styledtext.getStyledTextFromFile |"]},{"l":"getStyledTextFromFile","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.styledtext.getStyledTextFromFile(file, [type]) - styledText object | | Type | Constructor | | Description | Converts the data in the specified file into a styled text string. | | Parameters | file - the path to the file to use as the source for the data to convert into a styledText objecttype - a string indicating the format of the contents in data. Defaults to \"html\". The string may be one of the following (not all formats may be fully representable as a simple string container - see also hs.styledtext.setTextFromFile): \"text\" - Plain text document. \"rtf\" - Rich text format document. \"rtfd\" - Rich text format with attachments document. \"simpleText\" - Macintosh SimpleText document. \"html\" - Hypertext Markup Language (HTML) document. \"word\" - Microsoft Word document. \"wordXML\" - Microsoft Word XML (WordML schema) document. \"webArchive\" - Web Kit WebArchive document. \"openXML\" - ECMA Office Open XML text document format. \"open\" - OASIS Open Document text document format. | | Returns | the styledText object | | Notes | See also hs.styledtext.getStyledTextFromData |"]},{"l":"new","p":["Signature","hs.styledtext.new(string, [attributes]) - styledText object","Type","Constructor","Description","Create an hs.styledtext object from the string or table representation provided. Attributes to apply to the resulting string may also be optionally provided.","Parameters","string - a string, table, or hs.styledtext object to create a new hs.styledtext object from. attributes - an optional table containing attribute key-value pairs to apply to the entire hs.styledtext object to be returned.","Returns","an hs.styledtext object","Notes","See hs.styledtext:asTable for a description of the table representation of an hs.styledtext object See the module description documentation ( help.hs.styledtext) for a description of the attributes table format which can be provided for the optional second argument. Passing an hs.styledtext object as the first parameter without specifying an attributes table is the equivalent of invoking hs.styledtext:copy."]},{"l":"Methods"},{"l":"asTable","p":["Signature","hs.styledtext:asTable([starts], [ends]) - table","Type","Method","Description","Returns the table representation of the hs.styledtext object or its specified substring.","Parameters","starts - an optional index position within the text of the hs.styledtext object indicating the beginning of the substring to return the table for. Defaults to 1, the beginning of the objects text. If this number is negative, it is counted backwards from the end of the object's text (i.e. -1 would be the last character position). ends - an optional index position within the text of the hs.styledtext object indicating the end of the substring to return the table for. Defaults to the length of the objects text. If this number is negative, it is counted backwards from the end of the object's text.","Returns","a table representing the hs.styledtext object. The table will be an array with the following structure: index 1 - the text of the hs.styledtext object as a Lua String. index 2+ - a table with the following keys: starts - the index position in the original styled text object where this list of attributes is first applied ends - the index position in the original styled text object where the application of this list of attributes ends attributes - a table of attribute key-value pairs that apply to the string between the positions of starts and ends unsupportedFields - this field only exists, and will be set to true when an attribute that was included in the attributes table that this module cannot modify. A best effort will be made to render the attributes assigned value in the attributes table, but modifying the attribute and re-applying it with hs.styledtext:setStyle will be silently ignored.","Notes","starts and ends follow the conventions of i and j for Lua's string.sub function. The attribute which contains an attachment (image) for a converted RTFD or other document is known to set the unsupportedFields flag. The indexes in the table returned are relative to their position in the original hs.styledtext object. If you want the table version of a substring which does not start at index position 1 that can be safely fed as a \"proper\" table version of an hs.styledtext object into another function or constructor, the proper way to generate it is destination = object:sub(i,j):asTable()./lili/liliSee the module description documentation ( help.hs.styledtext`) for a description of the attributes table format"]},{"l":"byte","p":["Signature","hs.styledtext:byte([starts], [ends]) - integer, ...","Type","Method","Description","Returns the internal numerical representation of the characters in the hs.styledtext object specified by the given indices. Mimics the Lua string.byte function.","Parameters","starts - an optional index position within the text of the hs.styledtext object indicating the beginning of the substring to return numerical values for. Defaults to 1, the beginning of the objects text. If this number is negative, it is counted backwards from the end of the object's text (i.e. -1 would be the last character position). ends - an optional index position within the text of the hs.styledtext object indicating the end of the substring to return numerical values for. Defaults to the value of starts. If this number is negative, it is counted backwards from the end of the object's text.","Returns","a list of integers representing the internal numeric representation of the characters in the hs.styledtext object specified by the given indices.","Notes","starts and ends follow the conventions of i and j for Lua's string.sub function."]},{"l":"convert","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.styledtext:convert([type]) - string | | Type | Method | | Description | Converts the styledtext object into the data format specified. | | Parameters | type - a string indicating the format to convert the styletext object into. Defaults to \"html\". The string may be one of the following: \"text\" - Plain text document. \"rtf\" - Rich text format document. \"rtfd\" - Rich text format with attachments document. \"html\" - Hypertext Markup Language (HTML) document. \"word\" - Microsoft Word document. \"wordXML\" - Microsoft Word XML (WordML schema) document. \"webArchive\" - Web Kit WebArchive document. \"openXML\" - ECMA Office Open XML text document format. \"open\" - OASIS Open Document text document format. | | Returns | a string containing the converted data | | Notes | |"]},{"l":"copy","p":["Signature","hs.styledtext:copy(styledText) - styledText object","Type","Method","Description","Create a copy of the hs.styledtext object.","Parameters","styledText - an hs.styledtext object","Returns","a copy of the styledText object","Notes"]},{"l":"find","p":["Signature","hs.styledtext:find(pattern, [init, [plain]]) - start, end, ... | nil","Type","Method","Description","Returns the indices of the first occurrence of the specified pattern in the text of the hs.styledtext object. Mimics the Lua string.find function.","Parameters","pattern - a string containing the pattern to locate. See the Lua manual, section 6.4.1 ( help.lua._man._6_4_1) for more details. init - an optional integer specifying the location within the text to start the pattern search plain - an optional boolean specifying whether or not to treat the pattern as plain text (i.e. an exact match). Defaults to false. If you wish to specify this argument, you must also specify init.","Returns","if a match is found, start and end will be the indices where the pattern was first located. If captures were specified in the pattern, they will also be returned as additional arguments after start and end. If the pattern was not found in the text, then this method returns nil.","Notes","Any captures returned are returned as Lua Strings, not as hs.styledtext objects."]},{"l":"getString","p":["Signature","hs.styledtext:getString([starts], [ends]) - string","Type","Method","Description","Returns the text of the hs.styledtext object as a Lua String","Parameters","starts - an optional index position within the text of the hs.styledtext object indicating the beginning of the substring to return the string for. Defaults to 1, the beginning of the objects text. If this number is negative, it is counted backwards from the end of the object's text (i.e. -1 would be the last character position). ends - an optional index position within the text of the hs.styledtext object indicating the end of the substring to return the string for. Defaults to the length of the objects text. If this number is negative, it is counted backwards from the end of the object's text.","Returns","a string containing the text of the hs.styledtext object specified","Notes","starts and ends follow the conventions of i and j for Lua's string.sub function."]},{"l":"gmatch","p":["Signature","hs.styledtext:gmatch(pattern) - iterator-function","Type","Method","Description","Returns an iterator function which will return the captures (or the entire pattern) of the next match of the specified pattern in the text of the hs.styledtext object each time it is called. Mimics the Lua string.gmatch function.","Parameters","pattern - a string containing the pattern to locate. See the Lua manual, section 6.4.1 ( help.lua._man._6_4_1) for more details.","Returns","an iterator function which will return the captures (or the entire pattern) of the next match of the specified pattern in the text of the hs.styledtext object each time it is called.","Notes","Any captures (or the entire pattern) returned by the iterator are returned as Lua Strings, not as hs.styledtext objects."]},{"l":"isIdentical","p":["Signature","hs.styledtext:isIdentical(styledText) - boolean","Type","Method","Description","Determine if the styledText object is identical to the one specified.","Parameters","styledText - an hs.styledtext object","Returns","a boolean value indicating whether or not the styled text objects are identical, both in text content and attributes specified.","Notes","comparing two hs.styledtext objects with the == operator only compares whether or not the string values are identical. This method also compares their attributes."]},{"l":"len","p":["Signature","hs.styledtext:len() - integer","Type","Method","Description","Returns the length of the text of the hs.styledtext object. Mimics the Lua string.len function.","Parameters","None","Returns","an integer which is the length of the text of the hs.styledtext object.","Notes"]},{"l":"lower","p":["Signature","hs.styledtext:lower() - styledText object","Type","Method","Description","Returns a copy of the hs.styledtext object with all alpha characters converted to lower case. Mimics the Lua string.lower function.","Parameters","None","Returns","a copy of the hs.styledtext object with all alpha characters converted to lower case","Notes"]},{"l":"match","p":["Signature","hs.styledtext:match(pattern, [init]) - match ... | nil","Type","Method","Description","Returns the first occurrence of the captures in the specified pattern (or the complete pattern, if no captures are specified) in the text of the hs.styledtext object. Mimics the Lua string.match function.","Parameters","pattern - a string containing the pattern to locate. See the Lua manual, section 6.4.1 ( help.lua._man._6_4_1) for more details. init - an optional integer specifying the location within the text to start the pattern search","Returns","if a match is found, the captures in the specified pattern (or the complete pattern, if no captures are specified). If the pattern was not found in the text, then this method returns nil.","Notes","Any captures (or the entire pattern) returned are returned as Lua Strings, not as hs.styledtext objects."]},{"l":"removeStyle","p":["Signature","hs.styledtext:removeStyle(attributes, [starts], [ends]) - styledText object","Type","Method","Description","Return a copy of the hs.styledtext object containing the changes to its attributes specified in the attributes table.","Parameters","attributes - an array of attribute labels to remove (set to nil) from the hs.styledtext object. starts - an optional index position within the text of the hs.styledtext object indicating the beginning of the substring to remove attributes for. Defaults to 1, the beginning of the object's text. If this number is negative, it is counted backwards from the end of the object's text (i.e. -1 would be the last character position). ends - an optional index position within the text of the hs.styledtext object indicating the end of the substring to remove attributes for. Defaults to the length of the object's text. If this number is negative, it is counted backwards from the end of the object's text.","Returns","a copy of the hs.styledtext object with the attributes specified removed from the given range of the original object.","Notes","starts and ends follow the conventions of i and j for Lua's string.sub function. See the module description documentation ( help.hs.styledtext) for a list of officially recognized attribute label names. The officially recognized attribute labels were chosen for brevity or for consistency with conventions used in Hammerspoon's other modules. If you know the Objective-C name for an attribute, you can list it instead of an officially recognized label, allowing the removal of attributes which this module cannot manipulate in other ways."]},{"l":"rep","p":["Signature","hs.styledtext:rep(n, [separator]) - styledText object","Type","Method","Description","Returns an hs.styledtext object which contains n repetitions of the hs.styledtext object, optionally with separator between each repetition. Mimics the Lua string.rep function.","Parameters","n - the number of times to repeat the hs.styledtext object. separator - an optional string or hs.styledtext object to insert between repetitions.","Returns","an hs.styledtext object which contains n repetitions of the object, including separator between repetitions, if it is specified.","Notes"]},{"l":"setString","p":["Signature","hs.styledtext:setString(string, [starts], [ends], [clear]) - styledText object","Type","Method","Description","Return a copy of the hs.styledtext object containing the changes to its attributes specified in the attributes table.","Parameters","string - a string, table, or hs.styledtext object to insert or replace the substring specified. starts - an optional index position within the text of the hs.styledtext object indicating the beginning of the destination for the specified string. Defaults to 1, the beginning of the objects text. If this number is negative, it is counted backwards from the end of the object's text (i.e. -1 would be the last character position). ends - an optional index position within the text of the hs.styledtext object indicating the end of destination for the specified string. Defaults to the length of the objects text. If this number is negative, it is counted backwards from the end of the object's text. If this number is 0, then the substring is inserted at the index specified by starts rather than replacing it. clear - an optional boolean indicating whether or not the attributes of the new string should be included (true) or whether the new substring should inherit the attributes of the first character replaced (false). Defaults to false if string is a Lua String or number; otherwise defaults to true.","Returns","a copy of the hs.styledtext object with the specified substring replacement to the original object, or nil if an error occurs","Notes","starts and ends follow the conventions of i and j for Lua's string.sub function except that starts must refer to an index preceding or equal to ends, even after negative and out-of-bounds indices are adjusted for. See the module description documentation ( help.hs.styledtext) for a description of the attributes table format"]},{"l":"setStyle","p":["Signature","hs.styledtext:setStyle(attributes, [starts], [ends], [clear]) - styledText object","Type","Method","Description","Return a copy of the hs.styledtext object containing the changes to its attributes specified in the attributes table.","Parameters","attributes - a table of attribute key-value pairs to apply to the object between the positions of starts and ends starts - an optional index position within the text of the hs.styledtext object indicating the beginning of the substring to set attributes for. Defaults to 1, the beginning of the objects text. If this number is negative, it is counted backwards from the end of the object's text (i.e. -1 would be the last character position). ends - an optional index position within the text of the hs.styledtext object indicating the end of the substring to set attributes for. Defaults to the length of the objects text. If this number is negative, it is counted backwards from the end of the object's text. clear - an optional boolean indicating whether or not the attributes specified should completely replace the existing attributes (true) or be added to/modify them (false). Defaults to false.","Returns","a copy of the hs.styledtext object with the attributes specified applied to the given range of the original object.","Notes","starts and ends follow the conventions of i and j for Lua's string.sub function. See the module description documentation ( help.hs.styledtext) for a description of the attributes table format"]},{"l":"sub","p":["Signature","hs.styledtext:sub(starts, [ends]) - styledText object","Type","Method","Description","Returns a substring, including the style attributes, specified by the given indices from the hs.styledtext object. Mimics the Lua string.sub function.","Parameters","starts - the index position within the text of the hs.styledtext object indicating the beginning of the substring to return. If this number is negative, it is counted backwards from the end of the object's text (i.e. -1 would be the last character position). ends - an optional index position within the text of the hs.styledtext object indicating the end of the substring to return. Defaults to the length of the objects text. If this number is negative, it is counted backwards from the end of the object's text.","Returns","an hs.styledtext object containing the specified substring.","Notes","starts and ends follow the conventions of i and j for Lua's string.sub function."]},{"l":"upper","p":["Signature","hs.styledtext:upper() - styledText object","Type","Method","Description","Returns a copy of the hs.styledtext object with all alpha characters converted to upper case. Mimics the Lua string.upper function.","Parameters","None","Returns","a copy of the hs.styledtext object with all alpha characters converted to upper case","Notes"]}],[{"i":"hstabs","l":"hs.tabs","p":["Place the windows of an application into tabs drawn on its titlebar"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","enableForApp","focusTab","tabWindows"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"enableForApp","p":["Signature","hs.tabs.enableForApp(app)","Type","Function","Description","Places all the windows of an app into one place and tab them","Parameters","app - An hs.application object or the app title","Returns","None","Notes"]},{"l":"focusTab","p":["Signature","hs.tabs.focusTab(app, num)","Type","Function","Description","Focuses a specific tab of an app","Parameters","app - An hs.application object previously enabled for tabbing num - A tab number to switch to","Returns","None","Notes","If num is higher than the number of tabs, the last tab will be focussed"]},{"l":"tabWindows","p":["Signature","hs.tabs.tabWindows(app)","Type","Function","Description","Gets a list of the tabs of a window","Parameters","app - An hs.application object","Returns","An array of the tabbed windows of an app in the same order as they would be tabbed","Notes","This function can be used when writing tab switchers"]}],[{"i":"hstangent","l":"hs.tangent","p":["Tangent Control Surface Extension","API Version: TUBE Version 3.2 - TIPC Rev 4 (22nd February 2017)","This plugin allows Hammerspoon to communicate with Tangent's range of panels, such as their Element, Virtual Element Apps, Wave, Ripple and any future panels.","The Tangent Unified Bridge Engine (TUBE) is made up of two software elements, the Mapper and the Hub. The Hub communicates with your application via the TUBE Inter Process Communications (TIPC). TIPC is a standardised protocol to allow any application that supports it to communicate with any current and future panels produced by Tangent via the TUBE Hub.","You can download the Tangent Developer Support Pack & Tangent Hub Installer for Mac here.","This extension was thrown together by Chris Hocking, then dramatically improved by David Peterson for CommandPost."]},{"l":"API Overview","p":["action","automaticallySendApplicationDefinition","callback","connect","connected","Constants- Useful values which cannot be changed","disconnect","fromHub","Functions- API calls offered directly by the extension","ipAddress","isTangentHubInstalled","panelType","parameter","port","send","sendAllChange","sendApplicationDefinition","sendDisplayText","sendHighlightControl","sendIndicateControl","sendMenuString","sendModeValue","sendPanelConnectionStatesRequest","sendParameterValue","sendRenameControl","sendUnmanagedDisplayWrite","sendUnmanagedPanelCapabilitiesRequest","setLogLevel","toHub","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"action","p":["Signature","hs.tangent.reserved.action - table","Type","Constant","Description","Definitions for reserved action IDs.","Notes","alt- toggles the 'ALT' function. nextKnobBank- switches to the next knob bank. prevKnobBank- switches to the previous knob bank. nextButtonBank- switches to the next button bank. prevBasketBank- switches to the previous button bank. nextTrackerballBank- switches to the next trackerball bank. prevTrackerballBank- switches to the previous trackerball bank. nextMode- switches to the next mode. prevMode- switches to the previous mode. goToMode- switches to the specified mode, requiring a Argument with the mode ID. toggleJogShuttle- toggles jog/shuttle mode. toggleMouseEmulation- toggles mouse emulation. fakeKeypress- generates a keypress, requiring an Argument with the key code. showHUD- shows the HUD on screen. goToKnobBank- goes to the specific knob bank, requiring an Argument with the bank number. goToButtonBank- goes to the specific button bank, requiring an Argument with the bank number. goToTrackerballBank- goes to the specific trackerball bank, requiring an Argument with the bank number."]},{"l":"fromHub","p":["Signature","hs.tangent.fromHub - table","Type","Constant","Description","Definitions for IPC Commands from the HUB to Hammerspoon.","Notes","connected- a connection is established with the Hub. disconnected- the connection is dropped with the Hub. initiateComms- sent when the Hub wants to initiate communications. parameterChange- a parameter was incremented. parameterReset- a parameter was reset. parameterValueRequest- the Hub wants the current value of the parameter. menuChange- The menu was changed, +1 or -1. menuReset- The menu was reset. menuStringRequest- The application should send a menuString with the current value. actionOn- An action button was pressed. actionOff- An action button was released. modeChange- The current mode was changed. transport- The transport. unmanagedPanelCapabilities- Send by the Hub to advertise an unmanaged panel. unmanagedButtonDown- A button on an unmanaged panel was pressed. unmanagedButtonUp- A button on an unmanaged panel was released. unmanagedEncoderChange- An encoder (dial/wheel) on an unmanaged panel changed. unmanagedDisplayRefresh- Triggered when an unmanaged panel's display needs to update. panelConnectionState- A panel's connection state changed."]},{"l":"panelType","p":["Signature","hs.tangent.panelType - table","Type","Constant","Description","Tangent Panel Types."]},{"l":"parameter","p":["Signature","hs.tangent.reserved.parameter - table","Type","Constant","Description","A table of reserved parameter IDs.","Notes","transportRing- transport ring. fakeKeypress- sends a fake keypress."]},{"l":"toHub","p":["Signature","hs.tangent.toHub - table","Type","Constant","Description","Definitions for IPC Commands from Hammerspoon to the HUB."]},{"l":"Variables"},{"l":"automaticallySendApplicationDefinition","p":["Signature","hs.tangent.automaticallySendApplicationDefinition - boolean","Type","Variable","Description","Automatically send the \"Application Definition\" response. Defaults to true."]},{"l":"ipAddress","p":["Signature","hs.tangent.ipAddress - number","Type","Variable","Description","IP Address that the Tangent Hub is located at. Defaults to 127.0.0.1."]},{"l":"port","p":["Signature","hs.tangent.port - number","Type","Variable","Description","The port that Tangent Hub monitors. Defaults to 64246."]},{"l":"Functions"},{"l":"callback","p":["Signature","hs.tangent.callback() - boolean","Type","Function","Description","Sets a callback when new messages are received.","Parameters","callbackFn - a function to set as the callback for hs.tangent. If the value provided is nil, any currently existing callback function is removed.","Returns","true if successful otherwise false","Notes","Full documentation for the Tangent API can be downloaded here. The callback function should expect 1 argument and should not return anything. The 1 argument will be a table, which can contain one or many commands. Each command is it's own table with the following contents: id - the message ID of the incoming message metadata - A table of data for the Tangent command (see below). The metadata table will return the following, depending on the id for the callback: connected- Connection to Tangent Hub successfully established. disconnected- The connection to Tangent Hub was dropped. initiateComms- Initiates communication between the Hub and the application. protocolRev- The revision number of the protocol. numPanels- The number of panels connected. panels panelID- The ID of the panel. panelType- The type of panel connected. data- The raw data from the Tangent Hub parameterChange- Requests that the application increment a parameter. paramID- The ID value of the parameter. increment- The incremental value which should be applied to the parameter. parameterReset- Requests that the application changes a parameter to its reset value. paramID- The ID value of the parameter. parameterValueRequest- Requests that the application sends a ParameterValue (0x82) command to the Hub. paramID- The ID value of the parameter. menuChange- Requests the application change a menu index by +1 or -1. menuID- The ID value of the menu. increment- The incremental amount by which the menu index should be changed which will always be an integer value of +1 or -1. menuReset- Requests that the application changes a menu to its reset value. menuID- The ID value of the menu. menuStringRequest- Requests that the application sends a MenuString (0x83) command to the Hub. menuID- The ID value of the menu. actionOn- Requests that the application performs the specified action. actionID- The ID value of the action. modeChange- Requests that the application changes to the specified mode. modeID- The ID value of the mode. transport- Requests the application to move the currently active transport. jogValue- The number of jog steps to move the transport. shuttleValue- An incremental value to add to the shuttle speed. actionOff- Requests that the application cancels the specified action. actionID- The ID value of the action. unmanagedPanelCapabilities- Only used when working in Unmanaged panel mode. Sent in response to a UnmanagedPanelCapabilitiesRequest (0xA0) command. panelID- The ID of the panel as reported in the InitiateComms command. numButtons- The number of buttons on the panel. numEncoders- The number of encoders on the panel. numDisplays- The number of displays on the panel. numDisplayLines- The number of lines for each display on the panel. numDisplayChars- The number of characters on each line of each display on the panel. unmanagedButtonDown- Only used when working in Unmanaged panel mode. Issued when a button has been pressed. panelID- The ID of the panel as reported in the InitiateComms command. buttonID- The hardware ID of the button unmanagedButtonUp- Only used when working in Unmanaged panel mode. Issued when a button has been released. panelID- The ID of the panel as reported in the InitiateComms command. buttonID- The hardware ID of the button. unmanagedEncoderChange- Only used when working in Unmanaged panel mode. Issued when an encoder has been moved. panelID- The ID of the panel as reported in the InitiateComms command. paramID- The hardware ID of the encoder. increment- The incremental value. unmanagedDisplayRefresh- Only used when working in Unmanaged panel mode. Issued when a panel has been connected or the focus of the panel has been returned to your application. panelID- The ID of the panel as reported in the InitiateComms command. panelConnectionState panelID- The ID of the panel as reported in the InitiateComms command. state- The connected state of the panel, true if connected, false if disconnected."]},{"l":"connect","p":["Signature","hs.tangent.connect(applicationName, systemPath[, userPath]) - boolean, errorMessage","Type","Function","Description","Connects to the Tangent Hub.","Parameters","applicationName - Your application name as a string systemPath - A string containing the absolute path of the directory that contains the Controls and Default Map XML files.[userPath] - An optional string containing the absolute path of the directory that contains the User’s Default Map XML files.","Returns","success - true on success, otherwise nil errorMessage - The error messages as a string or nil if success is true.","Notes"]},{"l":"connected","p":["Signature","hs.tangent.connected() - boolean","Type","Function","Description","Checks to see whether or not you're successfully connected to the Tangent Hub.","Parameters","None","Returns","true if connected, otherwise false","Notes"]},{"l":"disconnect","p":["Signature","hs.tangent.disconnect() - none","Type","Function","Description","Disconnects from the Tangent Hub.","Parameters","None","Returns","Notes"]},{"l":"isTangentHubInstalled","p":["Signature","hs.tangent.isTangentHubInstalled() - boolean","Type","Function","Description","Checks to see whether or not the Tangent Hub software is installed.","Parameters","None","Returns","true if Tangent Hub is installed otherwise false.","Notes"]},{"l":"send","p":["Signature","hs.tangent.send(byteString) - boolean, string","Type","Function","Description","Sends a \"bytestring\" message to the Tangent Hub.","Parameters","byteString - The string of bytes to send to tangent.","Returns","success - true if connected, otherwise false errorMessage - An error message if an error occurs, as a string","Notes","This should be a full encoded string for the command you want to send, withouth the leading 'size' section, which the function will calculate automatically. In general, you should use the more specific functions that package the command for you, such as sendParameterValue(...). This function can be used to send a message that this API doesn't yet support. Full documentation for the Tangent API can be downloaded here."]},{"l":"sendAllChange","p":["Signature","hs.tangent.sendAllChange() - boolean, string","Type","Function","Description","Tells the Hub that a large number of software-controls have changed.","Parameters","None","Returns","true if successful, or false and an error message if not.","Notes","The Hub responds by requesting all the current values of software-controls it is currently controlling."]},{"l":"sendApplicationDefinition","p":["Signature","hs.tangent.sendApplicationDefinition([appName, systemPath, userPath]) - boolean, string","Type","Function","Description","Sends the application details to the Tangent Hub.","Parameters","appName - The human-readable name of the application. systemPath - A string containing the absolute path of the directory that contains the Controls and Default Map XML files (Path String) userPath - A string containing the absolute path of the directory that contains the User’s Default Map XML files (Path String)","Returns","true if successful, false and an error message if there was a problem.","Notes","If no details are provided the ones stored in the module are used."]},{"l":"sendDisplayText","p":["Signature","hs.tangent.sendDisplayText(messages[, doubleHeight]) - boolean, string","Type","Function","Description","Updates the Hub with a number of character strings that will be displayed on connected panels if there is space.","Parameters","messages - A list of messages to send. doubleHeight - An optional list of boolean s indicating if the corresponding message is double-height.","Returns","true if successful, or false and an error message if not.","Notes","Strings may either be 32 character, single height or 16 character double-height. They will be displayed in the order received; the first string displayed at the top of the display. If a string is not defined as double-height then it will occupy the next line. If a string is defined as double-height then it will occupy the next 2 lines. The maximum number of lines which will be used by the application must be indicated in the Controls XML file. Text which exceeds 32 (single-height) or 16 (double-height) characters will be truncated. If all text is single-height, the doubleHeight table can be omitted."]},{"l":"sendHighlightControl","p":["Signature","hs.tangent.sendHighlightControl(targetID, active) - boolean, string","Type","Function","Description","Highlights the control on any panel where this feature is available.","Parameters","targetID - The id of any application defined Parameter, Menu, Action or Mode (Unsigned Int) active - If true, the control is highlighted, otherwise it is not.","Returns","true if sent successfully, false and an error message if no.","Notes","When applied to Modes, buttons which are mapped to the reserved \"Go To Mode\" action for this particular mode will highlight."]},{"l":"sendIndicateControl","p":["Signature","hs.tangent.sendIndicateControl(targetID, indicated) - boolean, string","Type","Function","Description","Sets the Indicator of the control on any panel where this feature is available.","Parameters","targetID - The id of any application defined Parameter, Menu, Action or Mode active - If true, the control is indicated, otherwise it is not.","Returns","true if sent successfully, false and an error message if no.","Notes","This indicator is driven by the atDefault argument for Parameters and Menus. This command therefore only applies to controls mapped to Actions and Modes. When applied to Modes, buttons which are mapped to the reserved \"Go To Mode\" action for this particular mode will have their indicator set."]},{"l":"sendMenuString","p":["Signature","hs.tangent.sendMenuString(menuID, value[, atDefault]) - boolean, string","Type","Function","Description","Updates the Hub with a menu value.","Parameters","menuID - The ID value of the menu (Unsigned Int) value - The current ‘value’ of the parameter represented as a string atDefault - if true the value represents the default. Otherwise false.","Returns","true if successful, or false and an error message if not.","Notes","The Hub then updates the displays of any panels which are currently showing the menu. If a value of nil is sent then the Hub will not attempt to display a value for the menu. However the atDefault flag will still be recognised."]},{"l":"sendModeValue","p":["Signature","hs.tangent.sendModeValue(modeID) - boolean, string","Type","Function","Description","Updates the Hub with a mode value.","Parameters","modeID - The ID value of the mode (Unsigned Int)","Returns","true if successful, or false and an error message if not.","Notes","The Hub then changes mode and requests all the current values of software-controls it is controlling."]},{"l":"sendPanelConnectionStatesRequest","p":["Signature","hs.tangent.sendPanelConnectionStatesRequest())","Type","Function","Description","Requests the Hub to respond with a sequence of PanelConnectionState (0x35) commands to report the connected/disconnected status of each configured panel","Parameters","None","Returns","true if sent successfully, false and an error message if not.","Notes","A single request may result in multiple state responses."]},{"l":"sendParameterValue","p":["Signature","hs.tangent.sendParameterValue(paramID, value[, atDefault]) - boolean, string","Type","Function","Description","Updates the Hub with a parameter value.","Parameters","paramID - The ID value of the parameter (Unsigned Int) value - The current value of the parameter (Float) atDefault - if true the value represents the default. Defaults to false.","Returns","true if successful, or false and an error message if not.","Notes","The Hub then updates the displays of any panels which are currently showing the parameter value."]},{"l":"sendRenameControl","p":["Signature","hs.tangent.sendRenameControl(targetID, newName) - boolean, string","Type","Function","Description","Renames a control dynamically.","Parameters","targetID - The id of any application defined Parameter, Menu, Action or Mode (Unsigned Int) newName - The new name to apply.","Returns","true if successful, false and an error message if not.","Notes","The string supplied will replace the normal text which has been derived from the Controls XML file. To remove any existing replacement name set newName to , this will remove any renaming and return the system to the normal display text When applied to Modes, the string displayed on buttons which mapped to the reserved \"Go To Mode\" action for this particular mode will also change."]},{"l":"sendUnmanagedDisplayWrite","p":["Signature","hs.tangent.sendUnmanagedDisplayWrite(panelID, displayID, lineNum, pos, message) - boolean, string","Type","Function","Description","Updates the Hub with text that will be displayed on a specific panel at the given line and starting position where supported by the panel capabilities.","Parameters","panelID - The ID of the panel as reported in the InitiateComms command (Unsigned Int) displayID - The ID of the display to be written to (Unsigned Int) lineNum - The line number of the display to be written to with 1 as the top line (Unsigned Int) pos - The position on the line to start writing from with 1 as the first column (Unsigned Int) message - A line of text (Character String)","Returns","true if successful, or false and an error message if not.","Notes","Only used when working in Unmanaged panel mode. If the most significant bit of any individual text character in message is set it will be displayed as inversed with dark text on a light background."]},{"l":"sendUnmanagedPanelCapabilitiesRequest","p":["Signature","hs.tangent.sendUnmanagedPanelCapabilitiesRequest(panelID) - boolean, string","Type","Function","Description","Requests the Hub to respond with an UnmanagedPanelCapabilities (0x30) command.","Parameters","panelID - The ID of the panel as reported in the InitiateComms command (Unsigned Int)","Returns","true if successful, or false and an error message if not.","Notes","Only used when working in Unmanaged panel mode"]},{"l":"setLogLevel","p":["Signature","hs.tangent.setLogLevel(loglevel) - none","Type","Function","Description","Sets the Log Level.","Parameters","loglevel - can be 'nothing', 'error', 'warning', 'info', 'debug', or 'verbose'; or a corresponding number between 0 and 5","Returns","None","Notes"]}],[{"i":"hstask","l":"hs.task","p":["Execute processes in the background and capture their output","Notes:","This is not intended to be used for processes which never exit. While it is possible to run such things with hs.task, it is not possible to read their output while they run and if they produce significant output, eventually the internal OS buffers will fill up and the task will be suspended.","An hs.task object can only be used once"]},{"l":"API Overview","p":["closeInput","environment","Functions- API calls offered directly by the extension","interrupt","isRunning","Methods- API calls which can only be made on an object returned by a constructor","new","pause","pid","resume","setCallback","setEnvironment","setInput","setStreamingCallback","setWorkingDirectory","start","terminate","terminationReason","terminationStatus","waitUntilExit","workingDirectory"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.task.new(launchPath, callbackFn[, streamCallbackFn][, arguments]) - hs.task object | | Type | Function | | Description | Creates a new hs.task object | | Parameters | launchPath - A string containing the path to an executable file. This must be the full path to an executable and not just an executable which is in your environment's path (e.g. /bin/ls rather than just ls).callbackFn - A callback function to be called when the task terminates, or nil if no callback should be called. The function should accept three arguments: exitCode - An integer containing the exit code of the process stdOut - A string containing the standard output of the process stdErr - A string containing the standard error output of the processstreamCallbackFn - A optional callback function to be called whenever the task outputs data to stdout or stderr. The function must return a boolean value - true to continue calling the streaming callback, false to stop calling it. The function should accept three arguments: task - The hs.task object or nil if this is the final output of the completed task. stdOut - A string containing the standard output received since the last call to this callback stdErr - A string containing the standard error output received since the last call to this callbackarguments - An optional table of command line argument strings for the executable | | Returns | An hs.task object | | Notes | The arguments are not processed via a shell, so you do not need to do any quoting or escaping. They are passed to the executable exactly as provided.When using a stream callback, the callback may be invoked one last time after the termination callback has already been invoked. In this case, the task argument to the stream callback will be nil rather than the task userdata object and the return value of the stream callback will be ignored. |"]},{"l":"Methods"},{"l":"closeInput","p":["Signature","hs.task:closeInput() - hs.task object","Type","Method","Description","Closes the task's stdin","Parameters","None","Returns","The hs.task object","Notes","This should only be called on tasks with a streaming callback - tasks without it will automatically close stdin when any data supplied via hs.task:setInput() has been written This is primarily useful for sending EOF to long-running tasks"]},{"l":"environment","p":["Signature","hs.task:environment() - environment","Type","Method","Description","Returns the environment variables as a table for the task.","Parameters","None","Returns","a table of the environment variables for the task where each key is the environment variable name.","Notes","if you have not yet set an environment table with the hs.task:setEnvironment method, this method will return a copy of the Hammerspoon environment table, as this is what the task will inherit by default."]},{"l":"interrupt","p":["Signature","hs.task:interrupt() - hs.task object","Type","Method","Description","Interrupts the task","Parameters","None","Returns","The hs.task object","Notes","This will send SIGINT to the process"]},{"l":"isRunning","p":["Signature","hs.task:isRunning() - boolean","Type","Method","Description","Test if a task is still running.","Parameters","None","Returns","true if the task is running or false if it is not.","Notes","A task which has not yet been started yet will also return false."]},{"l":"pause","p":["Signature","hs.task:pause() - boolean","Type","Method","Description","Pauses the task","Parameters","None","Returns","If the task was paused successfully, returns the task object; otherwise returns false","Notes","If the task is not paused, the error message will be printed to the Hammerspoon Console This method can be called multiple times, but a matching number of hs.task:resume() calls will be required to allow the process to continue"]},{"l":"pid","p":["Signature","hs.task:pid() - integer","Type","Method","Description","Gets the PID of a running/finished task","Parameters","None","Returns","An integer containing the PID of the task","Notes","The PID will still be returned if the task has already completed and the process terminated"]},{"l":"resume","p":["Signature","hs.task:resume() - boolean","Type","Method","Description","Resumes the task","Parameters","None","Returns","If the task was resumed successfully, returns the task object; otherwise returns false","Notes","If the task is not resumed successfully, the error message will be printed to the Hammerspoon Console"]},{"l":"setCallback","p":["Signature","hs.task:setCallback(fn) - hs.task object","Type","Method","Description","Set or remove a callback function for a task.","Parameters","fn - A function to be called when the task completes or is terminated, or nil to remove an existing callback","Returns","the hs.task object","Notes"]},{"l":"setEnvironment","p":["Signature","hs.task:setEnvironment(environment) - hs.task object | false","Type","Method","Description","Sets the environment variables for the task.","Parameters","environment - a table of key-value pairs representing the environment variables that will be set for the task.","Returns","The hs.task object, or false if the table was not set (usually because the task is already running or has completed)","Notes","If you do not set an environment table with this method, the task will inherit the environment variables of the Hammerspoon application. Set this to an empty table if you wish for no variables to be set for the task."]},{"l":"setInput","p":["Signature","hs.task:setInput(inputData) - hs.task object","Type","Method","Description","Sets the standard input data for a task","Parameters","inputData - Data, in string form, to pass to the task as its standard input","Returns","The hs.task object","Notes","This method can be called before the task has been started, to prepare some input for it (particularly if it is not a streaming task) If this method is called multiple times, any input that has not been passed to the task already, is discarded (for streaming tasks, the data is generally consumed very quickly, but for now there is no way to synchronize this)"]},{"l":"setStreamingCallback","p":["Signature","hs.task:setStreamingCallback(fn) - hs.task object","Type","Method","Description","Set a stream callback function for a task","Parameters","fn - A function to be called when the task outputs to stdout or stderr, or nil to remove a callback","Returns","The hs.task object","Notes","For information about the requirements of the callback function, see hs.task.new() If a callback is removed without it previously having returned false, any further stdout/stderr output from the task will be silently discarded"]},{"l":"setWorkingDirectory","p":["Signature","hs.task:setWorkingDirectory(path) - hs.task object | false","Type","Method","Description","Sets the working directory for the task.","Parameters","path - a string containing the path you wish to be the working directory for the task.","Returns","The hs.task object, or false if the working directory was not set (usually because the task is already running or has completed)","Notes","You can only set the working directory if the task has not already been started. This will only set the directory that the task starts in. The task itself can change the directory while it is running."]},{"l":"start","p":["Signature","hs.task:start() - hs.task object | false","Type","Method","Description","Starts the task","Parameters","None","Returns","If the task was started successfully, returns the task object; otherwise returns false","Notes","If the task does not start successfully, the error message will be printed to the Hammerspoon Console"]},{"l":"terminate","p":["Signature","hs.task:terminate() - hs.task object","Type","Method","Description","Terminates the task","Parameters","None","Returns","The hs.task object","Notes","This will send SIGTERM to the process"]},{"l":"terminationReason","p":["Signature","hs.task:terminationReason() - exitCode | false","Type","Method","Description","Returns the termination reason for a task, or false if the task is still running.","Parameters","None","Returns","a string value of \"exit\" if the process exited normally or \"interrupt\" if it was killed by a signal. Returns false if the termination reason is unavailable (the task is still running, or has not yet been started).","Notes"]},{"l":"terminationStatus","p":["Signature","hs.task:terminationStatus() - exitCode | false","Type","Method","Description","Returns the termination status of a task, or false if the task is still running.","Parameters","None","Returns","the numeric exitCode of the task, or the boolean false if the task has not yet exited (either because it has not yet been started or because it is still running).","Notes"]},{"l":"waitUntilExit","p":["Signature","hs.task:waitUntilExit() - hs.task object","Type","Method","Description","Blocks Hammerspoon until the task exits","Parameters","None","Returns","The hs.task object","Notes","All Lua and Hammerspoon activity will be blocked by this method. Its use is highly discouraged."]},{"l":"workingDirectory","p":["Signature","hs.task:workingDirectory() - path","Type","Method","Description","Returns the working directory for the task.","Parameters","None","Returns","a string containing the working directory for the task.","Notes","This only returns the directory that the task starts in. If the task changes the directory itself, this value will not reflect that change."]}],[{"i":"hstimer","l":"hs.timer","p":["Execute functions with various timing rules","NOTE: timers use NSTimer internally, which will be paused when computers sleep. Especially, repeating timers won't be triggered at the specified time when there are sleeps in between. The workaround is to prevent system from sleeping, configured in Energy Saver in System Preferences."]},{"l":"Submodules","p":["hs.timer.delayed"]},{"l":"API Overview","p":["absoluteTime","Constructors- API calls which return an object, typically one that offers API methods","days","doAfter","doAt","doEvery","doUntil","doWhile","fire","Functions- API calls offered directly by the extension","hours","localTime","Methods- API calls which can only be made on an object returned by a constructor","minutes","new","nextTrigger","running","seconds","secondsSinceEpoch","setNextTrigger","start","stop","usleep","waitUntil","waitWhile","weeks"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"absoluteTime","p":["Signature","hs.timer.absoluteTime() - nanoseconds","Type","Function","Description","Returns the absolute time in nanoseconds since the last system boot.","Parameters","None","Returns","the time since the last system boot in nanoseconds","Notes","this value does not include time that the system has spent asleep this value is used for the timestamps in system generated events."]},{"l":"days","p":["Signature","hs.timer.days(n) - sec","Type","Function","Description","Converts days to seconds","Parameters","n - A number of days","Returns","The number of seconds in n days","Notes"]},{"l":"hours","p":["Signature","hs.timer.hours(n) - seconds","Type","Function","Description","Converts hours to seconds","Parameters","n - A number of hours","Returns","The number of seconds in n hours","Notes"]},{"l":"localTime","p":["Signature","hs.timer.localTime() - number","Type","Function","Description","Returns the number of seconds since local time midnight","Parameters","None","Returns","the number of seconds","Notes"]},{"l":"minutes","p":["Signature","hs.timer.minutes(n) - seconds","Type","Function","Description","Converts minutes to seconds","Parameters","n - A number of minutes","Returns","The number of seconds in n minutes","Notes"]},{"l":"seconds","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.timer.seconds(timeOrDuration) - seconds | | Type | Function | | Description | Converts a string with a time of day or a duration into number of seconds | | Parameters | timeOrDuration - a string that can have any of the following formats: \"HH:MM:SS\" or \"HH:MM\" - represents a time of day (24-hour clock), returns the number of seconds since midnight \"DDdHHh\", \"HHhMMm\", \"MMmSSs\", \"DDd\", \"HHh\", \"MMm\", \"SSs\", \"NNNNms\" - represents a duration in days, hours, minutes, seconds and/or milliseconds | | Returns | The number of seconds | | Notes | |"]},{"l":"secondsSinceEpoch","p":["Signature","hs.timer.secondsSinceEpoch() - sec","Type","Function","Description","Gets the (fractional) number of seconds since the UNIX epoch (January 1, 1970)","Parameters","None","Returns","The number of seconds since the epoch","Notes","This has much better precision than os.time(), which is limited to whole seconds."]},{"l":"usleep","p":["Signature","hs.timer.usleep(microsecs)","Type","Function","Description","Blocks Lua execution for the specified time","Parameters","microsecs - A number containing a time in microseconds to block for","Returns","None","Notes","Use of this function is strongly discouraged, as it blocks all main-thread execution in Hammerspoon. This means no hotkeys or events will be processed in that time, no GUI updates will happen, and no Lua will execute. This is only provided as a last resort, or for extremely short sleeps. For all other purposes, you really should be splitting up your code into multiple functions and calling hs.timer.doAfter()"]},{"l":"weeks","p":["Signature","hs.timer.weeks(n) - sec","Type","Function","Description","Converts weeks to seconds","Parameters","n - A number of weeks","Returns","The number of seconds in n weeks","Notes"]},{"l":"Constructors"},{"l":"doAfter","p":["Signature","hs.timer.doAfter(sec, fn) - timer","Type","Constructor","Description","Calls a function after a delay","Parameters","sec - A number of seconds to wait before calling the function fn - A function to call","Returns","An hs.timer object","Notes","There is no need to call :start() on the returned object, the timer will be already running. The callback can be cancelled by calling the :stop() method on the returned object before sec seconds have passed."]},{"l":"doAt","p":["Signature","hs.timer.doAt(time[, repeatInterval], fn[, continueOnError]) - timer","Type","Constructor","Description","Creates and starts a timer which will perform fn at the given (local) time and then (optionally) repeat it every interval.","Parameters","time - number of seconds after (local) midnight, or a string in the format \"HH:MM\" (24-hour local time), indicating the desired trigger time repeatInterval - (optional) number of seconds between triggers, or a string in the format \"DDd\", \"DDdHHh\", \"HHhMMm\", \"HHh\" or \"MMm\" indicating days, hours and/or minutes between triggers; if omitted or 0 the timer will trigger only once fn - a function to call every time the timer triggers continueOnError - an optional boolean flag, defaulting to false, which indicates that the timer should not be automatically stopped if the callback function results in an error.","Returns","a timer object","Notes","The timer can trigger up to 1 second early or late The first trigger will be set to the earliest occurrence given the repeatInterval; if that's omitted, and time is earlier than the current time, the timer will trigger the next day. If the repeated interval results in exactly 24 hours you can schedule regular jobs that will run at the expected time independently of when Hammerspoon was restarted/reloaded. E.g.: If it's 19:00, hs.timer.doAt(20:00,somefn) will set the timer 1 hour from now If it's 21:00, hs.timer.doAt(20:00,somefn) will set the timer 23 hours from now If it's 21:00, hs.timer.doAt(20:00,6h,somefn) will set the timer 5 hours from now (at 02:00) To run a job every hour on the hour from 8:00 to 20:00: for h=8,20 do hs.timer.doAt(h..:00,1d,runJob) end"]},{"l":"doEvery","p":["Signature","hs.timer.doEvery(interval, fn) - timer","Type","Constructor","Description","Repeats fn every interval seconds.","Parameters","interval - A number of seconds between triggers fn - A function to call every time the timer triggers","Returns","An hs.timer object","Notes","This function is a shorthand for hs.timer.new(interval, fn):start()"]},{"l":"doUntil","p":["Signature","hs.timer.doUntil(predicateFn, actionFn[, checkInterval]) - timer","Type","Constructor","Description","Creates and starts a timer which will perform actionFn every checkinterval seconds until predicateFn returns true. The timer is automatically stopped when predicateFn returns true.","Parameters","predicateFn - a function which determines when to stop calling actionFn. This function takes no arguments, but should return true when it is time to stop calling actionFn. actionFn - a function which performs the desired action. This function may take a single argument, the timer itself. checkInterval - an optional parameter indicating how often to repeat the predicateFn check. Defaults to 1 second.","Returns","a timer object","Notes","The timer is passed as an argument to actionFn so that it may stop the timer prematurely (i.e. before predicateFn returns true) if desired. See also hs.timer.doWhile, which is essentially the opposite of this function"]},{"l":"doWhile","p":["Signature","hs.timer.doWhile(predicateFn, actionFn[, checkInterval]) - timer","Type","Constructor","Description","Creates and starts a timer which will perform actionFn every checkinterval seconds while predicateFn returns true. The timer is automatically stopped when predicateFn returns false.","Parameters","predicateFn - a function which determines when to stop calling actionFn. This function takes no arguments, but should return false when it is time to stop calling actionFn. actionFn - a function which performs the desired action. This function may take a single argument, the timer itself. checkInterval - an optional parameter indicating how often to repeat the predicateFn check. Defaults to 1 second.","Returns","a timer object","Notes","The timer is passed as an argument to actionFn so that it may stop the timer prematurely (i.e. before predicateFn returns false) if desired. See also hs.timer.doUntil, which is essentially the opposite of this function"]},{"l":"new","p":["Signature","hs.timer.new(interval, fn [, continueOnError]) - timer","Type","Constructor","Description","Creates a new hs.timer object for repeating interval callbacks","Parameters","interval - A number of seconds between firings of the timer fn - A function to call every time the timer fires continueOnError - An optional boolean, true if the timer should continue to be triggered after the callback function has produced an error, false if the timer should stop being triggered after the callback function has produced an error. Defaults to false.","Returns","An hs.timer object","Notes","The returned object does not start its timer until its :start() method is called If interval is 0, the timer will not repeat (because if it did, it would be repeating as fast as your machine can manage, which seems generally unwise) For non-zero intervals, the lowest acceptable value for the interval is 0.00001s. Values >0 and <0.00001 will be coerced to 0.00001"]},{"l":"waitUntil","p":["Signature","hs.timer.waitUntil(predicateFn, actionFn[, checkInterval]) - timer","Type","Constructor","Description","Creates and starts a timer which will perform actionFn when predicateFn returns true. The timer is automatically stopped when actionFn is called.","Parameters","predicateFn - a function which determines when actionFn should be called. This function takes no arguments, but should return true when it is time to call actionFn. actionFn - a function which performs the desired action. This function may take a single argument, the timer itself. checkInterval - an optional parameter indicating how often to repeat the predicateFn check. Defaults to 1 second.","Returns","a timer object","Notes","The timer is stopped before actionFn is called, but the timer is passed as an argument to actionFn so that the actionFn may restart the timer to be called again the next time predicateFn returns true. See also hs.timer.waitWhile, which is essentially the opposite of this function"]},{"l":"waitWhile","p":["Signature","hs.timer.waitWhile(predicateFn, actionFn[, checkInterval]) - timer","Type","Constructor","Description","Creates and starts a timer which will perform actionFn when predicateFn returns false. The timer is automatically stopped when actionFn is called.","Parameters","predicateFn - a function which determines when actionFn should be called. This function takes no arguments, but should return false when it is time to call actionFn. actionFn - a function which performs the desired action. This function may take a single argument, the timer itself. checkInterval - an optional parameter indicating how often to repeat the predicateFn check. Defaults to 1 second.","Returns","a timer object","Notes","The timer is stopped before actionFn is called, but the timer is passed as an argument to actionFn so that the actionFn may restart the timer to be called again the next time predicateFn returns false. See also hs.timer.waitUntil, which is essentially the opposite of this function"]},{"l":"Methods"},{"l":"fire","p":["Signature","hs.timer:fire() - timer","Type","Method","Description","Immediately fires a timer","Parameters","None","Returns","The hs.timer object","Notes","This cannot be used on a timer which has already stopped running"]},{"l":"nextTrigger","p":["Signature","hs.timer:nextTrigger() - number","Type","Method","Description","Returns the number of seconds until the timer will next trigger","Parameters","None","Returns","A number containing the number of seconds until the next firing","Notes","The return value may be a negative integer in two circumstances: Hammerspoon's runloop is backlogged and is catching up on missed timer triggers The timer object is not currently running. In this case, the return value of this method is the number of seconds since the last firing (you can check if the timer is running or not, with hs.timer:running()"]},{"l":"running","p":["Signature","hs.timer:running() - boolean","Type","Method","Description","Returns a boolean indicating whether or not the timer is currently running.","Parameters","None","Returns","A boolean value indicating whether or not the timer is currently running.","Notes"]},{"l":"setNextTrigger","p":["Signature","hs.timer:setNextTrigger(seconds) - timer","Type","Method","Description","Sets the next trigger time of a timer","Parameters","seconds - A number of seconds after which to trigger the timer","Returns","The hs.timer object, or nil if an error occurred","Notes","If the timer is not already running, this will start it"]},{"l":"start","p":["Signature","hs.timer:start() - timer","Type","Method","Description","Starts an hs.timer object","Parameters","None","Returns","The hs.timer object","Notes","The timer will not call the callback immediately, the timer will wait until it fires If the callback function results in an error, the timer will be stopped to prevent repeated error notifications (see the continueOnError parameter to hs.timer.new() to override this)"]},{"l":"stop","p":["Signature","hs.timer:stop() - timer","Type","Method","Description","Stops an hs.timer object","Parameters","None","Returns","The hs.timer object","Notes"]}],[{"i":"hstimerdelayed","l":"hs.timer.delayed","p":["Specialized timer objects to coalesce processing of unpredictable asynchronous events into a single callback"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","nextTrigger","running","setDelay","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","hs.timer.delayed.new(delay, fn) - hs.timer.delayed object","Type","Constructor","Description","Creates a new delayed timer","Parameters","delay - number of seconds to wait for after a :start() invocation (the \"callback countdown\") fn - a function to call after delay has fully elapsed without any further :start() invocations","Returns","a new hs.timer.delayed object","Notes","These timers are meant to be long-lived: once instantiated, there's no way to remove them from the run loop; create them once at the module level. Delayed timers have specialized methods that behave differently from regular timers. When the :start() method is invoked, the timer will wait for delay seconds before calling fn(); this is referred to as the callback countdown. If :start() is invoked again before delay has elapsed, the countdown starts over again. You can use a delayed timer to coalesce processing of unpredictable asynchronous events into a single callback; for example, if you have an event stream that happens in \"bursts\" of dozens of events at once, set an appropriate delay to wait for things to settle down, and then your callback will run just once."]},{"l":"Methods"},{"l":"nextTrigger","p":["Signature","hs.timer.delayed:nextTrigger() - number or nil","Type","Method","Description","Returns the time left in the callback countdown","Parameters","None","Returns","if the callback countdown is running, returns the number of seconds until it triggers; otherwise returns nil","Notes"]},{"l":"running","p":["Signature","hs.timer.delayed:running() - boolean","Type","Method","Description","Returns a boolean indicating whether the callback countdown is running","Parameters","None","Returns","a boolean","Notes"]},{"l":"setDelay","p":["Signature","hs.timer.delayed:setDelay(delay) - hs.timer.delayed object","Type","Method","Description","Changes the callback countdown duration","Parameters","None","Returns","the delayed timer object","Notes","if the callback countdown is running, calling this method will restart it"]},{"l":"start","p":["Signature","hs.timer.delayed:start([delay]) - hs.timer.delayed object","Type","Method","Description","Starts or restarts the callback countdown","Parameters","delay - (optional) if provided, sets the countdown duration to this number of seconds for this time only; subsequent calls to :start() will revert to the original delay (or to the delay set with :setDelay(delay))","Returns","the delayed timer object","Notes"]},{"l":"stop","p":["Signature","hs.timer.delayed:stop() - hs.timer.delayed object","Type","Method","Description","Cancels the callback countdown, if running; the callback will therefore not be triggered","Parameters","None","Returns","the delayed timer object","Notes"]}],[{"i":"hsuielement","l":"hs.uielement","p":["A generalized framework for working with OSX UI elements"]},{"l":"Submodules","p":["hs.uielement.watcher"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","focusedElement","Methods- API calls which can only be made on an object returned by a constructor","isApplication","isWindow","newWatcher","role","selectedText"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"focusedElement","p":["Signature","hs.uielement.focusedElement() - element or nil","Type","Function","Description","Gets the currently focused UI element","Parameters","None","Returns","An hs.uielement object or nil if no object could be found","Notes"]},{"l":"Methods"},{"l":"isApplication","p":["Signature","hs.uielement:isApplication() - bool","Type","Method","Description","Returns whether the UI element represents an application.","Parameters","None","Returns","A boolean, true if the UI element is an application","Notes"]},{"l":"isWindow","p":["Signature","hs.uielement:isWindow() - bool","Type","Method","Description","Returns whether the UI element represents a window.","Parameters","None","Returns","A boolean, true if the UI element is a window, otherwise false","Notes"]},{"l":"newWatcher","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.uielement:newWatcher(handler[, userData]) - hs.uielement.watcher or nil | | Type | Method | | Description | Creates a new watcher | | Parameters | A function to be called when a watched event occurs. The function will be passed the following arguments: element: The element the event occurred on. Note this is not always the element being watched. event: The name of the event that occurred. watcher: The watcher object being created. userData: The userData you included, if any.an optional userData object which will be included as the final argument to the callback function when it is called. | | Returns | An hs.uielement.watcher object, or nil if an error occurred | | Notes | |"]},{"l":"role","p":["Signature","hs.uielement:role() - string","Type","Method","Description","Returns the role of the element.","Parameters","None","Returns","A string containing the role of the UI element","Notes"]},{"l":"selectedText","p":["Signature","hs.uielement:selectedText() - string or nil","Type","Method","Description","Returns the selected text in the element","Parameters","None","Returns","A string containing the selected text, or nil if none could be found","Notes","Many applications (e.g. Safari, Mail, Firefox) do not implement the necessary accessibility features for this to work in their web views"]}],[{"i":"hsuielementwatcher","l":"hs.uielement.watcher","p":["Watch for events on certain UI elements (including windows and applications)","You can watch the following events:"]},{"l":"Application-level events","p":["See hs.application.watcher for more events you can watch.","hs.uielement.watcher.applicationActivated: The current application switched to this one.","hs.uielement.watcher.applicationDeactivated: The current application is no longer this one.","hs.uielement.watcher.applicationHidden: The application was hidden.","hs.uielement.watcher.applicationShown: The application was shown."]},{"l":"Focus change events","p":["These events are watched on the application level, but send the relevant child element to the handler.","hs.uielement.watcher.mainWindowChanged: The main window of the application was changed.","hs.uielement.watcher.focusedWindowChanged: The focused window of the application was changed. Note that the application may not be activated itself.","hs.uielement.watcher.focusedElementChanged: The focused UI element of the application was changed."]},{"l":"Window-level events","p":["hs.uielement.watcher.windowCreated: A window was created. You should watch for this event on the application, or the parent window.","hs.uielement.watcher.windowMoved: The window was moved.","hs.uielement.watcher.windowResized: The window was resized.","hs.uielement.watcher.windowMinimized: The window was minimized.","hs.uielement.watcher.windowUnminimized: The window was unminimized."]},{"l":"Element-level events","p":["These work on all UI elements, including windows.","hs.uielement.watcher.elementDestroyed: The element was destroyed.","hs.uielement.watcher.titleChanged: The element's title was changed."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","element","pid","start","stop"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"element","p":["Signature","hs.uielement.watcher:element() - object","Type","Method","Description","Returns the element the watcher is watching.","Parameters","None","Returns","The element the watcher is watching.","Notes"]},{"l":"pid","p":["Signature","hs.uielement.watcher:pid() - number","Type","Method","Description","Returns the PID of the element being watched","Parameters","None","Returns","The PID of the element being watched","Notes"]},{"l":"start","p":["Signature","hs.uielement.watcher:start(events) - hs.uielement.watcher","Type","Method","Description","Tells the watcher to start watching for the given list of events.","Parameters","An array of events to be watched for.","Returns","hs.uielement.watcher","Notes","See hs.uielement.watcher for a list of events. You may also specify arbitrary event names as strings. Does nothing if the watcher has already been started. To start with different events, stop it first."]},{"l":"stop","p":["Signature","hs.uielement.watcher:stop() - hs.uielement.watcher","Type","Method","Description","Tells the watcher to stop listening for events.","Parameters","None","Returns","hs.uielement.watcher","Notes","This is automatically called if the element is destroyed."]}],[{"i":"hsurlevent","l":"hs.urlevent","p":["Allows CommandPost to respond to URLs CommandPost is configured to react to URLs that start with commandpost:// when they are opened by OS X. This extension allows you to register callbacks for these URL events and their parameters, offering a flexible way to receive events from other applications.","You can also choose to make CommandPost the default for http:// and https:// URLs, which lets you route the URLs in your Lua code","Given a URL such as commandpost://someEventToHandle?someParam=thingsotherParam=stuff, in the literal, RFC1808 sense of the URL, someEventToHandle is the hostname (or net_loc) of the URL, but given that these are not network resources, we consider someEventToHandle to be the name of the event. No path should be specified in the URL - it should consist purely of a hostname and, optionally, query parameters.","See also hs.ipc for a command line IPC mechanism that is likely more appropriate for shell scripts or command line use. Unlike hs.ipc, hs.urlevent is not able to return any data to its caller.","NOTE: If CommandPost is not running when a commandpost:// URL is opened, CommandPost will be launched, but it will not react to the URL event. Nor will it react to any events until this extension is loaded and event callbacks have been bound. NOTE: Any event which is received, for which no callback has been bound, will be logged to the CommandPost Console NOTE: When you trigger a URL from another application, it is usually best to have the URL open in the background, if that option is available. Otherwise, OS X will activate CommandPost (i.e. give it focus), which makes URL events difficult to use for things like window management."]},{"l":"API Overview","p":["Variables- Configurable values","httpCallback","mailtoCallback","Functions- API calls offered directly by the extension","bind","getAllHandlersForScheme","getDefaultHandler","openURL","openURLWithBundle","setDefaultHandler","setRestoreHandler"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"httpCallback","p":["Signature","hs.urlevent.httpCallback","Type","Variable","Description","A function that should handle http:// and https:// URL events","Notes","The function should handle four arguments: scheme - A string containing the URL scheme (i.e. \"http\") host - A string containing the host requested (e.g. \"www.commandpost.org\") params - A table containing the key/value pairs of all the URL parameters fullURL - A string containing the full, original URL senderPID - An integer containing the PID of the application that opened the URL, if available (otherwise -1)"]},{"l":"mailtoCallback","p":["Signature","hs.urlevent.mailtoCallback","Type","Variable","Description","A function that should handle mailto: URL events","Notes","The function should handle four arguments: scheme - A string containing the URI scheme (i.e. \"mailto\") host - A string containing the host requested (typically nil) params - A table containing the key/value pairs of all the URL parameters, typically empty fullURL - A string containing the full, original URI senderPID - An integer containing the PID of the application that opened the URI, if available (otherwise -1)"]},{"l":"Functions"},{"l":"bind","p":["Signature","hs.urlevent.bind(eventName, callback)","Type","Function","Description","Registers a callback for a commandpost:// URL event","Parameters","eventName - A string containing the name of an event callback - A function that will be called when the specified event is received, or nil to remove an existing callback","Returns","None","Notes","The callback function should accept two parameters: eventName - A string containing the name of the event params - A table containing key/value string pairs containing any URL parameters that were specified in the URL senderPID - An integer containing the PID of the sending application, if available (otherwise -1) Given the URL commandpost://doThingA?value=1 The event name is doThingA and the callback's params argument will be a table containing {[value] = 1}"]},{"l":"getAllHandlersForScheme","p":["Signature","hs.urlevent.getAllHandlersForScheme(scheme) - table","Type","Function","Description","Gets all of the application bundle identifiers of applications able to handle a URL scheme","Parameters","scheme - A string containing a URL scheme (e.g. 'http')","Returns","A table containing the bundle identifiers of all applications that can handle the scheme","Notes"]},{"l":"getDefaultHandler","p":["Signature","hs.urlevent.getDefaultHandler(scheme) - string","Type","Function","Description","Gets the application bundle identifier of the application currently registered to handle a URL scheme","Parameters","scheme - A string containing a URL scheme (e.g. 'http')","Returns","A string containing the bundle identifier of the current default application","Notes"]},{"l":"openURL","p":["Signature","hs.urlevent.openURL(url)","Type","Function","Description","Opens a URL with the default application","Parameters","url - A string containing a URL, which must contain a scheme and '://'","Returns","A boolean, true if the URL was opened successfully, otherwise false","Notes"]},{"l":"openURLWithBundle","p":["Signature","hs.urlevent.openURLWithBundle(url, bundleID) - boolean","Type","Function","Description","Opens a URL with a specified application","Parameters","url - A string containing a URL bundleID - A string containing an application bundle identifier (e.g. \"com.apple.Safari\")","Returns","True if the application was launched successfully, otherwise false","Notes"]},{"l":"setDefaultHandler","p":["Signature","hs.urlevent.setDefaultHandler(scheme[, bundleID])","Type","Function","Description","Sets the default system handler for URLs of a given scheme","Parameters","scheme - A string containing the URL scheme to change. This must be 'http' or 'https' (although entering either will change the handler for both) bundleID - An optional string containing an application bundle identifier for the application to set as the default handler. Defaults to org.latenitefilms.CommandPost.","Returns","None","Notes","Changing the default handler for http/https URLs will display a system prompt asking the user to confirm the change"]},{"l":"setRestoreHandler","p":["Signature","hs.urlevent.setRestoreHandler(scheme, bundleID)","Type","Function","Description","Stores a URL handler that will be restored when CommandPost or reloads its config","Parameters","scheme - A string containing the URL scheme to change. This must be 'http' (although both http:// and https:// URLs will be affected) bundleID - A string containing an application bundle identifier (e.g. 'com.apple.Safari') for the application to set as the default handler when CommandPost exits or reloads its config","Returns","None","Notes","You don't have to call this function if you want CommandPost to permanently be your default handler. Only use this if you want the handler to be automatically reverted to something else when CommandPost exits/reloads."]}],[{"i":"hsusb","l":"hs.usb","p":["Inspect USB devices"]},{"l":"Submodules","p":["hs.usb.watcher"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","attachedDevices"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"attachedDevices","p":["Signature","hs.usb.attachedDevices() - table or nil","Type","Function","Description","Gets details about currently attached USB devices","Parameters","None","Returns","A table containing information about currently attached USB devices, or nil if an error occurred. The table contains a sub-table for each USB device, the keys of which are: productName - A string containing the name of the device vendorName - A string containing the name of the device vendor vendorID - A number containing the Vendor ID of the device productID - A number containing the Product ID of the device","Notes"]}],[{"i":"hsusbwatcher","l":"hs.usb.watcher","p":["Watch for USB device connection/disconnection events"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","start","stop"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.usb.watcher.new(fn) - watcher | | Type | Constructor | | Description | Creates a new watcher for USB device events | | Parameters | fn - A function that will be called when a USB device is inserted or removed. The function should accept a single parameter, which is a table containing the following keys: eventType - A string containing either \"added\" or \"removed\" depending on whether the USB device was connected or disconnected productName - A string containing the name of the device vendorName - A string containing the name of the device vendor vendorID - A number containing the Vendor ID of the device productID - A number containing the Product ID of the device | | Returns | A hs.usb.watcher object | | Notes | |"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.usb.watcher:start() - watcher","Type","Method","Description","Starts the USB watcher","Parameters","None","Returns","The hs.usb.watcher object","Notes"]},{"l":"stop","p":["Signature","hs.usb.watcher:stop() - watcher","Type","Method","Description","Stops the USB watcher","Parameters","None","Returns","The hs.usb.watcher object","Notes"]}],[{"i":"hsutf8","l":"hs.utf8","p":["Functions providing basic support for UTF-8 encodings","Prior to upgrading Hammerspoon's Lua interpreter to 5.3, UTF8 support was provided by including the then beta version of Lua 5.3's utf8 library as a Hammerspoon module. This is no longer necessary, but to maintain compatibility, the Lua utf8 library can still be accessed through hs.utf8. The documentation for the utf8 library can be found at http://www.lua.org/manual/5.3/ or from the Hammerspoon console via the help command: help.lua.utf8. This affects the following functions and variables:","hs.utf8.char - help available via help.lua.utf8.char","hs.utf8.charPattern - help available via help.lua.utf8.charpattern","hs.utf8.codepoint - help available via help.lua.utf8.codepoint","hs.utf8.codes - help available via help.lua.utf8.codes","hs.utf8.len - help available via help.lua.utf8.len","hs.utf8.offset - help available via help.lua.utf8.offset","Additional functions that are specific to Hammerspoon which provide expanded support for UTF8 are documented here."]},{"l":"API Overview","p":["Variables- Configurable values","registeredKeys","Functions- API calls offered directly by the extension","asciiOnly","codepointToUTF8","fixUTF8","hexDump","registerCodepoint","registeredLabels"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"registeredKeys","p":["Signature","hs.utf8.registeredKeys[]","Type","Variable","Description","A collection of UTF-8 characters already converted from codepoint and available as convenient key-value pairs. UTF-8 printable versions of common Apple and OS X special keys are predefined and others can be added with hs.utf8.registerCodepoint(label, codepoint) for your own use.","Notes","This table has a __ tostring() metamethod which allows listing it's contents in the Hammerspoon console by typing hs.utf8.registeredKeys. For parity with hs.utf8.registeredLabels, this can also invoked as a function, i.e. hs.utf8.registeredKeys[cmd] is equivalent to hs.utf8.registeredKeys(cmd)"]},{"l":"Functions"},{"l":"asciiOnly","p":["Signature","hs.utf8.asciiOnly(string[, all]) - string","Type","Function","Description","Returns the provided string with all non-printable ascii characters escaped, except Return, Linefeed, and Tab.","Parameters","string - The input string which is to have all non-printable ascii characters escaped as \\x## (a single byte hexadecimal number). all - an optional boolean parameter (default false) indicating whether or not Return, Linefeed, and Tab should also be considered \"non-printable\"","Returns","The cleaned up string, with non-printable characters escaped.","Notes","Because Unicode characters outside of the basic ascii alphabet are multi-byte characters, any UTF8 or other Unicode encoded character will be broken up into their individual bytes and likely escaped by this function. This function is useful for displaying binary data in a human readable way that might otherwise be inexpressible in the Hammerspoon console or other destination. For example: utf8.charpattern, which contains the regular expression for matching valid UTF8 encoded sequences, results in (null) in the Hammerspoon console, but hs.utf8.asciiOnly(utf8.charpattern) will display [\\x00-\\x7F\\xC2-\\xF4][\\x80-\\xBF]*."]},{"l":"codepointToUTF8","p":["Signature","hs.utf8.codepointToUTF8(...) - string","Type","Function","Description","Wrapper to utf8.char(...) which ensures that all codepoints return valid UTF8 characters.","Parameters","codepoints - A series of numeric Unicode code points to be converted to a UTF-8 byte sequences. If a codepoint is a string (and does not start with U+, it is used as a key for lookup in hs.utf8.registeredKeys[]","Returns","A string containing the UTF-8 byte sequences corresponding to provided codepoints as a combined string.","Notes","Valid codepoint values are from 0x0000 - 0x10FFFF (0 - 1114111) If the codepoint provided is a string that starts with U+, then the 'U+' is converted to a '0x' so that lua can properly treat the value as numeric. Invalid codepoints are returned as the Unicode Replacement Character (U+FFFD) This includes out of range codepoints as well as the Unicode Surrogate codepoints (U+D800 - U+DFFF)"]},{"l":"fixUTF8","p":["Signature","hs.utf8.fixUTF8(inString[, replacementChar]) - outString, posTable","Type","Function","Description","Replace invalid UTF8 character sequences in inString with replacementChar so it can be safely displayed in the console or other destination which requires valid UTF8 encoding.","Parameters","inString - String of characters which may contain invalid UTF8 byte sequences replacementChar - optional parameter to replace invalid byte sequences in inString. If this parameter is not provided, the default UTF8 replacement character, U+FFFD, is used.","Returns","outString - The contents of inString with all invalid UTF8 byte sequences replaced by the replacementChar. posTable - a table of indexes in outString corresponding indicating where replacementChar has been used.","Notes","This function is a slight modification to code found at http://notebook.kulchenko.com/programming/fixing-malformed-utf8-in-lua. If replacementChar is a multi-byte character (like U+FFFD) or multi character string, then the string length of outString will be longer than the string length of inString. The character positions in posTable will reflect these new positions in outString. To calculate the character position of the invalid characters in inString, use something like the following: outString, outErrors = hs.utf8.fixUTF8(inString, replacement) inErrors = for i,p in ipairs(outErrors) do table.insert(inErrors, p - ((i - 1)string.length(replacement) - 1)) end Where replacement is utf8.char(0xFFFD), if you leave it out of the hs.utf8.fixUTF8 function in the first line."]},{"l":"hexDump","p":["Signature","hs.utf8.hexDump(inputString [, count]) - string","Type","Function","Description","Returns a hex dump of the provided string. This is primarily useful for examining the exact makeup of binary data contained in a Lua String as individual bytes for debugging purposes.","Parameters","inputString - the data to be rendered as individual hexadecimal bytes for examination. count - an optional parameter specifying the number of bytes to display per line (default 16)","Returns","a string containing the hex dump of the input string.","Notes","Like hs.utf8.asciiOnly, this function will break up Unicode characters into their individual bytes. As an example: hs.utf8.hexDump(utf8.charpattern) will return 00 : 5B 00 2D 7F C2 2D F4 5D 5B 80 2D BF 5D 2A : [.-..-.][.-.]*"]},{"l":"registerCodepoint","p":["Signature","hs.utf8.registerCodepoint(label, codepoint) - string","Type","Function","Description","Registers a Unicode codepoint under the given label as a UTF-8 string of bytes which can be referenced by the label later in your code as hs.utf8.registeredKeys[label] for convenience and readability.","Parameters","label - a string label to use as a human-readable reference when getting the UTF-8 byte sequence for use in other strings and output functions. codepoint - a Unicode codepoint in numeric or U+xxxx format to register with the given label.","Returns","Returns the UTF-8 byte sequence for the Unicode codepoint registered.","Notes","If a codepoint label was previously registered, this will overwrite the previous value with a new one. Because many of the special keys you may want to register have different variants, this allows you to easily modify the existing predefined defaults to suite your preferences. The return value is merely syntactic sugar and you do not need to save it locally; it can be safely ignored -- future access to the pre-converted codepoint should be retrieved as hs.utf8.registeredKeys[label] in your code. It looks good when invoked from the console, though ☺."]},{"l":"registeredLabels","p":["Signature","hs.utf8.registeredLabels(utf8char) - string","Type","Function","Description","Returns the label name for a UTF8 character, as it is registered in hs.utf8.registeredKeys[].","Parameters","utf8char -- the character to lookup in hs.utf8.registeredKeys[]","Returns","The string label for the UTF8 character or a string in the format of \"U+XXXX\", if it is not defined in hs.utf8.registeredKeys[], or nil, if utf8char is not a valid UTF8 character.","Notes","For parity with hs.utf8.registeredKeys, this can also be invoked as if it were an array: i.e. hs.utf8.registeredLabels(char) is equivalent to hs.utf8.registeredLabels[char]"]}],[{"i":"hsvox","l":"hs.vox","p":["Controls for VOX music player"]},{"l":"API Overview","p":["addurl","backward","decreaseVolume","fastBackward","fastForward","forward","Functions- API calls offered directly by the extension","getAlbumArtist","getCurrentAlbum","getCurrentArtist","getPlayerState","getUniqueID","increaseVolume","isRunning","next","pause","play","playpause","playurl","previous","shuffle","togglePlaylist","trackInfo"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"addurl","p":["Signature","hs.vox.addurl(url)","Type","Function","Description","Add media URL to current list","Parameters","url","Returns","None","Notes"]},{"l":"backward","p":["Signature","hs.vox.backward()","Type","Function","Description","Skips the playback position backwards by about 7 seconds","Parameters","None","Returns","Notes"]},{"l":"decreaseVolume","p":["Signature","hs.vox.decreaseVolume()","Type","Function","Description","Decreases the player volume","Parameters","None","Returns","Notes"]},{"l":"fastBackward","p":["Signature","hs.vox.fastBackward()","Type","Function","Description","Skips the playback position backwards by about 14 seconds","Parameters","None","Returns","Notes"]},{"l":"fastForward","p":["Signature","hs.vox.fastForward()","Type","Function","Description","Skips the playback position forwards by about 17 seconds","Parameters","None","Returns","Notes"]},{"l":"forward","p":["Signature","hs.vox.forward()","Type","Function","Description","Skips the playback position forwards by about 7 seconds","Parameters","None","Returns","Notes"]},{"l":"getAlbumArtist","p":["Signature","hs.vox.getAlbumArtist()","Type","Function","Description","Gets the artist of current Album","Parameters","None","Returns","A string containing the artist of current Album, or nil if an error occurred","Notes"]},{"l":"getCurrentAlbum","p":["Signature","hs.vox.getCurrentAlbum()","Type","Function","Description","Gets the name of the album of the current track","Parameters","None","Returns","A string containing the Album of the current track, or nil if an error occurred","Notes"]},{"l":"getCurrentArtist","p":["Signature","hs.vox.getCurrentArtist()","Type","Function","Description","Gets the name of the artist of the current track","Parameters","None","Returns","A string containing the Artist of the current track, or nil if an error occurred","Notes"]},{"l":"getPlayerState","p":["Signature","hs.vox.getPlayerState()","Type","Function","Description","Gets the current playback state of vox","Parameters","None","Returns","0 for paused 1 for playing","Notes"]},{"l":"getUniqueID","p":["Signature","hs.vox.getUniqueID()","Type","Function","Description","Gets the uniqueID of the current track","Parameters","None","Returns","A string containing the name of the current track, or nil if an error occurred","Notes"]},{"l":"increaseVolume","p":["Signature","hs.vox.increaseVolume()","Type","Function","Description","Increases the player volume","Parameters","None","Returns","Notes"]},{"l":"isRunning","p":["Signature","hs.vox.isRunning()","Type","Function","Description","Returns whether VOX is currently open","Parameters","None","Returns","A boolean value indicating whether the vox application is running","Notes"]},{"l":"next","p":["Signature","hs.vox.next()","Type","Function","Description","Skips to the next track","Parameters","None","Returns","Notes"]},{"l":"pause","p":["Signature","hs.vox.pause()","Type","Function","Description","Pauses the current vox track","Parameters","None","Returns","Notes"]},{"l":"play","p":["Signature","hs.vox.play()","Type","Function","Description","Plays the current vox track","Parameters","None","Returns","Notes"]},{"l":"playpause","p":["Signature","hs.vox.playpause()","Type","Function","Description","Toggles play/pause of current vox track","Parameters","None","Returns","Notes"]},{"l":"playurl","p":["Signature","hs.vox.playurl(url)","Type","Function","Description","Play media from the given URL","Parameters","url","Returns","None","Notes"]},{"l":"previous","p":["Signature","hs.vox.previous()","Type","Function","Description","Skips to previous track","Parameters","None","Returns","Notes"]},{"l":"shuffle","p":["Signature","hs.vox.shuffle()","Type","Function","Description","Toggle shuffle state of current list","Parameters","None","Returns","Notes"]},{"l":"togglePlaylist","p":["Signature","hs.vox.togglePlaylist()","Type","Function","Description","Toggle playlist","Parameters","None","Returns","Notes"]},{"l":"trackInfo","p":["Signature","hs.vox.trackInfo()","Type","Function","Description","Displays information for current track on screen","Parameters","None","Returns","Notes"]}],[{"i":"hswatchable","l":"hs.watchable","p":["A minimalistic Key-Value-Observer framework for Lua.","This module allows you to generate a table with a defined label or path that can be used to share data with other modules or code. Other modules can register as watchers to a specific key-value pair within the watchable object table and will be automatically notified when the key-value pair changes.","The goal is to provide a mechanism for sharing state information between separate and (mostly) unrelated code easily and in an independent fashion."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","watch","Methods- API calls which can only be made on an object returned by a constructor","callback","change","pause","release","resume","value"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","hs.watchable.new(path, [externalChanges]) - table","Type","Constructor","Description","Creates a table that can be watched by other modules for key changes","Parameters","path- the global name for this internal table that external code can refer to the table as. externalChanges- an optional boolean, default false, specifying whether external code can make changes to keys within this table (bi-directional communication).","Returns","a table with metamethods which will notify external code which is registered to watch this table for key-value changes.","Notes","This constructor is used by code which wishes to share state information which other code may register to watch. You may specify any string name as a path, but it must be unique -- an error will occur if the path name has already been registered. All key-value pairs stored within this table are potentially watchable by external code -- if you wish to keep some data private, do not store it in this table. externalChanges will apply to all keys within this table -- if you wish to only allow some keys to be externally modifiable, you will need to register separate paths. If external changes are enabled, you will need to register your own watcher with hs.watchable.watch if action is required when external changes occur."]},{"l":"watch","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.watchable.watch(path, [key], callback) - watchableObject | | Type | Constructor | | Description | Creates a watcher that will be invoked when the specified key in the specified path is modified. | | Parameters | path - a string specifying the path to watch. If key is not provided, then this should be a string of the form \"path.key\" where the key will be identified as the string after the last \".\"key - if provided, a string specifying the specific key within the path to watch.callback - an optional function which will be invoked when changes occur to the key specified within the path. The function should expect the following arguments: watcher - the watcher object itself path - the path being watched key - the specific key within the path which invoked this callback old - the old value for this key, may be nil new - the new value for this key, may be nil | | Returns | a watchableObject | | Notes | This constructor is used by code which wishes to watch state information which is being shared by other code.The callback function is invoked after the new value has already been set -- the callback is a \"didChange\" notification, not a \"willChange\" notification.If the key (specified as a separate argument or as the final component of path) is \"*\", then all key-value pair changes that occur for the table specified by the path will invoke a callback. This is a shortcut for watching an entire table, rather than just a specific key-value pair of the table.It is possible to register a watcher for a path that has not been registered with hs.watchable.new yet. Retrieving the current value with hs.watchable:value in such a case will return nil. |"]},{"l":"Methods"},{"l":"callback","p":["Signature","hs.watchable:callback(fn) - watchableObject","Type","Method","Description","Change or remove the callback function for the watchableObject.","Parameters","fn- a function, or an explicit nil to remove, specifying the new callback function to receive notifications for this watchableObject","Returns","the watchableObject","Notes","see hs.watchable.watch for a description of the arguments the callback function should expect."]},{"l":"change","p":["Signature","hs.watchable:change([key], value) - watchableObject","Type","Method","Description","Externally change the value of the key-value pair being watched by the watchableObject","Parameters","key- if the watchableObject was defined with a key of \"*\", this argument is required and specifies the specific key of the watched table to change the value of. If a specific key was specified when the watchableObject was defined, this argument must not be provided. value- the new value for the key.","Returns","the watchableObject","Notes","if external changes are not allowed for the specified path, this method generates an error"]},{"l":"pause","p":["Signature","hs.watchable:pause() - watchableObject","Type","Method","Description","Temporarily stop notifications about the key-value pair(s) watched by this watchableObject.","Parameters","None","Returns","the watchableObject","Notes"]},{"l":"release","p":["Signature","hs.watchable:release() - nil","Type","Method","Description","Removes the watchableObject so that key-value pairs watched by this object no longer generate notifications.","Parameters","None","Returns","nil","Notes"]},{"l":"resume","p":["Signature","hs.watchable:resume() - watchableObject","Type","Method","Description","Resume notifications about the key-value pair(s) watched by this watchableObject which were previously paused.","Parameters","None","Returns","the watchableObject","Notes"]},{"l":"value","p":["Signature","hs.watchable:value([key]) - currentValue","Type","Method","Description","Get the current value for the key-value pair being watched by the watchableObject","Parameters","key- if the watchableObject was defined with a key of \"*\", this argument is required and specifies the specific key of the watched table to retrieve the value for. If a specific key was specified when the watchableObject was defined, this argument is ignored.","Returns","The current value for the key-value pair being watched by the watchableObject. May be nil.","Notes"]}],[{"i":"hswebsocket","l":"hs.websocket","p":["Simple websocket client."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","new","Methods- API calls which can only be made on an object returned by a constructor","close","send","status"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"new","p":["Signature","hs.websocket.new(url, callback) - object","Type","Function","Description","Creates a new websocket connection.","Parameters","url - The URL to the websocket callback - A function that's triggered by websocket actions.","Returns","The hs.websocket object","Notes","The callback should accept two parameters. The first parameter is a string with the following possible options: open - The websocket connection has been opened closed - The websocket connection has been closed fail - The websocket connection has failed received - The websocket has received a message pong - A pong request has been received The second parameter is a string with the received message or an error message. Given a path '/mysock' and a port of 8000, the websocket URL is as follows: ws://localhost:8000/mysock wss://localhost:8000/mysock (if SSL enabled)"]},{"l":"Methods"},{"l":"close","p":["Signature","hs.websocket:close() - object","Type","Method","Description","Closes a websocket connection.","Parameters","None","Returns","The hs.websocket object","Notes"]},{"l":"send","p":["Signature","hs.websocket:send(message[, isData]) - object","Type","Method","Description","Sends a message to the websocket client.","Parameters","message - A string containing the message to send. isData - An optional boolean that sends the message as binary data (defaults to true).","Returns","The hs.websocket object","Notes","Forcing a text representation by setting isData to false may alter the data if it contains invalid UTF8 character sequences (the default string behavior is to make sure everything is \"printable\" by converting invalid sequences into the Unicode Invalid Character sequence)."]},{"l":"status","p":["Signature","hs.websocket:status() - string","Type","Method","Description","Gets the status of a websocket.","Parameters","None","Returns","A string containing one of the following options: connecting open closing closed unknown","Notes"]}],[{"i":"hswebview","l":"hs.webview","p":["Display web content in a window from Hammerspoon","This module uses Apple's WebKit WKWebView class to provide web content display with JavaScript injection support. The objective is to provide a functional interface to the WKWebView and WKUserContentController classes.","This module is not intended to replace a full web browser and does have some limitations to keep in mind:","Self-signed SSL certificates are not accepted unless they have first been approved and included in the users Keychain by another method, for example, opening the page first in Safari.","The context-menu (right clicking or ctrl-clicking in the webview) provides some menu items which are currently unsupported -- a known example of this is any \"Download...\" menu item in the context menu for links and images.","It is uncertain at present exactly how or where cookies and cached page data is stored or how it can be invalidated.","This can be mitigated to an extent for web requests by using hs.webview:reload(true) and by crafting the url for hs.webview:url({...}) as a table -- see the appropriate help entries for more information.","Any suggestions or updates to the code to address any of these or other limitations as they may become apparent are welcome at the Hammerspoon github site: https://www.github.com/Hammerspoon/hammerspoon"]},{"l":"Submodules","p":["hs.webview.datastore","hs.webview.toolbar","hs.webview.usercontent"]},{"l":"API Overview","p":["allowGestures","allowMagnificationGestures","allowNavigationGestures","allowNewWindows","allowTextEntry","alpha","asHSDrawing","asHSWindow","attachedToolbar","behavior","behaviorAsLabels","bringToFront","certificateChain","certificateOIDs","children","closeOnEscape","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","darkMode","delete","deleteOnClose","Deprecateds- API features which will be removed in an future release","estimatedProgress","evaluateJavaScript","examineInvalidCertificates","frame","Functions- API calls offered directly by the extension","goBack","goForward","hide","historyList","hswindow","html","isOnlySecureContent","isVisible","level","loading","magnification","Methods- API calls which can only be made on an object returned by a constructor","navigationCallback","navigationID","new","newBrowser","orderAbove","orderBelow","parent","policyCallback","privateBrowsing","reload","sendToBack","setLevel","shadow","show","size","sslCallback","stopLoading","title","titleVisibility","topLeft","transparent","url","urlParts","userAgent","windowCallback","windowMasks","windowStyle","windowTitle"]},{"l":"API Documentation"},{"l":"Deprecateds"},{"l":"asHSDrawing","p":["Signature","hs.webview:asHSDrawing() - hs.drawing object","Type","Deprecated","Description","Because use of this method can easily lead to a crash, useful methods from hs.drawing have been added to the hs.webview module itself. If you believe that a useful method has been overlooked, please submit an issue.","Parameters","None","Returns","a placeholder object"]},{"l":"asHSWindow","p":["Signature","hs.webview:asHSWindow() - hs.window object","Type","Deprecated","Description","Returns an hs.window object for the webview so that you can use hs.window methods on it."]},{"l":"setLevel","p":["Signature","hs.webview:setLevel(theLevel) - drawingObject","Type","Deprecated","Description","Deprecated; you should use hs.webview:level instead.","Parameters","theLevel- the level specified as a number, which can be obtained from hs.drawing.windowLevels.","Returns","the webview object","Notes","see the notes for hs.drawing.windowLevels"]},{"l":"Constants"},{"l":"certificateOIDs","p":["Signature","hs.webview.certificateOIDs[]","Type","Constant","Description","A table of common OID values found in SSL certificates. SSL certificates provided to the callback function for hs.webview:sslCallback or in the results of hs.webview:certificateChain use OID strings as the keys which describe the properties of the certificate and this table can be used to get a more common name for the keys you are most likely to see."]},{"l":"windowMasks","p":["Signature","hs.webview.windowMasks[]","Type","Constant","Description","A table containing valid masks for the webview window.","Notes","The Maximize button in the window title is enabled when Resizable is set. The Close, Minimize, and Maximize buttons are only visible when the Window is also Titled."]},{"l":"Functions"},{"l":"titleVisibility","p":["Signature","hs.webview:titleVisibility([state]) - webviewObject | string","Type","Function","Description","Get or set whether or not the title text appears in the webview window.","Parameters","state- an optional string containing the text \"visible\" or \"hidden\", specifying whether or not the webview's title text appears when webview's window style includes \"titled\".","Returns","if a value is provided, returns the webview object; otherwise returns the current value.","Notes","See also hs.webview:windowStyle and hs.webview.windowMasks. When a toolbar is attached to the webview, this function can be used to specify whether the Toolbar appears underneath the webview window's title (\"visible\") or in the window's title bar itself, as seen in applications like Safari (\"hidden\"). When the title is hidden, the toolbar will only display the toolbar items as icons without labels, and ignores changes made with hs.webview.toolbar:displayMode. If a toolbar is attached to the webview, you can achieve the same effect as this method with hs.webview:attachedToolbar():inTitleBar(boolean)"]},{"l":"Constructors"},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview.new(rect, [preferencesTable], [userContentController]) - webviewObject | | Type | Constructor | | Description | Create a webviewObject and optionally modify its preferences. | | Parameters | rect - a rectangle specifying where the webviewObject should be displayed.preferencesTable - an optional table which can include one of more of the following keys: javaScriptEnabled - JavaScript is enabled (default true) javaScriptCanOpenWindowsAutomatically - can JavaScript open windows without user intervention (default true) minimumFontSize - minimum font size (default 0.0) developerExtrasEnabled - include \"Inspect Element\" in the context menu suppressesIncrementalRendering - suppresses content rendering until fully loaded into memory (default false) The following additional preferences may also be set under OS X 10.11 or later (they will be ignored with a warning printed if used under OS X 10.10):applicationName - a string specifying an application name to be listed at the end of the browser's USER-AGENT header. Note that this is only appended to the default user agent string; if you set a custom one with hs.webview:userAgent, this value is ignored.allowsAirPlay - a boolean specifying whether media playback within the webview can play through AirPlay devices.datastore - an hs.webview.datastore object specifying where website data such as cookies, cacheable content, etc. is to be stored.privateBrowsing - a boolean (default false) specifying that the datastore should be set to a new, empty and non-persistent datastore. Note that this will override the datastore key if both are specified and this is set to true.userContentController - an optional hs.webview.usercontent object to provide script injection and JavaScript messaging with Hammerspoon from the webview. | | Returns | The webview object | | Notes | To set the initial URL, use the hs.webview:url method before showing the webview object.Preferences can only be set when the webview object is created. To change the preferences of an open webview, you will need to close it and recreate it with this method.developerExtrasEnabled is not listed in Apple's documentation, but is included in the WebKit2 documentation. |"]},{"l":"newBrowser","p":["Signature","hs.webview.newBrowser(rect, [preferencesTable], [userContentController]) - webviewObject","Type","Constructor","Description","Create a webviewObject with some presets common to an interactive web browser.","Parameters","rect- a rectangle specifying where the webviewObject should be displayed. preferencesTable- an optional table which specifies special settings for the webview object. userContentController- an optional hs.webview.usercontent object to provide script injection and JavaScript messaging with Hammerspoon from the webview.","Returns","The webview object","Notes","The parameters are the same as for hs.webview.new-- check there for more details This constructor is just a short-hand for hs.webview.new(...):allowTextEntry(true):allowGestures(true):windowStyle(15), which specifies a webview with a title bar, title bar buttons (zoom, close, minimize), and allows form entry and gesture support for previous and next pages.* See hs.webview.new and the following for more details: hs.webview:allowGestures hs.webview:allowTextEntry hs.webview:windowStyle hs.webview.windowMasks"]},{"l":"Methods"},{"l":"allowGestures","p":["Signature","hs.webview:allowGestures([value]) - webviewObject | current value","Type","Method","Description","Get or set whether or not the webview will respond to gestures from a trackpad or magic mouse. Default is false.","Parameters","value - an optional boolean value indicating whether or not the webview should respond gestures.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes","This is a shorthand method for getting or setting both hs.webview:allowMagnificationGestures and hs.webview:allowNavigationGestures. This method will set both types of gestures to true or false, if given an argument, but will only return true if both gesture types are currently true; if either or both gesture methods are false, then this method will return false."]},{"l":"allowMagnificationGestures","p":["Signature","hs.webview:allowMagnificationGestures([value]) - webviewObject | current value","Type","Method","Description","Get or set whether or not the webview will respond to magnification gestures from a trackpad or magic mouse. Default is false.","Parameters","value- an optional boolean value indicating whether or not the webview should respond to magnification gestures.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes"]},{"l":"allowNavigationGestures","p":["Signature","hs.webview:allowNavigationGestures([value]) - webviewObject | current value","Type","Method","Description","Get or set whether or not the webview will respond to the navigation gestures from a trackpad or magic mouse. Default is false.","Parameters","value- an optional boolean value indicating whether or not the webview should respond to navigation gestures.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes"]},{"l":"allowNewWindows","p":["Signature","hs.webview:allowNewWindows([value]) - webviewObject | current value","Type","Method","Description","Get or set whether or not the webview allows new windows to be opened from it by any method. Defaults to true.","Parameters","value- an optional boolean value indicating whether or not the webview should allow new windows to be opened from it.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes","This method allows you to prevent a webview from being able to open a new window by any method. This includes right-clicking on a link and selecting \"Open in a New Window\", JavaScript pop-ups, links with the target of \"__ blank\", etc. If you just want to prevent automatic JavaScript windows, set the preference value javaScriptCanOpenWindowsAutomatically to false when creating the web view - this method blocks all methods."]},{"l":"allowTextEntry","p":["Signature","hs.webview:allowTextEntry([value]) - webviewObject | current value","Type","Method","Description","Get or set whether or not the webview can accept keyboard for web form entry. Defaults to false.","Parameters","value- an optional boolean value which sets whether or not the webview will accept keyboard input.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes"]},{"l":"alpha","p":["Signature","hs.webview:alpha([alpha]) - webviewObject | currentValue","Type","Method","Description","Get or set the alpha level of the window containing the hs.webview object.","Parameters","alpha- an optional number between 0.0 and 1.0 specifying the new alpha level for the webview.","Returns","If a parameter is provided, returns the webview object; otherwise returns the current value.","Notes"]},{"l":"attachedToolbar","p":["Signature","hs.webview:attachedToolbar([toolbar]) - webviewObject | currentValue","Type","Method","Description","Get or attach/detach a toolbar to/from the webview.","Parameters","toolbar- if an hs.webview.toolbar object is specified, it will be attached to the webview. If an explicit nil is specified, the current toolbar will be removed from the webview.","Returns","if a toolbarObject or explicit nil is specified, returns the webviewObject; otherwise returns the current toolbarObject or nil, if no toolbar is attached to the webview.","Notes","this method is a convenience wrapper for the hs.webview.toolbar.attachToolbar function. If the toolbarObject is currently attached to another window when this method is called, it will be detached from the original window and attached to the webview. If you wish to attach the same toolbar to multiple webviews, see hs.webview.toolbar:copy."]},{"l":"behavior","p":["Signature","hs.webview:behavior([behavior]) - webviewObject | currentValue","Type","Method","Description","Get or set the window behavior settings for the webview object.","Parameters","behavior- an optional number representing the desired window behaviors for the webview object.","Returns","If an argument is provided, the webview object; otherwise the current value.","Notes","Window behaviors determine how the webview object is handled by Spaces and Exposé. See hs.drawing.windowBehaviors for more information."]},{"l":"behaviorAsLabels","p":["Signature","hs.webview:behaviorAsLabels(behaviorTable) - webviewObject | currentValue","Type","Method","Description","Get or set the window behavior settings for the webview object using labels defined in hs.drawing.windowBehaviors.","Parameters","behaviorTable - an optional table of strings and/or numbers specifying the desired window behavior for the webview object.","Returns","If an argument is provided, the webview object; otherwise the current value.","Notes","Window behaviors determine how the webview object is handled by Spaces and Exposé. See hs.drawing.windowBehaviors for more information."]},{"l":"bringToFront","p":["Signature","hs.webview:bringToFront([aboveEverything]) - webviewObject","Type","Method","Description","Places the drawing object on top of normal windows","Parameters","aboveEverything- An optional boolean value that controls how far to the front the webview should be placed. True to place the webview on top of all windows (including the dock and menubar and fullscreen windows), false to place the webview above normal windows, but below the dock, menubar and fullscreen windows. Defaults to false.","Returns","The webview object","Notes"]},{"l":"certificateChain","p":["Signature","hs.webview:certificateChain() - table | nil","Type","Method","Description","Returns the certificate chain for the most recently committed navigation of the webview.","Parameters","None","Returns","a table containing the certificates that make up the SSL certificate chain securing the most recent committed navigation. Each certificate is described in a table with the following keys: commonName- the common name for the certificate; most commonly this will be a string matching the server portion of the URL request or other descriptor of the certificate's purpose. values- a table containing key-value pairs describing the certificate. The keys will be certificate OIDs. Common OIDs and their meaning can be found in hs.webview.certificateOIDs. The value for each key will be a table with the following keys: label- a description or label for the entry localized label- a localized version of label type- a description of the data type for this value value- the value","Notes","This method is only supported by OS X 10.11 and newer A navigation which was performed via HTTP instead of HTTPS will return an empty array. For OIDs which specify a type of \"date\" -- e.g. \"2.5.29.24\" (invalidityDate) -- the number provided represents the number of seconds since 12:00:00 AM, January 1, 1970 and can be used directly with the Lua os.date command. For OIDs which are known to represent a date, but specify its type as a \"number\" -- e.g. \"2.16.840.1.113741.2.1.1.1.7\" (X509V1ValidityNotAfter) or \"2.16.840.1.113741.2.1.1.1.6\" (X509V1ValidityNotBefore) -- the epoch is 12:00:00 AM, Jan 1, 2001. To convert these dates into a format usable by Lua, you will need to do something similar to the following: os.date(%c, value + os.time({year=2001,month=1,day=1,hour=0,min=0,sec=0})"]},{"l":"children","p":["Signature","hs.webview:children() - array","Type","Method","Description","Returns an array of webview objects which have been opened as children of this webview.","Parameters","None","Returns","an array containing the webview objects of all child windows opened from this webview.","Notes"]},{"l":"closeOnEscape","p":["Signature","hs.webview:closeOnEscape([flag]) - webviewObject | current value","Type","Method","Description","If the webview is closable, this will get or set whether or not the Escape key is allowed to close the webview window.","Parameters","flag- an optional boolean value which indicates whether a webview, when it's style includes Closable (see hs.webview:windowStyle), should allow the Escape key to be a shortcut for closing the webview window. Defaults to false.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes","If this is set to true, Escape will only close the window if no other element responds to the Escape key first (e.g. if you are editing a text input field, the Escape will be captured by the text field, not by the webview Window.)"]},{"l":"darkMode","p":["Signature","hs.webview:darkMode([state]) - bool","Type","Method","Description","Set or display whether or not the hs.webview window should display in dark mode.","Parameters","state- an optional boolean which will set whether or not the hs.webview window should display in dark mode.","Returns","A boolean, true if dark mode is enabled otherwise false.","Notes"]},{"l":"delete","p":["Signature","hs.webview:delete([propagate], [fadeOutTime]) - none","Type","Method","Description","Destroys the webview object, optionally fading it out first (if currently visible).","Parameters","propagate- an optional boolean, default false, which indicates whether or not the child windows of this webview should also be deleted. fadeOutTime- an optional number of seconds over which to fade out the webview object. Defaults to zero.","Returns","None","Notes","This method is automatically called during garbage collection, notably during a Hammerspoon termination or reload, with a fade time of 0."]},{"l":"deleteOnClose","p":["Signature","hs.webview:deleteOnClose([value]) - webviewObject | current value","Type","Method","Description","Get or set whether or not the webview should delete itself when its window is closed.","Parameters","value- an optional boolean value which sets whether or not the webview will delete itself when its window is closed by any method. Defaults to false for a window created with hs.webview.new and true for any webview windows created by the main webview (user selects \"Open Link in New Window\", etc.)","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes","If set to true, a webview object will be deleted when the user clicks on the close button of a titled and closable webview (see hs.webview.windowStyle). Children of an explicitly created webview automatically have this attribute set to true. To cause closed children to remain after the user closes the parent, you can set this to false with a policy callback function when it receives the \"newWindow\" action."]},{"l":"estimatedProgress","p":["Signature","hs.webview:estimatedProgress() - number","Type","Method","Description","Returns the estimated percentage of expected content that has been loaded. Will equal 1.0 when all content has been loaded.","Parameters","None","Returns","a numerical value between 0.0 and 1.0 indicating the percentage of expected content which has been loaded.","Notes"]},{"l":"evaluateJavaScript","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview:evaluateJavaScript(script, [callback]) - webviewObject | | Type | Method | | Description | Execute JavaScript within the context of the current webview and optionally receive its result or error in a callback function. | | Parameters | script - the JavaScript to execute within the context of the current webview's displaycallback - an optional function which should accept two parameters as the result of the executed JavaScript. The function parameters are as follows: result - the result of the executed JavaScript code or nil if there was no result or an error occurred. error - an NSError table describing any error that occurred during the JavaScript execution or nil if no error occurred. | | Returns | the webview object | | Notes | |"]},{"l":"examineInvalidCertificates","p":["Signature","hs.webview:examineInvalidCertificates([flag]) - webviewObject | current value","Type","Method","Description","Get or set whether or not invalid SSL server certificates that are approved by the ssl callback function are accepted as valid for browsing with the webview.","Parameters","flag- an optional boolean, default false, specifying whether or not an invalid SSL server certificate should be accepted if it is approved by the ssl callback function.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes","In order for this setting to have any effect, you must also register an ssl callback function with hs.webview:sslCallback which should return true if the certificate should be granted an exception or false if it should not. For a certificate to be granted an exception, both this method and the result of the callback must be true. A server certificate may be invalid for a variety of reasons: it is not signed by a recognized certificate authority - most commonly this means the certificate is self-signed. the certificate has expired the certificate has a common name (web site server name) other than the one requested (e.g. the certificate's common name is www.site.com, but it is being used for something else, possibly just https://site.com, possibly something else entirely some corporate proxy servers don't handle SSL properly and can cause a certificate to appear invalid even when they are valid (this is less common then it used to be, but does still occur occasionally) potentially nefarious reasons including man-in-the-middle attacks or phishing scams. The Hammerspoon server provided by hs.httpserver uses a self-signed certificate when set to use SSL, so it will be considered invalid for reason 1 above.* If the certificate has been granted an exception in another application which registers the exception in the user's keychain (e.g. Safari), then the certificate is no longer considered invalid and this setting has no effect for that certificate."]},{"l":"frame","p":["Signature","hs.webview:frame([rect]) - webviewObject | currentValue","Type","Method","Description","Get or set the frame of the webview window.","Parameters","rect - An optional rect-table containing the co-ordinates and size the webview window should be moved and set to","Returns","If an argument is provided, the webview object; otherwise the current value.","Notes","a rect-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the webview window (keys x and y) and the new size (keys h and w). The table may be crafted by any method which includes these keys, including the use of an hs.geometry object."]},{"l":"goBack","p":["Signature","hs.webview:goBack() - webviewObject","Type","Method","Description","Move to the previous page in the webview's history, if possible.","Parameters","None","Returns","The webview Object","Notes"]},{"l":"goForward","p":["Signature","hs.webview:goForward() - webviewObject","Type","Method","Description","Move to the next page in the webview's history, if possible.","Parameters","None","Returns","The webview Object","Notes"]},{"l":"hide","p":["Signature","hs.webview:hide([fadeOutTime]) - webviewObject","Type","Method","Description","Hides the webview object","Parameters","fadeOutTime- An optional number of seconds over which to fade out the webview. Defaults to zero","Returns","The webview object","Notes"]},{"l":"historyList","p":["Signature","hs.webview:historyList() - historyTable","Type","Method","Description","Returns the URL history for the current webview as an array.","Parameters","None","Returns","A table which is an array of the URLs viewed within this webview and a key named current which is equal to the index corresponding to the currently visible entry. Each array element will be a table with the following keys: URL- the URL of the web page initialURL- the URL of the initial request that led to this item title- the web page title","Notes"]},{"l":"hswindow","p":["Signature","hs.webview:hswindow() - hs.window object","Type","Method","Description","Returns an hs.window object for the webview so that you can use hs.window methods on it.","Parameters","None","Returns","an hs.window object","Notes","hs.window:minimize only works if the webview is minimizable (see hs.webview.windowStyle) hs.window:setSize only works if the webview is resizable (see hs.webview.windowStyle) hs.window:close only works if the webview is closable (see hs.webview.windowStyle) hs.window:maximize will reposition the webview to the upper left corner of your screen, but will only resize the webview if the webview is resizable (see hs.webview.windowStyle)"]},{"l":"html","p":["Signature","hs.webview:html(html,[baseURL]) - webviewObject, navigationIdentifier","Type","Method","Description","Render the given HTML in the webview with an optional base URL for relative links.","Parameters","html- the html to be rendered in the webview baseURL- an optional Base URL to use as the starting point for any relative links within the provided html.","Returns","The webview Object","Notes","Web Pages generated in this manner are not added to the webview history list"]},{"l":"isOnlySecureContent","p":["Signature","hs.webview:isOnlySecureContent() - bool","Type","Method","Description","Returns a boolean value indicating if all content current displayed in the webview was loaded over securely encrypted connections.","Parameters","None","Returns","true if all content current displayed in the web view was loaded over securely encrypted connections; otherwise false.","Notes"]},{"l":"isVisible","p":["Signature","hs.webview:isVisible() - boolean","Type","Method","Description","Checks to see if a webview window is visible or not.","Parameters","None","Returns","true if the webview window is visible, otherwise false","Notes"]},{"l":"level","p":["Signature","hs.webview:level([theLevel]) - drawingObject | currentValue","Type","Method","Description","Get or set the window level","Parameters","theLevel- an optional parameter specifying the desired level as an integer, which can be obtained from hs.drawing.windowLevels.","Returns","if a parameter is specified, returns the webview object, otherwise the current value","Notes","see the notes for hs.drawing.windowLevels"]},{"l":"loading","p":["Signature","hs.webview:loading() - boolean","Type","Method","Description","Returns a boolean value indicating whether or not the webview is still loading content.","Parameters","None","Returns","true if the content is still being loaded, or false if it has completed.","Notes"]},{"l":"magnification","p":["Signature","hs.webview:magnification([value]) - webviewObject | current value","Type","Method","Description","Get or set the webviews current magnification level. Default is 1.0.","Parameters","value- an optional number specifying the webviews magnification level.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes"]},{"l":"navigationCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview:navigationCallback(fn) - webviewObject | | Type | Method | | Description | Sets a callback for tracking a webview's navigation process. | | Parameters | fn - the function to be called when the navigation status of a webview changes. To disable the callback function, explicitly specify nil. The function should expect 3 or 4 arguments and may optionally return 1. The function arguments are defined as follows: action - a string indicating the webview's current status. It will be one of the following:didStartProvisionalNavigation - a request or action to change the contents of the main frame has occurreddidReceiveServerRedirectForProvisionalNavigation - a server redirect was received for the main framedidCommitNavigation - content has started arriving for the main framedidFinishNavigation - the webview's main frame has completed loading.didFailNavigation - an error has occurred after content started arrivingdidFailProvisionalNavigation - an error has occurred as or before content has started arriving webView - the webview object the navigation is occurring for. navID - a navigation identifier which can be used to link this event back to a specific request made by a hs.webview:url, hs.webview:html, or hs.webview:reload method. error - a table which will only be provided when action is equal to didFailNavigation or didFailProvisionalNavigation. If provided, it will contain at leas some of the following keys, possibly others as well:code - a numerical value indicating the type of error code. This will mostly be of use to developers or in debugging and may be removed in the future.domain - a string indicating the error domain of the error. This will mostly be of use to developers or in debugging and may be removed in the future.description - a string describing the condition or problem that has occurred.reason - if available, more information about what may have caused the problem to occur. | | Returns | The webview object | | Notes | The return value of the callback function is ignored except when the action argument is equal to didFailNavigation or didFailProvisionalNavigation. If the return value when the action argument is one of these values is a string, it will be treated as html and displayed in the webview as the error message. If the return value is the boolean value true, then no change will be made to the webview (it will continue to display the previous web page). All other return values or no return value at all, if these navigation actions occur, will cause a default error page to be displayed in the webview. |"]},{"l":"navigationID","p":["Signature","hs.webview:navigationID() - navigationID","Type","Method","Description","Get the most recent navigation identifier for the specified webview.","Parameters","None","Returns","the navigation identifier","Notes","This navigation identifier can be used to track the progress of a webview with the navigation callback function - see hs.webview.navigationCallback."]},{"l":"orderAbove","p":["Signature","hs.webview:orderAbove([webview2]) - webviewObject","Type","Method","Description","Moves webview object above webview2, or all webview objects in the same presentation level, if webview2 is not given.","Parameters","webview2-An optional webview object to place the webview object above.","Returns","The webview object","Notes","If the webview object and webview2 are not at the same presentation level, this method will move the webview object as close to the desired relationship without changing the webview object's presentation level. See hs.webview.level."]},{"l":"orderBelow","p":["Signature","hs.webview:orderBelow([webview2]) - webviewObject","Type","Method","Description","Moves webview object below webview2, or all webview objects in the same presentation level, if webview2 is not given.","Parameters","webview2-An optional webview object to place the webview object below.","Returns","The webview object","Notes","If the webview object and webview2 are not at the same presentation level, this method will move the webview object as close to the desired relationship without changing the webview object's presentation level. See hs.webview.level."]},{"l":"parent","p":["Signature","hs.webview:parent() - webviewObject | nil","Type","Method","Description","Get the parent webview object for the calling webview object, or nil if the webview has no parent.","Parameters","None","Returns","the parent webview object for the calling webview object, or nil if the webview has no parent","Notes"]},{"l":"policyCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview:policyCallback(fn) - webviewObject | | Type | Method | | Description | Sets a callback to approve or deny web navigation activity. | | Parameters | fn - the function to be called to approve or deny web navigation activity. To disable the callback function, explicitly specify nil. The callback function will accept three or four arguments and must return 1 argument which will determine if the action is approved or denied. The first argument will specify the type of policy request and will determine the second and third arguments as follows: navigationAction: This applies to any connection to a server or service which supplies content for the webview and occurs before any connection has actually been made.the second argument will be the webview this request originates from.the third argument will be a table about the navigation action requested and may contain any of the following keys:request - a table containing the request for that generated this policy action request. See hs.webview.url for details on what keys may be present in this table.sourceFrame - a table describing the frame in which the request occurred containing the following keys:mainFrame - a boolean value indicating if this is the main view frame of the webview or notrequest - a table containing the request for this frame. See hs.webview.url for details on what keys may be present in this table.targetFrame - a table with the same keys as sourceFrame, but describing the target of the request, if it differs.buttonNumber - a number indicating the mouse button pressed that initiated this action or 0 if no mouse button was involved (for example, a url specified via hs.webview.url or a request for an image, etc. as part of rendering an earlier request).modifierFlags - a table containing keys for the keyboard modifiers which were pressed when the navigation generating this policy request was generated.navigationType - a string indicating how the navigation was requested: linkActivated, formSubmitted, backForward, reload, formResubmitted, or other The callback function should return true if the navigation should proceed or false if it should be denied. navigationResponse: This applies to any connection to a server or service which supplies content for the webview and occurs after the connection has been made but before it has been rendered in the webview.the second argument will be the webview this request originates from.the third argument will be a table about the response received and may contain any of the following keys:canShowMIMEType - a boolean indicating whether or not the webview can display the content either natively or with a plugin. If this value is false, it is likely the content either cannot be displayed at all or will appear as gibberish in the webview.forMainFrame - a boolean indicating if the response is for a navigation of the main frames primary content (i.e. not an image or sub-frame, etc.)response - a table describing the response to the URL request and may contain any of the following keys:expectedContentLength - the expected length of the response contentsuggestedFileName - a suggested filename for the response dataMIMEType - the MIME type of the response datatextEncodingName - if the response is text, then this will contain the encoding type usedURL - the URL of the actual response. Note that this may differ from the original request due to redirects, etc.statusCode - the HTTP response code for the requeststatusCodeDescription - a localized description of the response codeallHeaderFields - a table containing the header fields and values provided in the response The callback function should return true if the navigation should proceed or false if it should be denied. newWindow: This applies to any request to create a new window from a webview. This includes JavaScript, the user selecting \"Open in a new window\", etc.the second argument will be the new webview this request is generating.the third argument will be a table about the navigation action requested. See the description above for navigationAction for details about this parameter.the fourth argument will be a table containing features requested for the new window (none of these will be addressed by default -- you can choose to honor or disregard the feature requests in the callback yourself) and may contain any of the following keys:menuBarVisibility - Whether the menu bar should be visible. (Not a feature provided for windows under OS X)statusBarVisibility - Whether the status bar should be visible. (Not currently supported by this module)toolbarsVisibility - Whether toolbars should be visible.allowsResizing - Whether the new window should be resizable.x - The x coordinate of the new window.y - The y coordinate of the new window.h - The height coordinate of the new window.w - The width coordinate of the new window. The callback function should return true if the new window should be created or false if it should not. authenticationChallenge: This applies to a web page which requires a log in credential for HTTPBasic or HTTPDigest authentication.the second argument will be the webview this request originates from.the third argument will be a table containing the challenge details and may contain any of the following keys:previousFailureCount - an integer indicating the number of previously failed login attempts. This will be 0 for the first try.failureResponse - the response data as described for navigationResponse above for the last authentication failureResponseproposedCredential - a table containing the previously failed credential containing any of the following keys:hasPassword - a boolean value indicating if a password was provided with this credentialpersistence - a string value identifying the persistence of this credential. This value will be one of the following:None - the credential is for this URL request only and no othersession - the credential is for this session and will be forgotten once the webview is deletedpermanent - the credential is stored in the user's keychainsynchronized - the credential is stored in the user's keychain and may be shared with other devices with the same owning Apple ID.user - the username of the failed credentialpassword - the password of the failed credentialprotectionSpace - a table describing the realm for the authentication and may contain any of the following keys:port - the port of the server with which communication for this request is occurringreceivesCredentialSecurely - a boolean value indicating whether or not the credential can be sent to the server securelyauthenticationMethod - a string indicating the authentication type: default, HTTPBasic, or HTTPDigest. Other types exists but are not currently supported with this module or do not apply to webview activities.host - the host name of the server with which communication for this request is occurringprotocol - the protocol for which the authentication is occurringisProxy - a boolean indicating whether or not the authentication is occurring with a proxy serverproxyType - a string representing the type of proxy server: http, https, ftp, or socks.realm - a string representing the realm name for the authentication. The callback function should return true if the user should be prompted for the username and password credentials, a table with the keys user and password containing the username and password to log in with, or false if the login request should be cancelled. Note that if your function returns a table and fails to authenticate three times, the user will be prompted anyways to prevent loops. | | Returns | The webview object | | Notes | With the newWindow action, the navigationCallback and policyCallback are automatically replicated for the new window from its parent. If you wish to disable these for the new window or assign a different set of callback functions, you can do so before returning true in the callback function with the webview argument provided. |"]},{"l":"privateBrowsing","p":["Signature","hs.webview:privateBrowsing() - boolean","Type","Method","Description","Returns whether or not the webview browser is set up for private browsing (i.e. uses a non-persistent datastore)","Parameters","None","Returns","a boolean value indicating whether or not the datastore is non-persistent.","Notes","This method is only supported by OS X 10.11 and newer See hs.webview.datastore and hs.webview.new for more information."]},{"l":"reload","p":["Signature","hs.webview:reload([validate]) - webviewObject, navigationIdentifier","Type","Method","Description","Reload the page in the webview, optionally performing end-to-end revalidation using cache-validating conditionals if possible.","Parameters","validate- an optional boolean indicating whether or not an attempt to perform end-to-end revalidation of cached data should be performed. Defaults to false.","Returns","The webview Object","Notes"]},{"l":"sendToBack","p":["Signature","hs.webview:sendToBack() - webviewObject","Type","Method","Description","Places the webview object behind normal windows, between the desktop wallpaper and desktop icons","Parameters","None","Returns","The drawing object","Notes"]},{"l":"shadow","p":["Signature","hs.webview:shadow([value]) - webviewObject | current value","Type","Method","Description","Get or set whether or not the webview window has shadows. Default to false.","Parameters","value- an optional boolean value indicating whether or not the webview should have shadows.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes"]},{"l":"show","p":["Signature","hs.webview:show([fadeInTime]) - webviewObject","Type","Method","Description","Displays the webview object","Parameters","fadeInTime- An optional number of seconds over which to fade in the webview. Defaults to zero","Returns","The webview object","Notes"]},{"l":"size","p":["Signature","hs.webview:size([size]) - webviewObject | currentValue","Type","Method","Description","Get or set the size of a webview window","Parameters","size- An optional size-table specifying the width and height the webview window should be resized to","Returns","If an argument is provided, the webview object; otherwise the current value.","Notes","a size-table is a table with key-value pairs specifying the size (keys h and w) the webview should be resized to. The table may be crafted by any method which includes these keys, including the use of an hs.geometry object."]},{"l":"sslCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview:sslCallback(fn) - webviewObject | | Type | Method | | Description | Sets a callback to examine an invalid SSL certificate and determine if an exception should be granted. | | Parameters | fn - the function to be called to examine the SSL certificate to determine if an exception should be granted. To disable the callback function, explicitly specify nil. The callback function will accept two arguments and must return 1 argument which will determine if the action is approved or denied. The first argument will be the webview this request originates from. The second argument will be a table containing the protection space details and may include the following keys: port - the port of the server with which communication for this request is occurring receivesCredentialSecurely - a boolean value indicating whether or not the credential can be sent to the server securely authenticationMethod - a string indicating the authentication type, in this case \"serverTrust\". host - the host name of the server with which communication for this request is occurring protocol - the protocol for which the authentication is occurring isProxy - a boolean indicating whether or not the authentication is occurring with a proxy server proxyType - a string representing the type of proxy server: http, https, ftp, or socks. realm - a string representing the realm name for the authentication. certificates - an array of tables, each table describing a certificate in the SSL certificate chain provided by the server responding to the webview's request. Each table will contain the following keys:commonName - the common name for the certificate; most commonly this will be a string matching the server portion of the URL request or other descriptor of the certificate's purpose.values - a table containing key-value pairs describing the certificate. The keys will be certificate OIDs. Common OIDs and their meaning can be found in hs.webview.certificateOIDs. The value for each key will be a table with the following keys:label - a description or label for the entrylocalized label - a localized version of label``type - a description of the data type for this valuevalue - the value | | Returns | The webview object | | Notes | The callback function should return true if an exception should be granted for this certificate or false if it should be rejected.even if this callback returns true, the certificate will only be granted an exception if hs.webview:examineInvalidCertificates has also been set to true.once an invalid certificate has been granted an exception, the exception will remain in effect until the webview object is deleted.the callback is only invoked for invalid certificates -- if a certificate is valid, or once an exception has been granted, the callback will not (no longer) be called for that certificate.* If the certificate has been granted an exception in another application which registers the exception in the user's keychain (e.g. Safari), then the certificate is no longer considered invalid and this callback will not be invoked. |"]},{"l":"stopLoading","p":["Signature","hs.webview:stopLoading() - webviewObject","Type","Method","Description","Stop loading additional content for the webview.","Parameters","None","Returns","The webview object","Notes","this method does not stop the loading of the primary content for the page at the specified URL if hs.webview:loading would return true, this method does nothing -- see notes: The documentation from Apple is unclear and experimentation has shown that if this method is applied before the content of the specified URL has loaded, it can cause the webview to lock up; however it appears to stop the loading of additional resources specified for the content (external script files, external style files, AJAX queries, etc.) and should be used in this context."]},{"l":"title","p":["Signature","hs.webview:title() - title","Type","Method","Description","Get the title of the page displayed in the webview.","Parameters","None","Returns","the title","Notes"]},{"l":"topLeft","p":["Signature","hs.webview:topLeft([point]) - webviewObject | currentValue","Type","Method","Description","Get or set the top-left coordinate of the webview window","Parameters","point- An optional point-table specifying the new coordinate the top-left of the webview window should be moved to","Returns","If an argument is provided, the webview object; otherwise the current value.","Notes","a point-table is a table with key-value pairs specifying the new top-left coordinate on the screen of the webview (keys x and y). The table may be crafted by any method which includes these keys, including the use of an hs.geometry object."]},{"l":"transparent","p":["Signature","hs.webview:transparent([value]) - webviewObject | current value","Type","Method","Description","Get or set whether or not the webview background is transparent. Default is false.","Parameters","value- an optional boolean value indicating whether or not the webview should be transparent.","Returns","If a value is provided, then this method returns the webview object; otherwise the current value","Notes","When enabled, the webview's background color is equal to the body's background-color(transparent by default) Setting background-color:rgba(0, 225, 0, 0.3) on body will give a translucent green webview background"]},{"l":"url","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview:url([URL]) - webviewObject, navigationIdentifier | url | | Type | Method | | Description | Get or set the URL to render for the webview. | | Parameters | URL - an optional string or table representing the URL to display. If you provide a table, it should contain one or more of the following keys (note that URL is the only required key): URL - the URL of the desired content mainDocumentURL - the URL of the main document, if it differs. This usually only matters for cookie negotiation and currently has no effect in this module. HTTPBody - the message body of the request, as in an HTTP POST request HTTPMethod - the HTTP Method of the request, default GET. timeoutInterval - the timeout interval for the request in seconds, default 60.0. HTTPShouldHandleCookies - whether or not cookies should be managed automatically, default true. Currently there is no support for the manual handling of cookies, though this may change in the future. HTTPShouldUsePipelining - whether or not the request can continue to transmit data before receiving a response from the remote server. Default false. cachePolicy - a string value representing the cache policy for the request. It should match one of the following:protocolCachePolicy - (default) the cache policy defined as the default for the protocol of the URL requestignoreLocalCache - ignore any locally cached content and request all content from the remote serverreturnCacheOrLoad - return cached data, regardless of its age or expiration date. If there is no existing data in the cache corresponding to the request, load data from the originating source.returnCacheDontLoad - treat the request as if offline - return cached data, regardless of its age or expiration date. If there is no existing data in the cache corresponding to the request, the load is considered to have failed. networkServiceType - a string value representing the network service type of the request. It should match one of the following:default - (default) standard network traffic. You should rarely use a value other than this as it can affect the responsiveness of your computer and other applications.VoIP - with the VoIP service type, the kernel continues to listen for incoming traffic while your app is in the background, then wakes up your app whenever new data arrives. This should be used only for connections that are used to communicate with a VoIP service.video - specifies that this is video trafficbackground - use this for data if your are performing a download that was not requested by the user — for example, prefetching content so that it will be available when the user chooses to view it.voice - specifies that this is voice traffic HTTPHeaderFields - a table containing key-value pairs corresponding to additional headers you wish to include in your request. Because the HTTP specification requires that both keys and values are strings, any key which is not a string is ignored, and any value which is not a string or number is also ignored. In addition, the following keys are handled automatically behind the scenes and will be ignored if you specify them:Authorization``Connection``Host``WWW-Authenticate``Content-Length | | Returns | If a URL is specified, then this method returns the webview Object; otherwise it returns the current url being displayed. | | Notes | The networkServiceType field of the URL request table is a hint to the operating system about what the underlying traffic is used for. This hint enhances the system's ability to prioritize traffic, determine how quickly it needs to wake up the Wi-Fi radio, and so on. By providing accurate information, you improve the ability of the system to optimally balance battery life, performance, and other considerations. Likewise, inaccurate information can have a deleterious effect on your system performance and battery life. |"]},{"l":"urlParts","p":["Signature","hs.webview:urlParts() - table","Type","Method","Description","Returns a table of keys containing the individual components of the URL for the webview.","Parameters","None","Returns","a table containing the keys for the webview's URL. See the function hs.http.urlParts for a description of the possible keys returned in the table.","Notes","This method is a wrapper to the hs.http.urlParts function wich uses the OS X APIs, based on RFC 1808. You may also want to consider the hs.httpserver.hsminweb.urlParts function for a version more consistent with RFC 3986."]},{"l":"userAgent","p":["Signature","hs.webview:userAgent([agent]) - webviewObject | current value","Type","Method","Description","Get or set the webview's user agent string","Parameters","agent- an options string specifying the user agent string to include in all URL requests made by the webview object.","Returns","if a parameter is specified, returns the webviewObject, otherwise returns the current value","Notes","This method is only supported by OS X 10.11 and newer The default user string used by webview objects will be something like this (the exact version numbers will differ, depending upon your OS X version):\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_11_5) AppleWebKit/601.6.17 (KHTML, like Gecko)\" By default, this method will return the empty string (\"\") when queried -- this indicates that the default, shown above, is used. You can also return to this default by setting the user agent to \"\" with this method (e.g. hs.webview:userAgent()). Some web sites tailor content based on the user string or use it for other internal purposes (tracking, statistics, page availability, layout, etc.). Common user-agent strings can be found at http://www.useragentstring.com/pages/useragentstring.php. If you have set the user agent application name with the applicationName parameter to the hs.webview.new constructor, it will be ignored unless this value is \"\", i.e. the default user agent string. If you wish to specify an application name after the user agent string and use a custom string, include the application name in your custom string."]},{"l":"windowCallback","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview:windowCallback(fn) - webviewObject | | Type | Method | | Description | Set or clear a callback for updates to the webview window | | Parameters | fn - the function to be called when the webview window is moved or closed. Specify an explicit nil to clear the current callback. The function should expect 2 or 3 arguments and return none. The arguments will be one of the following: \"closing\", webview - specifies that the webview window is being closed, either by the user or with the hs.webview:delete method.action - in this case \"closing\", specifying that the webview window is being closedwebview - the webview that is being closed \"focusChange\", webview, state - indicates that the webview window has either become or stopped being the focused windowaction - in this case \"focusChange\", specifying that the webview window is being closedwebview - the webview that is being closedstate - a boolean, true if the webview has become the focused window, or false if it has lost focus \"frameChange\", webview, frame - indicates that the webview window has been moved or resizedaction - in this case \"focusChange\", specifying that the webview window is being closedwebview - the webview that is being closedframe - a rect-table containing the new co-ordinates and size of the webview window | | Returns | The webview object | | Notes | |"]},{"l":"windowStyle","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview:windowStyle(mask) - webviewObject | currentMask | | Type | Method | | Description | Get or set the window display style | | Parameters | mask - if present, this mask should be a combination of values found in hs.webview.windowMasks describing the window style. The mask should be provided as one of the following: integer - a number representing the style which can be created by combining values found in hs.webview.windowMasks with the logical or operator. string - a single key from hs.webview.windowMasks which will be toggled in the current window style. table - a list of keys from hs.webview.windowMasks which will be combined to make the final style by combining their values with the logical or operator. | | Returns | if a mask is provided, then the webviewObject is returned; otherwise the current mask value is returned. | | Notes | |"]},{"l":"windowTitle","p":["Signature","hs.webview:windowTitle([title]) - webviewObject","Type","Method","Description","Sets the title for the webview window.","Parameters","title- if specified and not nil, the title to set for the webview window. If this parameter is not present or is nil, the title will follow the title of the webview's content.","Returns","The webview Object","Notes","The title will be hidden unless the window style includes the \"titled\" style (see hs.webview.windowStyle and hs.webview.windowMasks)"]}],[{"i":"hswebviewdatastore","l":"hs.webview.datastore","p":["Provides methods to list and purge the various types of data used by websites visited with hs.webview.","This module is only available under OS X 10.11 and later.","This module allows you to list and selectively purge the types of data stored locally for the websites visited with the hs.webview module. It also adds support for non-persistent datastores to hs.webview(private browsing) and allows a non-persistent datastore to be shared among multiple instances of hs.webview objects.","The datastore for a webview contains various types of data including cookies, disk and memory caches, and persistent data such as WebSQL, IndexedDB databases, and local storage. You can use methods in this module to selectively or completely purge the common datastore (used by all Hammerspoon hs.webview instances that do not use a non-persistent datastore)."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","websiteDataTypes","Constructors- API calls which return an object, typically one that offers API methods","default","fromWebview","newPrivate","Methods- API calls which can only be made on an object returned by a constructor","fetchRecords","persistent","removeRecordsAfter","removeRecordsFor"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"websiteDataTypes","p":["Signature","hs.webview.datastore.websiteDataTypes() - table","Type","Function","Description","Returns a list of the currently available data types within a datastore.","Parameters","None","Returns","a list of strings where each string is a specific data type stored in a datastore.","Notes","As of the writing of this module, the following data types are defined and returned by this function: WKWebsiteDataTypeDiskCache- On-disk caches. WKWebsiteDataTypeOfflineWebApplicationCache- HTML offline web application caches. WKWebsiteDataTypeMemoryCache- In-memory caches. WKWebsiteDataTypeLocalStorage- HTML local storage. WKWebsiteDataTypeCookies- Cookies. WKWebsiteDataTypeSessionStorage- HTML session storage. WKWebsiteDataTypeIndexedDBDatabases- WebSQL databases. WKWebsiteDataTypeWebSQLDatabases- IndexedDB databases."]},{"l":"Constructors"},{"l":"default","p":["Signature","hs.webview.datastore.default() - datastoreObject","Type","Constructor","Description","Returns an object representing the default datastore for Hammerspoon hs.webview instances.","Parameters","None","Returns","a datastoreObject","Notes","this is the datastore used unless otherwise specified when creating an hs.webview instance."]},{"l":"fromWebview","p":["Signature","hs.webview.datastore.fromWebview(webview) - datastoreObject","Type","Constructor","Description","Returns an object representing the datastore for the specified hs.webview instance.","Parameters","webview- an hs.webview instance (webviewObject)","Returns","a datastoreObject","Notes","When running on a system with OS X 10.11 or later, this method will also be added to the metatable for hs.webview objects so that you can retrieve a webview's datastore with hs.webview:datastore(). This method can be used to identify the datastore in use for a webview if you wish to create a new instance using the same datastore."]},{"l":"newPrivate","p":["Signature","hs.webview.datastore.newPrivate() - datastoreObject","Type","Constructor","Description","Returns an object representing a newly created non-persistent (private) datastore for use with a Hammerspoon hs.webview instance.","Parameters","None","Returns","a datastoreObject","Notes","The datastore represented by this object will be initially empty. You can use this function to create a non-persistent datastore that you wish to share among multiple hs.webview instances. Once a datastore is created, you assign it to a hs.webview instance by including the datastore key in the hs.webview.new constructor's preferences table and setting it equal to this key. All webview instances created with this datastore object will share web caches, cookies, etc. but will still be isolated from the default datastore and it will be purged from memory when the webviews are deleted, or Hammerspoon is restarted. Using the datastore key in the webview's constructor differs from the private key -- use of the private key will override the datastore key and will create a separate non-persistent datastore for the webview instance. See hs.webview.new for more information."]},{"l":"Methods"},{"l":"fetchRecords","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview.datastore:fetchRecords([dataTypes], callback) - datastoreObject | | Type | Method | | Description | Generates a list of the datastore records of the specified type, and invokes the callback function with the list. | | Parameters | dataTypes - an optional string or table specifying the data types to fetch from the datastore. If this parameter is not specified, it defaults to the list returned by hs.webview.datastore.websiteDataTypes.callback - a function which accepts as it's argument an array-table containing tables with the following key-value pairs: displayName - a string containing the site's display name. Typically, the display name is the domain name with suffix taken from the resource’s security origin (website name). dataTypes - a table containing strings representing the types of data stored for the website specified by displayName. | | Returns | the datastore object | | Notes | only those sites with one or more of the specified data types are returnedfor the sites returned, only those data types that were present in the query will be included in the list, even if the site has data of another type in the datastore. |"]},{"l":"persistent","p":["Signature","hs.webview.datastore:persistent() - bool","Type","Method","Description","Returns whether or not the datastore is persistent.","Parameters","None","Returns","a boolean value indicating whether or not the datastore is persistent (true) or private (false)","Notes","Note that this value is the inverse of hs.webview:privateBrowsing(), since private browsing uses a non-persistent datastore."]},{"l":"removeRecordsAfter","p":["Signature","hs.webview.datastore:removeRecordsAfter(date, dataTypes, [callback]) - datastoreObject","Type","Method","Description","Removes the specified types of data from the datastore if the data was added or changed since the given date.","Parameters","date- an integer representing seconds since 1970-01-01 00:00:00 +0000(e.g. os.time()), or a string containing a date in RFC3339 format ( YYYY-MM-DD[T]HH:MM:SS[Z]). dataTypes- a string or array of strings specifying the types of data to remove from the datastore for the specified sites. callback- an optional function, which should expect no arguments, that will be called when the specified items have been removed from the datastore.","Returns","the datastore object","Notes","Yes, you read the description correctly -- removes data newer then the date specified. I've not yet found a way to remove data older then the date specified (to expire old data, for example) but updates or suggestions are welcome in the Hammerspoon Google group or GitHub web site. to specify that all data types that qualify should be removed, specify the function hs.webview.datastore.websiteDataTypes(). as the second argument. For example, to purge the Hammerspoon default datastore of all data, you can do the following: hs.webview.datastore.default():removeRecordsAfter(0, hs.webview.datastore.websiteDataTypes())"]},{"l":"removeRecordsFor","p":["Signature","hs.webview.datastore:removeRecordsFor(displayNames, dataTypes, [callback]) - datastoreObject","Type","Method","Description","Remove data from the datastore of the specified type(s) for the specified site(s).","Parameters","displayNames- a string or array of strings specifying the display names (sites) to remove records for. dataTypes- a string or array of strings specifying the types of data to remove from the datastore for the specified sites. callback- an optional function, which should expect no arguments, that will be called when the specified items have been removed from the datastore.","Returns","the datastore object","Notes","to specify that all data types that qualify should be removed, specify the function hs.webview.datastore.websiteDataTypes(). as the second argument."]}],[{"i":"hswebviewtoolbar","l":"hs.webview.toolbar","p":["Create and manipulate toolbars which can be attached to the Hammerspoon console or hs.webview objects.","Toolbars are attached to titled windows and provide buttons which can be used to perform various actions within the application. Hammerspoon can use this module to add toolbars to the console or hs.webview objects which have a title bar (see hs.webview.windowMasks and hs.webview:windowStyle). Toolbars are identified by a unique identifier which is used by OS X to identify information which can be auto saved in the application's user defaults to reflect changes the user has made to the toolbar button order or active button list (this requires setting hs.webview.toolbar:autosaves and hs.webview.toolbar:canCustomize both to true).","Multiple copies of the same toolbar can be made with the hs.webview.toolbar:copy method so that multiple webview windows use the same toolbar, for example. If the user customizes a copied toolbar, changes to the active buttons or their order will be reflected in all copies of the toolbar.","Example:","Notes:","This module is supported in OS X versions prior to 10.10 (for the Hammerspoon console only), even though its parent hs.webview is not. To load this module directly, use require(hs.webview.toolbar) instead of relying on module auto-loading.","Toolbar items are rendered in the order they are supplied, although if the toolbar is marked as customizable, the user may have changed the order."]},{"l":"API Overview","p":["addItems","allowedItems","attachToolbar","autosaves","canCustomize","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","copy","customizePanel","delete","deleteItem","displayMode","Functions- API calls offered directly by the extension","identifier","insertItem","inTitleBar","isAttached","isCustomizing","itemDetails","itemPriorities","items","Methods- API calls which can only be made on an object returned by a constructor","modifyItem","new","notifyOnChange","removeItem","savedSettings","selectedItem","selectSearchField","separator","setCallback","sizeMode","systemToolbarItems","toolbarStyle","uniqueName","visible","visibleItems"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"itemPriorities","p":["Signature","hs.webview.toolbar.itemPriorities","Type","Constant","Description","A table containing some pre-defined toolbar item priority values for use when determining item order in the toolbar."]},{"l":"systemToolbarItems","p":["Signature","hs.webview.toolbar.systemToolbarItems","Type","Constant","Description","An array containing string identifiers for supported system defined toolbar items."]},{"l":"Functions"},{"l":"attachToolbar","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview.toolbar.attachToolbar([obj1], [obj2]) - obj1 | | Type | Function | | Description | Get or attach/detach a toolbar to the webview, chooser, or console. | | Parameters | obj1 - An optional toolbarObjectobj2 - An optional toolbarObject if no arguments are present, this function returns the current toolbarObject for the Hammerspoon console, or nil if one is not attached. if one argument is provided and it is a toolbarObject or nil, this function will attach or detach a toolbarObject to/from the Hammerspoon console. if one argument is provided and it is an hs.webview or hs.chooser object, this function will return the current toolbarObject for the object, or nil if one is not attached. if two arguments are provided and the first is an hs.webview or hs.chooser object and the second is a toolbarObject or nil, this function will attach or detach a toolbarObject to/from the object. | | Returns | if the function is used to attach/detach a toolbar, then the first object provided (the target) will be returned ; if this function is used to get the current toolbar object for a webview, chooser, or console, then the toolbarObject or nil will be returned. | | Notes | This function is not expected to be used directly (though it can be) -- it is added to the hs.webview and hs.chooser object metatables so that it may be invoked as hs.webview:attachedToolbar([toolbarObject | nil])/hs.chooser:attachedToolbar([toolbarObject | nil]) and to the hs.console module so that it may be invoked as hs.console.toolbar([toolbarObject | nil]).If the toolbar is currently attached to another window when this function is called, it will be detached from the original window and attached to the new one specified by this function. |"]},{"l":"inTitleBar","p":["Signature","hs.webview.toolbar:inTitleBar([state]) - toolbarObject | boolean","Type","Function","Description","Get or set whether or not the toolbar appears in the containing window's titlebar, similar to Safari.","Parameters","state- an optional boolean specifying whether or not the toolbar should appear in the window's titlebar.","Returns","if a parameter is specified, returns the toolbar object, otherwise the current value.","Notes","When this value is true, the toolbar, when visible, will appear in the window's title bar similar to the toolbar as seen in applications like Safari. In this state, the toolbar will set the display of the toolbar items to icons without labels, ignoring changes made with hs.webview.toolbar:displayMode.* This method is only valid when the toolbar is attached to a webview, chooser, or the console."]},{"l":"uniqueName","p":["Signature","hs.webview.toolbar.uniqueName(toolbarName) - boolean","Type","Function","Description","Checks to see is a toolbar name is already in use","Parameters","toolbarName - a string specifying the name of a toolbar","Returns","true if the name is unique otherwise false","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.webview.toolbar.new(toolbarName, [toolbarTable]) - toolbarObject","Type","Constructor","Description","Creates a new toolbar for a webview, chooser, or the console.","Parameters","toolbarName - a string specifying the name for this toolbar toolbarTable - an optional table describing possible items for the toolbar","Returns","a toolbarObject","Notes","Toolbar names must be unique, but a toolbar may be copied with hs.webview.toolbar:copy if you wish to attach it to multiple windows (webview, chooser, or console). See hs.webview.toolbar:addItems for a description of the format for toolbarTable"]},{"l":"Methods"},{"l":"addItems","p":["Signature","hs.webview.toolbar:addItems(toolbarTable) - toolbarObject","Type","Method","Description","Add one or more toolbar items to the toolbar","Parameters","toolbarTable- a table describing a single toolbar item, or an array of tables, each describing a separate toolbar item, to be added to the toolbar.","Returns","the toolbarObject","Notes","* Each toolbar item is defined as a table of key-value pairs. The following list describes the valid keys used when describing a toolbar item for this method, the constructor hs.webview.toolbar.new, and the hs.webview.toolbar:modifyItem method. Note that the id field is required for all three uses. id- A unique string identifier required for each toolbar item and group. This key cannot be changed after an item has been created. allowedAlone- a boolean value, default true, specifying whether or not the toolbar item can be added to the toolbar, programmatically or through the customization panel, (true) or whether it can only be added as a member of a group (false). default- a boolean value, default matching the value of allowedAlone for this item, indicating whether or not this toolbar item or group should be displayed in the toolbar by default, unless overridden by user customization or a saved configuration (when such options are enabled). enable- a boolean value, default true, indicating whether or not the toolbar item is active (and can be clicked on) or inactive and greyed out. This field is ignored when applied to a toolbar group; apply it to the group members instead. fn- a callback function, or false to remove, specific to the toolbar item. This property is ignored if assigned to the button group. This function will override the toolbar callback defined with hs.webview.toolbar:setCallback for this specific item. The function should expect three (four, if the item is a searchfield) arguments and return none. See hs.webview.toolbar:setCallback for information about the callback's arguments. groupMembers- an array (table) of strings specifying the toolbar item ids that are members of this toolbar item group. If set to false, this field is removed and the item is reset back to being a regular toolbar item. Note that you cannot change a currently visible toolbar item to or from being a group; it must first be removed from active toolbar with hs.webview.toolbar:removeItem. image- an hs.image object, or false to remove, specifying the image to use as the toolbar item's icon when icon's are displayed in the toolbar or customization panel. This key is ignored for a toolbar item group, but not for it's individual members. label- a string label, or false to remove, for the toolbar item or group when text is displayed in the toolbar or in the customization panel. For a toolbar item, the default is the id string; for a group, the default is false. If a group has a label assigned to it, the group label will be displayed for the group of items it contains. If a group does not have a label, the individual items which make up the group will each display their individual labels. priority- an integer value used to determine toolbar item order and which items are displayed or put into the overflow menu when the number of items in the toolbar exceed the width of the window in which the toolbar is attached. Some example values are provided in the hs.webview.toolbar.itemPriorities table. If a toolbar item is in a group, it's priority is ignored and the item group is ordered by the item group's priority. searchfield- a boolean (default false) specifying whether or not this toolbar item is a search field. If true, the following additional keys are allowed: searchHistory- an array (table) of strings, specifying previous searches to automatically include in the search field menu, if searchPredefinedMenuTitle is not false searchHistoryAutosaveName- a string specifying the key name to save search history with in the application defaults (accessible through hs.settings). If this value is set, search history will be maintained through restarts of Hammerspoon. searchHistoryLimit- the maximum number of items to store in the search field history. searchPredefinedMenuTitle- a string or boolean specifying how a predefined list of search field \"response\" should be included in the search field menu. If this item is true, this list of items specified for searchPredefinedSearches will be displayed in a submenu with the title \"Predefined Searches\". If this item is a string, the list of items will be displayed in a submenu with the title specified by this string value. If this item is false, then the search field menu will only contain the items specified in searchPredefinedSearches and no search history will be included in the menu. searchPredefinedSearches- an array (table) of strings specifying the items to be listed in the predefined search submenu. If set to false, any existing menu will be removed and the search field menu will be reset to the default. searchReleaseFocusOnCallback- a boolean, default false, specifying whether or not focus leaves the search field text box when the callback is invoked. Setting this to true can be useful if you want subsequent keypresses to be caught by the webview after reacting to the value entered into the search field by the user. searchText- a string specifying the text to display in the search field. searchWidth- the width of the search field text entry box. selectable- a boolean value, default false, indicating whether or not this toolbar item is selectable (i.e. highlights, like a selected tab) when clicked on. Only one selectable toolbar item can be highlighted at a time, and you can get or set/reset the selected item with hs.webview.toolbar:selectedItem. tag- an integer value which can be used for own purposes; has no affect on the visual aspect of the item or its behavior. tooltip- a string label, or false to remove, which is displayed as a tool tip when the user hovers the mouse over the button or button group. If a button is in a group, it's tooltip is ignored in favor of the group tooltip."]},{"l":"allowedItems","p":["Signature","hs.webview.toolbar:allowedItems() - array","Type","Method","Description","Returns an array of all toolbar item identifiers defined for this toolbar.","Parameters","None","Returns","a table as an array of all toolbar item identifiers defined for this toolbar. See also hs.webview.toolbar:items and hs.webview.toolbar:visibleItems.","Notes"]},{"l":"autosaves","p":["Signature","hs.webview.toolbar:autosaves([bool]) - toolbarObject | bool","Type","Method","Description","Get or set whether or not the toolbar autosaves changes made to the toolbar.","Parameters","an optional boolean value indicating whether or not changes made to the visible toolbar items or their order is automatically saved.","Returns","if an argument is provided, returns the toolbar object; otherwise returns the current value","Notes","If the toolbar is set to autosave, then a user-defaults entry is created in org.hammerspoon.Hammerspoon domain with the key \"NSToolbar Configuration XXX\" where XXX is the toolbar identifier specified when the toolbar was created. The information saved for the toolbar consists of the following: the default item identifiers that are displayed when the toolbar is first created or when the user drags the default set from the customization panel. the current display mode (icon, text, both) the current size mode (regular, small) whether or not the toolbar is currently visible the currently shown identifiers and their order* Note that the labels, icons, callback functions, etc. are not saved -- these are determined at toolbar creation time, by the hs.webview.toolbar:addItems, or by the hs.webview.toolbar:modifyItem method and can differ between invocations of toolbars with the same identifier and button identifiers."]},{"l":"canCustomize","p":["Signature","hs.webview.toolbar:canCustomize([bool]) - toolbarObject | bool","Type","Method","Description","Get or set whether or not the user is allowed to customize the toolbar with the Customization Panel.","Parameters","an optional boolean value indicating whether or not the user is allowed to customize the toolbar.","Returns","if an argument is provided, returns the toolbar object; otherwise returns the current value","Notes","the customization panel can be pulled up by right-clicking on the toolbar or by invoking hs.webview.toolbar:customizePanel."]},{"l":"copy","p":["Signature","hs.webview.toolbar:copy() - toolbarObject","Type","Method","Description","Returns a copy of the toolbar object.","Parameters","None","Returns","a copy of the toolbar which can be attached to another window (webview, chooser, or console).","Notes"]},{"l":"customizePanel","p":["Signature","hs.webview.toolbar:customizePanel() - toolbarObject","Type","Method","Description","Opens the toolbar customization panel.","Parameters","None","Returns","the toolbar object","Notes"]},{"l":"delete","p":["Signature","hs.webview.toolbar:delete() - none","Type","Method","Description","Deletes the toolbar, removing it from its window if it is currently attached.","Parameters","None","Returns","Notes"]},{"l":"deleteItem","p":["Signature","hs.webview.toolbar:deleteItem(identifier) - toolbarObject","Type","Method","Description","Deletes the toolbar item specified completely from the toolbar, removing it first, if the toolbar item is currently active.","Parameters","identifier- the toolbar item's identifier","Returns","the toolbar object","Notes","This method completely removes the toolbar item from the toolbar's definition dictionary, thus removing it from active use in the toolbar as well as removing it from the customization panel, if supported. If you only want to remove a toolbar item from the active toolbar, consider hs.webview.toolbar:removeItem."]},{"l":"displayMode","p":["Signature","hs.webview.toolbar:displayMode([mode]) - toolbarObject","Type","Method","Description","Get or set the toolbar's display mode.","Parameters","mode - an optional string to set the size of the toolbar to \"default\", \"label\", \"icon\", or \"both\".","Returns","if an argument is provided, returns the toolbar object; otherwise returns the current value","Notes"]},{"l":"identifier","p":["Signature","hs.webview.toolbar:identifier() - identifier","Type","Method","Description","The identifier for this toolbar.","Parameters","None","Returns","Notes"]},{"l":"insertItem","p":["Signature","hs.webview.toolbar:insertItem(id, index) - toolbarObject","Type","Method","Description","Insert or move the toolbar item to the index position specified","Parameters","id - the string identifier of the toolbar item index - the numerical position where the toolbar item should be inserted/moved to.","Returns","the toolbar object","Notes","the toolbar position must be between 1 and the number of currently active toolbar items."]},{"l":"isAttached","p":["Signature","hs.webview.toolbar:isAttached() - boolean","Type","Method","Description","Returns a boolean indicating whether or not the toolbar is currently attached to a window.","Parameters","None","Returns","a boolean indicating whether or not the toolbar is currently attached to a window.","Notes"]},{"l":"isCustomizing","p":["Signature","hs.webview.toolbar:isCustomizing() - bool","Type","Method","Description","Indicates whether or not the customization panel is currently open for the toolbar.","Parameters","None","Returns","true or false indicating whether or not the customization panel is open for the toolbar","Notes"]},{"l":"itemDetails","p":["Signature","hs.webview.toolbar:itemDetails(id) - table","Type","Method","Description","Returns a table containing details about the specified toolbar item","Parameters","id - a string identifier specifying the toolbar item","Returns","a table containing the toolbar item definition","Notes","For a list of the most of the possible toolbar item attribute keys, see hs.webview.toolbar:addItems. The table will also include privateCallback which will be a boolean indicating whether or not this toolbar item has a private callback function assigned (true) or uses the toolbar's general callback function (false). The returned table may also contain the following keys, if the item is currently assigned to a toolbar: toolbar- the toolbar object the item belongs to subItems- if the toolbar item is actually a group, this will contain a table with basic information about the members of the group. If you wish to get the full details for each sub-member, you may iterate on the identifiers provided in groupMembers."]},{"l":"items","p":["Signature","hs.webview.toolbar:items() - array","Type","Method","Description","Returns an array of the toolbar item identifiers currently assigned to the toolbar.","Parameters","None","Returns","a table as an array of the currently active (assigned) toolbar item identifiers. Toolbar items which are in the overflow menu are included in this array. See also hs.webview.toolbar:visibleItems and hs.webview.toolbar:allowedItems.","Notes"]},{"l":"modifyItem","p":["Signature","hs.webview.toolbar:modifyItem(table) - toolbarObject","Type","Method","Description","Modify the toolbar item specified by the \"id\" key in the table argument.","Parameters","a table containing an \"id\" key and the attributes to change for the toolbar item.","Returns","the toolbarObject","Notes","You cannot change a toolbar item's id For a list of the possible toolbar item attribute keys, see hs.webview.toolbar:addItems."]},{"l":"notifyOnChange","p":["Signature","hs.webview.toolbar:notifyOnChange([bool]) - toolbarObject | bool","Type","Method","Description","Get or set whether or not the global callback function is invoked when a toolbar item is added or removed from the toolbar.","Parameters","an optional boolean value to enable or disable invoking the global callback for toolbar changes.","Returns","if an argument is provided, returns the toolbar object; otherwise returns the current value","Notes"]},{"l":"removeItem","p":["Signature","hs.webview.toolbar:removeItem(index | identifier) - toolbarObject","Type","Method","Description","Remove the toolbar item at the index position specified, or with the specified identifier, if currently present in the toolbar.","Parameters","index- the numerical position of the toolbar item to remove. identifier- the identifier of the toolbar item to remove, if currently active in the toolbar","Returns","the toolbar object","Notes","the toolbar position must be between 1 and the number of currently active toolbar items."]},{"l":"savedSettings","p":["Signature","hs.webview.toolbar:savedSettings() - table","Type","Method","Description","Returns a table containing the settings which will be saved for the toolbar if hs.webview.toolbar:autosaves is true.","Parameters","None","Returns","a table containing the toolbar settings","Notes","If the toolbar is set to autosave, then a user-defaults entry is created in org.hammerspoon.Hammerspoon domain with the key \"NSToolbar Configuration XXX\" where XXX is the toolbar identifier specified when the toolbar was created. This method is provided if you do not wish for changes to the toolbar to be autosaved for every change, but may wish to save it programmatically under specific conditions."]},{"l":"selectedItem","p":["Signature","hs.webview.toolbar:selectedItem([item]) - toolbarObject | item","Type","Method","Description","Get or set the selected toolbar item","Parameters","item - an optional id for the toolbar item to show as selected, or an explicit nil if you wish for no toolbar item to be selected.","Returns","if an argument is provided, returns the toolbar object; otherwise returns the current value","Notes","Only toolbar items which were defined as selectable when created with hs.webview.toolbar.new can be selected with this method."]},{"l":"selectSearchField","p":["Signature","hs.webview.toolbar:selectSearchField([identifier]) - toolbarObject | false","Type","Method","Description","Programmatically focus the search field for keyboard input.","Parameters","identifier - an optional string specifying the id of the specific search field to focus. If this parameter is not provided, this method attempts to focus the first active searchfield found in the toolbar","Returns","if the searchfield can be found and is currently in the toolbar, returns the toolbarObject; otherwise returns false.","Notes","if there is current text in the searchfield, it will be selected so that any subsequent typing by the user will replace the current value in the searchfield."]},{"l":"separator","p":["Signature","hs.webview.toolbar:separator([bool]) - toolbarObject | bool","Type","Method","Description","Get or set whether or not the toolbar shows a separator between the toolbar and the main window contents.","Parameters","an optional boolean value to enable or disable the separator.","Returns","if an argument is provided, returns the toolbar object; otherwise returns the current value","Notes"]},{"l":"setCallback","p":["Signature","hs.webview.toolbar:setCallback(fn) - toolbarObject","Type","Method","Description","Sets or removes the global callback function for the toolbar.","Parameters","fn - a function to set as the global callback for the toolbar, or nil to remove the global callback. The function should expect three (four, if the item is a searchfield or notifyOnChange is true) arguments and return none: the toolbar object, \"console\" or the webview/chooser object the toolbar is attached to, and the toolbar item identifier that was clicked.","Returns","the toolbar object.","Notes","the global callback function is invoked for a toolbar button item that does not have a specific function assigned directly to it. if hs.webview.toolbar:notifyOnChange is set to true, then this callback function will also be invoked when a toolbar item is added or removed from the toolbar either programmatically with hs.webview.toolbar:insertItem and hs.webview.toolbar:removeItem or under user control with hs.webview.toolbar:customizePanel and the callback function will receive a string of \"add\" or \"remove\" as a fourth argument."]},{"l":"sizeMode","p":["Signature","hs.webview.toolbar:sizeMode([size]) - toolbarObject","Type","Method","Description","Get or set the toolbar's size.","Parameters","size - an optional string to set the size of the toolbar to \"default\", \"regular\", or \"small\".","Returns","if an argument is provided, returns the toolbar object; otherwise returns the current value","Notes"]},{"l":"toolbarStyle","p":["Signature","hs.webview.toolbar:toolbarStyle([style]) - toolbarObject","Type","Method","Description","Get or set the toolbar's style.","Parameters","style - an optional string to set the style of the toolbar to \"automatic\", \"expanded\", \"preference\", \"unified\", or \"unifiedCompact\".","Returns","if an argument is provided, returns the toolbar object; otherwise returns the current value","Notes","This is only available for macOS 11.0+. Will return nil if getting on an earlier version of macOS. automatic- A style indicating that the system determines the toolbar’s appearance and location. expanded- A style indicating that the toolbar appears below the window title. preference- A style indicating that the toolbar appears below the window title with toolbar items centered in the toolbar. unified- A style indicating that the toolbar appears next to the window title. unifiedCompact- A style indicating that the toolbar appears next to the window title and with reduced margins to allow more focus on the window’s contents."]},{"l":"visible","p":["Signature","hs.webview.toolbar:visible([bool]) - toolbarObject | bool","Type","Method","Description","Get or set whether or not the toolbar is currently visible in the window it is attached to.","Parameters","an optional boolean value to show or hide the toolbar.","Returns","if an argument is provided, returns the toolbar object; otherwise returns the current value","Notes"]},{"l":"visibleItems","p":["Signature","hs.webview.toolbar:visibleItems() - array","Type","Method","Description","Returns an array of the currently visible toolbar item identifiers.","Parameters","None","Returns","a table as an array of the currently visible toolbar item identifiers. Toolbar items which are in the overflow menu are not included in this array. See also hs.webview.toolbar:items and hs.webview.toolbar:allowedItems.","Notes"]}],[{"i":"hswebviewusercontent","l":"hs.webview.usercontent","p":["This module provides support for injecting custom JavaScript user content into your webviews and for JavaScript to post messages back to Hammerspoon."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","injectScript","removeAllScripts","setCallback","userScripts"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","hs.webview.usercontent.new(name) - usercontentControllerObject","Type","Constructor","Description","Create a new user content controller for a webview and create the message port with the specified name for JavaScript message support.","Parameters","name - the name of the message port which JavaScript in the webview can use to post messages to Hammerspoon.","Returns","the usercontentControllerObject","Notes","This object should be provided as the final argument to the hs.webview.new constructor in order to tie the webview to this content controller. All new windows which are created from this parent webview will also use this controller. See hs.webview.usercontent:setCallback for more information about the message port."]},{"l":"Methods"},{"l":"injectScript","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.webview.usercontent:injectScript(scriptTable) - usercontentControllerObject | | Type | Method | | Description | Add a script to be injected into webviews which use this user content controller. | | Parameters | scriptTable - a table containing the following keys which define the script and how it is to be injected: source - the javascript which is injected (required) mainFrame - a boolean value which indicates whether this script is only injected for the main webview frame (true) or for all frames within the webview (false). Defaults to true. injectionTime - a string which indicates whether the script is injected at \"documentStart\" or \"documentEnd\". Defaults to \"documentStart\". | | Returns | the usercontentControllerObject or nil if the script table was malformed in some way. | | Notes | |"]},{"l":"removeAllScripts","p":["Signature","hs.webview.usercontent:removeAllScripts() - usercontentControllerObject","Type","Method","Description","Removes all user scripts currently defined for this user content controller.","Parameters","None","Returns","the usercontentControllerObject","Notes","The WKUserContentController class only allows for removing all scripts. If you need finer control, make a copy of the current scripts with hs.webview.usercontent.userScripts() first so you can recreate the scripts you want to keep."]},{"l":"setCallback","p":["Signature","hs.webview.usercontent:setCallback(fn) - usercontentControllerObject","Type","Method","Description","Set or remove the callback function to handle message posted to this user content's message port.","Parameters","fn - The function which should receive messages posted to this user content's message port. Specify an explicit nil to disable the callback. The function should take one argument which will be the message posted and any returned value will be ignored.","Returns","the usercontentControllerObject","Notes","Within your (injected or served) JavaScript, you can post messages via the message port created with the constructor like this: try { webkit.messageHandlers. name>.postMessage( message-object);} catch(err) { console.log('The controller does not exist yet');} Where name matches the name specified in the constructor and message-object is the object to post to the function. This object can be a number, string, date, array, dictionary(table), or nil."]},{"l":"userScripts","p":["Signature","hs.webview.usercontent:userScripts() - array","Type","Method","Description","Get a table containing all of the currently defined injection scripts for this user content controller","Parameters","None","Returns","An array of injected user scripts. Each entry in the array will be a table containing the following keys: source - the javascript which is injected mainFrame - a boolean value which indicates whether this script is only injected for the main webview frame (true) or for all frames within the webview (false) injectionTime - a string which indicates whether the script is injected at \"documentStart\" or \"documentEnd\".","Notes","Because the WKUserContentController class only allows for removing all scripts, you can use this method to generate a list of all scripts, modify it, and then use it in a loop to reapply the scripts if you need to remove just a few scripts."]}],[{"i":"hswifi","l":"hs.wifi","p":["Inspect WiFi networks"]},{"l":"Submodules","p":["hs.wifi.watcher"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","associate","availableNetworks","currentNetwork","disassociate","interfaceDetails","interfaces","setPower","Constructors- API calls which return an object, typically one that offers API methods","backgroundScan","Methods- API calls which can only be made on an object returned by a constructor","isDone"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"associate","p":["Signature","hs.wifi.associate(network, passphrase[, interface]) - boolean","Type","Function","Description","Connect the interface to a wireless network","Parameters","network - A string containing the SSID of the network to associate to passphrase - A string containing the passphrase of the network interface - An optional string containing the name of an interface (see hs.wifi.interfaces). If not present, the default system WLAN device will be used","Returns","A boolean, true if the network was joined successfully, false if an error occurred","Notes","Enterprise WiFi networks are not currently supported. Please file an issue on GitHub if you need support for enterprise networks This function blocks Hammerspoon until the operation is completed If multiple access points are available with the same SSID, one will be chosen at random to connect to"]},{"l":"availableNetworks","p":["Signature","hs.wifi.availableNetworks([interface]) - table","Type","Function","Description","Gets a list of available WiFi networks","Parameters","interface - an optional interface name as listed in the results of hs.wifi.interfaces. If not present, the interface defaults to the systems default WLAN device.","Returns","A table containing the names of all visible WiFi networks","Notes","WARNING: This function will block all Lua execution until the scan has completed. It's probably not very sensible to use this function very much, if at all."]},{"l":"currentNetwork","p":["Signature","hs.wifi.currentNetwork([interface]) - string or nil","Type","Function","Description","Gets the name of the current WiFi network","Parameters","interface - an optional interface name as listed in the results of hs.wifi.interfaces. If not present, the interface defaults to the systems default WLAN device.","Returns","A string containing the SSID of the WiFi network currently joined, or nil if no there is no WiFi connection","Notes"]},{"l":"disassociate","p":["Signature","hs.wifi.disassociate([interface]) - nil","Type","Function","Description","Disconnect the interface from its current network.","Parameters","interface - an optional interface name as listed in the results of hs.wifi.interfaces. If not present, the interface defaults to the systems default WLAN device.","Returns","None","Notes"]},{"l":"interfaceDetails","p":["Signature","hs.wifi.interfaceDetails([interface]) - table","Type","Function","Description","Returns a table containing details about the wireless interface.","Parameters","interface - an optional interface name as listed in the results of hs.wifi.interfaces. If not present, the interface defaults to the systems default WLAN device.","Returns","A table containing details about the interface. The table will contain the following keys: active - The interface has its corresponding network service enabled. activePHYMode - The current active PHY mode for the interface. bssid - The current basic service set identifier (BSSID) for the interface. Note that for this key to be available, hs.location needs to have been started cachedScanResults - A table containing the networks currently in the scan cache for the WLAN interface. See hs.wifi.backgroundScan for details on the table format. configuration - A table containing the current configuration for the given WLAN interface. This table will contain the following keys: networkProfiles - A table containing an array of known networks for the interface. Entries in the array will each contain the following keys: ssid - The service set identifier (SSID) for the network profile. ssidData - The service set identifier (SSID) for the network, returned as data (1-32 octets). security - The security mode for the network profile. rememberJoinedNetworks - A boolean flag indicating whether or not the AirPort client will remember all joined networks. requireAdministratorForAssociation - A boolean flag indicating whether or not changing the wireless network requires an Administrator password. requireAdministratorForIBSSMode - A boolean flag indicating whether or not creating an IBSS (Ad Hoc) network requires an Administrator password. requireAdministratorForPower - A boolean flag indicating whether or not changing the wireless power state requires an Administrator password. countryCode - The current country code (ISO/IEC 3166-1:1997) for the interface. hardwareAddress - The hardware media access control (MAC) address for the interface. interface - The BSD name of the interface. interfaceMode - The current mode for the interface. noise - The current aggregate noise measurement (dBm) for the interface. power - Whether or not the interface is currently powered on. rssi - The current aggregate received signal strength indication (RSSI) measurement (dBm) for the interface. security - The current security mode for the interface. ssid - The current service set identifier (SSID) for the interface. ssidData - The service set identifier (SSID) for the interface, returned as data (1-32 octets). supportedChannels - An array of channels supported by the interface for the active country code. The array will contain entries with the following keys: band - The channel band. number - The channel number. width - The channel width. transmitPower - The current transmit power (mW) for the interface. Returns 0 in the case of an error. transmitRate - The current transmit rate (Mbps) for the interface. wlanChannel - A table containing details about the channel the interface is on. The table will contain the following keys: band - The channel band. number - The channel number. width - The channel width.","Notes"]},{"l":"interfaces","p":["Signature","hs.wifi.interfaces() - table","Type","Function","Description","Returns a list of interface names for WLAN devices attached to the system","Parameters","None","Returns","a table containing the names of all WLAN interfaces for this system.","Notes","For most systems, this will be one interface, but the result is still returned as an array."]},{"l":"setPower","p":["Signature","hs.wifi.setPower(state, [interface]) - boolean","Type","Function","Description","Turns a wifi interface on or off","Parameters","state - a boolean value indicating if the Wifi device should be powered on (true) or off (false). interface - an optional interface name as listed in the results of hs.wifi.interfaces. If not present, the interface defaults to the systems default WLAN device.","Returns","True if the power change was successful, or false and an error string if an error occurred attempting to set the power state. Returns nil if there is a problem attaching to the interface.","Notes"]},{"l":"Constructors"},{"l":"backgroundScan","p":["Signature","hs.wifi.backgroundScan(fn, [interface]) - scanObject","Type","Constructor","Description","Perform a scan for available wifi networks in the background (non-blocking)","Parameters","fn - the function to callback when the scan is completed. interface - an optional interface name as listed in the results of hs.wifi.interfaces. If not present, the interface defaults to the systems default WLAN device.","Returns","returns a scan object","Notes","If you pass in nil as the callback function, the scan occurs but no callback function is called. This can be useful to update the cachedScanResults entry returned by hs.wifi.interfaceDetails. The callback function should expect one argument which will be a table if the scan was successful or a string containing an error message if it was not. The table will be an array of available networks. Each entry in the array will be a table containing the following keys: beaconInterval - The beacon interval (ms) for the network. bssid - The basic service set identifier (BSSID) for the network. countryCode - The country code (ISO/IEC 3166-1:1997) for the network. ibss - Whether or not the network is an IBSS (ad-hoc) network. informationElementData - Information element data included in beacon or probe response frames as an array of integers. noise - The aggregate noise measurement (dBm) for the network. PHYModes - A table containing the PHY Modes supported by the network. rssi - The aggregate received signal strength indication (RSSI) measurement (dBm) for the network. security - A table containing the security types supported by the network. ssid - The service set identifier (SSID) for the network, encoded as a string. ssidData - The service set identifier (SSID) for the network, returned as data (1-32 octets). wlanChannel - A table containing details about the channel the network is on. The table will contain the following keys: band - The channel band. number - The channel number. width - The channel width. The contents of the informationElementData field is returned as an array of integers, each array item representing a byte in the block of data for the element. You can convert this data into a Lua string by passing the array as an argument to string.char(table.unpack(results.informationElementData)), but note that this field contains arbitrary binary data and should not be treated or considered as a displayable string. It requires additional parsing, depending upon the specific information you need from the probe or beacon response. For debugging purposes, if you wish to view the contents of this field as a string, make sure to wrap string.char(table.unpack(results.informationElementData)) with hs.utf8.asciiOnly or hs.utf8.hexDump, rather than just print the result directly. As an example using hs.wifi.interfaceDetails whose cachedScanResults key is an array of entries identical to the argument passed to this constructor's callback function:~~~ function dumpIED(interface) local interface = interface or \"en0\" local cleanupFunction = hs.utf8.hexDump -- or hs.utf8.asciiOnly if you prefer local cachedScanResults = hs.wifi.interfaceDetails(interface).cachedScanResults if not cachedScanResults then hs.wifi.availableNetworks() -- blocking, so only do if necessary cachedScanResults = hs.wifi.interfaceDetails(interface).cachedScanResults end for i, v in ipairs(cachedScanResults) do print(v.ssid .. \" on channel \" .. v.wlanChannel.number .. \" beacon data:\") print(cleanupFunction(string.char(table.unpack(v.informationElementData)))) end end~~~ These precautions are in response to Hammerspoon GitHub Issue #859. As binary data, even when cleaned up with the Console's UTF8 wrapper code, some valid UTF8 sequences have been found to cause crashes in the OSX CoreText API during rendering. While some specific sequences have made the rounds on the Internet, the specific code analysis at http://www.theregister.co.uk/2015/05/27/text_message_unicode_ios_osx_vulnerability/ suggests a possible cause of the problem which may be triggered by other currently unknown sequences as well. As the sequences aren't at present predictable, we can't add to the UTF8 wrapper already in place for the Hammerspoon console."]},{"l":"Methods"},{"l":"isDone","p":["Signature","hs.wifi:isDone() - boolean","Type","Method","Description","Returns whether or not a scan object has completed its scan for wireless networks.","Parameters","None","Returns","a boolean value indicating whether or not the scan has been completed.","Notes","This will be set whether or not an actual callback function was invoked. This method can be checked to see if the cached data for the cachedScanResults entry returned by hs.wifi.interfaceDetails has been updated."]}],[{"i":"hswifiwatcher","l":"hs.wifi.watcher","p":["Watch for changes to the associated wifi network"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","eventTypes","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","start","stop","watchingFor"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"eventTypes","p":["Signature","hs.wifi.watcher.eventTypes[]","Type","Constant","Description","A table containing the possible event types that this watcher can monitor for.","Notes","The following events are available for monitoring:\"SSIDChange\" - monitor when the associated network for the Wi-Fi interface changes\"BSSIDChange\" - monitor when the base station the Wi-Fi interface is connected to changes\"countryCodeChange\" - monitor when the adopted country code of the Wi-Fi interface changes\"linkChange\" - monitor when the link state for the Wi-Fi interface changes\"linkQualityChange\" - monitor when the RSSI or transmit rate for the Wi-Fi interface changes\"modeChange\" - monitor when the operating mode of the Wi-Fi interface changes\"powerChange\" - monitor when the power state of the Wi-Fi interface changes\"scanCacheUpdated\" - monitor when the scan cache of the Wi-Fi interface is updated with new information"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.wifi.watcher.new(fn) - watcher","Type","Constructor","Description","Creates a new watcher for WiFi network events","Parameters","fn - A function that will be called when a WiFi event that is being monitored occurs. The function should expect 2 or 4 arguments as described in the notes below.","Returns","A hs.wifi.watcher object","Notes","For backwards compatibility, only \"SSIDChange\" is watched for by default, so existing code can continue to ignore the callback function arguments unless you add or change events with the hs.wifi.watcher:watchingFor. The callback function should expect between 3 and 5 arguments, depending upon the events being watched. The possible arguments are as follows: watcher, \"SSIDChange\", interface- occurs when the associated network for the Wi-Fi interface changes watcher- the watcher object itself message- the message specifying the event, in this case \"SSIDChange\" interface- the name of the interface for which the event occurred Use hs.wifi.currentNetwork([interface]) to identify the new network, which may be nil when you leave a network. watcher, \"BSSIDChange\", interface- occurs when the base station the Wi-Fi interface is connected to changes watcher- the watcher object itself message- the message specifying the event, in this case \"BSSIDChange\" interface- the name of the interface for which the event occurred watcher, \"countryCodeChange\", interface- occurs when the adopted country code of the Wi-Fi interface changes watcher- the watcher object itself message- the message specifying the event, in this case \"countryCodeChange\" interface- the name of the interface for which the event occurred watcher, \"linkChange\", interface- occurs when the link state for the Wi-Fi interface changes watcher- the watcher object itself message- the message specifying the event, in this case \"linkChange\" interface- the name of the interface for which the event occurred watcher, \"linkQualityChange\", interface- occurs when the RSSI or transmit rate for the Wi-Fi interface changes watcher- the watcher object itself message- the message specifying the event, in this case \"linkQualityChange\" interface- the name of the interface for which the event occurred rssi- the RSSI value for the currently associated network on the Wi-Fi interface rate- the transmit rate for the currently associated network on the Wi-Fi interface watcher, \"modeChange\", interface- occurs when the operating mode of the Wi-Fi interface changes watcher- the watcher object itself message- the message specifying the event, in this case \"modeChange\" interface- the name of the interface for which the event occurred watcher, \"powerChange\", interface- occurs when the power state of the Wi-Fi interface changes watcher- the watcher object itself message- the message specifying the event, in this case \"powerChange\" interface- the name of the interface for which the event occurred watcher, \"scanCacheUpdated\", interface- occurs when the scan cache of the Wi-Fi interface is updated with new information watcher- the watcher object itself message- the message specifying the event, in this case \"scanCacheUpdated\" interface- the name of the interface for which the event occurred"]},{"l":"Methods"},{"l":"start","p":["Signature","hs.wifi.watcher:start() - watcher","Type","Method","Description","Starts the SSID watcher","Parameters","None","Returns","The hs.wifi.watcher object","Notes"]},{"l":"stop","p":["Signature","hs.wifi.watcher:stop() - watcher","Type","Method","Description","Stops the SSID watcher","Parameters","None","Returns","The hs.wifi.watcher object","Notes"]},{"l":"watchingFor","p":["Signature","hs.wifi.watcher:watchingFor([messages]) - watcher | current-value","Type","Method","Description","Get or set the specific types of wifi events to generate a callback for with this watcher.","Parameters","messages- an optional table of or list of strings specifying the types of events this watcher should invoke a callback for. You can specify multiple types of events to watch for. Defaults to { SSIDChange }.","Returns","if a value is provided, returns the watcher object; otherwise returns the current values as a table of strings.","Notes","the possible values for this method are described in hs.wifi.watcher.eventTypes. the special string \"all\" specifies that all event types should be watched for."]}],[{"i":"hswindow","l":"hs.window","p":["Inspect/manipulate windows","Notes:","See hs.screen and hs.geometry for more information on how Hammerspoon uses window/screen frames and coordinates"]},{"l":"Submodules","p":["hs.window.filter","hs.window.highlight","hs.window.layout","hs.window.switcher","hs.window.tiling"]},{"l":"API Overview","p":["allWindows","animationDuration","application","becomeMain","centerOnScreen","close","Constructors- API calls which return an object, typically one that offers API methods","desktop","find","focus","focusedWindow","focusTab","focusWindowEast","focusWindowNorth","focusWindowSouth","focusWindowWest","frame","frontmostWindow","Functions- API calls offered directly by the extension","get","id","invisibleWindows","isFullScreen","isMaximizable","isMinimized","isStandard","isVisible","list","maximize","Methods- API calls which can only be made on an object returned by a constructor","minimize","minimizedWindows","move","moveOneScreenEast","moveOneScreenNorth","moveOneScreenSouth","moveOneScreenWest","moveToScreen","moveToUnit","orderedWindows","otherWindowsAllScreens","otherWindowsSameScreen","raise","role","screen","sendToBack","setFrame","setFrameCorrectness","setFrameInScreenBounds","setFrameWithWorkarounds","setFullScreen","setShadows","setSize","setTopLeft","size","snapshot","snapshotForID","subrole","tabCount","timeout","title","toggleFullScreen","toggleZoom","topLeft","unminimize","Variables- Configurable values","visibleWindows","windowsToEast","windowsToNorth","windowsToSouth","windowsToWest","zoomButtonRect"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"animationDuration","p":["Signature","hs.window.animationDuration (number)","Type","Variable","Description","The default duration for animations, in seconds. Initial value is 0.2; set to 0 to disable animations."]},{"l":"setFrameCorrectness","p":["Signature","hs.window.setFrameCorrectness","Type","Variable","Description","Using hs.window:setFrame() in some cases does not work as expected: namely, the bottom (or Dock) edge, and edges between screens, might"]},{"l":"Functions"},{"l":"allWindows","p":["Signature","hs.window.allWindows() - list of hs.window objects","Type","Function","Description","Returns all windows","Parameters","None","Returns","A list of hs.window objects representing all open windows","Notes","visibleWindows(), orderedWindows(), get(), find(), and several more functions and methods in this and other modules make use of this function, so it is important to understand its limitations This function queries all applications for their windows every time it is invoked; if you need to call it a lot and performance is not acceptable consider using the hs.window.filter module This function can only return windows in the current Mission Control Space; if you need to address windows across different Spaces you can use the hs.window.filter module- if Displays have separate Spaces is on(in System Preferences>Mission Control) the current Space is defined as the union of all currently visible Spaces- minimized windows and hidden windows (i.e. belonging to hidden apps, e.g. via cmd-h) are always considered to be in the current Space This function filters out the desktop \"window\"; use hs.window.desktop() to address it. (Note however that hs.application.get'Finder':allWindows() will include the desktop in the returned list) Beside the limitations discussed above, this function will return all windows as reported by OSX, including some\"windows\" that one wouldn't expect: for example, every Google Chrome (actual) window has a companion window for its status bar; therefore you might get unexpected results - in the Chrome example, calling hs.window.focusWindowSouth() from a Chrome window would end up \"focusing\" its status bar, and therefore the proper window itself, seemingly resulting in a no-op. In order to avoid such surprises you can use the hs.window.filter module, and more specifically the default windowfilter ( hs.window.filter.default) which filters out known cases of not-actual-windows Some windows will not be reported by OSX - e.g. things that are on different Spaces, or things that are Full Screen"]},{"l":"desktop","p":["Signature","hs.window.desktop() - hs.window object","Type","Function","Description","Returns the desktop \"window\"","Parameters","None","Returns","An hs.window object representing the desktop, or nil if Finder is not running","Notes","The desktop belongs to Finder.app: when Finder is the active application, you can focus the desktop by cycling through windows via cmd-/liliThe desktop window has no id, a role of AXScrollArea and no subrole/liliThe desktop is filtered out from hs.window.allWindows()` (and downstream uses)"]},{"l":"invisibleWindows","p":["Signature","hs.window.invisibleWindows() - list of hs.window objects","Type","Function","Description","Gets all invisible windows","Parameters","None","Returns","A list containing hs.window objects representing all windows that are not visible as per hs.window:isVisible()","Notes"]},{"l":"list","p":["Signature","hs.window.list(allWindows) - table","Type","Function","Description","Gets a table containing all the window data retrieved from CGWindowListCreate.","Parameters","allWindows - Get all the windows, even those \"below\" the Dock window.","Returns","true is succesful otherwise false if an error occurred.","Notes","This allows you to get window information without Accessibility Permissions."]},{"l":"minimizedWindows","p":["Signature","hs.window.minimizedWindows() - list of hs.window objects","Type","Function","Description","Gets all minimized windows","Parameters","None","Returns","A list containing hs.window objects representing all windows that are minimized as per hs.window:isMinimized()","Notes"]},{"l":"orderedWindows","p":["Signature","hs.window.orderedWindows() - list of hs.window objects","Type","Function","Description","Returns all visible windows, ordered from front to back","Parameters","None","Returns","A list of hs.window objects representing all visible windows, ordered from front to back","Notes"]},{"l":"setShadows","p":["Signature","hs.window.setShadows(shadows)","Type","Function","Description","Enables/Disables window shadows","Parameters","shadows - A boolean, true to show window shadows, false to hide window shadows","Returns","None","Notes","This function uses a private, undocumented OS X API call, so it is not guaranteed to work in any future OS X release"]},{"l":"snapshotForID","p":["Signature","hs.window.snapshotForID(ID [, keepTransparency]) - hs.image-object","Type","Function","Description","Returns a snapshot of the window specified by the ID as an hs.image object","Parameters","ID - Window ID of the window to take a snapshot of. keepTransparency - optional boolean value indicating if the windows alpha value (transparency) should be maintained in the resulting image or if it should be fully opaque (default).","Returns","hs.image object of the window snapshot or nil if unable to create a snapshot","Notes","See also method hs.window:snapshot() Because the window ID cannot always be dynamically determined, this function will allow you to provide the ID of a window that was cached earlier."]},{"l":"timeout","p":["Signature","hs.window.timeout(value) - boolean","Type","Function","Description","Sets the timeout value used in the accessibility API.","Parameters","value - The number of seconds for the new timeout value.","Returns","true is succesful otherwise false if an error occurred.","Notes"]},{"l":"visibleWindows","p":["Signature","hs.window.visibleWindows() - list of hs.window objects","Type","Function","Description","Gets all visible windows","Parameters","None","Returns","A list containing hs.window objects representing all windows that are visible as per hs.window:isVisible()","Notes"]},{"l":"Constructors"},{"l":"find","p":["Signature","hs.window.find(hint) - hs.window object(s)","Type","Constructor","Description","Finds windows","Parameters","hint - search criterion for the desired window(s); it can be: - an id number as per hs.window:id()- a string pattern that matches (via string.find) the window title as per hs.window:title()(for convenience, the matching will be done on lowercased strings)","Returns","one or more hs.window objects that match the supplied search criterion, or nil if none found","Notes","for convenience you can call this as hs.window(hint) see also hs.window.get for more sophisticated use cases and/or for better performance if you call this a lot, consider using hs.window.filter Usage:/lili-- by id/lilihs.window(8812):title() -- Hammerspoon Console/lili-- by title/lilihs.window'bash':application():name() -- Terminal/lili"]},{"l":"focusedWindow","p":["Signature","hs.window.focusedWindow() - window","Type","Constructor","Description","Returns the window that has keyboard/mouse focus","Parameters","None","Returns","An hs.window object representing the currently focused window","Notes"]},{"l":"frontmostWindow","p":["Signature","hs.window.frontmostWindow() - hs.window object","Type","Constructor","Description","Returns the focused window or, if no window has focus, the frontmost one","Parameters","None","Returns","* An hs.window object representing the frontmost window, or nil if there are no visible windows","Notes"]},{"l":"get","p":["Signature","hs.window.get(hint) - hs.window object","Type","Constructor","Description","Gets a specific window","Parameters","hint - search criterion for the desired window; it can be: - an id number as per hs.window:id()- a window title string as per hs.window:title()","Returns","the first hs.window object that matches the supplied search criterion, or nil if not found","Notes","see also hs.window.find and hs.application:getWindow()"]},{"l":"Methods"},{"l":"application","p":["Signature","hs.window:application() - app or nil","Type","Method","Description","Gets the hs.application object the window belongs to","Parameters","None","Returns","An hs.application object representing the application that owns the window, or nil if an error occurred","Notes"]},{"l":"becomeMain","p":["Signature","hs.window:becomeMain() - window","Type","Method","Description","Makes the window the main window of its application","Parameters","None","Returns","The hs.window object","Notes","Make a window become the main window does not transfer focus to the application. See hs.window.focus()"]},{"l":"centerOnScreen","p":["Signature","hs.window:centerOnScreen([screen][, ensureInScreenBounds][, duration]) -- hs.window object","Type","Method","Description","Centers the window on a screen","Parameters","screen - (optional) An hs.screen object or argument for hs.screen.find; if nil, use the screen the window is currently on ensureInScreenBounds - (optional) if true, use setFrameInScreenBounds() to ensure the resulting window frame is fully contained within the window's screen duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"close","p":["Signature","hs.window:close() - bool","Type","Method","Description","Closes the window","Parameters","None","Returns","True if the operation succeeded, false if not","Notes"]},{"l":"focus","p":["Signature","hs.window:focus() - hs.window object","Type","Method","Description","Focuses the window","Parameters","None","Returns","The hs.window object","Notes"]},{"l":"focusTab","p":["Signature","hs.window:focusTab(index) - bool","Type","Method","Description","Focuses the tab in the window's tab group at index, or the last tab if index is out of bounds","Parameters","index - A number, a 1-based index of a tab to focus","Returns","true if the tab was successfully pressed, or false if there was a problem","Notes","This method works with document tab groups and some app tabs, like Chrome and Safari."]},{"l":"focusWindowEast","p":["Signature","hs.window:focusWindowEast([candidateWindows[, frontmost[, strict]]]) - boolean","Type","Method","Description","Focuses the nearest possible window to the east (i.e. right)","Parameters","candidateWindows - (optional) a list of candidate windows to consider; if nil, all visible windows to the east are candidates. frontmost - (optional) boolean, if true focuses the nearest window that isn't occluded by any other window strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the eastward axis","Returns","true if a window was found and focused, false otherwise; nil if the search couldn't take place","Notes","If you don't pass candidateWindows, Hammerspoon will query for the list of all visible windows every time this method is called; this can be slow, and some undesired \"windows\" could be included(see the notes for hs.window.allWindows()); consider using the equivalent methods in hs.window.filter instead"]},{"l":"focusWindowNorth","p":["Signature","hs.window:focusWindowNorth([candidateWindows[, frontmost[, strict]]]) - boolean","Type","Method","Description","Focuses the nearest possible window to the north (i.e. up)","Parameters","candidateWindows - (optional) a list of candidate windows to consider; if nil, all visible windows to the east are candidates. frontmost - (optional) boolean, if true focuses the nearest window that isn't occluded by any other window strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the eastward axis","Returns","true if a window was found and focused, false otherwise; nil if the search couldn't take place","Notes","If you don't pass candidateWindows, Hammerspoon will query for the list of all visible windows every time this method is called; this can be slow, and some undesired \"windows\" could be included(see the notes for hs.window.allWindows()); consider using the equivalent methods in hs.window.filter instead"]},{"l":"focusWindowSouth","p":["Signature","hs.window:focusWindowSouth([candidateWindows[, frontmost[, strict]]]) - boolean","Type","Method","Description","Focuses the nearest possible window to the south (i.e. down)","Parameters","candidateWindows - (optional) a list of candidate windows to consider; if nil, all visible windows to the east are candidates. frontmost - (optional) boolean, if true focuses the nearest window that isn't occluded by any other window strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the eastward axis","Returns","true if a window was found and focused, false otherwise; nil if the search couldn't take place","Notes","If you don't pass candidateWindows, Hammerspoon will query for the list of all visible windows every time this method is called; this can be slow, and some undesired \"windows\" could be included(see the notes for hs.window.allWindows()); consider using the equivalent methods in hs.window.filter instead"]},{"l":"focusWindowWest","p":["Signature","hs.window:focusWindowWest([candidateWindows[, frontmost[, strict]]]) - boolean","Type","Method","Description","Focuses the nearest possible window to the west (i.e. left)","Parameters","candidateWindows - (optional) a list of candidate windows to consider; if nil, all visible windows to the east are candidates. frontmost - (optional) boolean, if true focuses the nearest window that isn't occluded by any other window strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the eastward axis","Returns","true if a window was found and focused, false otherwise; nil if the search couldn't take place","Notes","If you don't pass candidateWindows, Hammerspoon will query for the list of all visible windows every time this method is called; this can be slow, and some undesired \"windows\" could be included(see the notes for hs.window.allWindows()); consider using the equivalent methods in hs.window.filter instead"]},{"l":"frame","p":["Signature","hs.window:frame() - hs.geometry rect","Type","Method","Description","Gets the frame of the window in absolute coordinates","Parameters","None","Returns","An hs.geometry rect containing the co-ordinates of the top left corner of the window and its width and height","Notes"]},{"l":"id","p":["Signature","hs.window:id() - number or nil","Type","Method","Description","Gets the unique identifier of the window","Parameters","None","Returns","A number containing the unique identifier of the window, or nil if an error occurred","Notes"]},{"l":"isFullScreen","p":["Signature","hs.window:isFullScreen() - bool or nil","Type","Method","Description","Gets the fullscreen state of the window","Parameters","None","Returns","True if the window is fullscreen, false if not. Nil if an error occurred","Notes"]},{"l":"isMaximizable","p":["Signature","hs.window:isMaximizable() - bool or nil","Type","Method","Description","Determines if a window is maximizable","Parameters","None","Returns","True if the window is maximizable, False if it isn't, or nil if an error occurred","Notes"]},{"l":"isMinimized","p":["Signature","hs.window:isMinimized() - bool","Type","Method","Description","Gets the minimized state of the window","Parameters","None","Returns","True if the window is minimized, otherwise false","Notes"]},{"l":"isStandard","p":["Signature","hs.window:isStandard() - bool","Type","Method","Description","Determines if the window is a standard window","Parameters","None","Returns","True if the window is standard, otherwise false","Notes","\"Standard window\" means that this is not an unusual popup window, a modal dialog, a floating window, etc."]},{"l":"isVisible","p":["Signature","hs.window:isVisible() - boolean","Type","Method","Description","Determines if a window is visible (i.e. not hidden and not minimized)","Parameters","None","Returns","true if the window is visible, otherwise false","Notes","This does not mean the user can see the window - it may be obscured by other windows, or it may be off the edge of the screen"]},{"l":"maximize","p":["Signature","hs.window:maximize([duration]) - hs.window object","Type","Method","Description","Maximizes the window","Parameters","duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes","The window will be resized as large as possible, without obscuring the dock/menu"]},{"l":"minimize","p":["Signature","hs.window:minimize() - window","Type","Method","Description","Minimizes the window","Parameters","None","Returns","The hs.window object","Notes","This method will always animate per your system settings and is not affected by hs.window.animationDuration"]},{"l":"move","p":["Signature","hs.window:move(rect[, screen][, ensureInScreenBounds][, duration]) -- hs.window object","Type","Method","Description","Moves the window","Parameters","rect - It can be: - an hs.geometry point, or argument to construct one; will move the screen by this delta, keeping its size constant; screen is ignored - an hs.geometry rect, or argument to construct one; will set the window frame to this rect, in absolute coordinates; screen is ignored - an hs.geometry unit rect, or argument to construct one; will set the window frame to this rect relative to the desired screen; if screen is nil, use the screen the window is currently on screen - (optional) An hs.screen object or argument for hs.screen.find; only valid if rect is a unit rect ensureInScreenBounds - (optional) if true, use setFrameInScreenBounds() to ensure the resulting window frame is fully contained within the window's screen duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"moveOneScreenEast","p":["Signature","hs.window:moveOneScreenEast([noResize, ensureInScreenBounds][, duration]) - hs.window object","Type","Method","Description","Moves the window one screen east (i.e. right)","Parameters","noResize - (optional) if true, maintain the window's absolute size ensureInScreenBounds - (optional) if true, use setFrameInScreenBounds() to ensure the resulting window frame is fully contained within the window's screen duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"moveOneScreenNorth","p":["Signature","hs.window:moveOneScreenNorth([noResize, ensureInScreenBounds][, duration]) - hs.window object","Type","Method","Description","Moves the window one screen north (i.e. up)","Parameters","noResize - (optional) if true, maintain the window's absolute size ensureInScreenBounds - (optional) if true, use setFrameInScreenBounds() to ensure the resulting window frame is fully contained within the window's screen duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"moveOneScreenSouth","p":["Signature","hs.window:moveOneScreenSouth([noResize, ensureInScreenBounds][, duration]) - hs.window object","Type","Method","Description","Moves the window one screen south (i.e. down)","Parameters","noResize - (optional) if true, maintain the window's absolute size ensureInScreenBounds - (optional) if true, use setFrameInScreenBounds() to ensure the resulting window frame is fully contained within the window's screen duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"moveOneScreenWest","p":["Signature","hs.window:moveOneScreenWest([noResize, ensureInScreenBounds][, duration]) - hs.window object","Type","Method","Description","Moves the window one screen west (i.e. left)","Parameters","noResize - (optional) if true, maintain the window's absolute size ensureInScreenBounds - (optional) if true, use setFrameInScreenBounds() to ensure the resulting window frame is fully contained within the window's screen duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"moveToScreen","p":["Signature","hs.window:moveToScreen(screen[, noResize, ensureInScreenBounds][, duration]) - hs.window object","Type","Method","Description","Moves the window to a given screen, retaining its relative position and size","Parameters","screen - An hs.screen object, or an argument for hs.screen.find(), representing the screen to move the window to noResize - (optional) if true, maintain the window's absolute size ensureInScreenBounds - (optional) if true, use setFrameInScreenBounds() to ensure the resulting window frame is fully contained within the window's screen duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"moveToUnit","p":["Signature","hs.window:moveToUnit(unitrect[, duration]) - hs.window object","Type","Method","Description","Moves and resizes the window to occupy a given fraction of the screen","Parameters","unitrect - An hs.geometry unit rect, or constructor argument to create one duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes","An example, which would make a window fill the top-left quarter of the screen: win:moveToUnit'[0.0,0.0,0.5,0.5]'"]},{"l":"otherWindowsAllScreens","p":["Signature","hs.window:otherWindowsAllScreens() - list of hs.window objects","Type","Method","Description","Gets every window except this one","Parameters","None","Returns","A table containing hs.window objects representing all visible windows other than this one","Notes"]},{"l":"otherWindowsSameScreen","p":["Signature","hs.window:otherWindowsSameScreen() - list of hs.window objects","Type","Method","Description","Gets other windows on the same screen","Parameters","None","Returns","A table of hs.window objects representing the visible windows other than this one that are on the same screen","Notes"]},{"l":"raise","p":["Signature","hs.window:raise() - window","Type","Method","Description","Brings a window to the front of the screen without focussing it","Parameters","None","Returns","The hs.window object","Notes"]},{"l":"role","p":["Signature","hs.window:role() - string","Type","Method","Description","Gets the role of the window","Parameters","None","Returns","A string containing the role of the window","Notes"]},{"l":"screen","p":["Signature","hs.window:screen() - hs.screen object","Type","Method","Description","Gets the screen which the window is on","Parameters","None","Returns","An hs.screen object representing the screen which contains the window.","Notes","While windows can be dragged to span multiple screens, part of the window will disappear when the mouse is released. The screen returned by this method will be the part of the window that remains visible."]},{"l":"sendToBack","p":["Signature","hs.window:sendToBack() - hs.window object","Type","Method","Description","Sends the window to the back","Parameters","None","Returns","The hs.window object","Notes","Due to the way this method works and OSX limitations, calling this method when you have a lot of randomly overlapping (as opposed to neatly tiled) windows might be visually jarring, and take a fair amount of time to complete. So if you don't use orderly layouts, or if you have a lot of windows in general, you're probably better off using hs.application:hide()(or simply cmd-h) This method works by focusing all overlapping windows behind this one, front to back. If called on the focused window, this method will switch focus to the topmost window under this one; otherwise, the currently focused window will regain focus after this window has been sent to the back."]},{"l":"setFrame","p":["Signature","hs.window:setFrame(rect[, duration]) - hs.window object","Type","Method","Description","Sets the frame of the window in absolute coordinates","Parameters","rect - An hs.geometry rect, or constructor argument, describing the frame to be applied to the window duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"setFrameInScreenBounds","p":["Signature","hs.window:setFrameInScreenBounds([rect][, duration]) - hs.window object","Type","Method","Description","Sets the frame of the window in absolute coordinates, possibly adjusted to ensure it is fully inside the screen","Parameters","rect - An hs.geometry rect, or constructor argument, describing the frame to be applied to the window; if omitted, the current window frame will be used duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"setFrameWithWorkarounds","p":["Signature","hs.window:setFrameWithWorkarounds(rect[, duration]) - hs.window object","Type","Method","Description","Sets the frame of the window in absolute coordinates, using the additional workarounds described in hs.window.setFrameCorrectness","Parameters","rect - An hs.geometry rect, or constructor argument, describing the frame to be applied to the window duration - (optional) The number of seconds to animate the transition. Defaults to the value of hs.window.animationDuration","Returns","The hs.window object","Notes"]},{"l":"setFullScreen","p":["Signature","hs.window:setFullScreen(fullscreen) - window","Type","Method","Description","Sets the fullscreen state of the window","Parameters","fullscreen - A boolean, true if the window should be set fullscreen, false if not","Returns","The hs.window object","Notes"]},{"l":"setSize","p":["Signature","hs.window:setSize(size) - window","Type","Method","Description","Resizes the window","Parameters","size - A size-table containing the width and height the window should be resized to","Returns","The hs.window object","Notes"]},{"l":"setTopLeft","p":["Signature","hs.window:setTopLeft(point) - window","Type","Method","Description","Moves the window to a given point","Parameters","point - A point-table containing the absolute co-ordinates the window should be moved to","Returns","The hs.window object","Notes"]},{"l":"size","p":["Signature","hs.window:size() - size","Type","Method","Description","Gets the size of the window","Parameters","None","Returns","A size-table containing the width and height of the window","Notes"]},{"l":"snapshot","p":["Signature","hs.window:snapshot([keepTransparency]) - hs.image-object","Type","Method","Description","Returns a snapshot of the window as an hs.image object","Parameters","keepTransparency - optional boolean value indicating if the windows alpha value (transparency) should be maintained in the resulting image or if it should be fully opaque (default).","Returns","hs.image object of the window snapshot or nil if unable to create a snapshot","Notes","See also function hs.window.snapshotForID()"]},{"l":"subrole","p":["Signature","hs.window:subrole() - string","Type","Method","Description","Gets the subrole of the window","Parameters","None","Returns","A string containing the subrole of the window","Notes","This typically helps to determine if a window is a special kind of window - such as a modal window, or a floating window"]},{"l":"tabCount","p":["Signature","hs.window:tabCount() - number or nil","Type","Method","Description","Gets the number of tabs in the window has","Parameters","None","Returns","A number containing the number of tabs, or nil if an error occurred","Notes","Intended for use with the focusTab method, if this returns a number, then focusTab can switch between that many tabs."]},{"l":"title","p":["Signature","hs.window:title() - string","Type","Method","Description","Gets the title of the window","Parameters","None","Returns","A string containing the title of the window","Notes"]},{"l":"toggleFullScreen","p":["Signature","hs.window:toggleFullScreen() - hs.window object","Type","Method","Description","Toggles the fullscreen state of the window","Parameters","None","Returns","The hs.window object","Notes","Not all windows support being full-screened"]},{"l":"toggleZoom","p":["Signature","hs.window:toggleZoom() - window","Type","Method","Description","Toggles the zoom state of the window (this is effectively equivalent to clicking the green maximize/fullscreen button at the top left of a window)","Parameters","None","Returns","The hs.window object","Notes"]},{"l":"topLeft","p":["Signature","hs.window:topLeft() - point","Type","Method","Description","Gets the absolute co-ordinates of the top left of the window","Parameters","None","Returns","A point-table containing the absolute co-ordinates of the top left corner of the window","Notes"]},{"l":"unminimize","p":["Signature","hs.window:unminimize() - window","Type","Method","Description","Un-minimizes the window","Parameters","None","Returns","The hs.window object","Notes"]},{"l":"windowsToEast","p":["Signature","hs.window:windowsToEast([candidateWindows[, frontmost[, strict]]]) - list of hs.window objects","Type","Method","Description","Gets all windows to the east of this window","Parameters","candidateWindows - (optional) a list of candidate windows to consider; if nil, all visible windows to the east are candidates. frontmost - (optional) boolean, if true unoccluded windows will be placed before occluded ones in the result list strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the eastward axis","Returns","A list of hs.window objects representing all windows positioned east (i.e. right) of the window, in ascending order of distance","Notes","If you don't pass candidateWindows, Hammerspoon will query for the list of all visible windows every time this method is called; this can be slow, and some undesired \"windows\" could be included (see the notes for hs.window.allWindows()); consider using the equivalent methods in hs.window.filter instead"]},{"l":"windowsToNorth","p":["Signature","hs.window:windowsToNorth([candidateWindows[, frontmost[, strict]]]) - list of hs.window objects","Type","Method","Description","Gets all windows to the north of this window","Parameters","candidateWindows - (optional) a list of candidate windows to consider; if nil, all visible windows to the north are candidates. frontmost - (optional) boolean, if true unoccluded windows will be placed before occluded ones in the result list strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the northward axis","Returns","A list of hs.window objects representing all windows positioned north (i.e. up) of the window, in ascending order of distance","Notes","If you don't pass candidateWindows, Hammerspoon will query for the list of all visible windows every time this method is called; this can be slow, and some undesired \"windows\" could be included (see the notes for hs.window.allWindows()); consider using the equivalent methods in hs.window.filter instead"]},{"l":"windowsToSouth","p":["Signature","hs.window:windowsToSouth([candidateWindows[, frontmost[, strict]]]) - list of hs.window objects","Type","Method","Description","Gets all windows to the south of this window","Parameters","candidateWindows - (optional) a list of candidate windows to consider; if nil, all visible windows to the south are candidates. frontmost - (optional) boolean, if true unoccluded windows will be placed before occluded ones in the result list strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the southward axis","Returns","A list of hs.window objects representing all windows positioned south (i.e. down) of the window, in ascending order of distance","Notes","If you don't pass candidateWindows, Hammerspoon will query for the list of all visible windows every time this method is called; this can be slow, and some undesired \"windows\" could be included (see the notes for hs.window.allWindows()); consider using the equivalent methods in hs.window.filter instead"]},{"l":"windowsToWest","p":["Signature","hs.window:windowsToWest([candidateWindows[, frontmost[, strict]]]) - list of hs.window objects","Type","Method","Description","Gets all windows to the west of this window","Parameters","candidateWindows - (optional) a list of candidate windows to consider; if nil, all visible windows to the west are candidates. frontmost - (optional) boolean, if true unoccluded windows will be placed before occluded ones in the result list strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the westward axis","Returns","A list of hs.window objects representing all windows positioned west (i.e. left) of the window, in ascending order of distance","Notes","If you don't pass candidateWindows, Hammerspoon will query for the list of all visible windows every time this method is called; this can be slow, and some undesired \"windows\" could be included (see the notes for hs.window.allWindows()); consider using the equivalent methods in hs.window.filter instead"]},{"l":"zoomButtonRect","p":["Signature","hs.window:zoomButtonRect() - rect-table or nil","Type","Method","Description","Gets a rect-table for the location of the zoom button (the green button typically found at the top left of a window)","Parameters","None","Returns","A rect-table containing the bounding frame of the zoom button, or nil if an error occurred","Notes","The co-ordinates in the rect-table (i.e. the x and y values) are in absolute co-ordinates, not relative to the window the button is part of, or the screen the window is on Although not perfect as such, this method can provide a useful way to find a region of the titlebar suitable for simulating mouse click events on, with hs.eventtap"]}],[{"i":"hswindowfilter","l":"hs.window.filter","p":["Filter windows by application, title, location on screen and more, and easily subscribe to events on these windows","Warning: this module is still somewhat experimental. Should you encounter any issues, please feel free to report them on https://github.com/Hammerspoon/hammerspoon/issues or #hammerspoon on irc.libera.chat.","Windowfilters monitor all windows as they're created, closed, moved etc., and select some (or none) among these windows according to specific filtering rules. These filtering rules are app-specific, i.e. they start off by selecting all windows belonging to a certain application (but you can also define default and override filters - see :setAppFilter(),:setDefaultFilter(), :setOverrideFilter()) and they can allow or reject windows based on:","visibility, focused and/or fullscreen status","title length or patterns in the title","position on screen (inside or outside a certain region or screen)","accessibility role (standard window, dialog, etc.)","whether they're in the current Mission Control Space or not","The filtering happens automatically in the background; windowfilters then:","generate a dynamic list of the windows that currently satisfy the filtering rules (see :getWindows())","sanitize and expose all pertinent events on these windows (see :subscribe() and the module constants with all the events)","A default windowfilter(not to be confused with the default filter within a windowfilter) is provided as convenience; it excludes some known apps and windows that are transient in nature, therefore unlikely to be \"interesting\" for e.g. window management. hs.window.filter.new()(with no arguments) returns a copy of the default windowfilter that you can further tailor to your needs - see hs.window.filter.default and hs.window.filter.new() for more information.","Usage examples:"]},{"l":"API Overview","p":["allowApp","allowedWindowRoles","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","copy","default","defaultCurrentSpace","focusEast","focusNorth","focusSouth","focusWest","focusWindowEast","focusWindowNorth","focusWindowSouth","focusWindowWest","forceRefreshOnSpaceChange","Functions- API calls offered directly by the extension","getFilters","getWindows","hasNoWindows","hasWindow","ignoreAlways","isAppAllowed","isGuiApp","isWindowAllowed","Methods- API calls which can only be made on an object returned by a constructor","new","pause","rejectApp","resume","setAppFilter","setCurrentSpace","setDefaultFilter","setFilters","setOverrideFilter","setRegions","setScreens","setSortOrder","sortByCreated","sortByCreatedLast","sortByFocused","sortByFocusedLast","subscribe","switchedToSpace","unsubscribe","unsubscribeAll","Variables- Configurable values","windowAllowed","windowCreated","windowDestroyed","windowFocused","windowFullscreened","windowHidden","windowInCurrentSpace","windowMinimized","windowMoved","windowNotInCurrentSpace","windowNotOnScreen","windowNotVisible","windowOnScreen","windowRejected","windowsChanged","windowsToEast","windowsToNorth","windowsToSouth","windowsToWest","windowTitleChanged","windowUnfocused","windowUnfullscreened","windowUnhidden","windowUnminimized","windowVisible"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"default","p":["Signature","hs.window.filter.default","Type","Constant","Description","The default windowfilter; it filters apps whose windows are transient in nature so that you're unlikely (and often","Notes","While you can customize the default windowfilter, it's usually advisable to make your customizations on a local copy via mywf=hs.window.filter.new(); the default windowfilter can potentially be used in several Hammerspoon modules and changing it might have unintended consequences. Common customizations: to exclude fullscreen windows: nofs_wf=hs.window.filter.new():setOverrideFilter{fullscreen=false} to include invisible windows: inv_wf=windowfilter.new():setDefaultFilter{} If you still want to alter the default windowfilter: you should probably apply your customizations at the top of your init.lua, or at any rate before instantiating any other windowfilter; this way copies created via hs.window.filter.new(nil,...) will inherit your modifications to list the known exclusions: hs.inspect(hs.window.filter.default:getFilters()) from the console to add an exclusion: hs.window.filter.default:rejectApp'Cool New Launcher' to add an app-specific rule: hs.window.filter.default:setAppFilter('My IDE',1); ignore tooltips/code completion (empty title) in My IDE to remove an exclusion (e.g. if you want to have access to Spotlight windows): hs.window.filter.default:allowApp'Spotlight'; for specialized uses you can make a specific windowfilter with myfilter=hs.window.filter.new'Spotlight'"]},{"l":"defaultCurrentSpace","p":["Signature","hs.window.filter.defaultCurrentSpace","Type","Constant","Description","A copy of the default windowfilter (see hs.window.filter.default) that only allows windows in the current","Notes","This windowfilter will inherit customizations to the default windowfilter if they're performed before referencing this"]},{"l":"hasNoWindows","p":["Signature","hs.window.filter.hasNoWindows","Type","Constant","Description","Pseudo-event for hs.window.filter:subscribe(): the windowfilter now rejects all windows","Notes","callbacks for this event will receive (as the first argument) the last window that was allowed (and is now rejected) this pseudo-event won't trigger again until after the windowfilter allows at least one window this pseudo-event will be emitted after the actual event(s) (e.g. windowDestroyed) that caused the window to be rejected"]},{"l":"hasWindow","p":["Signature","hs.window.filter.hasWindow","Type","Constant","Description","Pseudo-event for hs.window.filter:subscribe(): the windowfilter now allows one window","Notes","callbacks for this event will receive (as the first argument) the window that is now allowed this pseudo-event won't trigger again until after the windowfilter reverts to rejecting all windows this pseudo-event will be emitted after the actual event(s) (e.g. windowCreated) that caused a window to be allowed"]},{"l":"sortByCreated","p":["Signature","hs.window.filter.sortByCreated","Type","Constant","Description","Sort order for hs.window.filter:getWindows(): windows are sorted in order of creation, oldest first (see also hs.window.filter:setSortOrder())"]},{"l":"sortByCreatedLast","p":["Signature","hs.window.filter.sortByCreatedLast","Type","Constant","Description","Sort order for hs.window.filter:getWindows(): windows are sorted in order of creation, newest first (see also hs.window.filter:setSortOrder())"]},{"l":"sortByFocused","p":["Signature","hs.window.filter.sortByFocused","Type","Constant","Description","Sort order for hs.window.filter:getWindows(): windows are sorted in order of focus received, least recently first (see also hs.window.filter:setSortOrder())"]},{"l":"sortByFocusedLast","p":["Signature","hs.window.filter.sortByFocusedLast","Type","Constant","Description","Sort order for hs.window.filter:getWindows(): windows are sorted in order of focus received, most recently first (see also hs.window.filter:setSortOrder())","Notes","This is the default sort order for all windowfilters"]},{"l":"windowAllowed","p":["Signature","hs.window.filter.windowAllowed","Type","Constant","Description","Pseudo-event for hs.window.filter:subscribe(): a previously rejected window (or a newly created one) is now allowed","Notes","this pseudo-event will be emitted before the actual event(s) (e.g. windowCreated) that caused the window to be allowed"]},{"l":"windowCreated","p":["Signature","hs.window.filter.windowCreated","Type","Constant","Description","Event for hs.window.filter:subscribe(): a new window was created"]},{"l":"windowDestroyed","p":["Signature","hs.window.filter.windowDestroyed","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window was destroyed"]},{"l":"windowFocused","p":["Signature","hs.window.filter.windowFocused","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window received focus"]},{"l":"windowFullscreened","p":["Signature","hs.window.filter.windowFullscreened","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window was expanded to fullscreen"]},{"l":"windowHidden","p":["Signature","hs.window.filter.windowHidden","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window was hidden (its app was hidden, e.g. via cmd-h)"]},{"l":"windowInCurrentSpace","p":["Signature","hs.window.filter.windowInCurrentSpace","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window is now in the current Mission Control Space, due to"]},{"l":"windowMinimized","p":["Signature","hs.window.filter.windowMinimized","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window was minimized"]},{"l":"windowMoved","p":["Signature","hs.window.filter.windowMoved","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window was moved or resized, including toggling fullscreen/maximize"]},{"l":"windowNotInCurrentSpace","p":["Signature","hs.window.filter.windowNotInCurrentSpace","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window that used to be in the current Mission Control Space isn't anymore,"]},{"l":"windowNotOnScreen","p":["Signature","hs.window.filter.windowNotOnScreen","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window is no longer actually visible on any screen because it was minimized, closed,"]},{"l":"windowNotVisible","p":["Signature","hs.window.filter.windowNotVisible","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window is no longer \"visible\" (in any Mission Control Space, as per hs.window:isVisible())"]},{"l":"windowOnScreen","p":["Signature","hs.window.filter.windowOnScreen","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window became actually visible on screen (i.e. it's \"visible\" as per hs.window:isVisible()"]},{"l":"windowRejected","p":["Signature","hs.window.filter.windowRejected","Type","Constant","Description","Pseudo-event for hs.window.filter:subscribe(): a previously allowed window (or a window that's been destroyed) is now rejected","Notes","this pseudo-event will be emitted after the actual event(s) (e.g. windowDestroyed) that caused the window to be rejected"]},{"l":"windowsChanged","p":["Signature","hs.window.filter.windowsChanged","Type","Constant","Description","Pseudo-event for hs.window.filter:subscribe(): the list of allowed windows (as per windowfilter:getWindows()) has changed","Notes","callbacks for this event will receive (as the first argument) either a random window among the currently allowed ones, or nil if the windowfilter is rejecting all windows similarly, the second argument passed to callbacks (window's app name) will be nil if the windowfilter is rejecting all windows this pseudo-event will be emitted after the actual event(s) that caused the list of allowed windows to change"]},{"l":"windowTitleChanged","p":["Signature","hs.window.filter.windowTitleChanged","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window's title changed"]},{"l":"windowUnfocused","p":["Signature","hs.window.filter.windowUnfocused","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window lost focus"]},{"l":"windowUnfullscreened","p":["Signature","hs.window.filter.windowUnfullscreened","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window was reverted back from fullscreen"]},{"l":"windowUnhidden","p":["Signature","hs.window.filter.windowUnhidden","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window was unhidden (its app was unhidden, e.g. via cmd-h)"]},{"l":"windowUnminimized","p":["Signature","hs.window.filter.windowUnminimized","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window was unminimized"]},{"l":"windowVisible","p":["Signature","hs.window.filter.windowVisible","Type","Constant","Description","Event for hs.window.filter:subscribe(): a window became \"visible\" (in any Mission Control Space, as per hs.window:isVisible())"]},{"l":"Variables"},{"l":"allowedWindowRoles","p":["Signature","hs.window.filter.allowedWindowRoles","Type","Variable","Description","A table for window roles (as per hs.window:subrole()) that are allowed by default.","Notes","You can have fine grained control of allowed window roles via the setAppFilter, setDefaultFilter, setOverrideFilter methods. If you know what you're doing you can override the allowed window roles globally by changing this variable, but this is discouraged."]},{"l":"forceRefreshOnSpaceChange","p":["Signature","hs.window.filter.forceRefreshOnSpaceChange","Type","Variable","Description","Tells all windowfilters whether to refresh all windows when the user switches to a different Mission Control Space.","Notes","If you defined one or more Spaces-aware windowfilters (i.e. when the currentSpace field of a filter is present), windows need refreshing at every space change anyway, so this variable is ignored"]},{"l":"ignoreAlways","p":["Signature","hs.window.filter.ignoreAlways","Type","Variable","Description","A table of application names (as per hs.application:name()) that are always ignored by this module.","Notes","As the name implies, even the empty, \"allow all\" windowfilter will ignore these apps. You don't need to keep this table up to date, since non GUI apps will simply never show up anywhere; this table is just used as a \"root\" filter to gain a (very small) performance improvement."]},{"l":"Functions"},{"l":"focusEast","p":["Signature","hs.window.filter.focusEast()","Type","Function","Description","Convenience function to focus the nearest window to the east","Parameters","None","Returns","Notes","This is a convenience wrapper that performs hs.window.filter.defaultCurrentSpace:focusWindowEast(nil,nil,true)"]},{"l":"focusNorth","p":["Signature","hs.window.filter.focusNorth()","Type","Function","Description","Convenience function to focus the nearest window to the north","Parameters","None","Returns","Notes","This is a convenience wrapper that performs hs.window.filter.defaultCurrentSpace:focusWindowNorth(nil,nil,true)"]},{"l":"focusSouth","p":["Signature","hs.window.filter.focusSouth()","Type","Function","Description","Convenience function to focus the nearest window to the south","Parameters","None","Returns","Notes","This is a convenience wrapper that performs hs.window.filter.defaultCurrentSpace:focusWindowSouth(nil,nil,true)"]},{"l":"focusWest","p":["Signature","hs.window.filter.focusWest()","Type","Function","Description","Convenience function to focus the nearest window to the west","Parameters","None","Returns","Notes","This is a convenience wrapper that performs hs.window.filter.defaultCurrentSpace:focusWindowWest(nil,nil,true)"]},{"l":"isGuiApp","p":["Signature","hs.window.filter.isGuiApp(appname) - boolean","Type","Function","Description","Checks whether an app is a known non-GUI app, as per hs.window.filter.ignoreAlways","Parameters","appname - name of the app to check as per hs.application:name()","Returns","false if the app is a known non-GUI (or not accessible) app; true otherwise","Notes"]},{"l":"switchedToSpace","p":["Signature","hs.window.filter.switchedToSpace(space)","Type","Function","Description","Callback to inform all windowfilters that the user initiated a switch to a (numbered) Mission Control Space.","Parameters","space - the Space number the user is switching to","Returns","Notes","Only use this function if \"Displays have separate Spaces\" and \"Automatically rearrange Spaces\" are OFF in System Preferences>Mission Control Calling this function will set hs.window.filter.forceRefreshOnSpaceChange to false If you defined one or more Spaces-aware windowfilters (i.e. when the currentSpace field of a filter is present), windows need refreshing at every space change anyway, so using this callback will not result in improved performance See hs.window.filter.forceRefreshOnSpaceChange for an overview of Spaces limitations in Hammerspoon. If you often (or always) change Space via the \"numbered\" Mission Control keyboard shortcuts (by default, ctrl-1 etc.), you can call this function from your init.lua when intercepting these shortcuts; for example:/lili hs.hotkey.bind('ctrl','1',nil,function()hs.window.filter.switchedToSpace(1)end)/lili hs.hotkey.bind('ctrl','2',nil,function()hs.window.filter.switchedToSpace(2)end)/lili -- etc./lili * Using this callback results in slightly better performance than setting forceRefreshOnSpaceChange to true, since already visited Spaces are remembered and no refreshing is necessary when switching back to those."]},{"l":"Constructors"},{"l":"copy","p":["Signature","hs.window.filter.copy(windowfilter[,logname[,loglevel]]) - hs.window.filter object","Type","Constructor","Description","Returns a copy of an hs.window.filter object that you can further restrict or expand","Parameters","windowfilter - an hs.window.filter object to copy logname - (optional) name of the hs.logger instance for the new windowfilter; if omitted, the class logger will be used loglevel - (optional) log level for the hs.logger instance for the new windowfilter","Returns","An hs.window.filter object","Notes"]},{"l":"new","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.window.filter.new(fn[,logname[,loglevel]]) - hs.window.filter object | | Type | Constructor | | Description | Creates a new hs.window.filter instance | | Parameters | fn if nil, returns a copy of the default windowfilter, including any customizations you might have applied to it so far; you can then further restrict or expand it if true, returns an empty windowfilter that allows every window if false, returns a windowfilter with a default rule to reject every window if a string or table of strings, returns a windowfilter that only allows visible windows of the specified apps as per hs.application:name() if a table, you can fully define a windowfilter without having to call any methods after construction; the table must be structured as per hs.window.filter:setFilters(); if not specified in the table, the default filter in the new windowfilter will reject all windows otherwise it must be a function that accepts an hs.window object and returns true if the window is allowed or false otherwise; this way you can define a fully custom windowfilterlogname - (optional) name of the hs.logger instance for the new windowfilter; if omitted, the class logger will be usedloglevel - (optional) log level for the hs.logger instance for the new windowfilter | | Returns | a new windowfilter instance | | Notes | |"]},{"l":"Methods"},{"l":"allowApp","p":["Signature","hs.window.filter:allowApp(appname) - hs.window.filter object","Type","Method","Description","Sets the windowfilter to allow all visible windows belonging to a specific app","Parameters","appname - app name as per hs.application:name()","Returns","the hs.window.filter object for method chaining","Notes","this is just a convenience wrapper for windowfilter:setAppFilter(appname,{visible=true})"]},{"l":"focusWindowEast","p":["Signature","hs.window.filter:focusWindowEast(window, frontmost, strict)","Type","Method","Description","Focuses the nearest window to the east of a given window","Parameters","window - (optional) an hs.window object; if nil, hs.window.frontmostWindow() will be used frontmost - (optional) boolean, if true focuses the nearest window that isn't occluded by any other window in this windowfilter strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the eastward axis","Returns","None","Notes","This is a convenience wrapper that performs hs.window.focusWindowEast(window,self:getWindows(),...) You'll likely want to add :setCurrentSpace(true) to the windowfilter used for this method call"]},{"l":"focusWindowNorth","p":["Signature","hs.window.filter:focusWindowNorth(window, frontmost, strict)","Type","Method","Description","Focuses the nearest window to the south of a given window","Parameters","window - (optional) an hs.window object; if nil, hs.window.frontmostWindow() will be used frontmost - (optional) boolean, if true focuses the nearest window that isn't occluded by any other window in this windowfilter strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the southward axis","Returns","None","Notes","This is a convenience wrapper that performs hs.window.focusWindowNorth(window,self:getWindows(),...) You'll likely want to add :setCurrentSpace(true) to the windowfilter used for this method call"]},{"l":"focusWindowSouth","p":["Signature","hs.window.filter:focusWindowSouth(window, frontmost, strict)","Type","Method","Description","Focuses the nearest window to the north of a given window","Parameters","window - (optional) an hs.window object; if nil, hs.window.frontmostWindow() will be used frontmost - (optional) boolean, if true focuses the nearest window that isn't occluded by any other window in this windowfilter strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the northward axis","Returns","None","Notes","This is a convenience wrapper that performs hs.window.focusWindowSouth(window,self:getWindows(),...) You'll likely want to add :setCurrentSpace(true) to the windowfilter used for this method call"]},{"l":"focusWindowWest","p":["Signature","hs.window.filter:focusWindowWest(window, frontmost, strict)","Type","Method","Description","Focuses the nearest window to the west of a given window","Parameters","window - (optional) an hs.window object; if nil, hs.window.frontmostWindow() will be used frontmost - (optional) boolean, if true focuses the nearest window that isn't occluded by any other window in this windowfilter strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the westward axis","Returns","None","Notes","This is a convenience wrapper that performs hs.window.focusWindowWest(window,self:getWindows(),...) You'll likely want to add :setCurrentSpace(true) to the windowfilter used for this method call"]},{"l":"getFilters","p":["Signature","hs.window.filter:getFilters() - table","Type","Method","Description","Return a table with all the filtering rules defined for this windowfilter","Parameters","None","Returns","a table containing the filtering rules of this windowfilter; you can pass this table (optionally after performing valid manipulations) to hs.window.filter:setFilters() and hs.window.filter.new()","Notes"]},{"l":"getWindows","p":["Signature","hs.window.filter:getWindows([sortOrder]) - list of hs.window objects","Type","Method","Description","Gets the current windows allowed by this windowfilter","Parameters","sortOrder - (optional) one of the hs.window.filter.sortBy... constants to determine the sort order of the returned list; if omitted, uses the windowfilter's sort order as per hs.window.filter:setSortOrder()(defaults to sortByFocusedLast)","Returns","a list of hs.window objects","Notes"]},{"l":"isAppAllowed","p":["Signature","hs.window.filter:isAppAllowed(appname) - boolean","Type","Method","Description","Checks if an app is allowed by the windowfilter","Parameters","appname - app name as per hs.application:name()","Returns","false if the app is rejected by the windowfilter; true otherwise","Notes"]},{"l":"isWindowAllowed","p":["Signature","hs.window.filter:isWindowAllowed(window) - boolean","Type","Method","Description","Checks if a window is allowed by the windowfilter","Parameters","window - an hs.window object to check","Returns","true if the window is allowed by the windowfilter, false otherwise; nil if an invalid object was passed","Notes"]},{"l":"pause","p":["Signature","hs.window.filter:pause() - hs.window.filter object","Type","Method","Description","Stops the windowfilter event subscriptions; no more event callbacks will be triggered, but the subscriptions remain intact for a subsequent call to hs.window.filter:resume()","Parameters","None","Returns","the hs.window.filter object for method chaining","Notes"]},{"l":"rejectApp","p":["Signature","hs.window.filter:rejectApp(appname) - hs.window.filter object","Type","Method","Description","Sets the windowfilter to outright reject any windows belonging to a specific app","Parameters","appname - app name as per hs.application:name()","Returns","the hs.window.filter object for method chaining","Notes","this is just a convenience wrapper for windowfilter:setAppFilter(appname,false)"]},{"l":"resume","p":["Signature","hs.window.filter:resume() - hs.window.filter object","Type","Method","Description","Resumes the windowfilter event subscriptions","Parameters","None","Returns","the hs.window.filter object for method chaining","Notes"]},{"l":"setAppFilter","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.window.filter:setAppFilter(appname, filter) - hs.window.filter object | | Type | Method | | Description | Sets the detailed filtering rules for the windows of a specific app | | Parameters | appname - app name as per hs.application:name()filter - if false, reject the app; if true, nil, or omitted, allow all visible windows (in any Space) for the app; otherwise it must be a table describing the filtering rules for the app, via the following fields: visible - if true, only allow visible windows (in any Space); if false, reject visible windows; if omitted, this rule is ignored currentSpace - if true, only allow windows in the current Mission Control Space (minimized and hidden windows are included, as they're considered to belong to all Spaces); if false, reject windows in the current Space (including all minimized and hidden windows); if omitted, this rule is ignored fullscreen - if true, only allow fullscreen windows; if false, reject fullscreen windows; if omitted, this rule is ignored hasTitlebar - if true, only allow windows with titlebar; if false, reject window with titlebar; if omitted, this rule is ignored focused - if true, only allow a window while focused; if false, reject the focused window; if omitted, this rule is ignored activeApplication - only allow any of this app's windows while it is (if true) or it's not (if false) the active application; if omitted, this rule is ignored allowTitlesif a number, only allow windows whose title is at least as many characters long; e.g. pass 1 to filter windows with an empty titleif a string or table of strings, only allow windows whose title matches (one of) the pattern(s) as per string.matchif omitted, this rule is ignored rejectTitles - if a string or table of strings, reject windows whose titles matches (one of) the pattern(s) as per string.match; if omitted, this rule is ignored allowRegions - an hs.geometry rect or constructor argument, or a list of them, designating (a) screen \"region(s)\" in absolute coordinates: only allow windows that \"cover\" at least 50% of (one of) the region(s), and/or windows that have at least 50% of their surface inside (one of) the region(s); if omitted, this rule is ignored rejectRegions - an hs.geometry rect or constructor argument, or a list of them, designating (a) screen \"region(s)\" in absolute coordinates: reject windows that \"cover\" at least 50% of (one of) the region(s), and/or windows that have at least 50% of their surface inside (one of) the region(s); if omitted, this rule is ignored allowScreens - a valid argument for hs.screen.find(), or a list of them, indicating one (or more) screen(s): only allow windows that (mostly) lie on (one of) the screen(s); if omitted, this rule is ignored rejectScreens - a valid argument for hs.screen.find(), or a list of them, indicating one (or more) screen(s): reject windows that (mostly) lie on (one of) the screen(s); if omitted, this rule is ignored allowRolesif a string or table of strings, only allow these window roles as per hs.window:subrole()if the special string '*', this rule is ignored (i.e. all window roles, including empty ones, are allowed)if omitted, use the default allowed roles (defined in hs.window.filter.allowedWindowRoles) | | Returns | the hs.window.filter object for method chaining | | Notes | Passing focused=true in filter will (naturally) result in the windowfilter ever allowing 1 window at mostIf you want to allow all windows for an app, including invisible ones, pass an empty table for filterSpaces-aware windowfilters might experience a (sometimes significant) delay after every Space switch, since (due to OS X limitations) they must re-query for the list of all windows in the current Space every time.If System Preferences>Mission Control>Displays have separate Spaces is on, the current Space is defined as the union of all the Spaces that are currently visibleThis table explains the effects of different combinations of visible and currentSpace, showing which windows will be allowed:/lili |visible= nil | true | false |/lili|currentSpace|------------------------------------------|------------------------------|--------------|/lili| nil |all |visible in ANY space |min and hidden|/lili| true |visible in CURRENT space+min and hidden |visible in CURRENT space |min and hidden|/lili| false |visible in OTHER space only+min and hidden|visible in OTHER space only |none |/lili |"]},{"l":"setCurrentSpace","p":["Signature","hs.window.filter:setCurrentSpace(val) - hs.window.filter object","Type","Method","Description","Sets whether the windowfilter should only allow (or reject) windows in the current Mission Control Space","Parameters","val - boolean; if true, only allow windows in the current Mission Control Space, plus minimized and hidden windows; if false, reject them; if nil, ignore Mission Control Spaces","Returns","the hs.window.filter object for method chaining","Notes","This is just a convenience wrapper for setting the currentSpace field in the override filter (other fields will be left untouched); per-app filters will maintain their currentSpace field, if present, as is Spaces-aware windowfilters might experience a (sometimes significant) delay after every Space switch, since(due to OS X limitations) they must re-query for the list of all windows in the current Space every time."]},{"l":"setDefaultFilter","p":["Signature","hs.window.filter:setDefaultFilter(filter) - hs.window.filter object","Type","Method","Description","Set the default filtering rules to be used for apps without app-specific rules","Parameters","filter - see hs.window.filter:setAppFilter","Returns","the hs.window.filter object for method chaining","Notes"]},{"l":"setFilters","p":["Signature","hs.window.filter:setFilters(filters) - hs.window.filter object","Type","Method","Description","Sets multiple filtering rules","Parameters","filters - table, every element will set an application filter; these elements must: - have a key of type string, denoting an application name as per hs.application:name()- if the value is a boolean, the app will be allowed or rejected accordingly - see hs.window.filter:allowApp() and hs.window.filter:rejectApp()- if the value is a table, it must contain the accept/reject rules for the app as key/value pairs; valid keys and values are described in hs.window.filter:setAppFilter()- the key can be one of the special strings default and override, which will set the default and override filter respectively - the key can be the special string sortOrder; the value must be one of the sortBy... constants as per hs.window.filter:setSortOrder()","Returns","the hs.window.filter object for method chaining","Notes","every filter definition in filters will overwrite the preexisting one for the relevant application, if present; this also applies to the special default and override filters, if included"]},{"l":"setOverrideFilter","p":["Signature","hs.window.filter:setOverrideFilter(filter) - hs.window.filter object","Type","Method","Description","Set overriding filtering rules that will be applied for all apps before any app-specific rules","Parameters","filter - see hs.window.filter:setAppFilter","Returns","the hs.window.filter object for method chaining","Notes"]},{"l":"setRegions","p":["Signature","hs.window.filter:setRegions(regions) - hs.window.filter object","Type","Method","Description","Sets the allowed screen regions for this windowfilter","Parameters","regions - an hs.geometry rect or constructor argument, or a list of them, indicating the allowed region(s) for this windowfilter","Returns","the hs.window.filter object for method chaining","Notes","This is just a convenience wrapper for setting the allowRegions field in the override filter (other fields will be left untouched); per-app filters will maintain their allowRegions and rejectRegions fields, if present"]},{"l":"setScreens","p":["Signature","hs.window.filter:setScreens(screens) - hs.window.filter object","Type","Method","Description","Sets the allowed screens for this windowfilter","Parameters","regions - a valid argument for hs.screen.find(), or a list of them, indicating the allowed screen(s) for this windowfilter","Returns","the hs.window.filter object for method chaining","Notes","This is just a convenience wrapper for setting the allowScreens field in the override filter (other fields will be left untouched); per-app filters will maintain their allowScreens and rejectScreens fields, if present"]},{"l":"setSortOrder","p":["Signature","hs.window.filter:setSortOrder(sortOrder) - hs.window.filter object","Type","Method","Description","Sets the sort order for this windowfilter's :getWindows() method","Parameters","sortOrder - one of the hs.window.filter.sortBy... constants","Returns","the hs.window.filter object for method chaining","Notes","The default sort order for all windowfilters (that is, until changed by this method) is hs.window.filter.sortByFocusedLast"]},{"l":"subscribe","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.window.filter:subscribe(event, fn[, immediate]) - hs.window.filter object | | Type | Method | | Description | Subscribe to one or more events on the allowed windows | | Parameters | event - string or list of strings, the event(s) to subscribe to (see the hs.window.filter constants); alternatively, this can be a map {event1=fn1,event2=fn2,...}: fnN will be subscribed to eventN, and the parameter fn will be ignoredfn - function or list of functions, the callback(s) to add for the event(s); each will be passed 3 parameters a hs.window object referring to the event's window a string containing the application name (window:application():name()) for convenience a string containing the event that caused the callback, i.e. (one of) the event(s) you subscribed toimmediate - (optional) if true, also call all the callbacks immediately for windows that satisfy the event(s) criteria | | Returns | the hs.window.filter object for method chaining | | Notes | Passing lists means that all the fns will be called when any of the events fires, so it's not a shortcut for subscribing distinct callbacks to distinct events; use a map or chained :subscribe calls for that.Use caution with immediate: if for example you're subscribing to hs.window.filter.windowUnfocused, fn(s) will be called for all the windows except the currently focused one.If the windowfilter was paused with hs.window.filter:pause(), calling this will resume it. |"]},{"l":"unsubscribe","p":["Signature","hs.window.filter:unsubscribe([event][, fn]) - hs.window.filter object","Type","Method","Description","Removes one or more event subscriptions","Parameters","event - string or list of strings, the event(s) to unsubscribe; if omitted, fn(s) will be unsubscribed from all events; alternatively, this can be a map {event1=fn1,event2=fn2,...}: fnN will be unsubscribed from eventN, and the parameter fn will be ignored fn - function or list of functions, the callback(s) to remove; if omitted, all callbacks will be unsubscribed from event(s)","Returns","the hs.window.filter object for method chaining","Notes","You must pass at least one of event or fn If calling this on the default (or any other shared use) windowfilter, do not pass events, as that would remove all the callbacks for the events including ones subscribed elsewhere that you might not be aware of. You should instead keep references to your functions and pass in those."]},{"l":"unsubscribeAll","p":["Signature","hs.window.filter:unsubscribeAll() - hs.window.filter object","Type","Method","Description","Removes all event subscriptions","Parameters","None","Returns","the hs.window.filter object for method chaining","Notes","You should not use this on the default windowfilter or other shared-use windowfilters"]},{"l":"windowsToEast","p":["Signature","hs.window.filter:windowsToEast(window, frontmost, strict) - list of hs.window objects","Type","Method","Description","Gets all visible windows allowed by this windowfilter that lie to the east a given window","Parameters","window - (optional) an hs.window object; if nil, hs.window.frontmostWindow() will be used frontmost - (optional) boolean, if true unoccluded windows will be placed before occluded ones in the result list strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the eastward axis","Returns","A list of hs.window objects representing all windows positioned east (i.e. right) of the window, in ascending order of distance","Notes","This is a convenience wrapper that returns hs.window.windowsToEast(window,self:getWindows(),...) You'll likely want to add :setCurrentSpace(true) to the windowfilter used for this method call (or just use hs.window.filter.defaultCurrentSpace)"]},{"l":"windowsToNorth","p":["Signature","hs.window.filter:windowsToNorth(window, frontmost, strict) - list of hs.window objects","Type","Method","Description","Gets all visible windows allowed by this windowfilter that lie to the north a given window","Parameters","window - (optional) an hs.window object; if nil, hs.window.frontmostWindow() will be used frontmost - (optional) boolean, if true unoccluded windows will be placed before occluded ones in the result list strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the northward axis","Returns","A list of hs.window objects representing all windows positioned north (i.e. up) of the window, in ascending order of distance","Notes","This is a convenience wrapper that returns hs.window.windowsToNorth(window,self:getWindows(),...) You'll likely want to add :setCurrentSpace(true) to the windowfilter used for this method call (or just use hs.window.filter.defaultCurrentSpace)"]},{"l":"windowsToSouth","p":["Signature","hs.window.filter:windowsToSouth(window, frontmost, strict) - list of hs.window objects","Type","Method","Description","Gets all visible windows allowed by this windowfilter that lie to the south a given window","Parameters","window - (optional) an hs.window object; if nil, hs.window.frontmostWindow() will be used frontmost - (optional) boolean, if true unoccluded windows will be placed before occluded ones in the result list strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the southward axis","Returns","A list of hs.window objects representing all windows positioned south (i.e. down) of the window, in ascending order of distance","Notes","This is a convenience wrapper that returns hs.window.windowsToSouth(window,self:getWindows(),...) You'll likely want to add :setCurrentSpace(true) to the windowfilter used for this method call (or just use hs.window.filter.defaultCurrentSpace)"]},{"l":"windowsToWest","p":["Signature","hs.window.filter:windowsToWest(window, frontmost, strict) - list of hs.window objects","Type","Method","Description","Gets all visible windows allowed by this windowfilter that lie to the west a given window","Parameters","window - (optional) an hs.window object; if nil, hs.window.frontmostWindow() will be used frontmost - (optional) boolean, if true unoccluded windows will be placed before occluded ones in the result list strict - (optional) boolean, if true only consider windows at an angle between 45° and -45° on the westward axis","Returns","A list of hs.window objects representing all windows positioned west (i.e. left) of the window, in ascending order of distance","Notes","This is a convenience wrapper that returns hs.window.windowsToWest(window,self:getWindows(),...) You'll likely want to add :setCurrentSpace(true) to the windowfilter used for this method call (or just use hs.window.filter.defaultCurrentSpace)"]}],[{"i":"hswindowhighlight","l":"hs.window.highlight","p":["Highlight the focused window","This module can be useful to spatially keep track of windows if you have large and/or multiple screens, and are therefore likely to have several windows visible at any given time. It highlights the currently focused window by covering other windows and the desktop with either a subtle(\"overlay\" mode) or opaque (\"isolate\" mode) overlay; additionally it can highlight windows as they're shown or hidden via a brief flash, to help determine their location intuitively (to avoid having to studiously scan all your screens when, for example, you know you triggered a dialog but it didn't show up where you expected it).","By default, overlay mode is disabled - you can enable it with hs.window.highlight.ui.overlay=true- and so are the window shown/hidden flashes - enable those with hs.window.highlight.ui.flashDuration=0.3(or whatever duration you prefer). Isolate mode is always available and can be toggled manually via hs.window.highlight.toggleIsolate() or automatically by passing an appropriate windowfilter (or a list of apps) to hs.window.highlight.start()."]},{"l":"API Overview","p":["Variables- Configurable values","ui","Functions- API calls offered directly by the extension","start","stop","toggleIsolate"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"ui","p":["Signature","hs.window.highlight.ui","Type","Variable","Description","Allows customization of the highlight overlays and behaviour."]},{"l":"Functions"},{"l":"start","p":["Signature","hs.window.highlight.start([windowfilterIsolate[, windowfilterOverlay]])","Type","Function","Description","Starts the module","Parameters","windowfilterIsolate - (optional) an hs.window.filter instance that automatically enable \"isolate\" mode whenever one of the allowed windows is focused; alternatively, you can just provide a list of application names and a windowfilter will be created for you that enables isolate mode whenever one of these apps is focused; if omitted or nil, isolate mode won't be toggled automatically, but you can still toggle it manually via hs.window.highlight.toggleIsolate() windowfilterOverlay - (optional) an hs.window.filter instance that determines which windows to consider for \"overlay\" mode when focused; if omitted or nil, the default windowfilter will be used","Returns","None","Notes","overlay mode is disabled by default - see hs.window.highlight.ui.overlayColor"]},{"l":"stop","p":["Signature","hs.window.highlight.stop()","Type","Function","Description","Stops the module and disables focused window highlighting (both \"overlay\" and \"isolate\" mode)","Parameters","None","Returns","Notes"]},{"l":"toggleIsolate","p":["Signature","hs.window.highlight.toggleIsolate([v])","Type","Function","Description","Sets or clears the user override for \"isolate\" mode.","Parameters","v - (optional) a boolean; if true, enable isolate mode; if false, disable isolate mode, even when windowfilterIsolate passed to .start() would otherwise enable it; if omitted or nil, toggle the override, i.e. clear it if it's currently enforced, or set it to the opposite of the current isolate mode status otherwise.","Returns","None","Notes","This function should be bound to a hotkey, e.g.: hs.hotkey.bind('ctrl-cmd','\\','Isolate',hs.window.highlight.toggleIsolate)"]}],[{"i":"hswindowlayout","l":"hs.window.layout","p":["1 new [0,0,50,100] 0,0 | 1 new [50,0,100,100] 0,0 | min divides the primary screen between the two newest windows and minimizes any other windows","A layout is composed of a list of rules and, optionally, a screen arrangement definition. Rules within a layout are evaluated in order; once a window is acted upon by a rule, subsequent rules will not affect it further. A rule needs a windowfilter, producing a dynamic list of windows (the \"window pool\") to which the rule is applied, and a list of commands, evaluated in order. A command acts on one or more of the windows, and is composed of:","a maxn number, indicating how many windows from this rule's window pool will be affected (at most) by this command; if omitted (or if explicitly the string all) all the remaining windows will be processed by this command; processed windows are \"consumed\" and are excluded from the window pool for subsequent commands in this rule, and from subsequent rules","a selector, describing the sort order used to pick the first maxn windows from the window pool for this command; it can be one of focused(pick maxn most recently focused windows), frontmost(pick the recent focused window if its application is frontmost application, otherwise the command will be skipped), newest(most recently created), oldest(least recently created), or closest(pick the maxn windows that are closest to the destination rect); if omitted, defaults to closest for move, tile and fit, and newest for everything else","a single string containing all the commands (action and parameters) in order; actions and selectors can be shortened to 3 characters; all tokens must be separated by spaces (do not use spaces inside hs.geometry constructor strings); for greater clarity you can separate commands with |(pipe character)","a windowfilter or a constructor argument table for one (see hs.window.filter.new() and hs.window.filter:setFilters())","an action, it can be","an hs.geometry size(only valid for tile and fit) indicating the desired optimal aspect ratio for the tiled windows; if omitted, defaults to 1x1 (i.e. square windows)","Each layout can have an associated screen configuration; if so, the layout will only be valid while the current screen arrangement satisfies it; see hs.window.layout:setScreenConfiguration() for more information.","Each layout can work in \"passive\" or \"active\" modes; passive layouts must be triggered manually (via hs.hotkey.bind(), hs.menubar, etc.) while active layouts continuously keep their rules enforced (see hs.window.layout:start() for more information); in general you should avoid having multiple active layouts targeting the same windows, as the results will be unpredictable (if such a situation is detected, you'll see an error in the Hammerspoon console); you can have multiple active layouts, but be careful to maintain a clear \"separation of concerns\" between their respective windowfilters.","for fullscreen and maximize, a screen hint indicating the desired screen; if omitted, uses the window's current screen","for move, tile and fit, an hs.geometry rect, or a unit rect plus a screen hint(for hs.screen.find()), indicating the destination rect for the command","hide, unhide: hides or unhides the window's application (like when using cmd-h)","In order to avoid dealing with deeply nested maps, you can define a layout in your scripts via a list, where each element(or row) denotes a rule; in turn every rule can be a simplified list of two elements:","max 0,0 maximizes all the windows onto the primary screen, one on top of another","minimize, maximize, fullscreen","move 1 [0,0,50,50] -1,0 moves the closest window to the topleft quadrant of the left screen","move 1 foc [0,0,30,100] 0,0 | tile all foc [30,0,100,100] 0,0 moves the most recently focused window to the left third, and tiles the remaining windows onto the right side, keeping the most recently focused on top and to the left","move: moves the window(s) to a specified onscreen rect (if the action is omitted, move is assumed)","noaction: skip action on the window(s)","Some command string examples:","tile, fit: tiles the windows onto a specified rect, using hs.window.tiling.tileWindows(); for fit, the preserveRelativeArea parameter will be set to true","WARNING: EXPERIMENTAL MODULE. DO NOT USE IN PRODUCTION. This module is for testing purposes only. It can undergo breaking API changes or go away entirely at any point and without notice.(Should you encounter any issues, please feel free to report them on https://github.com/Hammerspoon/hammerspoon/issues or #hammerspoon on irc.libera.chat)","Window management","Windowlayouts work by selecting certain windows via windowfilters and arranging them onscreen according to specific rules.","You should place higher-priority rules (with highly specialized windowfilters) first, and \"fallback\" rules(with more generic windowfilters) last; similarly, within a rule, you should have commands for the more \"important\"(i.e. relevant to your current workflow) windows first (move, maximize...) and after that deal with less prominent windows, if any remain, e.g. by placing them out of the way (minimize). unhide and hide, if used, should usually go into their own rules (with a windowfilter that allows invisible windows for unhide) that come before other rules that deal with actual window placement - unlike the other actions, they don't \"consume\" windows making them unavailable for subsequent rules, as they act on applications."]},{"l":"API Overview","p":["apply","applyDelay","applyLayout","Constructors- API calls which return an object, typically one that offers API methods","Functions- API calls offered directly by the extension","getRules","Methods- API calls which can only be made on an object returned by a constructor","new","pause","pauseAllInstances","resume","resumeAllInstances","screensChangedDelay","setScreenConfiguration","start","stop","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"applyDelay","p":["Signature","hs.window.layout.applyDelay","Type","Variable","Description","When \"active mode\" windowlayouts apply a rule, they will pause briefly for this amount of time in seconds, to allow windows"]},{"l":"screensChangedDelay","p":["Signature","hs.window.layout.screensChangedDelay","Type","Variable","Description","The number of seconds to wait, after a screen configuration change has been detected, before"]},{"l":"Functions"},{"l":"applyLayout","p":["Signature","hs.window.layout.applyLayout(rules)","Type","Function","Description","Applies a layout","Parameters","rules - see hs.window.layout.new()","Returns","None","Notes","this is a convenience wrapper for \"passive mode\" use that creates, applies, and deletes a windowlayout object; do not use shared windowfilters in rules, as they'll be deleted; you can just use constructor argument maps instead"]},{"l":"pauseAllInstances","p":["Signature","hs.window.layout.pauseAllInstances()","Type","Function","Description","Pauses all active windowlayout instances","Parameters","None","Returns","Notes"]},{"l":"resumeAllInstances","p":["Signature","hs.window.layout.resumeAllInstances()","Type","Function","Description","Resumes all active windowlayout instances","Parameters","None","Returns","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.window.layout.new(rules[,logname[,loglevel]]) - hs.window.layout object","Type","Constructor","Description","Creates a new hs.window.layout instance","Parameters","rules - a table containing the rules for this windowlayout (see the module description); additionally, if a special key screens is present, its value must be a valid screen configuration as per hs.window.layout:setScreenConfiguration() logname - (optional) name of the hs.logger instance for the new windowlayout; if omitted, the class logger will be used loglevel - (optional) log level for the hs.logger instance for the new windowlayout","Returns","a new windowlayout instance","Notes"]},{"l":"Methods"},{"l":"apply","p":["Signature","hs.window.layout:apply()","Type","Method","Description","Applies the layout","Parameters","None","Returns","the hs.window.layout object","Notes","if a screen configuration is defined for this windowfilter, and currently not satisfied, this method will do nothing"]},{"l":"getRules","p":["Signature","hs.window.layout:getRules() - table","Type","Method","Description","Return a table with all the rules (and the screen configuration, if present) defined for this windowlayout","Parameters","None","Returns","a table containing the rules of this windowlayout; you can pass this table (optionally after performing valid manipulations) to hs.window.layout.new()","Notes"]},{"l":"pause","p":["Signature","hs.window.layout:pause() - hs.window.layout object","Type","Method","Description","Pauses an active windowlayout instance; while paused no automatic window management will occur","Parameters","None","Returns","the hs.window.layout object","Notes"]},{"l":"resume","p":["Signature","hs.window.layout:resume() - hs.window.layout object","Type","Method","Description","Resumes an active windowlayout instance after it was paused","Parameters","None","Returns","the hs.window.layout object","Notes","if a screen configuration is defined for this windowfilter, and currently not satisfied, this method will do nothing"]},{"l":"setScreenConfiguration","p":["| | | | --------------------------------------------|-------------------------------------------------------------------------------------| | Signature | hs.window.layout:setScreenConfiguration(screens) - hs.window.layout object | | Type | Method | | Description | Determines the screen configuration that permits applying this windowlayout | | Parameters | screens - a map, where each key must be a valid \"hint\" for hs.screen.find(), and the corresponding value can be: true - the screen must be currently present (attached and enabled) false - the screen must be currently absent an hs.geometry point (or constructor argument) - the screen must be present and in this specific position in the current arrangement (as per hs.screen:position()) | | Returns | the hs.window.layout object | | Notes | If screens is nil, any previous screen configuration is removed, and this windowlayout will be always allowedFor \"active\" windowlayouts, call this method before calling hs.window.layout:start()By using hs.geometry size objects as hints you can define separate layouts for the same physical screen at different resolutionsWith this method you can define different windowlayouts for different screen configurations (as per System Preferences->Displays->Arrangement).For example, suppose you define two \"graphics design work\" windowlayouts, one for \"desk with dual monitors\" and one for \"laptop only mode\": \"passive mode\" use: you call :apply() on both on your chosen hotkey (via hs.hotkey:bind()), but only the appropriate layout for the current arrangement will be applied \"active mode\" use: you just call :start() on both windowlayouts; as you switch between workplaces (by attaching or detaching external screens) the correct layout \"kicks in\" automatically - this is in effect a convenience wrapper that calls :pause() on the no longer relevant layout, and :resume() on the appropriate one, at every screen configuration change |"]},{"l":"start","p":["Signature","hs.window.layout:start() - hs.window.layout object","Type","Method","Description","Puts a windowlayout instance in \"active mode\"","Parameters","None","Returns","the hs.window.layout object","Notes","If a screen configuration is defined for this windowfilter, and currently not satisfied, this windowfilter will be put in \"active mode\" but will remain paused until the screen configuration requirements are met When in active mode, a windowlayout instance will constantly monitor the windowfilters for its rules, by subscribing to all the relevant events. As soon as any change is detected (e.g. when you drag a window, switch focus, open or close apps/windows, etc.) the relative rule will be automatically re-applied. In other words, the rules you defined will remain enforced all the time, instead of waiting for manual intervention via hs.window.layout:apply()."]},{"l":"stop","p":["Signature","hs.window.layout:stop() - hs.window.layout object","Type","Method","Description","Stops a windowlayout instance (i.e. not in \"active mode\" anymore)","Parameters","None","Returns","the hs.window.layout object","Notes"]}],[{"i":"hswindowswitcher","l":"hs.window.switcher","p":["Window-based cmd-tab replacement","Usage:"]},{"l":"API Overview","p":["Variables- Configurable values","ui","Functions- API calls offered directly by the extension","nextWindow","previousWindow","Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","next","previous"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"ui","p":["Signature","hs.window.switcher.ui","Type","Variable","Description","Allows customization of the switcher behaviour and user interface"]},{"l":"Functions"},{"l":"nextWindow","p":["Signature","hs.window.switcher.nextWindow()","Type","Function","Description","Shows the switcher (if not yet visible) and selects the next window","Parameters","None","Returns","Notes","the switcher will be dismissed (and the selected window focused) when all modifier keys are released"]},{"l":"previousWindow","p":["Signature","hs.window.switcher.previousWindow()","Type","Function","Description","Shows the switcher (if not yet visible) and selects the previous window","Parameters","None","Returns","Notes","the switcher will be dismissed (and the selected window focused) when all modifier keys are released"]},{"l":"Constructors"},{"l":"new","p":["Signature","hs.window.switcher.new([windowfilter[, uiPrefs][, logname, [loglevel]]]) - hs.window.switcher object","Type","Constructor","Description","Creates a new switcher instance; it can use a windowfilter to determine which windows to show","Parameters","windowfilter - (optional) if omitted or nil, use the default windowfilter; otherwise it must be a windowfilter instance or constructor table uiPrefs - (optional) a table to override UI preferences for this instance; its keys and values must follow the conventions described in hs.window.switcher.ui; this parameter allows you to have multiple switcher instances with different behaviour (for example, with and without thumbnails and/or titles) using different hotkeys logname - (optional) name of the hs.logger instance for the new switcher; if omitted, the class logger will be used loglevel - (optional) log level for the hs.logger instance for the new switcher","Returns","the new instance","Notes"]},{"l":"Methods"},{"l":"next","p":["Signature","hs.window.switcher:next()","Type","Method","Description","Shows the switcher instance (if not yet visible) and selects the next window","Parameters","None","Returns","Notes","the switcher will be dismissed (and the selected window focused) when all modifier keys are released"]},{"l":"previous","p":["Signature","hs.window.switcher:previous()","Type","Method","Description","Shows the switcher instance (if not yet visible) and selects the previous window","Parameters","None","Returns","Notes","the switcher will be dismissed (and the selected window focused) when all modifier keys are released"]}],[{"i":"hswindowtiling","l":"hs.window.tiling","p":["WARNING: EXPERIMENTAL MODULE. DO NOT USE IN PRODUCTION. This module is for testing purposes only. It can undergo breaking API changes or go away entirely at any point and without notice.(Should you encounter any issues, please feel free to report them on https://github.com/Hammerspoon/hammerspoon/issues or #hammerspoon on irc.libera.chat)","Tile windows","The tileWindows function in this module is primarily meant for use by hs.window.layout; however you can call it manually(e.g. for your custom layout engine)."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","tileWindows"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"tileWindows","p":["Signature","hs.window.tiling.tileWindows(windows,rect[,desiredAspect[,processInOrder[,preserveRelativeArea[,animationDuration]]]])","Type","Function","Description","Tile (or fit) windows into a rect","Parameters","windows - a list of hs.window objects indicating the windows to tile or fit rect - an hs.geometry rect (or constructor argument), indicating the desired onscreen region that the windows will be tiled within desiredAspect - (optional) an hs.geometry size (or constructor argument) or a number, indicating the desired optimal aspect ratio (width/height) of the tiled windows; the tiling engine will decide how to subdivide the rect among windows by trying to maintain every window's aspect ratio as close as possible to this; if omitted, defaults to 1 (i.e. try to keep the windows as close to square as possible) processInOrder - (optional) if true, windows will be placed left-to-right and top-to-bottom following the list order in windows; if false or omitted, the tiling engine will try to maintain the spatial distribution of windows, i.e. (roughly speaking) pick the closest window for each destination \"tile\"; note that in some cases this isn't possible and the windows might get \"reshuffled\" around in unexpected ways preserveRelativeArea - (optional) if true, preserve the relative area among windows; that is, if window A is currently twice as large as window B, the same will be true after both windows have been processed and placed into the rect; if false or omitted, all windows will have the same area (= area of the rect / number of windows) after processing animationDuration - (optional) the number of seconds to animate the move/resize operations of the windows; if omitted, defaults to the value of hs.window.animationDuration","Returns","None","Notes","To ensure all windows are placed in a row (side by side), use a very small aspect ratio (for \"tall and narrow\" windows) like 0.01; similarly, to have all windows in a column, use a very large aspect ratio (for \"short and wide\") like 100 Hidden and minimized windows will be processed as well: the rect will have \"gaps\" where the invisible windows would lie, that will get filled as the windows get unhidden/unminimized"]}],[{"l":"CommandPost"},{"l":"API Documentation","p":["A action which will trigger an Final Cut Pro menu with a matching path, if available/enabled.","A collection of Final Cut Pro Color Board Widgets for the Touch Bar.","A support class for handler handlers. It is not used directly, rather","Accessibility Plugin.","Action for changing Final Cut Pro's Timeline Zoom Level","Action Manager Module.","Action that allows you save and open user-defined favourite folders.","Actions for Audio Controls","Actions for changing the Timeline Horizontally","Actions for control user interface elements via the Accessibility API.","Actions for selecting libraries","Actions related to the pasteboard.","Actions to control Timeline Navigation.","Add a marker to all selected clips under the playhead, or all clips if only one clip is selected.","Add actions that allow you to trigger the menubar items from any application.","Add Note Plugin.","Adds a \"Clear Cache\" button to the Final Cut Pro Preferences.","Adds actions for macOS Monterey Shortcuts.","Adds actions that allows you to transcode clips from the timeline.","Adds Actions to the Console for triggering Final Cut Pro shortcuts as defined in the Command Set files.","Adds actions which allow you to trigger keyboard shortcuts.","Adds all installed AppleScripts to the Search Console.","Adds all installed applications to the Search Console.","Adds correct timecode from Sony cameras in a FCPXML.","Adds Final Cut Pro Plugins (i.e. Effects, Generators, Titles and Transitions) to CommandPost Actions.","Adds Keyboard Maestro Macros to the Search Console.","Adds mouse actions.","Adds Preference for \"Correct Spelling Automatically\" within Final Cut Pro X.","Adds Preference for \"Enable User Interface Animations\" within Final Cut Pro X.","Adds preferences for extra FCPXML import and export options.","Adds text pasteboard history actions to the Search Console.","Adds the ability to control any Final Cut Pro User Interface Element via a MIDI Knob/Slider.","After Effects Preferences Panel","Allows adding and editing titles in Final Cut Pro's timeline.","Allows you to change the Razer application if set to manual.","Allows you to change the TourBox application if set to manual.","Allows you to save and restore Browser Layouts.","Allows you to zoom in or out of a Final Cut Pro timeline using the mechanical scroll wheel on your mouse or the Touch Pad on the Magic Mouse when holding down the OPTION modifier key.","An action which will execute a command with matching group/id values.","Application manager.","Apply an After Effect effect to selected layer","AudioSwift Preferences Panel","Automatic Disk Mounting & Unmounting.","Batch Rename Panel for the Final Cut Pro HUD.","Blackmagic DaVinci Resolve Control Surface Preferences Panel","Blackmagic DaVinci Resolve Control Surface Support.","Browser Keywords Presets.","Browser Playhead Plugin.","Caption Tools","Change Final Cut Pro's Backup Interval.","Clear Notes in Final Cut Pro Browser.","Clip Navigation Actions.","Color Board Plugins.","Color Wheel Enhancements.","CommandPost Batch Export Panel.","CommandPost Control Surfaces Panel.","CommandPost Functions for Tangent.","CommandPost Preferences Panel.","CommandPost Setup Window Panel.","Common Final Cut Pro functions for Tangent","Controls Final Cut Pro's Audio Effects.","Controls Final Cut Pro's Generators.","Controls Final Cut Pro's Lanes.","Controls Final Cut Pro's Titles.","Controls Final Cut Pro's Transitions.","Controls Final Cut Pro's Video Effects.","Controls sections for the CommandPost menu.","Converts Titles to Keywords","Creates a bunch of commands that can be used to assign actions to.","Credits Menu Item.","Debug Console Menu Item.","Description","Developer Guide Menu Item.","Disable Waveforms Plugin.","Disables the ESC key when Final Cut Pro is in fullscreen mode.","Display Controls.","Donate Menu Item.","Elgato Stream Deck Manager Plugin.","Emulates a Tangent Element Panel.","Facebook Group Menu Item.","FCPXML Panel for the Final Cut Pro HUD.","FCPXML Titles Toolbox Panel","Feedback Menu Item.","Final Cut Pro Audio Inspector Additions.","Final Cut Pro Audio Inspector for Tangent","Final Cut Pro Browser Duration Control Widget for Touch Bar.","Final Cut Pro Browser Height Control Widget for Touch Bar.","Final Cut Pro CommandPost Actions for Tangent","Final Cut Pro FCPXML Watch Folder Plugin.","Final Cut Pro Font Console","Final Cut Pro General Preferences","Final Cut Pro Generator Inspector for Tangent","Final Cut Pro Info Inspector Additions.","Final Cut Pro Info Inspector for Tangent","Final Cut Pro Inspector Additions.","Final Cut Pro Language Plugin.","Final Cut Pro Media Watch Folder Plugin.","Final Cut Pro Menu Manager.","Final Cut Pro MIDI Audio Controls.","Final Cut Pro MIDI Color Board Controls.","Final Cut Pro MIDI Color Controls.","Final Cut Pro MIDI Timeline Controls.","Final Cut Pro MIDI Video Inspector Controls.","Final Cut Pro MIDI Zoom Control.","Final Cut Pro Preferences Panel Manager.","Final Cut Pro Proxy Icon Plugin.","Final Cut Pro Search Consoles","Final Cut Pro Share Inspector for Tangent","Final Cut Pro Tangent Browser Group","Final Cut Pro Tangent Color Manager.","Final Cut Pro Tangent Open FCPX.","Final Cut Pro Tangent Pasteboard Group","Final Cut Pro Tangent Playback Group/Management","Final Cut Pro Tangent Timeline Group/Management","Final Cut Pro Tangent Trim Group","Final Cut Pro Tangent View Group","Final Cut Pro Tangent Viewer Overlay Group","Final Cut Pro Text Inspector Additions.","Final Cut Pro Text Inspector for Tangent","Final Cut Pro Timeline Preferences.","Final Cut Pro Title Inspector for Tangent","Final Cut Pro Touch Bar Manager.","Final Cut Pro Transition Inspector for Tangent","Final Cut Pro Video Inspector Additions.","Final Cut Pro Video Inspector for Tangent","Final Cut Pro Viewer Actions for Tangent","Final Cut Pro Viewer Overlays.","Final Cut Pro Workspace Actions for Tangent","Final Cut Pro Zoom Control Widget for Touch Bar.","Fullscreen Shortcuts","Gamepad Preferences Panel","General Preferences Panel","General Preferences Panel.","General/macOS Loupedeck Plugin Actions","Handy text tools.","Handy tools for Windows Management in macOS.","IFTTT Notifications Plugin.","Ignore Final Cut Pro's Media Import Window.","iMessage Notifications Plugin.","Import Preferences","Info Panel for the Final Cut Pro HUD.","Insert Clips Vertically from Browser to Timeline.","Intro Toolbox Panel.","Language Module.","Loupedeck CT Manager Plugin.","Loupedeck Plugin Manager Plugin.","Loupedeck Plugin Preferences Panel","Loupedeck+ Preferences Panel","macOS Group for the Tangent.","macOS Shortcuts Preferences Panel","Manager for After Effects Tangent Support","Manager for DaVinci Resolve's Tangent Support","Manager for Final Cut Pro's Tangent Support","Manager for the Batch Export Window.","Manager for the CommandPost Preferences Window.","Manager for the CommandPost Setup Screen.","Manager for the CommandPost Toolbox Window.","Manager for the CommandPost Watch Folders Panel.","Manager for the Final Cut Pro HUD.","Manager Plugin for Loupedeck CT, Loupedeck Live, Loupedeck Live-S and Razer Stream Controller.","Manages features relating to the Timeline Playhead.","Manages the CommandPost dock icon when FCP is full-screen.","Match Frame Tools for Final Cut Pro.","Menu Manager Plugin.","Menubar Preferences Panel","MIDI Manager Controls.","MIDI Manager Plugin.","MIDI Preferences Panel","Minimise button for the Final Cut Pro HUD.","Module","Monogram Manager Plugin.","Monogram Preferences Panel","Move To Playhead.","Multicam Tools.","Notes Panel for the Final Cut Pro HUD.","Notifications Manager Plugin.","Notifications Preferences Panel","Notion Toolbox Panel.","Opens Final Cut Pro via Global Shortcut & Menubar.","Orders clips on a timeline by timecode.","Pasteboard History","Pasteboard Manager.","Pasteboard Tools for Tangent.","Play Full Screen & Stop","Playback Plugin.","Playback Rendering Plugin.","Plugins Preferences Panel","plugins.aftereffects.application.manager","plugins.aftereffects.effects","plugins.aftereffects.preferences","plugins.aftereffects.shortcuts","plugins.aftereffects.tangent.manager","plugins.compressor.application.manager","plugins.compressor.feedback.bugreport","plugins.core.accessibility","plugins.core.accessibility.screenrecording","plugins.core.accessibility.tools","plugins.core.action.activator","plugins.core.action.handler","plugins.core.action.manager","plugins.core.actions.custom","plugins.core.application.manager","plugins.core.audioswift.prefs","plugins.core.commands.actions","plugins.core.commands.global","plugins.core.console","plugins.core.console.applications","plugins.core.console.keyboardmaestromacros","plugins.core.console.preferences","plugins.core.console.scripts","plugins.core.controlsurfaces.manager","plugins.core.controlsurfaces.manager.panel","plugins.core.controlsurfaces.resolve.manager","plugins.core.controlsurfaces.resolve.prefs","plugins.core.disk.automount","plugins.core.disk.favourites","plugins.core.display","plugins.core.gamepad.prefs","plugins.core.gestures","plugins.core.helpandsupport.credits","plugins.core.helpandsupport.debugconsole","plugins.core.helpandsupport.developerguide","plugins.core.helpandsupport.donate","plugins.core.helpandsupport.facebook","plugins.core.helpandsupport.feedback","plugins.core.helpandsupport.userguide","plugins.core.language","plugins.core.loupedeck.prefs","plugins.core.loupedeckctandlive.manager","plugins.core.loupedeckctandlive.prefs","plugins.core.loupedeckplugin","plugins.core.loupedeckplugin.manager","plugins.core.loupedeckplugin.prefs","plugins.core.loupedeckplus.prefs","plugins.core.macosshortcuts","plugins.core.macosshortcuts.preferences","plugins.core.menu.manager","plugins.core.menu.manager.section","plugins.core.menu.menuaction","plugins.core.midi.manager","plugins.core.midi.manager.controls","plugins.core.midi.prefs","plugins.core.monogram.manager","plugins.core.monogram.prefs","plugins.core.mouse","plugins.core.pasteboard.history","plugins.core.preferences.general","plugins.core.preferences.manager","plugins.core.preferences.manager.panel","plugins.core.preferences.panels.general","plugins.core.preferences.panels.menubar","plugins.core.preferences.panels.notifications","plugins.core.preferences.panels.plugins","plugins.core.preferences.panels.scripting","plugins.core.preferences.panels.settings","plugins.core.preferences.updates","plugins.core.razer.changeapplications","plugins.core.razer.manager","plugins.core.razer.prefs","plugins.core.setup","plugins.core.setup.panel","plugins.core.shortcuts.actions","plugins.core.shortcuts.prefs","plugins.core.streamdeck.manager","plugins.core.streamdeck.prefs","plugins.core.tangent.manager","plugins.core.tangent.manager.action","plugins.core.tangent.manager.binding","plugins.core.tangent.manager.connection","plugins.core.tangent.manager.controls","plugins.core.tangent.manager.group","plugins.core.tangent.manager.menu","plugins.core.tangent.manager.mode","plugins.core.tangent.manager.named","plugins.core.tangent.manager.parameter","plugins.core.tangent.prefs","plugins.core.toolbox.intro","plugins.core.toolbox.manager","plugins.core.tools.caffeinate","plugins.core.touchbar.banks","plugins.core.touchbar.location","plugins.core.touchbar.manager","plugins.core.touchbar.manager.widgets","plugins.core.touchbar.prefs","plugins.core.touchbar.virtual","plugins.core.touchbar.widgets.volume","plugins.core.touchbar.widgets.windowSlide","plugins.core.tourbox.changeapplications","plugins.core.tourbox.manager","plugins.core.tourbox.prefs","plugins.core.utilities.manager.panel","plugins.core.watchfolders.manager","plugins.core.watchfolders.manager.panel","plugins.diskutility.application.manager","plugins.ecammlive.application.manager","plugins.finalcutpro.actions.custom","plugins.finalcutpro.advanced.backupinterval","plugins.finalcutpro.advanced.disablewaveforms","plugins.finalcutpro.advanced.fcpxml","plugins.finalcutpro.advanced.multicam","plugins.finalcutpro.advanced.playbackrendering","plugins.finalcutpro.advanced.showtimelineinviewers","plugins.finalcutpro.application.manager","plugins.finalcutpro.browser.addnote","plugins.finalcutpro.browser.appearanceandfiltering","plugins.finalcutpro.browser.clearnotes","plugins.finalcutpro.browser.csv","plugins.finalcutpro.browser.duration","plugins.finalcutpro.browser.frameiotomarkers","plugins.finalcutpro.browser.height","plugins.finalcutpro.browser.insertvertical","plugins.finalcutpro.browser.keywords","plugins.finalcutpro.browser.layouts","plugins.finalcutpro.browser.pasteboardtomarkers","plugins.finalcutpro.browser.playhead","plugins.finalcutpro.browser.selectlibrary","plugins.finalcutpro.browser.soloclip","plugins.finalcutpro.commands","plugins.finalcutpro.commands.actions","plugins.finalcutpro.console","plugins.finalcutpro.console.font","plugins.finalcutpro.export.batch","plugins.finalcutpro.export.batch.manager","plugins.finalcutpro.export.batch.manager.panel","plugins.finalcutpro.feedback.bugreport","plugins.finalcutpro.fullscreen.disableesc","plugins.finalcutpro.fullscreen.dockicon","plugins.finalcutpro.fullscreen.shortcuts","plugins.finalcutpro.fullscreen.stopped","plugins.finalcutpro.hud.manager","plugins.finalcutpro.hud.panels.fcpxml","plugins.finalcutpro.hud.panels.info","plugins.finalcutpro.hud.panels.minimise","plugins.finalcutpro.hud.panels.notes","plugins.finalcutpro.hud.panels.pasteboard","plugins.finalcutpro.hud.panels.rename","plugins.finalcutpro.hud.panels.search","plugins.finalcutpro.hud.panels.tenbuttons","plugins.finalcutpro.hud.panels.twelvebuttons","plugins.finalcutpro.hud.panels.twentyfourbuttons","plugins.finalcutpro.import.ignorecard","plugins.finalcutpro.import.preferences","plugins.finalcutpro.inspector.audio","plugins.finalcutpro.inspector.info","plugins.finalcutpro.inspector.show","plugins.finalcutpro.inspector.text","plugins.finalcutpro.inspector.video","plugins.finalcutpro.language","plugins.finalcutpro.menu.manager","plugins.finalcutpro.menu.menuaction","plugins.finalcutpro.menu.proxyicon","plugins.finalcutpro.midi.controls.audio","plugins.finalcutpro.midi.controls.colorboard","plugins.finalcutpro.midi.controls.colorwheels","plugins.finalcutpro.midi.controls.controlui.absolute","plugins.finalcutpro.midi.controls.controlui.relative","plugins.finalcutpro.midi.controls.timeline","plugins.finalcutpro.midi.controls.video","plugins.finalcutpro.midi.controls.zoom","plugins.finalcutpro.notifications.ifttt","plugins.finalcutpro.notifications.imessage","plugins.finalcutpro.notifications.manager","plugins.finalcutpro.notifications.prowl","plugins.finalcutpro.notifications.pushover","plugins.finalcutpro.open","plugins.finalcutpro.pasteboard.history","plugins.finalcutpro.pasteboard.manager","plugins.finalcutpro.pasteboard.shared","plugins.finalcutpro.preferences.animations","plugins.finalcutpro.preferences.clearcache","plugins.finalcutpro.preferences.general","plugins.finalcutpro.preferences.manager","plugins.finalcutpro.preferences.spelling","plugins.finalcutpro.setup.scan","plugins.finalcutpro.tangent.audio","plugins.finalcutpro.tangent.browser","plugins.finalcutpro.tangent.clip","plugins.finalcutpro.tangent.color","plugins.finalcutpro.tangent.commandpost.functions","plugins.finalcutpro.tangent.common","plugins.finalcutpro.tangent.edit","plugins.finalcutpro.tangent.features","plugins.finalcutpro.tangent.generator","plugins.finalcutpro.tangent.info","plugins.finalcutpro.tangent.manager","plugins.finalcutpro.tangent.new","plugins.finalcutpro.tangent.open","plugins.finalcutpro.tangent.os","plugins.finalcutpro.tangent.os.display","plugins.finalcutpro.tangent.os.pasteboard","plugins.finalcutpro.tangent.os.sound","plugins.finalcutpro.tangent.os.window","plugins.finalcutpro.tangent.overlay","plugins.finalcutpro.tangent.pasteboard","plugins.finalcutpro.tangent.playback","plugins.finalcutpro.tangent.share","plugins.finalcutpro.tangent.text","plugins.finalcutpro.tangent.timeline","plugins.finalcutpro.tangent.title","plugins.finalcutpro.tangent.transition","plugins.finalcutpro.tangent.trim","plugins.finalcutpro.tangent.video","plugins.finalcutpro.tangent.view","plugins.finalcutpro.tangent.viewer","plugins.finalcutpro.tangent.workspaces","plugins.finalcutpro.text2speech","plugins.finalcutpro.timeline.audioeffects","plugins.finalcutpro.timeline.captions","plugins.finalcutpro.timeline.clipnavigation","plugins.finalcutpro.timeline.colorboard","plugins.finalcutpro.timeline.colorboardv2","plugins.finalcutpro.timeline.colorwheels","plugins.finalcutpro.timeline.commandsetactions","plugins.finalcutpro.timeline.csv","plugins.finalcutpro.timeline.editnewtitle","plugins.finalcutpro.timeline.generators","plugins.finalcutpro.timeline.height","plugins.finalcutpro.timeline.horizontal","plugins.finalcutpro.timeline.lanes","plugins.finalcutpro.timeline.markallclips","plugins.finalcutpro.timeline.matchframe","plugins.finalcutpro.timeline.mousezoom","plugins.finalcutpro.timeline.movetoplayhead","plugins.finalcutpro.timeline.multicam","plugins.finalcutpro.timeline.navigation","plugins.finalcutpro.timeline.pasteboard","plugins.finalcutpro.timeline.playback","plugins.finalcutpro.timeline.playhead","plugins.finalcutpro.timeline.pluginactions","plugins.finalcutpro.timeline.preferences","plugins.finalcutpro.timeline.renameclip","plugins.finalcutpro.timeline.selectalltimelineclips","plugins.finalcutpro.timeline.speed","plugins.finalcutpro.timeline.titles","plugins.finalcutpro.timeline.transcode","plugins.finalcutpro.timeline.transitions","plugins.finalcutpro.timeline.videoanimation","plugins.finalcutpro.timeline.videoeffects","plugins.finalcutpro.timeline.zoom","plugins.finalcutpro.timeline.zoomtoselection","plugins.finalcutpro.toolbox.autosequence","plugins.finalcutpro.toolbox.fcpxmltitles","plugins.finalcutpro.toolbox.notion","plugins.finalcutpro.toolbox.shotdata","plugins.finalcutpro.toolbox.sonytimecode","plugins.finalcutpro.toolbox.titlestokeywords","plugins.finalcutpro.touchbar.manager","plugins.finalcutpro.touchbar.virtual","plugins.finalcutpro.touchbar.widgets.colorboard","plugins.finalcutpro.touchbar.widgets.duration","plugins.finalcutpro.touchbar.widgets.height","plugins.finalcutpro.touchbar.widgets.zoom","plugins.finalcutpro.viewer.actions","plugins.finalcutpro.viewer.overlays","plugins.finalcutpro.watchfolders.fcpxml","plugins.finalcutpro.watchfolders.media","plugins.finalcutpro.watchfolders.media.MediaFolder","plugins.finalcutpro.watchfolders.media.panel","plugins.finalcutpro.workflowextension","plugins.finder.application.manager","plugins.finder.audio","plugins.finder.dateandtime","plugins.finder.pasteboard","plugins.finder.pasteboard.history","plugins.finder.preferences.panel","plugins.finder.preferences.powerchime","plugins.finder.window","plugins.microsoftteams.application.manager","plugins.motion.application.manager","plugins.motion.feedback.bugreport","plugins.resolve.application.manager","plugins.resolve.tangent.emulation","plugins.resolve.tangent.manager","plugins.skype.application.manager","plugins.skype.shortcuts","plugins.spotify.application.manager","plugins.spotify.loupedeckplugin","plugins.systempreferences.application.manager","plugins.textedit.application.manager","plugins.zoom.application.manager","plugins.zoom.shortcuts","Preferences for the Search Console.","Preferences Panels for Loupedeck CT, Loupedeck Live, Loupedeck Live-S and Razer Stream Controller.","Prevents your Mac from going to sleep.","Provides common functions for 'named' Tangent nodes","Prowl Notifications Plugin.","Pushover Notifications Plugin.","Razer Manager Plugin.","Razer Preferences Panel","Registers After Effects with the Core Application Manager if installed.","Registers Compressor with the Core Application Manager.","Registers Disk Utility with the Core Application Manager.","Registers Ecamm Live with the Core Application Manager.","Registers Final Cut Pro with the Core Application Manager.","Registers Finder with the Core Application Manager.","Registers Microsoft Teams with the Core Application Manager if installed.","Registers Motion with the Core Application Manager.","Registers Skype with the Core Application Manager if installed.","Registers Spotify with the Core Application Manager if installed.","Registers System Preferences with the Core Application Manager.","Registers TextEdit with the Core Application Manager.","Registers Zoom with the Core Application Manager if installed.","Rename Clip","Represents a Tangent Action","Represents a Tangent Binding","Represents a Tangent Connection.","Represents a Tangent Group","Represents a Tangent Group. Groups can also be used to enable/disable multiple","Represents a Tangent Menu. Menus are controls that have a fixed set of","Represents a Tangent Mode","Represents a Tangent Parameter control.","Save Browser to CSV","Save Timeline Index to CSV","Screen Recording Permission.","Scripting Preferences Panel","Search Console","Select All Timeline Clips","Sends Apple a Bug Report or Feature Request for Compressor.","Sends Apple a Bug Report or Feature Request for Final Cut Pro.","Sends Apple a Bug Report or Feature Request for Motion.","Settings Preferences Panel","Shared Pasteboard Plugin.","Shortcut for changing Final Cut Pro's Browser Height","Shortcut for changing Final Cut Pro's Timeline Height","Shortcuts Preferences Panel","Shot Data Toolbox Panel.","Show setup panel if Final Cut Pro needs scanning.","Show Timeline In Player.","Solo a clip in the Final Cut Pro Browser.","Speed Related Actions","Spotify Loupedeck Plugin Actions","Stream Deck Preferences Panel","Take the contents of the Pasteboard and pastes it as clip markers on the","Takes the contents of a Frame.io CSV file and adds markers to a clip","Tangent Control Surface Manager","Tangent Display Functions.","Tangent Preferences Panel","Tangent Sound Functions.","Ten Panel for the Final Cut Pro HUD.","Text to Speech Plugin.","The 'fcpx' command collection.","The 'global' command collection.","This module provides provides a way of activating choices provided by action handlers.","Timeline Batch Export Plugin.","Touch Bar Bank Actions.","Touch Bar Manager Plugin.","Touch Bar Preferences Panel","Touch Bar Widgets Manager","TourBox Preferences Panel","Trigger After Effects Shortcuts","Trigger Skype Shortcuts","Trigger Zoom Shortcuts","Twelve Button Panel for the Final Cut Pro HUD.","Twenty Four Button Panel for the Final Cut Pro HUD.","Types the date and time in the \"YYYYMMDD HHMM\" format.","Updates Module.","User Guide Menu Item.","Video Animation Actions","Viewer Actions","Virtual Touch Bar Manager","Virtual Touch Bar Plugin.","Virtual Touch Bar Update Location Callback","Volume Slider","Watch Folder Media Panel.","Watch Folder Panel Manager.","Window Management Tools for Tangent.","Window Slide Widget for Touch Bar.","Workflow Extension Helper","Zoom the Timeline to fit the currently-selected clips."]}],[{"i":"pluginsaftereffectsapplicationmanager","l":"plugins.aftereffects.application.manager","p":["Registers After Effects with the Core Application Manager if installed."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsaftereffectseffects","l":"plugins.aftereffects.effects","p":["Apply an After Effect effect to selected layer"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsaftereffectspreferences","l":"plugins.aftereffects.preferences","p":["After Effects Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsaftereffectsshortcuts","l":"plugins.aftereffects.shortcuts","p":["Trigger After Effects Shortcuts"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsaftereffectstangentmanager","l":"plugins.aftereffects.tangent.manager","p":["Manager for After Effects Tangent Support"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscompressorapplicationmanager","l":"plugins.compressor.application.manager","p":["Registers Compressor with the Core Application Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscompressorfeedbackbugreport","l":"plugins.compressor.feedback.bugreport","p":["Sends Apple a Bug Report or Feature Request for Compressor."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","open","Fields- Variables which can only be accessed from an object returned by a constructor","position"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"open","p":["Signature","plugins.compressor.feedback.bugreport.open(bugReport) - none","Type","Function","Description","Opens Final Cut Pro Feedback Screen","Parameters","bugReport - Is it a bug report or an enhancement request?","Returns","None","Notes"]},{"l":"Fields"},{"l":"position","p":["Signature","plugins.compressor.feedback.bugreport.position cp.prop: table","Type","Field","Description","The webview position."]}],[{"i":"pluginscoreaccessibility","l":"plugins.core.accessibility","p":["Accessibility Plugin."]},{"l":"Submodules","p":["plugins.core.accessibility.screenrecording","plugins.core.accessibility.tools"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","enabled","Variables- Configurable values","shouldWeTryCloseSystemPreferences","systemPreferencesAlreadyOpen","Functions- API calls offered directly by the extension","completeSetupPanel","init","showSetupPanel"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"enabled","p":["Signature","plugins.core.accessibility.enabled cp.prop: boolean; read-only","Type","Constant","Description","Is true if Accessibility permissions have been enabled for CommandPost."]},{"l":"Variables"},{"l":"shouldWeTryCloseSystemPreferences","p":["Signature","plugins.core.accessibility.shouldWeTryCloseSystemPreferences - boolean","Type","Variable","Description","Should we try and close system preferences?"]},{"l":"systemPreferencesAlreadyOpen","p":["Signature","plugins.core.accessibility.systemPreferencesAlreadyOpen - boolean","Type","Variable","Description","Was System Preferences already open?"]},{"l":"Functions"},{"l":"completeSetupPanel","p":["Signature","plugins.core.accessibility.completeSetupPanel() - none","Type","Function","Description","Called when the setup panel for accessibility was shown and is ready to complete.","Parameters","None","Returns","Notes"]},{"l":"init","p":["Signature","plugins.core.accessibility.init(setup) - table","Type","Function","Description","Initialises the module.","Parameters","setup - Dependancies setup","Returns","The module as a table","Notes"]},{"l":"showSetupPanel","p":["Signature","plugins.core.accessibility.showSetupPanel() - none","Type","Function","Description","Called when the Setup Panel should be shown to prompt the user about enabling Accessbility.","Parameters","None","Returns","Notes"]}],[{"i":"pluginscoreaccessibilityscreenrecording","l":"plugins.core.accessibility.screenrecording","p":["Screen Recording Permission."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoreaccessibilitytools","l":"plugins.core.accessibility.tools","p":["Actions for control user interface elements via the Accessibility API."]},{"l":"API Overview","p":["Variables- Configurable values","currentlyDragging","Functions- API calls offered directly by the extension","changeElementUnderMouse"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"currentlyDragging","p":["Signature","plugins.core.accessibility.tools.currentlyDragging - boolean","Type","Variable","Description","Are we currently dragging something?"]},{"l":"Functions"},{"l":"changeElementUnderMouse","p":["Signature","plugins.core.accessibility.tools.changeElementUnderMouse(increase) - none","Type","Function","Description","Change the value of a Accessibility Element under the mouse.","Parameters","increase - A boolean to set the direction.","Returns","None","Notes"]}],[{"i":"pluginscoreactionactivator","l":"plugins.core.action.activator","p":["This module provides provides a way of activating choices provided by action handlers. It also provide support for making a particular action a favourite, returning results based on popularity, and completely hiding particular actions, or categories of action.","Activators are accessed via the action manager like so:","Any changes made to the settings of a finder (such as calling disableHandler above) will be preserved for future loads of the finder with the same ID. They are also local to instances of this activator, so disabling \"videoEffect\" in the \"foobar\" activator will not affect the \"yadayada\" activator."]},{"l":"API Overview","p":["activate","activeChoices","activeHandlers","allChoices","allowedHandlers","allowHandlers","chooser","configurable","disableAllHandlers","disableHandler","enableAllHandlers","enableHandler","enableHandlers","favoriteChoice","favoriteChoices","Fields- Variables which can only be accessed from an object returned by a constructor","findChoice","getActiveHandler","getPopularity","hiddenChoices","hide","hideChoice","id","incPopularity","isDisabledHandler","isHiddenChoice","isVisible","lastQueryRemembered","lastQueryValue","lastRows","Methods- API calls which can only be made on an object returned by a constructor","onActivate","popularChoices","preloadChoices","query","reducedTransparency","refresh","refreshChooser","rightClickAction","rightClickMain","searchSubText","setBundleID","show","showHidden","sortChoices","toggle","toolbarIcons","unfavoriteChoice","unhideChoice","updateSelectedToolbarIcon"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"activeHandlers","p":["Signature","plugins.core.action.activator.activeHandlers cp.prop: table of handlers","Type","Field","Description","Contains the table of active handlers. A handler is active if it is both allowed and enabled."]},{"l":"allowedHandlers","p":["Signature","plugins.core.action.activator:allowedHandlers cp.prop: table of handlers; read-only","Type","Field","Description","Contains all handlers that are allowed in this activator."]},{"l":"configurable","p":["Signature","plugins.core.action.activator.configurable cp.prop: boolean","Type","Field","Description","If true(the default), the activator can be configured by right-clicking on the main chooser."]},{"l":"favoriteChoices","p":["Signature","plugins.core.action.activator.favoriteChoices cp.prop: table of booleans","Type","Field","Description","Contains the set of choice IDs which are favorites in this activator, mapped to a boolean value."]},{"l":"hiddenChoices","p":["Signature","plugins.core.action.activator.hiddenChoices cp.prop: table of booleans","Type","Field","Description","Contains the set of choice IDs which are hidden in this activator, mapped to a boolean value."]},{"l":"lastQueryRemembered","p":["Signature","plugins.core.action.activator.lastQueryRemembered cp.prop: boolean","Type","Field","Description","If true, remember the last query."]},{"l":"lastQueryValue","p":["Signature","plugins.core.action.activator.lastQueryValue cp.prop: string","Type","Field","Description","The last query value."]},{"l":"lastRows","p":["Signature","plugins.core.action.activator.lastRows cp.prop: number","Type","Field","Description","The last width of the Search Console. Defaults to 40."]},{"l":"popularChoices","p":["Signature","plugins.core.action.activator.popularChoices cp.prop: table of integers","Type","Field","Description","Keeps track of how popular particular choices are. Returns a table of choice IDs"]},{"l":"query","p":["Signature","plugins.core.action.activator.query cp.prop: string","Type","Field","Description","The current \"query\" value for the activator."]},{"l":"reducedTransparency","p":["Signature","plugins.core.action.activator.reducedTransparency cp.prop: boolean","Type","Field","Description","A property which will be true if the 'reduce transparency' mode is enabled."]},{"l":"searchSubText","p":["Signature","plugins.core.action.activator.searchSubText cp.prop: boolean","Type","Field","Description","If true, allow users to search the subtext value."]},{"l":"showHidden","p":["Signature","plugins.core.action.activator.showHidden cp.prop: boolean","Type","Field","Description","If true, hidden items are shown."]},{"l":"Methods"},{"l":"activate","p":["Signature","plugins.core.action.activator:activate(result) - none","Type","Method","Description","Triggered when the chooser is closed.","Parameters","result- The result from the chooser.","Returns","None","Notes"]},{"l":"activeChoices","p":["Signature","plugins.core.action.activator:activeChoices() - table","Type","Method","Description","Returns a table with active choices. If a query is set, only choices containing the provided substring are returned. If showHidden is set to true hidden items are returned, otherwise they are not.","Parameters","None","Returns","Table of choices that can be displayed by an hs.chooser.","Notes"]},{"l":"allChoices","p":["Signature","plugins.core.action.activator:allChoices() - table","Type","Method","Description","Returns a table of all available choices, even if hidden. Choices from disabled action handlers are not included.","Parameters","None","Returns","Table of choices that can be displayed by an hs.chooser.","Notes"]},{"l":"allowHandlers","p":["Signature","plugins.core.action.activator:allowHandlers(...) - self","Type","Method","Description","Specifies that only the handlers with the specified IDs will be active in this activator. By default all handlers are allowed.","Parameters","...- The list of Handler ID strings to allow.","Returns","Self","Notes"]},{"l":"chooser","p":["Signature","plugins.core.action.activator:chooser() - hs.chooser object","Type","Method","Description","Gets a hs.chooser","Parameters","None","Returns","A hs.chooser object","Notes"]},{"l":"disableAllHandlers","p":["Signature","plugins.core.action.activator:disableAllHandlers([groupID]) - none","Type","Method","Description","Disables the all allowed handlers.","Parameters","groupID - An optional group ID to only disable all handlers of a specific group","Returns","None","Notes"]},{"l":"disableHandler","p":["Signature","plugins.core.action.activator:disableHandler(id) - boolean","Type","Method","Description","Disables the handler with the specified ID.","Parameters","id- The unique action handler ID.","Returns","true if the handler exists and was disabled.","Notes"]},{"l":"enableAllHandlers","p":["Signature","plugins.core.action.activator:enableAllHandlers([groupID]) - none","Type","Method","Description","Enables the all allowed handlers.","Parameters","groupID - An optional group ID to only enable all handlers of a specific group","Returns","None","Notes"]},{"l":"enableHandler","p":["Signature","plugins.core.action.activator:enableHandler(id) - boolean","Type","Method","Description","Enables the handler with the specified ID.","Parameters","id- The unique action handler ID.","Returns","true if the handler exists and was enabled.","Notes"]},{"l":"enableHandlers","p":["Signature","plugins.core.action.activator:enableHandlers(groupID) - none","Type","Method","Description","Enables the all allowed handlers of a specific group, and disables the everything else.","Parameters","groupID - The group ID to enable","Returns","None","Notes"]},{"l":"favoriteChoice","p":["Signature","plugins.core.action.activator:favoriteChoice(id) - boolean","Type","Method","Description","Marks the choice with the specified ID as a favorite.","Parameters","id- The choice ID to favorite.","Returns","true if successfully favorited otherwise false.","Notes"]},{"l":"findChoice","p":["Signature","plugins.core.action.activator:findChoice(id) - choice","Type","Method","Description","Gets a choice","Parameters","id- The choice ID.","Returns","The choice or nil if not found","Notes"]},{"l":"getActiveHandler","p":["Signature","plugins.core.action.activator:getActiveHandler(id) - handler","Type","Method","Description","Returns the active handler with the specified ID, or nil if not available.","Parameters","id- The Handler ID","Returns","The action handler, or nil.","Notes"]},{"l":"getPopularity","p":["Signature","plugins.core.action.activator:getPopularity(id) - boolean","Type","Method","Description","Returns the popularity of the specified choice.","Parameters","id- The choice ID to retrieve.","Returns","The number of times the choice has been executed.","Notes"]},{"l":"hide","p":["Signature","plugins.core.action.activator:hide() - none","Type","Method","Description","Hides a chooser listing the available actions.","Parameters","None","Returns","Notes"]},{"l":"hideChoice","p":["Signature","plugins.core.action.activator:hideChoice(id) - boolean","Type","Method","Description","Hides the choice with the specified ID.","Parameters","id- The choice ID to hide.","Returns","true if successfully hidden otherwise false.","Notes"]},{"l":"id","p":["Signature","plugins.core.action.activator:id() - string","Type","Method","Description","Returns the activator's unique ID.","Parameters","None","Returns","The activator ID.","Notes"]},{"l":"incPopularity","p":["Signature","plugins.core.action.activator:incPopularity(choice, id) - boolean","Type","Method","Description","Increases the popularity of the specified choice.","Parameters","choice- The choice. id- The choice ID to popularise.","Returns","true if successfully unfavourited, otherwise false.","Notes"]},{"l":"isDisabledHandler","p":["Signature","plugins.core.action.activator:isDisabledHandler(id) - boolean","Type","Method","Description","Returns true if the specified handler is disabled.","Parameters","id- The handler ID.","Returns","true if the handler is disabled.","Notes"]},{"l":"isHiddenChoice","p":["Signature","plugins.core.action.activator:isHiddenChoice(id) - boolean","Type","Method","Description","Checks if the specified choice is hidden.","Parameters","id- The choice ID to check.","Returns","true if currently hidden.","Notes"]},{"l":"isVisible","p":["Signature","plugins.core.action.activator:isVisible() - boolean","Type","Method","Description","Checks if the chooser is currently displayed.","Parameters","None","Returns","A boolean, true if the chooser is displayed on screen, false if not.","Notes"]},{"l":"onActivate","p":["Signature","plugins.core.action.activator:onActivate(activateFn) - activator","Type","Method","Description","Registers the provided function to handle 'activate' actions, when the user selects an item in the main chooser.","Parameters","activateFn- The function to call when an item is activated.","Returns","The activator.","Notes","By default, the activator will 'execute' the action, but you can choose to provide an alternative action. It will get passed the handler object and the action table. Eg: lua/liliactivator:onActivate(function(handler, action))/lili"]},{"l":"preloadChoices","p":["Signature","plugins.core.action.activator:preloadChoices([afterSeconds]) - activator","Type","Method","Description","Indicates the activator should preload the choices after a number of seconds. Defaults to 0 seconds if no value is provided.","Parameters","afterSeconds- The number of seconds to wait before preloading.","Returns","The activator.","Notes"]},{"l":"refresh","p":["Signature","plugins.core.action.activator:refresh() - none","Type","Method","Description","Clears the existing set of choices and requests new ones from enabled action handlers.","Parameters","None","Returns","Notes"]},{"l":"refreshChooser","p":["Signature","plugins.core.action.activator:refreshChooser() - none","Type","Method","Description","Refreshes a Chooser.","Parameters","None","Returns","Notes"]},{"l":"rightClickAction","p":["Signature","plugins.core.action.activator:rightClickAction(index) - none","Type","Method","Description","Triggered when a user right clicks on a chooser.","Parameters","index- The row the right click occurred in or 0 if there is currently no selectable row where the right click occurred.","Returns","None","Notes"]},{"l":"rightClickMain","p":["Signature","plugins.core.action.activator:rightClickMain(index) - none","Type","Method","Description","Triggered when a user right clicks on a chooser.","Parameters","index- The row the right click occurred in or 0 if there is currently no selectable row where the right click occurred.","Returns","None","Notes"]},{"l":"setBundleID","p":["Signature","plugins.core.action.activator:setBundleID(bundleID, icon, displayName) - self","Type","Method","Description","Sets a bundle ID to use for filtering purposes.","Parameters","bundleID - An application bundle ID as string. icon - An application icon as an hs.image object. displayName - The application display name as a string.","Returns","Self","Notes"]},{"l":"show","p":["Signature","plugins.core.action.activator:show() - boolean","Type","Method","Description","Shows a chooser listing the available actions. When selected by the user, the onActivate function is called.","Parameters","None","Returns","true if successful","Notes"]},{"l":"sortChoices","p":["Signature","plugins.core.action.activator:sortChoices() - boolean","Type","Method","Description","Sorts the current set of choices in the activator. It takes into account whether it's a favorite (first priority) and its overall popularity.","Parameters","None","Returns","true if the action executed successfully, otherwise false.","Notes"]},{"l":"toggle","p":["Signature","plugins.core.action.activator:toggle() - none","Type","Method","Description","Shows or hides the chooser.","Parameters","None","Returns","Notes"]},{"l":"toolbarIcons","p":["Signature","plugins.core.action.activator:toolbarIcons(table) - self","Type","Method","Description","Sets which sections have an icon on the toolbar.","Parameters","table - A table containing paths to all the toolbar icons. The key should be the handler ID, and the value should be the path to the icon.","Returns","Self","Notes"]},{"l":"unfavoriteChoice","p":["Signature","plugins.core.action.activator:unfavoriteChoice(id) - boolean","Type","Method","Description","Marks the choice with the specified ID as not a favorite.","Parameters","id- The choice ID to unfavorite.","Returns","true if successfully unfavorited.","Notes"]},{"l":"unhideChoice","p":["Signature","plugins.core.action.activator:unhideChoice(id) - boolean","Type","Method","Description","Reveals the choice with the specified ID.","Parameters","id- The choice ID to hide.","Returns","true if successfully unhidden otherwise false.","Notes"]},{"l":"updateSelectedToolbarIcon","p":["Signature","plugins.core.action.activator:updateSelectedToolbarIcon() - none","Type","Method","Description","Updates the selected toolbar icon.","Parameters","None","Returns","Notes"]}],[{"i":"pluginscoreactionhandler","l":"plugins.core.action.handler","p":["A support class for handler handlers. It is not used directly, rather it is a 'super class' that provides common functionality.","Instances of the class primarily need to provide functions for the following:","The choices added to the choices should have the params value set to a table containing the details of the action to execute if the choice is selected."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Fields- Variables which can only be accessed from an object returned by a constructor","cached","choices","Methods- API calls which can only be made on an object returned by a constructor","actionId","execute","group","id","label","onActionId","onChoices","onExecute","reset"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.core.action.handler.new(id, group, label) - handler","Type","Constructor","Description","Creates a new handler with the specified ID.","Parameters","id- The unique ID of the action handler. group- The group the handler belongs to. label- An optional label for the handler (over-riding a supplied i18n value)","Returns","The new action handler instance.","Notes"]},{"l":"Fields"},{"l":"cached","p":["Signature","plugins.core.action.handler.cached cp.prop: boolean","Type","Field","Description","If set to true(the default), any choices created will be cached until [reset] is called."]},{"l":"choices","p":["Signature","plugins.core.action.handler.choices cp.prop: cp.choices; read-only","Type","Field","Description","Provides cp.choices instance for the handler. May be watched/monitored/etc."]},{"l":"Methods"},{"l":"actionId","p":["Signature","plugins.core.action.handler:actionId(action) - string","Type","Method","Description","Returns a string that can be used as a unique ID for the action details.","Parameters","None","Returns","Notes"]},{"l":"execute","p":["Signature","plugins.core.action.handler:execute(action) - boolean","Type","Method","Description","Executes the action, based on values in the table.","Parameters","action- A table of details about the action.","Returns","true if the execution succeeded.","Notes"]},{"l":"group","p":["Signature","plugins.core.action.handler:group() - string","Type","Method","Description","Returns the group for this handler.","Parameters","None","Returns","Group as string.","Notes"]},{"l":"id","p":["Signature","plugins.core.action.handler:id() - string","Type","Method","Description","Returns the ID for this handler.","Parameters","None","Returns","The ID string.","Notes"]},{"l":"label","p":["Signature","plugins.core.action.handler:label() - string","Type","Method","Description","Returns the label for this handler.","Parameters","None","Returns","The ID string.","Notes"]},{"l":"onActionId","p":["Signature","plugins.core.action.handler:onActionId(actionFn) - handler","Type","Method","Description","Configures a function to handle converting an action to unique ID. The function is passed the action table and should return a string.","Parameters","actionFn- The function with a signature of function(action) - string","Returns","This action handler.","Notes"]},{"l":"onChoices","p":["Signature","plugins.core.action.handler:onChoices(choicesFn) - handler","Type","Method","Description","Adds a callback function which will receive the cp.choices instance to add choices to. This will only get called when required - the results will be cached if the cached property is set to true.","Parameters","choicesFn- The function with the signature of function(choices) - nothing","Returns","This action handler.","Notes"]},{"l":"onExecute","p":["Signature","plugins.core.action.handler:onExecute(executeFn) - handler","Type","Method","Description","Configures the function to call when a choice is executed. This will be passed the choice parameters in a single table.","Parameters","executeFn- The function to call when executing.","Returns","This action handler.","Notes"]},{"l":"reset","p":["Signature","plugins.core.action.handler:reset([updateNow]) - nil","Type","Method","Description","Resets the handler, clearing any cached result and requesting new ones.","Parameters","updateNow- (optional) If true, the choices will update immediately, otherwise they will update when the choices are next requested.","Returns","Nothing","Notes"]}],[{"i":"pluginscoreactionmanager","l":"plugins.core.action.manager","p":["Action Manager Module."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","handlerIds","handlers","Functions- API calls offered directly by the extension","addHandler","getActivator","getHandler","getURL","init"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"handlerIds","p":["Signature","plugins.core.action.manager.handlerIds cp.prop: table of strings; read-only","Type","Constant","Description","Returns a list of registered handler IDs."]},{"l":"handlers","p":["Signature","plugins.core.action.manager.handlers cp.prop: table of handlers; read-only","Type","Constant","Description","Provides access to the set of handlers registered with the manager. It"]},{"l":"Functions"},{"l":"addHandler","p":["Signature","plugins.core.action.manager.addHandler(id, group, label) - handler","Type","Function","Description","Adds a new action handler with the specified unique ID and returns it for further configuration.","Parameters","id- The unique ID group- The group the handler belongs to. label- An optional label for the handler (over-riding a supplied i18n value)","Returns","The handler instance.","Notes"]},{"l":"getActivator","p":["Signature","plugins.core.action.manager.getActivator(id) - activator","Type","Function","Description","Returns an activator with the specified ID. If it doesn't exist, it will be created. Future calls to get the same ID, and it will return the same instance each time.","Parameters","activatorId- The unique ID of the activator.","Returns","The activator with the specified ID.","Notes"]},{"l":"getHandler","p":["Signature","plugins.core.action.manager.getHandler(id) - handler","Type","Function","Description","Returns an existing handler with the specified ID.","Parameters","id- The unique ID of the action handler.","Returns","The action handler, or nil","Notes"]},{"l":"getURL","p":["Signature","plugins.core.action.manager.getURL(handlerId, action) - string","Type","Function","Description","Gets a URL based on the Handler ID & Action Table.","Parameters","handlerId- The Handler ID action The action table","Returns","A string","Notes"]},{"l":"init","p":["Signature","plugins.core.action.manager.init() - none","Type","Function","Description","Initialises the module.","Parameters","None","Returns","Notes"]}],[{"i":"pluginscoreactionscustom","l":"plugins.core.actions.custom","p":["Creates a bunch of commands that can be used to assign actions to. This allows you to assign any action to a shortcut key in CommandPost."]},{"l":"API Overview","p":["Variables- Configurable values","shortcuts","Functions- API calls offered directly by the extension","apply","assign"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"shortcuts","p":["Signature","plugins.core.actions.custom.shortcuts cp.prop: table","Type","Variable","Description","Table of shortcuts."]},{"l":"Functions"},{"l":"apply","p":["Signature","plugins.core.actions.custom.apply(id) - none","Type","Function","Description","Applies a shortcut.","Parameters","id- The Custom Action ID.","Returns","None","Notes"]},{"l":"assign","p":["Signature","plugins.core.actions.custom.assign(id, handlerId) - none","Type","Function","Description","Assigns an Action to a Shortcut via a Console.","Parameters","id- The Custom Action ID. completionFn- An optional completion function that triggers when a selection is made.","Returns","None","Notes"]}],[{"i":"pluginscoreapplicationmanager","l":"plugins.core.application.manager","p":["Application manager."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","defaultSearchConsoleToolbar","getApplications","getSearchConsoleToolbar","registerApplication"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"defaultSearchConsoleToolbar","p":["Signature","plugins.core.application.manager.defaultSearchConsoleToolbar() - table","Type","Function","Description","Returns the default search toolbar data.","Parameters","None","Returns","A table","Notes"]},{"l":"getApplications","p":["Signature","plugins.core.application.manager.getApplications() - table","Type","Function","Description","Gets all the registered applications.","Parameters","None","Returns","A table of all the registered applications.","Notes"]},{"l":"getSearchConsoleToolbar","p":["Signature","plugins.core.application.manager.getSearchConsoleToolbar(bundleID) - table","Type","Function","Description","Gets the Search Console Toolbar data for a specific bundle ID.","Parameters","bundleID - The bundle ID of the application you want to get.","Returns","A table of the Search Sonole Toolbar data for the specified application.","Notes"]},{"l":"registerApplication","p":["Signature","plugins.core.application.manager.registerApplication(data) - none","Type","Function","Description","Registers a new application.","Parameters","data - A table containing the information to register.","Returns","None","Notes","The data table should contain: displayName - The display name of the application bundleID - The bundle ID of the application searchConsoleToolbar - A table containing the Search Console Toolbar information legacyGroupID - A string containing the legacy group ID (i.e. \"fcpx\")"]}],[{"i":"pluginscoreaudioswiftprefs","l":"plugins.core.audioswift.prefs","p":["AudioSwift Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorecommandsactions","l":"plugins.core.commands.actions","p":["An action which will execute a command with matching group/id values. Registers itself with the core.action.manager."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","execute","getId","init","onChoices","reset"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"execute","p":["Signature","plugins.core.commands.actions.execute(action) - boolean","Type","Function","Description","Executes the action with the provided parameters.","Parameters","action- A table representing the action, matching the following: id- The specific Command ID within the group.","Returns","true if the action was executed successfully.","Notes"]},{"l":"getId","p":["Signature","plugins.core.commands.actions.getId(action) - string","Type","Function","Description","Gets an ID from an action table","Parameters","action- The action table.","Returns","The ID as a string.","Notes"]},{"l":"init","p":["Signature","plugins.core.commands.actions.init(actionmanager, cmds) - none","Type","Function","Description","Initialises the module.","Parameters","actionmanager- The Action Manager Plugin cmds- The Commands Plugin.","Returns","None","Notes"]},{"l":"onChoices","p":["Signature","plugins.core.commands.actions.onChoices(choices) - none","Type","Function","Description","Adds available choices to the selection.","Parameters","choices- The cp.choices to add choices to.","Returns","None","Notes"]},{"l":"reset","p":["Signature","plugins.core.commands.actions.reset() - nothing","Type","Function","Description","Resets the set of choices.","Parameters","None","Returns","Nothing","Notes"]}],[{"i":"pluginscorecommandsglobal","l":"plugins.core.commands.global","p":["The 'global' command collection."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoreconsole","l":"plugins.core.console","p":["Search Console"]},{"l":"Submodules","p":["plugins.core.console.applications","plugins.core.console.keyboardmaestromacros","plugins.core.console.preferences","plugins.core.console.scripts"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","register","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"register","p":["Signature","plugins.core.console.register(bundleID, activator) - none","Type","Function","Description","Registers an application specific Search Console.","Parameters","bundleID - The bundle ID of the application activatorFn - A function that returns an activator.","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.core.console.show() - none","Type","Function","Description","Shows the Search Console.","Parameters","None","Returns","Notes"]}],[{"i":"pluginscoreconsoleapplications","l":"plugins.core.console.applications","p":["Adds all installed applications to the Search Console."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoreconsolekeyboardmaestromacros","l":"plugins.core.console.keyboardmaestromacros","p":["Adds Keyboard Maestro Macros to the Search Console."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoreconsolepreferences","l":"plugins.core.console.preferences","p":["Preferences for the Search Console."]},{"l":"API Overview","p":["Variables- Configurable values","scanRunningApplicationMenubarsOnStartup","scanTheMenubarsOfTheActiveApplication"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"scanRunningApplicationMenubarsOnStartup","p":["Signature","plugins.core.console.preferences.scanRunningApplicationMenubarsOnStartup cp.prop: boolean","Type","Variable","Description","Scan Running Application Menubars on Startup"]},{"l":"scanTheMenubarsOfTheActiveApplication","p":["Signature","plugins.core.console.preferences.scanTheMenubarsOfTheActiveApplication cp.prop: boolean","Type","Variable","Description","Scan the Menubars of the Active Application"]}],[{"i":"pluginscoreconsolescripts","l":"plugins.core.console.scripts","p":["Adds all installed AppleScripts to the Search Console."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorecontrolsurfacesmanager","l":"plugins.core.controlsurfaces.manager","p":["Manager for the CommandPost Preferences Window."]},{"l":"Submodules","p":["plugins.core.controlsurfaces.manager.panel"]},{"l":"API Overview","p":["_handlers","_panels","addHandler","addPanel","Constants- Useful values which cannot be changed","currentPanelID","DEFAULT_HEIGHT","DEFAULT_WIDTH","focus","Functions- API calls offered directly by the extension","getHandler","getLabel","getWebview","hide","init","injectScript","lastTab","maxPanelHeight","new","NUMBER_OF_BANKS","NUMBER_OF_DEVICES","position","refresh","selectPanel","setPanelRenderer","show","Variables- Configurable values","WEBVIEW_LABEL"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_HEIGHT","p":["Signature","plugins.core.controlsurfaces.manager.DEFAULT_HEIGHT - number","Type","Constant","Description","Default Height of Preferences Window"]},{"l":"DEFAULT_WIDTH","p":["Signature","plugins.core.controlsurfaces.manager.DEFAULT_WIDTH - number","Type","Constant","Description","Default Width of Preferences Window"]},{"l":"lastTab","p":["Signature","plugins.core.controlsurfaces.manager.lastTab","Type","Constant","Description","Returns the last tab saved in settings."]},{"l":"NUMBER_OF_BANKS","p":["Signature","plugins.core.controlsurfaces.manager.NUMBER_OF_BANKS - number","Type","Constant","Description","Number of banks."]},{"l":"NUMBER_OF_DEVICES","p":["Signature","plugins.core.controlsurfaces.manager.NUMBER_OF_DEVICES - number","Type","Constant","Description","Number of devices."]},{"l":"position","p":["Signature","plugins.core.controlsurfaces.manager.position","Type","Constant","Description","Returns the last frame saved in settings."]},{"l":"WEBVIEW_LABEL","p":["Signature","plugins.core.controlsurfaces.manager.WEBVIEW_LABEL - string","Type","Constant","Description","The WebView Label"]},{"l":"Variables"},{"l":"_handlers","p":["Signature","plugins.core.controlsurfaces.manager._handlers - table","Type","Variable","Description","Table containing handlers."]},{"l":"_panels","p":["Signature","plugins.core.controlsurfaces.manager._panels - table","Type","Variable","Description","Table containing panels."]},{"l":"Functions"},{"l":"addHandler","p":["Signature","plugins.core.controlsurfaces.manager.addHandler(id, handlerFn) - string","Type","Function","Description","Adds a Handler","Parameters","id - The ID handlerFn - the handler function","Returns","Nothing","Notes"]},{"l":"addPanel","p":["Signature","plugins.core.controlsurfaces.manager.addPanel(params) - plugins.core.controlsurfaces.manager.panel","Type","Function","Description","Adds a new panel with the specified params to the preferences manager.","Parameters","params- The parameters table. Details below.","Returns","The new panel instance.","Notes","The params can have the following properties. The priority and id and properties are required.** priority- An integer value specifying the priority of the panel compared to others.** id- A string containing the unique ID of the panel.** label- The human-readable label for the panel icon.** image- The hs.image for the panel icon.** tooltip- The human-readable details for the toolbar icon when the mouse is hovering over it.** closeFn- A callback function that's triggered when the Preferences window is closed."]},{"l":"currentPanelID","p":["Signature","plugins.core.controlsurfaces.manager.currentPanelID() - string","Type","Function","Description","Returns the panel ID with the highest priority.","Parameters","None","Returns","The panel ID as a string","Notes"]},{"l":"focus","p":["Signature","plugins.core.controlsurfaces.manager.focus() - boolean","Type","Function","Description","Puts focus on the Preferences Window.","Parameters","None","Returns","true if successful or otherwise false.","Notes"]},{"l":"getHandler","p":["Signature","plugins.core.controlsurfaces.manager.getHandler(id) - string","Type","Function","Description","Returns the handler for a given ID.","Parameters","id - The ID","Returns","Table","Notes"]},{"l":"getLabel","p":["Signature","plugins.core.controlsurfaces.manager.getLabel() - string","Type","Function","Description","Returns the Webview label.","Parameters","None","Returns","The Webview label as a string.","Notes"]},{"l":"getWebview","p":["Signature","plugins.core.controlsurfaces.manager.getWebview() - hs.webview","Type","Function","Description","Returns the Webview of the Preferences Window.","Parameters","None","Returns","A hs.webview","Notes"]},{"l":"hide","p":["Signature","plugins.core.controlsurfaces.manager.hide() - none","Type","Function","Description","Hides the Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"init","p":["Signature","plugins.core.controlsurfaces.manager.init() - nothing","Type","Function","Description","Initialises the preferences panel.","Parameters","None","Returns","Nothing","Notes"]},{"l":"injectScript","p":["Signature","plugins.core.controlsurfaces.manager.injectScript(script) - none","Type","Function","Description","Injects JavaScript into the Preferences Webview.","Parameters","script - The JavaScript code you want to inject in the form of a string.","Returns","None","Notes"]},{"l":"maxPanelHeight","p":["Signature","plugins.core.controlsurfaces.manager.maxPanelHeight() - number","Type","Function","Description","Returns the maximum size defined by a panel.","Parameters","None","Returns","The maximum panel height.","Notes"]},{"l":"new","p":["Signature","plugins.core.controlsurfaces.manager.new() - none","Type","Function","Description","Creates a new Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"refresh","p":["Signature","plugins.core.controlsurfaces.manager.refresh() - none","Type","Function","Description","Refreshes the Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"selectPanel","p":["Signature","plugins.core.controlsurfaces.manager.selectPanel(id) - none","Type","Function","Description","Selects a Preferences Panel.","Parameters","id - the ID of the panel you want to select.","Returns","None","Notes"]},{"l":"setPanelRenderer","p":["Signature","plugins.core.controlsurfaces.manager.setPanelRenderer(renderer) - none","Type","Function","Description","Sets a Panel Renderer","Parameters","renderer - The renderer","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.core.controlsurfaces.manager.show([panelID]) - boolean","Type","Function","Description","Shows the Preferences Window","Parameters","[panelID] - An optional panel ID","Returns","True if successful or nil if an error occurred","Notes"]}],[{"i":"pluginscorecontrolsurfacesmanagerpanel","l":"plugins.core.controlsurfaces.manager.panel","p":["CommandPost Control Surfaces Panel."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","addButton","addCheckbox","addContent","addHandler","addHeading","addParagraph","addPassword","addSelect","addTextbox","getToolbarItem"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.core.controlsurfaces.manager.panel.new(params, manager) - cp.core.controlsurfaces.manager.panel","Type","Constructor","Description","Constructs a new panel with the specified priority and ID.","Parameters","params - A table of parameters manager - The manager","Returns","The new object.","Notes"]},{"l":"Methods"},{"l":"addButton","p":["Signature","plugins.core.controlsurfaces.manager.panel:addButton(params) - panel","Type","Method","Description","Adds a button to the panel.","Parameters","params - The list of parameters.","Returns","The same panel.","Notes","The params table may contain:** id- (optional) the unique ID for the button. If none is provided, one is generated.** value- The value of the button. This is sent to the onclick function.** label- The text label for the button. Defaults to the value if not provided.** width- The width of the button in pixels.** onclick- the function to execute when the button is clicked. The function should have the signature of function(id, value), where id is the id of the button that was clicked, and value is the value of the button."]},{"l":"addCheckbox","p":["Signature","plugins.core.controlsurfaces.manager.panel:addCheckbox(priority, params) - panel","Type","Method","Description","Adds a checkbox to the panel with the specified priority and params.","Parameters","priority- The priority number for the checkbox. params- The set of parameters for the checkbox.","Returns","The panel.","Notes","The params can contain the following fields:** id- (optional) The unique ID. If none is provided, one will be generated.** name- (optional) The name of the checkbox field.** label- (optional) The text label to display after the checkbox.** onchange- (optional) a function that will get called when the checkbox value changes. It will be passed two parameters, id and params, the latter of which is a table containing the value and checked values of the checkbox.** class- (optional) the CSS class list to apply to the checkbox."]},{"l":"addContent","p":["Signature","plugins.core.controlsurfaces.manager.panel:addContent(priority, content[, escaped]) - panel","Type","Method","Description","Adds the specified content to the panel, with the specified priority order.","Parameters","priority- the priority order of the content. content- a value that can be converted to a string. escaped- if true, the content will be escaped.","Returns","The panel.","Notes"]},{"l":"addHandler","p":["Signature","plugins.core.controlsurfaces.manager.panel:addHandler(event, id, handlerFn, keys) - none","Type","Method","Description","Gets a handler from an Handler ID","Parameters","event - The event id - the Handler ID handlerFn - The Handler function keys - Keys","Returns","None","Notes"]},{"l":"addHeading","p":["Signature","plugins.core.controlsurfaces.manager.panel:addHeading(text) - panel","Type","Method","Description","Adds a heading to the panel","Parameters","text - The text of the heading as a string","Returns","The panel object.","Notes"]},{"l":"addParagraph","p":["Signature","plugins.core.controlsurfaces.manager.panel:addParagraph(content[, escaped[, class]]) - panel","Type","Method","Description","Adds a Paragraph to the panel","Parameters","content - The content as a string escaped - Whether or not the HTML should be escaped as a boolean. Defaults to true for simple text. class - The class as a string","Returns","The panel object.","Notes"]},{"l":"addPassword","p":["Signature","plugins.core.controlsurfaces.manager.panel:addPassword(params) - panel","Type","Method","Description","Adds a password text-box to the panel.","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addSelect","p":["Signature","plugins.core.controlsurfaces.manager.panel:addSelect(priority, params) - panel","Type","Method","Description","Adds a select to the panel.","Parameters","priority - Priority of the item as number. params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addTextbox","p":["Signature","plugins.core.controlsurfaces.manager.panel:addTextbox(params) - panel","Type","Method","Description","Adds a text-box to the panel","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"getToolbarItem","p":["Signature","plugins.core.controlsurfaces.manager.panel:getToolbarItem() - table","Type","Method","Description","Gets the Tool Bar as a table","Parameters","None","Returns","The toolbar item as a table.","Notes"]}],[{"i":"pluginscorecontrolsurfacesresolvemanager","l":"plugins.core.controlsurfaces.resolve.manager","p":["Blackmagic DaVinci Resolve Control Surface Support."]},{"l":"API Overview","p":["activeBanks","automaticallySwitchApplications","batteryStatus","buttonCallback","Constants- Useful values which cannot be changed","DEFAULT_JOG_MODE","DEFAULT_SENSITIVITY","defaultLayout","discoveryCallback","enabled","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","items","lastApplication","lastBundleID","LONG_PRESS_DURATION","repeatTimers","start","update","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_JOG_MODE","p":["Signature","plugins.core.controlsurfaces.resolve.manager.DEFAULT_JOG_MODE - string","Type","Constant","Description","The default Jog Wheel Mode."]},{"l":"DEFAULT_SENSITIVITY","p":["Signature","plugins.core.controlsurfaces.resolve.manager.DEFAULT_SENSITIVITY - number","Type","Constant","Description","The default sensitivity used for Blackmagic Resolve Control Surfaces."]},{"l":"LONG_PRESS_DURATION","p":["Signature","plugins.core.controlsurfaces.resolve.manager.LONG_PRESS_DURATION - number","Type","Constant","Description","How long a button needs to be pressed before it's considered a long press (in seconds)."]},{"l":"Variables"},{"l":"defaultLayout","p":["Signature","plugins.core.controlsurfaces.resolve.manager.defaultLayout - table","Type","Variable","Description","Default Layout"]},{"l":"repeatTimers","p":["Signature","plugins.core.controlsurfaces.resolve.manager.repeatTimers - table","Type","Variable","Description","A table containing hs.timer objects."]},{"l":"Functions"},{"l":"batteryStatus","p":["Signature","plugins.core.controlsurfaces.resolve.manager.batteryStatus(deviceType, deviceID) - none","Type","Function","Description","Gets the Battery Status for a specific device","Parameters","deviceType - A string, either \"Speed Editor\" or \"Editor Keyboard\" deviceID - A string with the device ID","Returns","charging - A boolean level - The battery level as a number","Notes"]},{"l":"buttonCallback","p":["Signature","plugins.core.controlsurfaces.resolve.manager.buttonCallback(object, buttonID, pressed) - none","Type","Function","Description","Control Surface Button Callback","Parameters","object - The hs.resolve userdata object buttonID - A number containing the button that was pressed/released pressed - A boolean indicating whether the button was pressed ( true) or released ( false)","Returns","None","Notes"]},{"l":"discoveryCallback","p":["Signature","plugins.core.controlsurfaces.resolve.manager.discoveryCallback(connected, object) - none","Type","Function","Description","Control Surface Discovery Callback","Parameters","connected - A boolean, true if a device was connected, false if a device was disconnected object - An hs.speededitor object, being the device that was connected/disconnected","Returns","None","Notes"]},{"l":"start","p":["Signature","plugins.core.controlsurfaces.resolve.manager.start() - boolean","Type","Function","Description","Stops DaVinci Resolve Control Surface Support.","Parameters","None","Returns","Notes"]},{"l":"update","p":["Signature","plugins.core.controlsurfaces.resolve.manager.update() - none","Type","Function","Description","Updates all the control surface LEDs.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"activeBanks","p":["Signature","plugins.core.controlsurfaces.resolve.manager.activeBanks cp.prop: table","Type","Field","Description","Table of active banks for each application."]},{"l":"automaticallySwitchApplications","p":["Signature","plugins.core.controlsurfaces.resolve.manager.automaticallySwitchApplications cp.prop: boolean","Type","Field","Description","Enable or disable the automatic switching of applications."]},{"l":"enabled","p":["Signature","plugins.core.controlsurfaces.resolve.manager.enabled cp.prop: boolean","Type","Field","Description","Enable or disable DaVinci Resolve Control Surface support"]},{"l":"items","p":["Signature","plugins.core.controlsurfaces.resolve.manager.items cp.prop: table","Type","Field","Description","A table containing the control surface layout."]},{"l":"lastApplication","p":["Signature","plugins.core.controlsurfaces.resolve.manager.lastApplication cp.prop: string","Type","Field","Description","Last Bank used in the Preferences Panel."]},{"l":"lastBundleID","p":["Signature","plugins.core.controlsurfaces.resolve.manager.lastBundleID cp.prop: string","Type","Field","Description","The last Bundle ID."]}],[{"i":"pluginscorecontrolsurfacesresolveprefs","l":"plugins.core.controlsurfaces.resolve.prefs","p":["Blackmagic DaVinci Resolve Control Surface Preferences Panel"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","changeBankOnHardwareWhenChangingHere","displayMessageWhenChangingBanks","lastDevice","lastExportPath","lastImportPath","lastUnit","pasteboard","snippetsRefreshFrequency","Methods- API calls which can only be made on an object returned by a constructor","setItem"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"changeBankOnHardwareWhenChangingHere","p":["Signature","plugins.core.controlsurfaces.resolve.prefs.changeBankOnHardwareWhenChangingHere cp.prop: boolean","Type","Field","Description","Should we change bank on hardware when changing in preferences?"]},{"l":"displayMessageWhenChangingBanks","p":["Signature","plugins.core.controlsurfaces.resolve.prefs.displayMessageWhenChangingBanks cp.prop: boolean","Type","Field","Description","Display a message when changing banks?"]},{"l":"lastDevice","p":["Signature","plugins.core.controlsurfaces.resolve.prefs.lastDevice cp.prop: string","Type","Field","Description","Last Device used in the Preferences Panel."]},{"l":"lastExportPath","p":["Signature","plugins.core.controlsurfaces.resolve.prefs.lastExportPath cp.prop: string","Type","Field","Description","Last Export path."]},{"l":"lastImportPath","p":["Signature","plugins.core.controlsurfaces.resolve.prefs.lastImportPath cp.prop: string","Type","Field","Description","Last Import path."]},{"l":"lastUnit","p":["Signature","plugins.core.controlsurfaces.resolve.prefs.lastUnit cp.prop: string","Type","Field","Description","Last Unit used in the Preferences Panel."]},{"l":"pasteboard","p":["Signature","plugins.core.controlsurfaces.resolve.prefs.pasteboard cp.prop: table","Type","Field","Description"]},{"l":"snippetsRefreshFrequency","p":["Signature","plugins.core.controlsurfaces.resolve.prefs.snippetsRefreshFrequency cp.prop: string","Type","Field","Description","How often snippets are refreshed."]},{"l":"Methods"},{"l":"setItem","p":["Signature","plugins.core.controlsurfaces.resolve.prefs.setItem(app, bank, button, key, [value]) - none","Type","Method","Description","Update the Speed Editor layout file.","Parameters","app - The application bundle ID as a string bank - The bank ID as a string button - The button ID as a string key - The key as a string or a table if replacing the entire button contents value - The optional value","Returns","None","Notes"]}],[{"i":"pluginscorediskautomount","l":"plugins.core.disk.automount","p":["Automatic Disk Mounting & Unmounting."]},{"l":"API Overview","p":["Variables- Configurable values","autoMountOnAC","autoUnmountOnBattery","Functions- API calls offered directly by the extension","mountPhysicalDrives","unmountPhysicalDrives"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"autoMountOnAC","p":["Signature","plugins.core.disk.automount.autoMountOnAC cp.prop: boolean","Type","Variable","Description","Automatically mount on connection to mains power."]},{"l":"autoUnmountOnBattery","p":["Signature","plugins.core.disk.automount.autoUnmountOnBattery cp.prop: boolean","Type","Variable","Description","Automatically Unmount on disconnection from battery."]},{"l":"Functions"},{"l":"mountPhysicalDrives","p":["Signature","plugins.core.disk.automount.mountPhysicalDrives() - none","Type","Function","Description","Mount Physical Drives","Parameters","None","Returns","Notes"]},{"l":"unmountPhysicalDrives","p":["Signature","plugins.core.disk.automount.unmountPhysicalDrives() - none","Type","Function","Description","Unmount Physical Drives","Parameters","None","Returns","Notes"]}],[{"i":"pluginscorediskfavourites","l":"plugins.core.disk.favourites","p":["Action that allows you save and open user-defined favourite folders."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoredisplay","l":"plugins.core.display","p":["Display Controls."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoregamepadprefs","l":"plugins.core.gamepad.prefs","p":["Gamepad Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoregestures","l":"plugins.core.gestures","p":["Adds mouse actions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorehelpandsupportcredits","l":"plugins.core.helpandsupport.credits","p":["Credits Menu Item."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorehelpandsupportdebugconsole","l":"plugins.core.helpandsupport.debugconsole","p":["Debug Console Menu Item."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorehelpandsupportdeveloperguide","l":"plugins.core.helpandsupport.developerguide","p":["Developer Guide Menu Item."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"show","p":["Signature","plugins.core.helpandsupport.developerguide.show() - nil","Type","Function","Description","Opens the CommandPost Developer Guide in the Default Browser.","Parameters","None","Returns","Notes"]}],[{"i":"pluginscorehelpandsupportdonate","l":"plugins.core.helpandsupport.donate","p":["Donate Menu Item."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorehelpandsupportfacebook","l":"plugins.core.helpandsupport.facebook","p":["Facebook Group Menu Item."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorehelpandsupportfeedback","l":"plugins.core.helpandsupport.feedback","p":["Feedback Menu Item."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"show","p":["Signature","plugins.core.helpandsupport.feedback.show() - nil","Type","Function","Description","Opens CommandPost Credits Window","Parameters","None","Returns","Notes"]}],[{"i":"pluginscorehelpandsupportuserguide","l":"plugins.core.helpandsupport.userguide","p":["User Guide Menu Item."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","show"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"show","p":["Signature","plugins.core.helpandsupport.userguide.show() - nil","Type","Function","Description","Opens the CommandPost User Guide in your default Browser.","Parameters","None","Returns","Notes"]}],[{"i":"pluginscorelanguage","l":"plugins.core.language","p":["Language Module."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoreloupedeckprefs","l":"plugins.core.loupedeck.prefs","p":["Loupedeck+ Preferences Panel"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","lastApplication","lastBank","lastExportPath","lastImportPath","lastIsButton","lastLabel","lastNote"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"lastApplication","p":["Signature","plugins.core.loupedeck.prefs.lastApplication cp.prop: string","Type","Field","Description","Last application used in the Preferences Drop Down."]},{"l":"lastBank","p":["Signature","plugins.core.loupedeck.prefs.lastBank cp.prop: string","Type","Field","Description","Last bank used in the Preferences Drop Down."]},{"l":"lastExportPath","p":["Signature","plugins.core.loupedeck.prefs.lastExportPath cp.prop: string","Type","Field","Description","Last Export path."]},{"l":"lastImportPath","p":["Signature","plugins.core.loupedeck.prefs.lastImportPath cp.prop: string","Type","Field","Description","Last Import path."]},{"l":"lastIsButton","p":["Signature","plugins.core.loupedeck.prefs.lastIsButton cp.prop: boolean","Type","Field","Description","Whether or not the last selected item in the Preferences was a button."]},{"l":"lastLabel","p":["Signature","plugins.core.loupedeck.prefs.lastLabel cp.prop: string","Type","Field","Description","Last label used in the Preferences panel."]},{"l":"lastNote","p":["Signature","plugins.core.loupedeck.prefs.lastNote cp.prop: string","Type","Field","Description","Last note used in the Preferences panel."]}],[{"i":"pluginscoreloupedeckctandlivemanager","l":"plugins.core.loupedeckctandlive.manager","p":["Manager Plugin for Loupedeck CT, Loupedeck Live, Loupedeck Live-S and Razer Stream Controller."]},{"l":"API Overview","p":["callback","clearCache","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","executeAction","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getFlashDrivePath","lastApplication","lastBank","Methods- API calls which can only be made on an object returned by a constructor","new","NUMBER_OF_DEVICES","previewSelectedApplicationAndBankOnHardware","refresh","refreshItems","reset","updateBacklightLevel"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"NUMBER_OF_DEVICES","p":["Signature","plugins.core.loupedeckctandlive.manager.NUMBER_OF_DEVICES - number","Type","Constant","Description","The number of devices of the same type supported."]},{"l":"Functions"},{"l":"executeAction","p":["Signature","plugins.core.loupedeckctandlive.manager:executeAction(thisAction, deviceNumber) - boolean","Type","Function","Description","Executes an action.","Parameters","thisAction - The action to execute deviceNumber - The device number","Returns","true if successful otherwise false","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.core.loupedeckctandlive.manager.new() - Loupedeck","Type","Constructor","Description","Creates a new Loupedeck object.","Parameters","deviceType - The device type defined in hs.loupedeck.deviceTypes","Returns","None","Notes","The deviceType should be either hs.loupedeck.deviceTypes.LIVE or hs.loupedeck.deviceTypes.CT."]},{"l":"Fields"},{"l":"lastApplication","p":["Signature","plugins.core.loupedeckctandlive.manager.lastApplication cp.prop: boolean","Type","Field","Description","The last application"]},{"l":"lastBank","p":["Signature","plugins.core.loupedeckctandlive.manager.lastBank cp.prop: boolean","Type","Field","Description","The last bank"]},{"l":"previewSelectedApplicationAndBankOnHardware","p":["Signature","plugins.core.loupedeckctandlive.manager.previewSelectedApplicationAndBankOnHardware cp.prop: boolean","Type","Field","Description","Should we preview the selected application and bank on hardware?"]},{"l":"Methods"},{"l":"callback","p":["Signature","plugins.core.loupedeckctandlive.manager:callback(data, deviceNumber) - none","Type","Method","Description","The Loupedeck callback.","Parameters","data - The callback data. deviceNumber - The device number.","Returns","None","Notes"]},{"l":"clearCache","p":["Signature","plugins.core.loupedeckctandlive.manager:clearCache(deviceNumber) - none","Type","Method","Description","Clears the cache.","Parameters","deviceNumber - The device number.","Returns","None","Notes"]},{"l":"getFlashDrivePath","p":["Signature","plugins.core.loupedeckctandlive.manager:getFlashDrivePath() - string","Type","Method","Description","Gets the Loupedeck Flash Drive path.","Parameters","None","Returns","The Loupedeck Flash Drive path as a string","Notes"]},{"l":"refresh","p":["Signature","plugins.core.loupedeckctandlive.manager:refresh(dueToAppChange, deviceNumber)","Type","Method","Description","Refreshes the Loupedeck screens and LED buttons.","Parameters","dueToAppChange - A optional boolean to specify whether the refresh is due to an application focus change. deviceNumber - The device number.","Returns","None","Notes"]},{"l":"refreshItems","p":["Signature","plugins.core.loupedeckctandlive.manager:refreshItems() - self","Type","Method","Description","Refreshes the items to either either local drive or the Loupedeck Flash Drive.","Parameters","None","Returns","Self","Notes"]},{"l":"reset","p":["Signature","plugins.core.loupedeckctandlive.manager:reset()","Type","Method","Description","Resets the config back to the default layout.","Parameters","None","Returns","Notes"]},{"l":"updateBacklightLevel","p":["Signature","plugins.core.loupedeckctandlive.manager:updateBacklightLevel(deviceNumber, value) - none","Type","Method","Description","Update the backlight level for a Loupedeck device.","Parameters","deviceNumber - The device number. value - The backlight level","Returns","None","Notes"]}],[{"i":"pluginscoreloupedeckctandliveprefs","l":"plugins.core.loupedeckctandlive.prefs","p":["Preferences Panels for Loupedeck CT, Loupedeck Live, Loupedeck Live-S and Razer Stream Controller."]},{"l":"API Overview","p":["buildIconFromLabel","Constructors- API calls which return an object, typically one that offers API methods","defaultIconPath","Functions- API calls offered directly by the extension","generateContent","generateKnobImages","Methods- API calls which can only be made on an object returned by a constructor","new","panelCallback","processEncodedIcon","refreshDevice","renderPanel","setItem","supportedExtensions","updateUI","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"defaultIconPath","p":["Signature","plugins.core.loupedeckctandlive.prefs.defaultIconPath - string","Type","Variable","Description","Default Path where built-in icons are stored"]},{"l":"supportedExtensions","p":["Signature","plugins.core.loupedeckctandlive.prefs.supportedExtensions - string","Type","Variable","Description","Table of supported extensions for Icons."]},{"l":"Functions"},{"l":"buildIconFromLabel","p":["Signature","plugins.core.loupedeckctandlive.prefs:buildIconFromLabel(params) - string","Type","Function","Description","Creates a new icon image from a string.","Parameters","params - A table of parameters.","Returns","A new encoded icon as URL string.","Notes"]},{"l":"processEncodedIcon","p":["Signature","plugins.core.loupedeckctandlive.prefs:processEncodedIcon(icon, controlType) - string","Type","Function","Description","Processes an encoded icon.","Parameters","icon - The encoded icon as URL string or a hs.image object. controlType - The control type as string.","Returns","A new encoded icon as URL string.","Notes"]},{"l":"updateUI","p":["Signature","plugins.core.loupedeckctandlive.prefs:updateUI([params]) - none","Type","Function","Description","Update the Preferences Panel UI.","Parameters","params - A optional table of parameters","Returns","None","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.core.loupedeckctandlive.prefs.new() - Loupedeck","Type","Constructor","Description","Creates a new Loupedeck Preferences panel.","Parameters","deviceType - The device type defined in hs.loupedeck.deviceTypes","Returns","None","Notes","The deviceType should be either hs.loupedeck.deviceTypes.LIVE or hs.loupedeck.deviceTypes.CT."]},{"l":"Methods"},{"l":"generateContent","p":["Signature","plugins.core.loupedeckctandlive.prefs:generateContent() - string","Type","Method","Description","Generates the Preference Panel HTML Content.","Parameters","None","Returns","HTML content as string","Notes"]},{"l":"generateKnobImages","p":["Signature","plugins.core.loupedeckctandlive.prefs:generateKnobImages(app, bank, id) - none","Type","Method","Description","Generates a combined image for all the knobs on a single side. Which side is generated is determined by the knob id.","Parameters","app - The application bundle ID as a string. bank - The bank as a string. id - The knob ID as a string.","Returns","None","Notes"]},{"l":"panelCallback","p":["Signature","plugins.core.loupedeckctandlive.prefs:panelCallback(id, params) - none","Type","Method","Description","JavaScript Callback for the Preferences Panel","Parameters","id - ID as string params - Table of paramaters","Returns","None","Notes"]},{"l":"refreshDevice","p":["Signature","plugins.core.loupedeckctandlive.prefs:refreshDevice() - none","Type","Method","Description","Refreshes the currently selected Loupedeck Device.","Parameters","None","Returns","Notes"]},{"l":"renderPanel","p":["Signature","plugins.core.loupedeckctandlive.prefs:renderPanel(context) - none","Type","Method","Description","Generates the Preference Panel HTML Content.","Parameters","context - Table of data that you want to share with the renderer","Returns","HTML content as string","Notes"]},{"l":"setItem","p":["Signature","plugins.core.loupedeckctandlive.prefs:setItem(app, bank, controlType, id, valueA, valueB) - none","Type","Method","Description","Update the Loupedeck CT layout file.","Parameters","app - The application bundle ID as a string bank - The bank ID as a string controlType - The control type as a string id - The ID of the item as a string valueA - The value of the item as a string valueB - An optional value","Returns","None","Notes"]}],[{"i":"pluginscoreloupedeckplugin","l":"plugins.core.loupedeckplugin","p":["General/macOS Loupedeck Plugin Actions"]},{"l":"Submodules","p":["plugins.core.loupedeckplugin.manager","plugins.core.loupedeckplugin.prefs"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoreloupedeckpluginmanager","l":"plugins.core.loupedeckplugin.manager","p":["Loupedeck Plugin Manager Plugin."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","enabled","favourites","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","installPlugin","NUMBER_OF_FAVOURITES","performAction","registerAction","removePlugin","requestKeywordShortcuts","sendMessage","setEnabled","startWebSocketClient","stopWebSocketClient","updatePlugin","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"NUMBER_OF_FAVOURITES","p":["Signature","plugins.core.loupedeckplugin.manager.NUMBER_OF_FAVOURITES - number","Type","Constant","Description","Number of favourites"]},{"l":"Variables"},{"l":"favourites","p":["Signature","plugins.core.loupedeckplugin.manager.favourites cp.prop: table","Type","Variable","Description","A cp.prop that that contains all the Monogram Favourites."]},{"l":"performAction","p":["Signature","plugins.core.loupedeckplugin.manager.performAction - table","Type","Variable","Description","A table of actions that are triggered by the callback function."]},{"l":"Functions"},{"l":"installPlugin","p":["Signature","plugins.core.loupedeckplugin.manager.installPlugin() - boolean","Type","Function","Description","Installs the Loupedeck Plugin.","Parameters","None","Returns","true if successful otherwise false if fails.","Notes"]},{"l":"registerAction","p":["Signature","plugins.core.loupedeckplugin.manager.registerAction(name, fn) - none","Type","Function","Description","Registers a new Loupedeck Plugin Action.","Parameters","name - The name of the action. fn - The function to trigger.","Returns","None","Notes"]},{"l":"removePlugin","p":["Signature","plugins.core.loupedeckplugin.manager.removePlugin() - boolean","Type","Function","Description","Removes the Loupedeck Plugin.","Parameters","None","Returns","Will always return true.","Notes"]},{"l":"requestKeywordShortcuts","p":["Signature","plugins.core.loupedeckplugin.manager.requestKeywordShortcuts(data) - none","Type","Function","Description","Triggered when the Loupedeck Service requests a JSON of commands","Parameters","None","Returns","Notes"]},{"l":"sendMessage","p":["Signature","plugins.core.loupedeckplugin.manager.sendMessage(message) - none","Type","Function","Description","Sends a websocket message.","Parameters","message - The message to send","Returns","None","Notes"]},{"l":"setEnabled","p":["Signature","plugins.core.loupedeckplugin.manager.setEnabled(enabled) - none","Type","Function","Description","Enables or disables Loupedeck Plugin Support.","Parameters","enabled - A boolean","Returns","true if Loupedeck Plugin support is enabled, otherwise false","Notes"]},{"l":"startWebSocketClient","p":["Signature","plugins.core.loupedeckplugin.manager.startWebSocketClient() - none","Type","Function","Description","Starts the WebSocket Client.","Parameters","None","Returns","Notes"]},{"l":"stopWebSocketClient","p":["Signature","plugins.core.loupedeckplugin.manager.stopWebSocketClient() - none","Type","Function","Description","Stops the WebSocket Client.","Parameters","None","Returns","Notes"]},{"l":"updatePlugin","p":["Signature","plugins.core.loupedeckplugin.manager.updatePlugin() - none","Type","Function","Description","Updates the Loupedeck Plugin.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"enabled","p":["Signature","plugins.core.loupedeckplugin.manager.enabled cp.prop: boolean","Type","Field","Description","Enable or disable Monogram Support."]}],[{"i":"pluginscoreloupedeckpluginprefs","l":"plugins.core.loupedeckplugin.prefs","p":["Loupedeck Plugin Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoreloupedeckplusprefs","l":"plugins.core.loupedeckplus.prefs","p":["Loupedeck+ Preferences Panel"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","lastApplication","lastBank","lastExportPath","lastImportPath","lastIsButton","lastLabel","lastNote"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"lastApplication","p":["Signature","plugins.core.loupedeckplus.prefs.lastApplication cp.prop: string","Type","Field","Description","Last application used in the Preferences Drop Down."]},{"l":"lastBank","p":["Signature","plugins.core.loupedeckplus.prefs.lastBank cp.prop: string","Type","Field","Description","Last bank used in the Preferences Drop Down."]},{"l":"lastExportPath","p":["Signature","plugins.core.loupedeckplus.prefs.lastExportPath cp.prop: string","Type","Field","Description","Last Export path."]},{"l":"lastImportPath","p":["Signature","plugins.core.loupedeckplus.prefs.lastImportPath cp.prop: string","Type","Field","Description","Last Import path."]},{"l":"lastIsButton","p":["Signature","plugins.core.loupedeckplus.prefs.lastIsButton cp.prop: boolean","Type","Field","Description","Whether or not the last selected item in the Preferences was a button."]},{"l":"lastLabel","p":["Signature","plugins.core.loupedeckplus.prefs.lastLabel cp.prop: string","Type","Field","Description","Last label used in the Preferences panel."]},{"l":"lastNote","p":["Signature","plugins.core.loupedeckplus.prefs.lastNote cp.prop: string","Type","Field","Description","Last note used in the Preferences panel."]}],[{"i":"pluginscoremacosshortcuts","l":"plugins.core.macosshortcuts","p":["Adds actions for macOS Monterey Shortcuts."]},{"l":"Submodules","p":["plugins.core.macosshortcuts.preferences"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoremacosshortcutspreferences","l":"plugins.core.macosshortcuts.preferences","p":["macOS Shortcuts Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoremenumanager","l":"plugins.core.menu.manager","p":["Menu Manager Plugin."]},{"l":"Submodules","p":["plugins.core.menu.manager.section"]},{"l":"API Overview","p":["Variables- Configurable values","rootSection","titleSuffix","Functions- API calls offered directly by the extension","addSection","addTitleSuffix","disable","enable","generateMenuTable","init","updateMenubarIcon","Fields- Variables which can only be accessed from an object returned by a constructor","displayMenubarAsIcon"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"rootSection","p":["Signature","plugins.core.menu.manager.rootSection() - section","Type","Variable","Description","A new Root Section"]},{"l":"titleSuffix","p":["Signature","plugins.core.menu.manager.titleSuffix() - table","Type","Variable","Description","Table of Title Suffix's"]},{"l":"Functions"},{"l":"addSection","p":["Signature","plugins.core.menu.manager.addSection(priority) - section","Type","Function","Description","Creates a new menu section, which can have items and sub-menus added to it.","Parameters","priority - The priority order of menu items created in the section relative to other sections.","Returns","section - The section that was created.","Notes"]},{"l":"addTitleSuffix","p":["Signature","plugins.core.menu.manager.addTitleSuffix(fnTitleSuffix)","Type","Function","Description","Allows you to add a custom Suffix to the Menubar Title","Parameters","fnTitleSuffix - A function that returns a single string","Returns","None","Notes"]},{"l":"disable","p":["Signature","plugins.core.menu.manager.disable(priority) - menubaritem","Type","Function","Description","Removes the menu from the system menu bar.","Parameters","None","Returns","the menubaritem","Notes"]},{"l":"enable","p":["Signature","plugins.core.menu.manager.enable(priority) - menubaritem","Type","Function","Description","Returns the previously removed menu back to the system menu bar.","Parameters","None","Returns","the menubaritem","Notes"]},{"l":"generateMenuTable","p":["Signature","plugins.core.menu.manager.generateMenuTable()","Type","Function","Description","Generates the Menu Table","Parameters","None","Returns","The Menu Table","Notes"]},{"l":"init","p":["Signature","plugins.core.menu.manager.init() - none","Type","Function","Description","Initialises the module.","Parameters","None","Returns","Notes"]},{"l":"updateMenubarIcon","p":["Signature","plugins.core.menu.manager.updateMenubarIcon(priority) - none","Type","Function","Description","Updates the Menubar Icon","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"displayMenubarAsIcon","p":["Signature","plugins.core.menu.manager.displayMenubarAsIcon cp.prop: boolean","Type","Field","Description","If true, the menubar item will be the app icon. If not, it will be the app name."]}],[{"i":"pluginscoremenumanagersection","l":"plugins.core.menu.manager.section","p":["Controls sections for the CommandPost menu."]},{"l":"API Overview","p":["addApplicationHeading","addHeading","addItem","addItems","addMenu","addSection","addSeparator","Constants- Useful values which cannot be changed","DEFAULT_PRIORITY","generateTable","getDisabledPreferenceKey","isApplicationHeading","isDisabled","Methods- API calls which can only be made on an object returned by a constructor","new","SECTION_DISABLED_PREFERENCES_KEY_PREFIX","setDisabledFn","setDisabledPreferenceKey"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_PRIORITY","p":["Signature","plugins.core.menu.manager.section.DEFAULT_PRIORITY - number","Type","Constant","Description","The default priority"]},{"l":"SECTION_DISABLED_PREFERENCES_KEY_PREFIX","p":["Signature","plugins.core.menu.manager.section.SECTION_DISABLED_PREFERENCES_KEY_PREFIX - string","Type","Constant","Description","The preferences key prefix for a disabled section."]},{"l":"Methods"},{"l":"addApplicationHeading","p":["Signature","plugins.core.menu.manager.section:addApplicationHeading(title) - section","Type","Method","Description","Adds a heading to the top of the section.","Parameters","title - The title of the Application Heading.","Returns","section - The new section that was created.","Notes"]},{"l":"addHeading","p":["Signature","plugins.core.menu.manager.section:addHeading(title) - section","Type","Method","Description","Adds a heading to the top of a section.","Parameters","title - The title of the heading.","Returns","section - The new section that was created.","Notes"]},{"l":"addItem","p":["Signature","plugins.core.menu.manager.section:addItem(priority, itemFn) - section","Type","Method","Description","Registers a function which will generate a single table item.","Parameters","priority- The priority of the item within the section. Lower numbers appear first. itemFn- A function which will return a table representing a single menu item. See hs.menubar for details.","Returns","section - The section the item was added to.","Notes"]},{"l":"addItems","p":["Signature","plugins.core.menu.manager.section:addItems(priority, itemsFn) - section","Type","Method","Description","Registers a function which will generate multiple table items.","Parameters","priority- The priority of the items within the section. Lower numbers appear first. itemsFn- A function which will return a table containing multiple table items. See hs.menubar for details.","Returns","section - The section the item was added to.","Notes"]},{"l":"addMenu","p":["Signature","plugins.core.menu.manager.section:addMenu(priority, titleFn) - section","Type","Method","Description","Adds a new sub-menu with the specified priority. The section that will contain the items in the menu is returned.","Parameters","priority- The priority of the item within the section. Lower numbers appear first. titleFn- The function which will return the menu title.","Returns","section - The new section that was created.","Notes"]},{"l":"addSection","p":["Signature","plugins.core.menu.manager.section:addSection(priority) - section","Type","Method","Description","Adds a new sub-section with the specified priority. The new sub-section is returned.","Parameters","priority- The priority of the item within the section. Lower numbers appear first.","Returns","section - The new section that was created.","Notes"]},{"l":"addSeparator","p":["Signature","plugins.core.menu.manager.section:addSeparator(priority) - section","Type","Method","Description","Adds a new seperator with specified priority.","Parameters","priority- The priority of the items within the section. Lower numbers appear first.","Returns","section - The new section that was created.","Notes"]},{"l":"generateTable","p":["Signature","plugins.core.menu.manager.section:generateTable() - table","Type","Method","Description","Generates a new menu table based on the registered items and sections inside this section.","Parameters","None","Returns","table- The menu table for this section. See hs.menubar for details on the format.","Notes"]},{"l":"getDisabledPreferenceKey","p":["Signature","plugins.core.menu.manager.section:getDisabledPreferenceKey() - string","Type","Method","Description","Gets the disabled preferences key.","Parameters","None","Returns","true if the section has a disabled preferences key defined, otherwise false.","Notes"]},{"l":"isApplicationHeading","p":["Signature","plugins.core.menu.manager.section:isApplicationHeading() - boolean","Type","Method","Description","Does this section contain an application heading?","Parameters","None","Returns","true if it does contain an application heading, otherwise false.","Notes"]},{"l":"isDisabled","p":["Signature","plugins.core.menu.manager.section:isDisabled() - boolean","Type","Method","Description","Gets the disabled status","Parameters","None","Returns","true if the section is disabled, otherwise false","Notes"]},{"l":"new","p":["Signature","plugins.core.menu.manager.section:new() - section","Type","Method","Description","Creates a new menu section, which can have items and sub-menus added to it.","Parameters","None","Returns","section - The section that was created.","Notes"]},{"l":"setDisabledFn","p":["Signature","plugins.core.menu.manager.section:setDisabledFn(disabledFn) - self","Type","Method","Description","Sets the Disabled Function","Parameters","disabledFn - The disabled function.","Returns","Self","Notes"]},{"l":"setDisabledPreferenceKey","p":["Signature","plugins.core.menu.manager.section:setDisabledPreferenceKey(key) - self","Type","Method","Description","Sets the Disabled Preferences Key.","Parameters","key - A string which contains the unique preferences key.","Returns","Self","Notes"]}],[{"i":"pluginscoremenumenuaction","l":"plugins.core.menu.menuaction","p":["Add actions that allow you to trigger the menubar items from any application.","Specials thanks to @asmagill for his amazing work with coroutine support."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoremidimanager","l":"plugins.core.midi.manager","p":["MIDI Manager Plugin."]},{"l":"Submodules","p":["plugins.core.midi.manager.controls"]},{"l":"API Overview","p":["activeBanks","activeLoupedeckBanks","activeLoupedeckPlusBanks","defaultLayout","defaultLoupedeckLayout","defaultLoupedeckPlusLayout","devices","displayMessageWhenChangingBanks","enabled","enabledLoupedeck","enabledLoupedeckPlus","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getDevice","getItem","ignoreEverySecondControlDialCommand","ignoreEverySecondP1ToP8WheelCommand","lastActiveBundleID","learningMode","maxItems","numberOfMidiDevices","start","stop","update","Variables- Configurable values","virtualDevices"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"defaultLayout","p":["Signature","plugins.core.midi.manager.defaultLayout - table","Type","Variable","Description","Default MIDI Layout"]},{"l":"defaultLoupedeckLayout","p":["Signature","plugins.core.midi.manager.defaultLoupedeckLayout - table","Type","Variable","Description","Default Loupedeck Layout"]},{"l":"defaultLoupedeckPlusLayout","p":["Signature","plugins.core.midi.manager.defaultLoupedeckPlusLayout - table","Type","Variable","Description","Default Loupedeck+ Layout"]},{"l":"lastActiveBundleID","p":["Signature","plugins.core.midi.manager.lastActiveBundleID - string","Type","Variable","Description","The last Active Bundle ID. Used for AudioSwift workaround."]},{"l":"learningMode","p":["Signature","plugins.core.midi.manager.learningMode - boolean","Type","Variable","Description","Whether or not the MIDI Manager is in learning mode."]},{"l":"maxItems","p":["Signature","plugins.core.midi.manager.maxItems - number","Type","Variable","Description","The maximum number of MIDI items per bank."]},{"l":"Functions"},{"l":"devices","p":["Signature","plugins.core.midi.manager.devices() - table","Type","Function","Description","Gets a table of Physical MIDI Device Names.","Parameters","None","Returns","A table of Physical MIDI Device Names.","Notes"]},{"l":"getDevice","p":["Signature","plugins.core.midi.manager.getDevice(deviceName, virtual) - hs.midi object | nil","Type","Function","Description","Gets a MIDI Device.","Parameters","deviceName - The device name. virtual - A boolean that defines whether or not the device is virtual.","Returns","A hs.midi object or nil if no MIDI device by that name exists.","Notes"]},{"l":"getItem","p":["Signature","plugins.core.midi.manager.getItem(item, button, group) - table","Type","Function","Description","Gets a MIDI item from Preferences.","Parameters","item - The item you want to get. button - Button ID as string group - Group ID as string","Returns","A table otherwise nil","Notes"]},{"l":"start","p":["Signature","plugins.core.midi.manager.start() - boolean","Type","Function","Description","Starts the MIDI Plugin","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","plugins.core.midi.manager.stop() - boolean","Type","Function","Description","Stops the MIDI Plugin","Parameters","None","Returns","Notes"]},{"l":"update","p":["Signature","plugins.core.midi.manager.update() - none","Type","Function","Description","Updates the MIDI Watchers.","Parameters","None","Returns","Notes"]},{"l":"virtualDevices","p":["Signature","plugins.core.midi.manager.virtualDevices() - table","Type","Function","Description","Gets a table of Virtual MIDI Source Names.","Parameters","None","Returns","A table of Virtual MIDI Source Names.","Notes"]},{"l":"Fields"},{"l":"activeBanks","p":["Signature","plugins.core.midi.manager.activeBanks cp.prop: table","Type","Field","Description","Table of active banks for each application."]},{"l":"activeLoupedeckBanks","p":["Signature","plugins.core.midi.manager.activeLoupedeckBanks cp.prop: table","Type","Field","Description","Table of active banks for each application."]},{"l":"activeLoupedeckPlusBanks","p":["Signature","plugins.core.midi.manager.activeLoupedeckPlusBanks cp.prop: table","Type","Field","Description","Table of active banks for each application."]},{"l":"displayMessageWhenChangingBanks","p":["Signature","plugins.core.midi.manager.displayMessageWhenChangingBanks cp.prop: boolean","Type","Field","Description","Display message when changing banks?"]},{"l":"enabled","p":["Signature","plugins.core.midi.manager.enabled cp.prop: boolean","Type","Field","Description","Enable or disable MIDI Support."]},{"l":"enabledLoupedeck","p":["Signature","plugins.core.midi.manager.enabledLoupedeck cp.prop: boolean","Type","Field","Description","Enable or disable MIDI Loupedeck Support."]},{"l":"enabledLoupedeckPlus","p":["Signature","plugins.core.midi.manager.enabledLoupedeckPlus cp.prop: boolean","Type","Field","Description","Enable or disable MIDI Loupedeck+ Support."]},{"l":"ignoreEverySecondControlDialCommand","p":["Signature","plugins.core.midi.manager.ignoreEverySecondControlDialCommand cp.prop: boolean","Type","Field","Description","A preference for ignoring double actions when turning the Control Dial"]},{"l":"ignoreEverySecondP1ToP8WheelCommand","p":["Signature","plugins.core.midi.manager.ignoreEverySecondP1ToP8WheelCommand cp.prop: boolean","Type","Field","Description","A preference for ignoring double actions when turning a P1 to P8 wheel."]},{"l":"numberOfMidiDevices","p":["Signature","plugins.core.midi.manager.numberOfMidiDevices - cp.prop: number","Type","Field","Description","Total number of MIDI Devices detected (including both physical and virtual)."]}],[{"i":"pluginscoremidimanagercontrols","l":"plugins.core.midi.manager.controls","p":["MIDI Manager Controls."]},{"l":"API Overview","p":["Variables- Configurable values","controls","Functions- API calls offered directly by the extension","allGroups","Methods- API calls which can only be made on an object returned by a constructor","get","getAll","id","new","params"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"controls","p":["Signature","plugins.core.midi.manager.controls - table","Type","Variable","Description"]},{"l":"Functions"},{"l":"allGroups","p":["Signature","plugins.core.midi.manager.controls.allGroups() - table","Type","Function","Description","Returns a table containing all of the control groups.","Parameters","None","Returns","Table","Notes"]},{"l":"Methods"},{"l":"get","p":["Signature","plugins.core.midi.manager.controls:get(id) - table","Type","Method","Description","Gets a MIDI control.","Parameters","id- The unique ID for the widget you want to return.","Returns","table containing the widget","Notes"]},{"l":"getAll","p":["Signature","plugins.core.midi.manager.controls:getAll() - table","Type","Method","Description","Returns all of the created controls.","Parameters","None","Returns","table containing all of the created callbacks","Notes"]},{"l":"id","p":["Signature","plugins.core.midi.manager.controls:id() - string","Type","Method","Description","Returns the ID of the control.","Parameters","None","Returns","The ID of the widget as a string","Notes"]},{"l":"new","p":["Signature","plugins.core.midi.manager.controls:new(id, params) - table","Type","Method","Description","Creates a new MIDI control.","Parameters","id - The unique ID for this widget. params - A table of parameters for the MIDI control.","Returns","table that has been created","Notes","The parameters table should include: group - The group as a string (i.e. \"fcpx\") text - The name of the control as it will appear in the Console subText - The subtext of the control as it will appear in the Console fn - The callback function. This functions should accept one parameter which contains all the MIDI callback metadata."]},{"l":"params","p":["Signature","plugins.core.midi.manager.controls:params() - function","Type","Method","Description","Returns the paramaters of the control.","Parameters","None","Returns","The paramaters of the widget","Notes"]}],[{"i":"pluginscoremidiprefs","l":"plugins.core.midi.prefs","p":["MIDI Preferences Panel"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","lastApplication","lastBank","lastExportPath","lastImportPath","scrollBarPosition"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"lastApplication","p":["Signature","plugins.core.midi.prefs.lastApplication cp.prop: string","Type","Field","Description","Last application used in the Preferences Drop Down."]},{"l":"lastBank","p":["Signature","plugins.core.midi.prefs.lastBank cp.prop: string","Type","Field","Description","Last bank used in the Preferences Drop Down."]},{"l":"lastExportPath","p":["Signature","plugins.core.midi.prefs.lastExportPath cp.prop: string","Type","Field","Description","Last Export path."]},{"l":"lastImportPath","p":["Signature","plugins.core.midi.prefs.lastImportPath cp.prop: string","Type","Field","Description","Last Import path."]},{"l":"scrollBarPosition","p":["Signature","plugins.core.midi.prefs.scrollBarPosition cp.prop: table","Type","Field","Description","Scroll Bar Position"]}],[{"i":"pluginscoremonogrammanager","l":"plugins.core.monogram.manager","p":["Monogram Manager Plugin."]},{"l":"API Overview","p":["automaticProfileSwitching","changeContext","Constants- Useful values which cannot be changed","enabled","favourites","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","lastPort","launchCreatorBundle","NUMBER_OF_FAVOURITES","performAction","plugins","registerAction","registerPlugin","setEnabled","sign","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"NUMBER_OF_FAVOURITES","p":["Signature","plugins.core.monogram.manager.NUMBER_OF_FAVOURITES - number","Type","Constant","Description","Number of favourites"]},{"l":"Variables"},{"l":"favourites","p":["Signature","plugins.core.monogram.manager.favourites cp.prop: table","Type","Variable","Description","A cp.prop that that contains all the Monogram Favourites."]},{"l":"lastPort","p":["Signature","plugins.core.monogram.manager.lastPort - number","Type","Variable","Description","The port that Monogram Creator used to connect to CommandPost."]},{"l":"performAction","p":["Signature","plugins.core.monogram.manager.performAction - table","Type","Variable","Description","A table of actions that are triggered by the callback function."]},{"l":"plugins","p":["Signature","plugins.core.monogram.manager.plugins - table","Type","Variable","Description","A table of Monogram plugins to install."]},{"l":"Functions"},{"l":"changeContext","p":["Signature","plugins.core.monogram.manager.changeContext(context) - none","Type","Function","Description","Switches the Monogram Profile.","Parameters","context - The name of the context you want to switch to.","Returns","None","Notes"]},{"l":"launchCreatorBundle","p":["Signature","plugins.core.monogram.manager.launchCreatorBundle() - none","Type","Function","Description","Launch the Monogram Creator.","Parameters","None","Returns","Notes"]},{"l":"registerAction","p":["Signature","plugins.core.monogram.manager.registerAction(name, fn) - none","Type","Function","Description","Registers a new Monogram Action.","Parameters","name - The name of the plugin. fn - The function to trigger.","Returns","None","Notes"]},{"l":"registerPlugin","p":["Signature","plugins.core.monogram.manager.registerPlugin(name, path) - none","Type","Function","Description","Registers a new Monogram plugin.","Parameters","name - The name of the plugin. path - The path to the folder containing the plugin.","Returns","None","Notes"]},{"l":"setEnabled","p":["Signature","plugins.core.monogram.manager.setEnabled(enabled) - none","Type","Function","Description","Enables or disables Monogram Support.","Parameters","enabled - A boolean","Returns","true if Monogram support is enabled, otherwise false","Notes"]},{"l":"sign","p":["Signature","plugins.core.monogram.manager.sign() - none","Type","Function","Description","Signs all the Monogram Integrations.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"automaticProfileSwitching","p":["Signature","plugins.core.monogram.manager.automaticProfileSwitching cp.prop: boolean","Type","Field","Description","Enable or disable Automatic Profile Switching"]},{"l":"enabled","p":["Signature","plugins.core.monogram.manager.enabled cp.prop: boolean","Type","Field","Description","Enable or disable Monogram Support."]}],[{"i":"pluginscoremonogramprefs","l":"plugins.core.monogram.prefs","p":["Monogram Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoremouse","l":"plugins.core.mouse","p":["Adds mouse actions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorepasteboardhistory","l":"plugins.core.pasteboard.history","p":["Adds text pasteboard history actions to the Search Console."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorepreferencesgeneral","l":"plugins.core.preferences.general","p":["General Preferences Panel."]},{"l":"API Overview","p":["Variables- Configurable values","dragAndDropFileActions","dragAndDropTextActions","openDebugConsoleOnDockClick","Functions- API calls offered directly by the extension","registerDragAndDropFileAction","registerDragAndDropTextAction","Fields- Variables which can only be accessed from an object returned by a constructor","autoLaunch","dockIcon","dragAndDropFileAction","dragAndDropTextAction"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"dragAndDropFileActions","p":["Signature","plugins.core.preferences.general.dragAndDropFileActions - table","Type","Variable","Description","A table of registered Drag & Drop File Actions."]},{"l":"dragAndDropTextActions","p":["Signature","plugins.core.preferences.general.dragAndDropTextActions - table","Type","Variable","Description","A table of registered Drag & Drop Text Actions."]},{"l":"openDebugConsoleOnDockClick","p":["Signature","plugins.core.preferences.general.openDebugConsoleOnDockClick cp.prop: boolean","Type","Variable","Description","Open Error Log on Dock Icon Click."]},{"l":"Functions"},{"l":"registerDragAndDropFileAction","p":["Signature","plugins.core.preferences.general.registerDragAndDropFileAction(id, label, fn) - none","Type","Function","Description","Registers a new Drag & Drop File Action.","Parameters","id - A unique identifier as a string label - The label that should be display in the user interface fn - A callback function","Returns","None","Notes"]},{"l":"registerDragAndDropTextAction","p":["Signature","plugins.core.preferences.general.registerDragAndDropTextAction(id, label, fn) - none","Type","Function","Description","Registers a new Drag & Drop Text Action.","Parameters","id - A unique identifier as a string label - The label that should be display in the user interface fn - A callback function","Returns","None","Notes"]},{"l":"Fields"},{"l":"autoLaunch","p":["Signature","plugins.core.preferences.general.autoLaunch cp.prop: boolean","Type","Field","Description","Controls if CommandPost will automatically upload crash data to the developer."]},{"l":"dockIcon","p":["Signature","plugins.core.preferences.general.dockIcon cp.prop: boolean","Type","Field","Description","Controls whether or not CommandPost should show a dock icon."]},{"l":"dragAndDropFileAction","p":["Signature","plugins.core.preferences.general.dragAndDropFileAction cp.prop: string","Type","Field","Description","Which Drag & Drop File Action is enabled?"]},{"l":"dragAndDropTextAction","p":["Signature","plugins.core.preferences.general.dragAndDropTextAction cp.prop: string","Type","Field","Description","Which Drag & Drop Text Action is enabled?"]}],[{"i":"pluginscorepreferencesmanager","l":"plugins.core.preferences.manager","p":["Manager for the CommandPost Preferences Window."]},{"l":"Submodules","p":["plugins.core.preferences.manager.panel"]},{"l":"API Overview","p":["_handlers","_panels","addHandler","addPanel","Constants- Useful values which cannot be changed","currentPanelID","DEFAULT_HEIGHT","DEFAULT_WIDTH","focus","Functions- API calls offered directly by the extension","getHandler","getLabel","getWebview","hide","init","injectScript","lastTab","maxPanelHeight","new","position","refresh","selectPanel","setPanelRenderer","show","Variables- Configurable values","WEBVIEW_LABEL"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_HEIGHT","p":["Signature","plugins.core.preferences.manager.DEFAULT_HEIGHT - number","Type","Constant","Description","Default Height of Preferences Window"]},{"l":"DEFAULT_WIDTH","p":["Signature","plugins.core.preferences.manager.DEFAULT_WIDTH - number","Type","Constant","Description","Default Width of Preferences Window"]},{"l":"lastTab","p":["Signature","plugins.core.preferences.manager.lastTab","Type","Constant","Description","Returns the last tab saved in settings."]},{"l":"position","p":["Signature","plugins.core.preferences.manager.position","Type","Constant","Description","Returns the last frame saved in settings."]},{"l":"WEBVIEW_LABEL","p":["Signature","plugins.core.preferences.manager.WEBVIEW_LABEL - string","Type","Constant","Description","The WebView Label"]},{"l":"Variables"},{"l":"_handlers","p":["Signature","plugins.core.preferences.manager._handlers - table","Type","Variable","Description","Table containing handlers."]},{"l":"_panels","p":["Signature","plugins.core.preferences.manager._panels - table","Type","Variable","Description","Table containing panels."]},{"l":"Functions"},{"l":"addHandler","p":["Signature","plugins.core.preferences.manager.addHandler(id, handlerFn) - string","Type","Function","Description","Adds a Handler","Parameters","id - The ID handlerFn - the handler function","Returns","Nothing","Notes"]},{"l":"addPanel","p":["Signature","plugins.core.preferences.manager.addPanel(params) - plugins.core.preferences.manager.panel","Type","Function","Description","Adds a new panel with the specified params to the preferences manager.","Parameters","params- The parameters table. Details below.","Returns","The new panel instance.","Notes","The params can have the following properties. The priority and id and properties are required.** priority- An integer value specifying the priority of the panel compared to others.** id- A string containing the unique ID of the panel.** label- The human-readable label for the panel icon.** image- The hs.image for the panel icon.** tooltip- The human-readable details for the toolbar icon when the mouse is hovering over it.** closeFn- A callback function that's triggered when the Preferences window is closed."]},{"l":"currentPanelID","p":["Signature","plugins.core.preferences.manager.currentPanelID() - string","Type","Function","Description","Returns the panel ID with the highest priority.","Parameters","None","Returns","The panel ID as a string","Notes"]},{"l":"focus","p":["Signature","plugins.core.preferences.manager.focus() - boolean","Type","Function","Description","Puts focus on the Preferences Window.","Parameters","None","Returns","true if successful or otherwise false.","Notes"]},{"l":"getHandler","p":["Signature","plugins.core.preferences.manager.getHandler(id) - string","Type","Function","Description","Returns the handler for a given ID.","Parameters","id - The ID","Returns","Table","Notes"]},{"l":"getLabel","p":["Signature","plugins.core.preferences.manager.getLabel() - string","Type","Function","Description","Returns the Webview label.","Parameters","None","Returns","The Webview label as a string.","Notes"]},{"l":"getWebview","p":["Signature","plugins.core.preferences.manager.getWebview() - hs.webview","Type","Function","Description","Returns the Webview of the Preferences Window.","Parameters","None","Returns","A hs.webview","Notes"]},{"l":"hide","p":["Signature","plugins.core.preferences.manager.hide() - none","Type","Function","Description","Hides the Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"init","p":["Signature","plugins.core.preferences.manager.init() - nothing","Type","Function","Description","Initialises the preferences panel.","Parameters","None","Returns","Nothing","Notes"]},{"l":"injectScript","p":["Signature","plugins.core.preferences.manager.injectScript(script) - none","Type","Function","Description","Injects JavaScript into the Preferences Webview.","Parameters","script - The JavaScript code you want to inject in the form of a string.","Returns","None","Notes"]},{"l":"maxPanelHeight","p":["Signature","plugins.core.preferences.manager.maxPanelHeight() - number","Type","Function","Description","Returns the maximum size defined by a panel.","Parameters","None","Returns","The maximum panel height.","Notes"]},{"l":"new","p":["Signature","plugins.core.preferences.manager.new() - none","Type","Function","Description","Creates a new Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"refresh","p":["Signature","plugins.core.preferences.manager.refresh() - none","Type","Function","Description","Refreshes the Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"selectPanel","p":["Signature","plugins.core.preferences.manager.selectPanel(id) - none","Type","Function","Description","Selects a Preferences Panel.","Parameters","id - the ID of the panel you want to select.","Returns","None","Notes"]},{"l":"setPanelRenderer","p":["Signature","plugins.core.preferences.manager.setPanelRenderer(renderer) - none","Type","Function","Description","Sets a Panel Renderer","Parameters","renderer - The renderer","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.core.preferences.manager.show([panelID]) - boolean","Type","Function","Description","Shows the Preferences Window","Parameters","[panelID] - An optional panel ID","Returns","True if successful or nil if an error occurred","Notes"]}],[{"i":"pluginscorepreferencesmanagerpanel","l":"plugins.core.preferences.manager.panel","p":["CommandPost Preferences Panel."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","addButton","addCheckbox","addContent","addHandler","addHeading","addParagraph","addPassword","addSelect","addTextbox","getToolbarItem"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.core.preferences.manager.panel.new(params, manager) - cp.core.preferences.manager.panel","Type","Constructor","Description","Constructs a new panel with the specified priority and ID.","Parameters","params - Table of parameters manager - The manager","Returns","A cp.core.preferences.manager.panel object","Notes"]},{"l":"Methods"},{"l":"addButton","p":["Signature","plugins.core.preferences.manager.panel:addButton(params) - panel","Type","Method","Description","Adds a button to the panel.","Parameters","params - The list of parameters.","Returns","The same panel.","Notes","The params table may contain:** id- (optional) the unique ID for the button. If none is provided, one is generated.** value- The value of the button. This is sent to the onclick function.** label- The text label for the button. Defaults to the value if not provided.** width- The width of the button in pixels.** onclick- the function to execute when the button is clicked. The function should have the signature of function(id, value), where id is the id of the button that was clicked, and value is the value of the button."]},{"l":"addCheckbox","p":["Signature","plugins.core.preferences.manager.panel:addCheckbox(priority, params) - panel","Type","Method","Description","Adds a checkbox to the panel with the specified priority and params.","Parameters","priority- The priority number for the checkbox. params- The set of parameters for the checkbox.","Returns","The panel.","Notes","The params can contain the following fields:** id- (optional) The unique ID. If none is provided, one will be generated.** name- (optional) The name of the checkbox field.** label- (optional) The text label to display after the checkbox.** onchange- (optional) a function that will get called when the checkbox value changes. It will be passed two parameters, id and params, the latter of which is a table containing the value and checked values of the checkbox.** class- (optional) the CSS class list to apply to the checkbox."]},{"l":"addContent","p":["Signature","plugins.core.preferences.manager.panel:addContent(priority, content[, escaped]) - panel","Type","Method","Description","Adds the specified content to the panel, with the specified priority order.","Parameters","priority- the priority order of the content. content- a value that can be converted to a string. escaped- if true, the content will be escaped.","Returns","The panel.","Notes"]},{"l":"addHandler","p":["Signature","plugins.core.preferences.manager.panel:addHandler(event, id, handlerFn, keys) - none","Type","Method","Description","Gets a handler from an Handler ID","Parameters","event - The event id - the Handler ID handlerFn - The Handler function keys - Keys","Returns","None","Notes"]},{"l":"addHeading","p":["Signature","plugins.core.preferences.manager.panel:addHeading(text) - panel","Type","Method","Description","Adds a heading to the panel","Parameters","text - The text of the heading as a string","Returns","The panel object.","Notes"]},{"l":"addParagraph","p":["Signature","plugins.core.preferences.manager.panel:addParagraph(content[, escaped[, class]]) - panel","Type","Method","Description","Adds a Paragraph to the panel","Parameters","content - The content as a string escaped - Whether or not the HTML should be escaped as a boolean. Defaults to true for simple text. class - The class as a string","Returns","The panel object.","Notes"]},{"l":"addPassword","p":["Signature","plugins.core.preferences.manager.panel:addPassword(params) - panel","Type","Method","Description","Adds a password text-box to the panel.","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addSelect","p":["Signature","plugins.core.preferences.manager.panel:addSelect(priority, params) - panel","Type","Method","Description","Adds a select to the panel.","Parameters","priority - Priority of the item as number. params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addTextbox","p":["Signature","plugins.core.preferences.manager.panel:addTextbox(params) - panel","Type","Method","Description","Adds a text-box to the panel","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"getToolbarItem","p":["Signature","plugins.core.preferences.manager.panel:getToolbarItem() - table","Type","Method","Description","Gets the Tool Bar as a table","Parameters","None","Returns","The toolbar item as a table.","Notes"]}],[{"i":"pluginscorepreferencespanelsgeneral","l":"plugins.core.preferences.panels.general","p":["General Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorepreferencespanelsmenubar","l":"plugins.core.preferences.panels.menubar","p":["Menubar Preferences Panel"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","displayMenubarAsIcon","lastGroup","lastIconPath","menubarLabel","showSectionHeadingsInMenubar"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"displayMenubarAsIcon","p":["Signature","plugins.core.preferences.panels.menubar.displayMenubarAsIcon cp.prop: boolean","Type","Field","Description","If true, the menubar item will be the app icon. If not, it will be the app name."]},{"l":"lastGroup","p":["Signature","plugins.core.preferences.panels.menubar.lastGroup cp.prop: string","Type","Field","Description","Last group used in the Preferences Drop Down."]},{"l":"lastIconPath","p":["Signature","plugins.core.preferences.panels.menubar.lastIconPath cp.prop: string","Type","Field","Description","Last Icon path."]},{"l":"menubarLabel","p":["Signature","plugins.core.preferences.panels.menubar.menubarLabel cp.prop: table","Type","Field","Description","The menubar icon."]},{"l":"showSectionHeadingsInMenubar","p":["Signature","plugins.core.preferences.panels.menubar.showSectionHeadingsInMenubar cp.prop: boolean","Type","Field","Description","Show section headings in menubar."]}],[{"i":"pluginscorepreferencespanelsnotifications","l":"plugins.core.preferences.panels.notifications","p":["Notifications Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorepreferencespanelsplugins","l":"plugins.core.preferences.panels.plugins","p":["Plugins Preferences Panel"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","SETTINGS_DISABLED","Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"SETTINGS_DISABLED","p":["Signature","plugins.core.preferences.panels.plugins.SETTINGS_DISABLED","Type","Constant","Description","Plugins Disabled"]},{"l":"Functions"},{"l":"init","p":["Signature","plugins.core.preferences.panels.plugins.init(deps, env) - none","Type","Function","Description","Initialises the module.","Parameters","deps - The plugin dependencies. env - The plugin environment.","Returns","None","Notes"]}],[{"i":"pluginscorepreferencespanelsscripting","l":"plugins.core.preferences.panels.scripting","p":["Scripting Preferences Panel"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","snippets"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"snippets","p":["Signature","plugins.core.preferences.panels.scripting.snippets cp.prop: table","Type","Field","Description"]}],[{"i":"pluginscorepreferencespanelssettings","l":"plugins.core.preferences.panels.settings","p":["Settings Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorepreferencesupdates","l":"plugins.core.preferences.updates","p":["Updates Module."]},{"l":"API Overview","p":["Variables- Configurable values","automaticallyCheckForUpdates"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"automaticallyCheckForUpdates","p":["Signature","plugins.core.preferences.updates.automaticallyCheckForUpdates cp.prop: boolean","Type","Variable","Description","Automatically check for updates?"]}],[{"i":"pluginscorerazerchangeapplications","l":"plugins.core.razer.changeapplications","p":["Allows you to change the Razer application if set to manual."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscorerazermanager","l":"plugins.core.razer.manager","p":["Razer Manager Plugin."]},{"l":"API Overview","p":["activeBanks","automaticallySwitchApplications","backlightBrightness","backlightEffectColorA","backlightEffectColorB","backlightEffectDirection","backlightEffectSpeed","backlightsMode","bankLabels","Constants- Useful values which cannot be changed","defaultLayout","delayUntilRepeat","displayMessageWhenChangingBanks","enabled","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","items","keyRepeat","lastBundleID","manager","refresh","reset","resetTimers","supportedDevices","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"bankLabels","p":["Signature","plugins.core.razer.manager.bankLabels - table","Type","Constant","Description","Table of bank labels, which reflect the LED icons."]},{"l":"supportedDevices","p":["Signature","plugins.core.razer.manager.supportedDevices - table","Type","Constant","Description","Table supported devices."]},{"l":"Variables"},{"l":"defaultLayout","p":["Signature","plugins.core.razer.manager.defaultLayout - table","Type","Variable","Description","Default Loupedeck CT Layout"]},{"l":"manager","p":["Signature","plugins.core.razer.manager - table","Type","Variable","Description","A table of Razer devices."]},{"l":"Functions"},{"l":"refresh","p":["Signature","plugins.core.razer.manager.refresh(trashCache) - none","Type","Function","Description","Refreshes the LEDs on a Razer device.","Parameters","trashCache - an optional boolean to trash the LED cache","Returns","None","Notes"]},{"l":"reset","p":["Signature","plugins.core.razer.manager.reset()","Type","Function","Description","Resets the config back to the default layout.","Parameters","completelyEmpty - A boolean","Returns","None","Notes"]},{"l":"resetTimers","p":["Signature","plugins.core.razer.manager.resetTimers() - none","Type","Function","Description","Resets all the various timers and memories.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"activeBanks","p":["Signature","plugins.core.razer.manager.activeBanks cp.prop: table","Type","Field","Description","Table of active banks for each application."]},{"l":"automaticallySwitchApplications","p":["Signature","plugins.core.razer.manager.automaticallySwitchApplications cp.prop: boolean","Type","Field","Description","Enable or disable the automatic switching of applications."]},{"l":"backlightBrightness","p":["Signature","plugins.core.razer.manager.backlightBrightness cp.prop: table","Type","Field","Description","The backlights brightness for all the Razer devices."]},{"l":"backlightEffectColorA","p":["Signature","plugins.core.razer.manager.backlightEffectColorA cp.prop: table","Type","Field","Description","The backlight effect primary color."]},{"l":"backlightEffectColorB","p":["Signature","plugins.core.razer.manager.backlightEffectColorB cp.prop: table","Type","Field","Description","The backlight effect secondary color."]},{"l":"backlightEffectDirection","p":["Signature","plugins.core.razer.manager.backlightEffectDirection cp.prop: table","Type","Field","Description","The backlight effect direction."]},{"l":"backlightEffectSpeed","p":["Signature","plugins.core.razer.manager.backlightEffectSpeed cp.prop: table","Type","Field","Description","The backlight effect speed."]},{"l":"backlightsMode","p":["Signature","plugins.core.razer.manager.backlightsMode cp.prop: table","Type","Field","Description","The backlights mode for all the Razer devices."]},{"l":"delayUntilRepeat","p":["Signature","plugins.core.razer.manager.delayUntilRepeat cp.prop: string","Type","Field","Description","Delay Until Repeat Preference."]},{"l":"displayMessageWhenChangingBanks","p":["Signature","plugins.core.razer.manager.displayMessageWhenChangingBanks cp.prop: boolean","Type","Field","Description","Display message when changing banks?"]},{"l":"enabled","p":["Signature","plugins.core.razer.manager.enabled cp.prop: boolean","Type","Field","Description","Is Loupedeck CT support enabled?"]},{"l":"items","p":["Signature","plugins.core.razer.manager.items cp.prop: table","Type","Field","Description","Contains all the saved TourBox layouts."]},{"l":"keyRepeat","p":["Signature","plugins.core.razer.manager.keyRepeat cp.prop: string","Type","Field","Description","Key Repeat Preference."]},{"l":"lastBundleID","p":["Signature","plugins.core.razer.manager.lastBundleID cp.prop: table","Type","Field","Description","The last used bundle ID."]}],[{"i":"pluginscorerazerprefs","l":"plugins.core.razer.prefs","p":["Razer Preferences Panel"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","changeBankOnHardwareWhenChangingHere","lastApplication","lastControlID","lastControlType","lastDevice","lastExportPath","lastImportPath","pasteboard"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"changeBankOnHardwareWhenChangingHere","p":["Signature","plugins.core.razer.prefs.changeBankOnHardwareWhenChangingHere cp.prop: boolean","Type","Field","Description","Should we change bank on hardware when changing in preferences?"]},{"l":"lastApplication","p":["Signature","plugins.core.razer.prefs.lastApplication cp.prop: string","Type","Field","Description","Last Bank used in the Preferences Panel."]},{"l":"lastControlID","p":["Signature","plugins.core.razer.prefs.lastControlID cp.prop: string","Type","Field","Description","Last Selected Control ID used in the Preferences Panel."]},{"l":"lastControlType","p":["Signature","plugins.core.razer.prefs.lastControlType cp.prop: string","Type","Field","Description","Last Selected Control Type used in the Preferences Panel."]},{"l":"lastDevice","p":["Signature","plugins.core.razer.prefs.lastDevice cp.prop: string","Type","Field","Description","Last Bank used in the Preferences Panel."]},{"l":"lastExportPath","p":["Signature","plugins.core.razer.prefs.lastExportPath cp.prop: string","Type","Field","Description","Last Export path."]},{"l":"lastImportPath","p":["Signature","plugins.core.razer.prefs.lastImportPath cp.prop: string","Type","Field","Description","Last Import path."]},{"l":"pasteboard","p":["Signature","plugins.core.razer.prefs.pasteboard cp.prop: table","Type","Field","Description"]}],[{"i":"pluginscoresetup","l":"plugins.core.setup","p":["Manager for the CommandPost Setup Screen."]},{"l":"Submodules","p":["plugins.core.setup.panel"]},{"l":"API Overview","p":["addPanel","Constants- Useful values which cannot be changed","currentPanel","DEFAULT_HEIGHT","DEFAULT_TITLE","DEFAULT_WIDTH","delete","enabled","FIRST_PRIORITY","focus","Functions- API calls offered directly by the extension","getLabel","injectScript","LAST_PRIORITY","new","nextPanel","onboardingRequired","position","setPanelRenderer","show","update","Variables- Configurable values","visible"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_HEIGHT","p":["Signature","plugins.core.setup.DEFAULT_HEIGHT - number","Type","Constant","Description","The default panel height."]},{"l":"DEFAULT_TITLE","p":["Signature","plugins.core.setup.DEFAULT_TITLE - string","Type","Constant","Description","The default panel title."]},{"l":"DEFAULT_WIDTH","p":["Signature","plugins.core.setup.DEFAULT_WIDTH - number","Type","Constant","Description","The default panel width."]},{"l":"enabled","p":["Signature","plugins.core.setup.enabled cp.prop: boolean","Type","Constant","Description","Set to true if the manager is enabled. Defaults to false."]},{"l":"FIRST_PRIORITY","p":["Signature","plugins.core.setup.FIRST_PRIORITY - number","Type","Constant","Description","The first panel priority."]},{"l":"LAST_PRIORITY","p":["Signature","plugins.core.setup.LAST_PRIORITY - number","Type","Constant","Description","The last panel priority."]},{"l":"visible","p":["Signature","plugins.core.setup.visible cp.prop: boolean; read-only","Type","Constant","Description","A property indicating if the welcome window is visible on screen."]},{"l":"Variables"},{"l":"onboardingRequired","p":["Signature","plugins.core.setup.onboardingRequired cp.prop: boolean","Type","Variable","Description","Set to true if on-boarding is required otherwise false. Defaults to true."]},{"l":"position","p":["Signature","plugins.core.setup.position cp.prop: table","Type","Variable","Description","The last known position of the Setup Window as a frame."]},{"l":"Functions"},{"l":"addPanel","p":["Signature","plugins.core.setup.addPanel(newPanel) - panel","Type","Function","Description","Adds the new panel to the manager. Panels are created via the plugins.core.setup.panel.new(...) function.","Parameters","newPanel- The panel to add.","Returns","The manager.","Notes","If the Setup Manager is enabled, the window will be displayed immediately when a panel is added."]},{"l":"currentPanel","p":["Signature","plugins.core.setup.currentPanel() - string","Type","Function","Description","The Current Panel","Parameters","None","Returns","The current panel as a string","Notes"]},{"l":"delete","p":["Signature","plugins.core.setup.delete() - none","Type","Function","Description","Deletes the Setup Panels.","Parameters","None","Returns","Notes"]},{"l":"focus","p":["Signature","plugins.core.setup.focus() - none","Type","Function","Description","Focuses on the Setup Panels window.","Parameters","None","Returns","Notes"]},{"l":"getLabel","p":["Signature","plugins.core.setup.getLabel() - string","Type","Function","Description","Returns the Webview label.","Parameters","None","Returns","The Webview label as a string.","Notes"]},{"l":"injectScript","p":["Signature","plugins.core.setup.injectScript(script) - none","Type","Function","Description","Injects JavaScript into the Setup Panels.","Parameters","script - The JavaScript you want to inject as a string.","Returns","None","Notes"]},{"l":"new","p":["Signature","plugins.core.setup.new() - none","Type","Function","Description","Creates the Setup Panels.","Parameters","None","Returns","Notes"]},{"l":"nextPanel","p":["Signature","plugins.core.setup.nextPanel() - boolean","Type","Function","Description","Moves to the next panel. If the window is visible, the panel will be updated. If no panels are left in the queue, the window will be closed.","Parameters","None","Returns","true if there was another panel to move to, or false if no panels remain.","Notes"]},{"l":"setPanelRenderer","p":["Signature","plugins.core.setup.setPanelRenderer(renderer) - none","Type","Function","Description","Sets a Panel Renderer","Parameters","renderer - The renderer","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.core.setup.show() - none","Type","Function","Description","Shows the Setup Panels.","Parameters","None","Returns","Notes"]},{"l":"update","p":["Signature","plugins.core.setup.update() - none","Type","Function","Description","Updates the Setup Panels.","Parameters","None","Returns","Notes"]}],[{"i":"pluginscoresetuppanel","l":"plugins.core.setup.panel","p":["CommandPost Setup Window Panel."]},{"l":"API Overview","p":["addButton","addCheckbox","addContent","addFooter","addHandler","addHeading","addIcon","addParagraph","addPassword","addSelect","addSubHeading","addTextbox","Constants- Useful values which cannot be changed","Constructors- API calls which return an object, typically one that offers API methods","Functions- API calls offered directly by the extension","getHandler","Methods- API calls which can only be made on an object returned by a constructor","new","panelCount","panelNumber","panelQueue","WEBVIEW_LABEL"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"WEBVIEW_LABEL","p":["Signature","plugins.core.setup.panel.WEBVIEW_LABEL - string","Type","Constant","Description","The ID for the Webview"]},{"l":"Functions"},{"l":"panelCount","p":["Signature","plugins.core.setup.panelCount() - number","Type","Function","Description","The number of panels currently being processed in this session. This includes panels already processed, the current panel, and remaining panels.","Parameters","None","Returns","The number of panels.","Notes"]},{"l":"panelNumber","p":["Signature","plugins.core.setup.panelNumber() - number","Type","Function","Description","The number of the panel currently being viewed.","Parameters","None","Returns","the current panel number, or 0 if no panels are registered.","Notes"]},{"l":"panelQueue","p":["Signature","plugins.core.setup.panelQueue() - table of panels","Type","Function","Description","The table of panels remaining to be processed. Panels are removed from the queue one at a time and displayed in the window via the nextPanel() function.","Parameters","None","Returns","The table of panels remaining to be processed.","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.core.setup.panel.new(id, priority) - plugins.core.setup.panel","Type","Constructor","Description","Constructs a new panel with the specified priority and ID.","Parameters","priority - Defines the order in which the panel appears. id - The unique ID for the panel.","Returns","Notes"]},{"l":"Methods"},{"l":"addButton","p":["Signature","plugins.core.setup.panel:addButton(params) - panel","Type","Method","Description","Adds a button to the panel.","Parameters","params - The list of parameters.","Returns","The same panel.","Notes","The params table may contain:** id- (optional) the unique ID for the button. If none is provided, one is generated.** value- The value of the button. This is sent to the onclick function.** label- The text label for the button. Defaults to the value if not provided.** width- The width of the button in pixels.** onclick- the function to execute when the button is clicked. The function should have the signature of function(id, value), where id is the id of the button that was clicked, and value is the value of the button."]},{"l":"addCheckbox","p":["Signature","plugins.core.setup.panel:addCheckbox(params) - panel","Type","Method","Description","Adds a checkbox to the panel with the specified params.","Parameters","params- The set of parameters for the checkbox.","Returns","The panel object.","Notes","The params can contain the following fields:** id- (optional) The unique ID. If none is provided, one will be generated.** name- (optional) The name of the checkbox field.** label- (optional) The text label to display after the checkbox.** onchange- (optional) a function that will get called when the checkbox value changes. It will be passed two parameters, id and params, the latter of which is a table containing the value and checked values of the checkbox.** class- (optional) the CSS class list to apply to the checkbox."]},{"l":"addContent","p":["Signature","plugins.core.setup.panel:addContent(content[, escaped]) - panel","Type","Method","Description","Adds the specified content to the panel.","Parameters","content- a value that can be converted to a string. escaped- if true, the content will not be escaped. Defaults to true.","Returns","The panel.","Notes"]},{"l":"addFooter","p":["Signature","plugins.core.setup.panel:addFooter(content, unescaped) - panel","Type","Method","Description","Adds the specified content to the panel's footer.","Parameters","content- a value that can be converted to a string. unescaped- if true, the content will not be escaped. Defaults to true.","Returns","The panel.","Notes"]},{"l":"addHandler","p":["Signature","plugins.core.setup.panel:addHandler(event, id, handlerFn, keys) - none","Type","Method","Description","Gets a handler from an Handler ID","Parameters","event - The event id - the Handler ID handlerFn - The Handler function keys - Keys","Returns","None","Notes"]},{"l":"addHeading","p":["Signature","plugins.core.setup.panel:addHeading(text) - panel","Type","Method","Description","Adds a heading to the panel","Parameters","text - The text of the heading as a string","Returns","The panel object.","Notes"]},{"l":"addIcon","p":["Signature","plugins.core.setup.panel:addIcon(src) - panel","Type","Method","Description","Adds an icon to the panel.","Parameters","src - Location of the icon.","Returns","The panel object.","Notes"]},{"l":"addParagraph","p":["Signature","plugins.core.setup.panel:addParagraph(content[, escaped[, class]]) - panel","Type","Method","Description","Adds a Paragraph to the panel","Parameters","content - The content as a string escaped - Whether or not the HTML should be escaped as a boolean class - The class as a string","Returns","The panel object.","Notes"]},{"l":"addPassword","p":["Signature","plugins.core.setup.panel:addPassword(params) - panel","Type","Method","Description","Adds a password text-box to the panel.","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addSelect","p":["Signature","plugins.core.setup.panel:addSelect(params) - panel","Type","Method","Description","Adds a select to the panel.","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addSubHeading","p":["Signature","plugins.core.setup.panel:addSubHeading(text) - panel","Type","Method","Description","Adds a sub-heading to the panel","Parameters","text - The text of the sub-heading as a string","Returns","The panel object.","Notes"]},{"l":"addTextbox","p":["Signature","plugins.core.setup.panel:addTextbox(params) - panel","Type","Method","Description","Adds a text-box to the panel","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"getHandler","p":["Signature","plugins.core.setup.panel:getHandler(id) - handler","Type","Method","Description","Gets a handler from an Handler ID","Parameters","id- the Handler ID","Returns","A handler.","Notes"]}],[{"i":"pluginscoreshortcutsactions","l":"plugins.core.shortcuts.actions","p":["Adds actions which allow you to trigger keyboard shortcuts."]},{"l":"API Overview","p":["Variables- Configurable values","eventTapCount","heldKeys","Functions- API calls offered directly by the extension","startEventTap","stopEventTap"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"eventTapCount","p":["Signature","plugins.core.shortcuts.actions.eventTapCount - number","Type","Variable","Description","A counter to detect how many times the event tap has been triggered."]},{"l":"heldKeys","p":["Signature","plugins.core.shortcuts.actions.heldKeys - table","Type","Variable","Description","A table of held down modifier keys."]},{"l":"Functions"},{"l":"startEventTap","p":["Signature","plugins.core.shortcuts.actions.startEventTap() - none","Type","Function","Description","Start Event Tap","Parameters","None","Returns","Notes"]},{"l":"stopEventTap","p":["Signature","plugins.core.shortcuts.actions.stopEventTap() - none","Type","Function","Description","Start Event Tap","Parameters","None","Returns","Notes"]}],[{"i":"pluginscoreshortcutsprefs","l":"plugins.core.shortcuts.prefs","p":["Shortcuts Preferences Panel"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","DEFAULT_SHORTCUTS","Functions- API calls offered directly by the extension","getGroupEditor","init","setGroupEditor","Fields- Variables which can only be accessed from an object returned by a constructor","lastGroup"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_SHORTCUTS","p":["Signature","plugins.core.shortcuts.prefs.DEFAULT_SHORTCUTS - string","Type","Constant","Description","Default Shortcuts File Name"]},{"l":"Functions"},{"l":"getGroupEditor","p":["Signature","plugins.core.shortcuts.prefs.getGroupEditor(groupId) - none","Type","Function","Description","Gets the Group Editor","Parameters","groupId - Group ID","Returns","Group Editor","Notes"]},{"l":"init","p":["Signature","plugins.core.shortcuts.prefs.init(deps, env) - module","Type","Function","Description","Initialise the Module.","Parameters","deps - Dependancies Table env - Environment Table","Returns","The Module","Notes"]},{"l":"setGroupEditor","p":["Signature","plugins.core.shortcuts.prefs.setGroupEditor(groupId, editorFn) - none","Type","Function","Description","Sets the Group Editor","Parameters","groupId - Group ID editorFn - Editor Function","Returns","None","Notes"]},{"l":"Fields"},{"l":"lastGroup","p":["Signature","plugins.core.shortcuts.prefs.lastGroup cp.prop: string","Type","Field","Description","Last group used in the Preferences Drop Down."]}],[{"i":"pluginscorestreamdeckmanager","l":"plugins.core.streamdeck.manager","p":["Elgato Stream Deck Manager Plugin."]},{"l":"API Overview","p":["activeBanks","automaticallySwitchApplications","buttonCallback","defaultLayout","discoveryCallback","enabled","encoderCallback","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getDeviceType","getSnippetImage","imageCache","lastApplication","lastBundleID","repeatTimers","screenCallback","start","update","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"defaultLayout","p":["Signature","plugins.core.streamdeck.manager.defaultLayout - table","Type","Variable","Description","Default Stream Deck Layout"]},{"l":"imageCache","p":["Signature","plugins.core.streamdeck.manager.imageCache() - none","Type","Variable","Description","A cache of images used on the Stream Deck."]},{"l":"repeatTimers","p":["Signature","plugins.core.streamdeck.manager.repeatTimers - table","Type","Variable","Description","A table containing hs.timer objects."]},{"l":"Functions"},{"l":"buttonCallback","p":["Signature","plugins.core.streamdeck.manager.buttonCallback(object, buttonID, pressed) - none","Type","Function","Description","Stream Deck Button Callback","Parameters","object - The hs.streamdeck userdata object buttonID - A number containing the button that was pressed/released pressed - A boolean indicating whether the button was pressed ( true) or released ( false)","Returns","None","Notes"]},{"l":"discoveryCallback","p":["Signature","plugins.core.streamdeck.manager.discoveryCallback(connected, object) - none","Type","Function","Description","Stream Deck Discovery Callback","Parameters","connected - A boolean, true if a device was connected, false if a device was disconnected object - An hs.streamdeck object, being the device that was connected/disconnected","Returns","None","Notes"]},{"l":"encoderCallback","p":["Signature","plugins.core.streamdeck.manager.encoderCallback(object, buttonID, pressed, turningLeft, turningRight) - none","Type","Function","Description","Stream Deck Screen Callback","Parameters","object - The hs.streamdeck userdata object buttonID - The button ID pressed - Was the encoder pressed? turnedLeft - Did the encoder turn left? turnedRight - Did the encoder turn right?","Returns","None","Notes"]},{"l":"getDeviceType","p":["Signature","plugins.core.streamdeck.manager.getDeviceType(object) - string","Type","Function","Description","Translates a Stream Deck button layout into a device type string.","Parameters","object - A hs.streamdeck object","Returns","\"Mini\", \"Original\" or \"XL\"","Notes"]},{"l":"getSnippetImage","p":["Signature","plugins.core.streamdeck.manager.getSnippetImage(device, buttonData, isEncoder) - string","Type","Function","Description","Generates the Preference Panel HTML Content.","Parameters","device - The device name as a string. buttonData - A table of button data. isEncoder - Are we dealing with an encoder?","Returns","An encoded image as a string","Notes"]},{"l":"screenCallback","p":["Signature","plugins.core.streamdeck.manager.screenCallback(object, eventType, startX, startY, endX, endY) - none","Type","Function","Description","Stream Deck Screen Callback","Parameters","object - The hs.streamdeck userdata object eventType - The event type as a string startX - The X position when first pressed startY - The Y position when first pressed endX - The X position when released endY - The Y position when released","Returns","None","Notes"]},{"l":"start","p":["Signature","plugins.core.streamdeck.manager.start() - boolean","Type","Function","Description","Stops the Stream Deck Plugin","Parameters","None","Returns","Notes"]},{"l":"update","p":["Signature","plugins.core.streamdeck.manager.update() - none","Type","Function","Description","Updates the screens of all Stream Deck devices.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"activeBanks","p":["Signature","plugins.core.streamdeck.manager.activeBanks cp.prop: table","Type","Field","Description","Table of active banks for each application."]},{"l":"automaticallySwitchApplications","p":["Signature","plugins.core.streamdeck.manager.automaticallySwitchApplications cp.prop: boolean","Type","Field","Description","Enable or disable the automatic switching of applications."]},{"l":"enabled","p":["Signature","plugins.core.streamdeck.manager.enabled cp.prop: boolean","Type","Field","Description","Enable or disable Stream Deck Support."]},{"l":"lastApplication","p":["Signature","plugins.core.streamdeck.manager.lastApplication cp.prop: string","Type","Field","Description","Last Bank used in the Preferences Panel."]},{"l":"lastBundleID","p":["Signature","plugins.core.streamdeck.manager.lastBundleID cp.prop: string","Type","Field","Description","The last Bundle ID."]}],[{"i":"pluginscorestreamdeckprefs","l":"plugins.core.streamdeck.prefs","p":["Stream Deck Preferences Panel"]},{"l":"API Overview","p":["automaticallyApplyIconFromAction","backgroundColour","buildIconFromLabel","defaultIconPath","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","iconHistory","lastDevice","lastExportPath","lastIconPath","lastImportPath","lastUnit","Methods- API calls which can only be made on an object returned by a constructor","pasteboard","previewSelectedApplicationAndBankOnHardware","processEncodedIcon","resizeImagesOnImport","setItem","snippetsRefreshFrequency","supportedExtensions","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"defaultIconPath","p":["Signature","plugins.core.streamdeck.prefs.defaultIconPath - string","Type","Variable","Description","Default Path where built-in icons are stored"]},{"l":"supportedExtensions","p":["Signature","plugins.core.streamdeck.prefs.supportedExtensions - string","Type","Variable","Description","Table of supported extensions for Stream Deck Icons."]},{"l":"Functions"},{"l":"buildIconFromLabel","p":["Signature","plugins.core.streamdeck.prefs.buildIconFromLabel(params) - string","Type","Function","Description","Creates a new icon image from a string.","Parameters","params - A table of parameters.","Returns","A new encoded icon as URL string.","Notes"]},{"l":"processEncodedIcon","p":["Signature","plugins.core.streamdeck.prefs.processEncodedIcon(icon, controlType) - string","Type","Function","Description","Processes an encoded icon.","Parameters","icon - The encoded icon as URL string or a hs.image object. button - The button ID.","Returns","A new encoded icon as URL string.","Notes"]},{"l":"Fields"},{"l":"automaticallyApplyIconFromAction","p":["Signature","plugins.core.streamdeck.prefs.automaticallyApplyIconFromAction cp.prop: boolean","Type","Field","Description","Automatically Apply Icon from Action"]},{"l":"backgroundColour","p":["Signature","plugins.core.streamdeck.prefs.backgroundColour cp.prop: string","Type","Field","Description","Background Colour."]},{"l":"iconHistory","p":["Signature","plugins.core.streamdeck.prefs.iconHistory cp.prop: table","Type","Field","Description","Icon History"]},{"l":"lastDevice","p":["Signature","plugins.core.streamdeck.prefs.lastDevice cp.prop: string","Type","Field","Description","Last Device used in the Preferences Panel."]},{"l":"lastExportPath","p":["Signature","plugins.core.streamdeck.prefs.lastExportPath cp.prop: string","Type","Field","Description","Last Export path."]},{"l":"lastIconPath","p":["Signature","plugins.core.streamdeck.prefs.lastIconPath cp.prop: string","Type","Field","Description","Last icon path."]},{"l":"lastImportPath","p":["Signature","plugins.core.streamdeck.prefs.lastImportPath cp.prop: string","Type","Field","Description","Last Import path."]},{"l":"lastUnit","p":["Signature","plugins.core.streamdeck.prefs.lastUnit cp.prop: string","Type","Field","Description","Last Unit used in the Preferences Panel."]},{"l":"pasteboard","p":["Signature","plugins.core.streamdeck.prefs.pasteboard cp.prop: table","Type","Field","Description"]},{"l":"previewSelectedApplicationAndBankOnHardware","p":["Signature","plugins.core.streamdeck.prefs.previewSelectedApplicationAndBankOnHardware cp.prop: boolean","Type","Field","Description","Should we preview the selected application and bank on hardware?"]},{"l":"resizeImagesOnImport","p":["Signature","plugins.core.streamdeck.prefs.resizeImagesOnImport cp.prop: string","Type","Field","Description","Resize Icons on Import Preference."]},{"l":"snippetsRefreshFrequency","p":["Signature","plugins.core.streamdeck.prefs.snippetsRefreshFrequency cp.prop: string","Type","Field","Description","How often snippets are refreshed."]},{"l":"Methods"},{"l":"setItem","p":["Signature","plugins.core.streamdeck.prefs.setItem(app, bank, button, key, [value]) - none","Type","Method","Description","Update the Stream Deck layout file.","Parameters","app - The application bundle ID as a string bank - The bank ID as a string button - The button ID as a string key - The key as a string or a table if replacing the entire button contents value - The optional value","Returns","None","Notes"]}],[{"i":"pluginscoretangentmanager","l":"plugins.core.tangent.manager","p":["Tangent Control Surface Manager","This plugin allows CommandPost to communicate with Tangent's range of panels (Element, Virtual Element Apps, Wave, Ripple and any future panels).","Download the Tangent Developer Support Pack & Tangent Hub Installer for Mac here: http://www.tangentwave.co.uk/developer-support"]},{"l":"Submodules","p":["plugins.core.tangent.manager.action","plugins.core.tangent.manager.binding","plugins.core.tangent.manager.connection","plugins.core.tangent.manager.controls","plugins.core.tangent.manager.group","plugins.core.tangent.manager.menu","plugins.core.tangent.manager.mode","plugins.core.tangent.manager.named","plugins.core.tangent.manager.parameter"]},{"l":"API Overview","p":["APPLICATION_NAME_SUFFIX","applicationNames","applicationNameToGroupID","Constants- Useful values which cannot be changed","customApplications","enabled","Functions- API calls offered directly by the extension","getConnection","launchTangentMapper","MAXIMUM_CONNECTIONS","newConnection","NUMBER_OF_FAVOURITES","registerCustomApplication","removeCustomApplication","setupCustomApplications","tangentHubInstalled","tangentMapperInstalled","USER_CONTROL_MAPS_FOLDER","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"APPLICATION_NAME_SUFFIX","p":["Signature","plugins.core.tangent.manager.APPLICATION_NAME_SUFFIX - string","Type","Constant","Description","A suffix applied to the end of Application Names as they appear in Tangent Mapper"]},{"l":"MAXIMUM_CONNECTIONS","p":["Signature","plugins.core.tangent.manager.MAXIMUM_CONNECTIONS - number","Type","Constant","Description","Maximum number of socket connections to Tangent Hub."]},{"l":"NUMBER_OF_FAVOURITES","p":["Signature","plugins.core.tangent.manager.NUMBER_OF_FAVOURITES - number","Type","Constant","Description","Maximum number of favourites."]},{"l":"USER_CONTROL_MAPS_FOLDER","p":["Signature","plugins.core.tangent.manager.USER_CONTROL_MAPS_FOLDER - string","Type","Constant","Description","The full name for storing User Control Maps"]},{"l":"Variables"},{"l":"applicationNameToGroupID","p":["Signature","plugins.core.tangent.manager.applicationNameToGroupID - table","Type","Variable","Description","A table to translate an Application Name to a Group ID for the Search Console"]},{"l":"customApplications","p":["Signature","plugins.core.tangent.manager.customApplications cp.prop: table","Type","Variable","Description","Table of Custom Applications"]},{"l":"enabled","p":["Signature","plugins.core.tangent.manager.enabled cp.prop: boolean","Type","Variable","Description","Enable or disables the Tangent Manager."]},{"l":"tangentHubInstalled","p":["Signature","plugins.core.tangent.manager.tangentHubInstalled cp.prop: boolean","Type","Variable","Description","Is Tangent Hub Installed?"]},{"l":"tangentMapperInstalled","p":["Signature","plugins.core.tangent.manager.tangentMapperInstalled cp.prop: boolean","Type","Variable","Description","Is Tangent Mapper Installed?"]},{"l":"Functions"},{"l":"applicationNames","p":["Signature","plugins.core.tangent.manager.applicationNames() - table","Type","Function","Description","Gets a table listing all the connections application names.","Parameters","None","Returns","A table containing the names of all the registered connections.","Notes"]},{"l":"getConnection","p":["Signature","plugins.core.tangent.manager.getConnection(applicationName) - connection","Type","Function","Description","Gets a Tangent connection object.","Parameters","applicationName - Your application name as a string","Returns","The connection object","Notes"]},{"l":"launchTangentMapper","p":["Signature","plugins.core.tangent.manager.launchTangentMapper() - none","Type","Function","Description","Launches the Tangent Mapper.","Parameters","None","Returns","Notes"]},{"l":"newConnection","p":["Signature","plugins.core.tangent.manager.newConnection(applicationName, systemPath, userPath, task, pluginPath, addDefaultModes, setupFn, transportFn, groupID) - connection","Type","Function","Description","Creates a new Tangent Connection","Parameters","applicationName - The application name as a string. This is what appears in CommandPost Preferences. systemPath - A string containing the absolute path of the directory that contains the Controls and Default Map XML files. userPath - An optional string containing the absolute path of the directory that contains the User’s Default Map XML files. task - An optional string containing the name of the task associated with the application. pluginPath - A string containing the absolute path of the directory that contains the built-in Default Map XML files. addDefaultModes - A boolean which indicates whether or not CommandPost should add any default modes. setupFn - Setup function. transportFn - Transport function. groupID - The group ID used by the Search Console.","Returns","The connection object","Notes","Notes for the task parameter:** This is used to assist with automatic switching of panels when your application gains mouse focus on the GUI.** This parameter should only be required if the string passed in appStr does not match the Task name that the OS identifies as your application. Typically, this is only usually required for Plugins which run within a parent Host application. Under these circumstances it is the name of the Host Application’s Task which should be passed."]},{"l":"registerCustomApplication","p":["Signature","plugins.core.tangent.manager.registerCustomApplication(applicationName, bundleExecutable) - none","Type","Function","Description","Registers a new Custom Application","Parameters","applicationName - The display name of the custom application bundleExecutable - The bundle executable identifier of the custom application","Returns","A table where the application name is the key, and display name is the value.","Notes"]},{"l":"removeCustomApplication","p":["Signature","plugins.core.tangent.manager.removeCustomApplication(applicationName) - none","Type","Function","Description","Removes a Custom Application.","Parameters","applicationName - The display name of the Custom Application to Remove.","Returns","None","Notes"]},{"l":"setupCustomApplications","p":["Signature","plugins.core.tangent.manager.setupCustomApplications() - none","Type","Function","Description","Setup the Custom Applications.","Parameters","None","Returns","Notes"]}],[{"i":"pluginscoretangentmanageraction","l":"plugins.core.tangent.manager.action","p":["Represents a Tangent Action"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","action","Fields- Variables which can only be accessed from an object returned by a constructor","active","localActive","Methods- API calls which can only be made on an object returned by a constructor","is","onPress","onRelease","xml"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"action","p":["Signature","plugins.core.tangent.manager.action(id[, name[, parent[, localActive]]]) - action","Type","Constructor","Description","Creates a new Action instance.","Parameters","id - The ID number of the action. name - The name of the action. parent - The parent group. (optional) localActive - If set to true, the parent's active state will be ignored when determining if this action is active. Defaults to false.","Returns","the new action.","Notes"]},{"l":"Fields"},{"l":"active","p":["Signature","plugins.core.tangent.manager.action.active cp.prop: boolean; read-only","Type","Field","Description","Indicates if the action is active. It will only be active if"]},{"l":"localActive","p":["Signature","plugins.core.tangent.manager.action.localActive cp.prop: boolean","Type","Field","Description","Indicates if the action should ignore the parent's enabled state when determining if the action is active."]},{"l":"Methods"},{"l":"is","p":["Signature","plugins.core.tangent.manager.action.is() - boolean","Type","Method","Description","Is an object an action?","Parameters","otherThing - Object to test.","Returns","true if the object is an action otherwise false.","Notes"]},{"l":"onPress","p":["Signature","plugins.core.tangent.manager.action:onPress(pressFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a 'action on' request.","Parameters","pressFn - The function to call when the Tangent requests the action on.","Returns","The parameter instance.","Notes","This function should have this signature: function() - nil"]},{"l":"onRelease","p":["Signature","plugins.core.tangent.manager.action:onRelease(releaseFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a 'action off' request.","Parameters","releaseFn - The function to call when the Tangent requests the action off.","Returns","The parameter instance.","Notes","This function should have this signature: function() - nil"]},{"l":"xml","p":["Signature","plugins.core.tangent.manager.action:xml() - cp.web.xml","Type","Method","Description","Returns the xml configuration for the Action.","Parameters","None","Returns","The xml for the Action.","Notes"]}],[{"i":"pluginscoretangentmanagerbinding","l":"plugins.core.tangent.manager.binding","p":["Represents a Tangent Binding"]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","binding","Methods- API calls which can only be made on an object returned by a constructor","member","members","name","xml"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"binding","p":["Signature","plugins.core.tangent.manager.binding(name) - binding","Type","Constructor","Description","Creates a new Binding instance.","Parameters","name - The name of the binding.","Returns","the new binding.","Notes"]},{"l":"Methods"},{"l":"member","p":["Signature","plugins.core.tangent.manager.binding:member(parameter) - self","Type","Method","Description","Adds a parameter as a member of the Binding group. The order is significant - it will determine the order the parameters are applied to group controls in the Mapper.","Parameters","param - The parameter to add to the binding.","Returns","The binding instance.","Notes"]},{"l":"members","p":["Signature","plugins.core.tangent.manager.binding:members(...) - self","Type","Method","Description","Adds the list of parameters to this binding.","Parameters","... - the list of parameters to bind.","Returns","The binding instance.","Notes"]},{"l":"name","p":["Signature","plugins.core.tangent.manager.binding:name() - string","Type","Method","Description","Returns the name of this binding.","Parameters","None","Returns","The name.","Notes"]},{"l":"xml","p":["Signature","plugins.core.tangent.manager.binding:xml() - cp.web.xml","Type","Method","Description","Returns the xml configuration for the Binding.","Parameters","None","Returns","The xml for the Binding.","Notes"]}],[{"i":"pluginscoretangentmanagerconnection","l":"plugins.core.tangent.manager.connection","p":["Represents a Tangent Connection."]},{"l":"API Overview","p":["addMode","applicationName","connection","connections","Constructors- API calls which return an object, typically one that offers API methods","device","displayName","getControlsXML","getMode","Methods- API calls which can only be made on an object returned by a constructor","pluginPath","setupTangentConnection","systemPath","task","update","updateControls","updateFavourites","userPath","Variables- Configurable values","writeControlsXML"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"connections","p":["Signature","plugins.core.tangent.manager.connections - table","Type","Variable","Description","A table containing all the Tangent connections."]},{"l":"Constructors"},{"l":"connection","p":["Signature","plugins.core.tangent.manager.connection(applicationName, displayName, systemPath, userPath, task, pluginPath, addDefaultModes, setupFn, transportFn, manager) - Connection object","Type","Constructor","Description","Creates a new Connection object.","Parameters","applicationName - The application name as a string. This is what appears in Tangent Mapper. displayName - The application display name as a string. This is what appears in CommandPost. systemPath - A string containing the absolute path of the directory that contains the Controls and Default Map XML files. userPath - An optional string containing the absolute path of the directory that contains the User’s Default Map XML files. task - An optional string containing the name of the task associated with the application. pluginPath - A string containing the absolute path of the directory that contains the built-in Default Map XML files. addDefaultModes - A boolean which indicates whether or not CommandPost should add any default modes. setupFn - Setup function. transportFn - Transport function. manager - The Tangent Manager module","Returns","A new Connection object.","Notes","Notes for the task parameter:** This is used to assist with automatic switching of panels when your application gains mouse focus on the GUI.** This parameter should only be required if the string passed in appStr does not match the Task name that the OS identifies as your application. Typically, this is only usually required for Plugins which run within a parent Host application. Under these circumstances it is the name of the Host Application’s Task which should be passed."]},{"l":"Methods"},{"l":"addMode","p":["Signature","plugins.core.tangent.manager.connection:addMode(id, name) - plugins.core.tangent.manager.mode","Type","Method","Description","Adds a new mode with the specified details and returns it.","Parameters","id - The id number of the Mode. name - The name of the Mode.","Returns","The new mode","Notes"]},{"l":"applicationName","p":["Signature","plugins.core.tangent.manager.connection:applicationName() - string | nil","Type","Method","Description","Gets the application name.","Parameters","None","Returns","The application name as a string.","Notes"]},{"l":"device","p":["Signature","plugins.core.tangent.manager.connection:device() - hs.tangent","Type","Method","Description","Gets the hs.tangent object for the connnection.","Parameters","None","Returns","A hs.tangent object","Notes"]},{"l":"displayName","p":["Signature","plugins.core.tangent.manager.connection:displayName() - string","Type","Method","Description","Gets the display name for the connnection.","Parameters","None","Returns","A string","Notes"]},{"l":"getControlsXML","p":["Signature","plugins.core.tangent.manager.connection:getControlsXML() - string","Type","Method","Description","Gets the controls XML.","Parameters","None","Returns","The XML controls","Notes"]},{"l":"getMode","p":["Signature","plugins.core.tangent.manager.connection:getMode(id) - plugins.core.tangent.manager.mode","Type","Method","Description","Returns the mode with the specified ID, or nil.","Parameters","id - The ID to find.","Returns","The mode, or nil.","Notes"]},{"l":"pluginPath","p":["Signature","plugins.core.tangent.manager.connection:pluginPath() - string | nil","Type","Method","Description","Gets the plugin path.","Parameters","None","Returns","The plugin path as a string.","Notes"]},{"l":"setupTangentConnection","p":["Signature","plugins.core.tangent.manager.connection:setupTangentConnection() - hs.tangent","Type","Method","Description","Sets up a new Tangent Connection.","Parameters","None","Returns","A hs.tangent object.","Notes"]},{"l":"systemPath","p":["Signature","plugins.core.tangent.manager.connection:systemPath() - string | nil","Type","Method","Description","Gets the system path.","Parameters","None","Returns","The system path as a string.","Notes"]},{"l":"task","p":["Signature","plugins.core.tangent.manager.connection:task() - string | nil","Type","Method","Description","Gets the task.","Parameters","None","Returns","The task as a string.","Notes"]},{"l":"update","p":["Signature","plugins.core.tangent.manager.connection:update() - none","Type","Method","Description","Updates the Tangent GUIs.","Parameters","None","Returns","Notes"]},{"l":"updateControls","p":["Signature","plugins.core.tangent.manager.connection:updateControls() - none","Type","Method","Description","Update Controls.","Parameters","None","Returns","Notes"]},{"l":"updateFavourites","p":["Signature","plugins.core.tangent.manager.connection:updateFavourites() - boolean, string","Type","Method","Description","Updates the Favourites.","Parameters","None","Returns","Notes"]},{"l":"userPath","p":["Signature","plugins.core.tangent.manager.connection:userPath() - string | nil","Type","Method","Description","Gets the user path.","Parameters","None","Returns","The user path as a string.","Notes"]},{"l":"writeControlsXML","p":["Signature","plugins.core.tangent.manager.connection:writeControlsXML() - boolean, string","Type","Method","Description","Writes the Tangent controls.xml File to the User's Application Support folder.","Parameters","None","Returns","true if successfully created otherwise false if an error occurred. If an error occurs an error message will also be returned as a string.","Notes"]}],[{"i":"pluginscoretangentmanagercontrols","l":"plugins.core.tangent.manager.controls","p":["Represents a Tangent Group"]},{"l":"API Overview","p":["action","active","Constructors- API calls which return an object, typically one that offers API methods","controls","enabled","Fields- Variables which can only be accessed from an object returned by a constructor","findByID","group","menu","Methods- API calls which can only be made on an object returned by a constructor","parameter","parent","register","tangent","unregister","xml"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"controls","p":["Signature","plugins.core.tangent.manager.controls(manager) - Group","Type","Constructor","Description","Creates a new Group instance.","Parameters","manager - The manager","Returns","A new Group object","Notes"]},{"l":"Fields"},{"l":"active","p":["Signature","plugins.core.tangent.manager.controls.active cp.prop: boolean; read-only","Type","Field","Description","Indicates if the controls are active. They will be active if enabled is true."]},{"l":"enabled","p":["Signature","plugins.core.tangent.manager.controls.enabled cp.prop: boolean","Type","Field","Description","Indicates if the controls are enabled."]},{"l":"Methods"},{"l":"action","p":["Signature","plugins.core.tangent.manager.controls:action(id[, name]) - action","Type","Method","Description","Adds an action to this controls.","Parameters","id - The ID number of the new action name - The name of the action.","Returns","The new action","Notes"]},{"i":"controls-1","l":"controls","p":["Signature","plugins.core.tangent.manager.controls:controls() - controls","Type","Method","Description","Returns this controls instance.","Parameters","None","Returns","The `controls instance.","Notes"]},{"l":"findByID","p":["Signature","plugins.core.tangent.manager.controls:findByID(id) - table","Type","Method","Description","Finds a control (Action/Parameter/Mode) by its unique ID.","Parameters","id - the ID to search by","Returns","The control, or nil if not found.","Notes"]},{"l":"group","p":["Signature","plugins.core.tangent.manager.controls:group(name) - group","Type","Method","Description","Adds a subgroup to this group.","Parameters","name - the name of the new sub-group","Returns","The new group","Notes"]},{"l":"menu","p":["Signature","plugins.core.tangent.manager.controls:menu(id[, name]) - menu","Type","Method","Description","Adds an menu to this controls.","Parameters","id - The ID number of the new menu name - The name of the menu.","Returns","The new menu","Notes"]},{"l":"parameter","p":["Signature","plugins.core.tangent.manager.controls:parameter(id[, name]) - parameter","Type","Method","Description","Adds an parameter to this controls.","Parameters","id - The ID number of the new parameter name - The name of the parameter.","Returns","The new parameter","Notes"]},{"l":"parent","p":["Signature","plugins.core.tangent.manager.controls:parent() - nil","Type","Method","Description","Always returns nil, sinces controls have no parent.","Parameters","None","Returns","nil.","Notes"]},{"l":"register","p":["Signature","plugins.core.tangent.manager.controls:register(control) - self","Type","Method","Description","Registers a control (Action/Parameter/Menu) with it's ID. This allows efficient retrieval via the findById(...) method, as well as checking that ID is unique.","Parameters","control - The Action/Parameter/Menu to register","Returns","self","Notes"]},{"l":"tangent","p":["Signature","plugins.core.tangent.manager.controls:tangent() - hs.tangent","Type","Method","Description","The hs.tangent connection.","Parameters","None","Returns","The hs.tangent.","Notes"]},{"l":"unregister","p":["Signature","plugins.core.tangent.manager.controls:unregister(control) - self","Type","Method","Description","Unregisters a control (Action/Parameter/Menu) with it's ID","Parameters","control - The Action/Parameter/Menu to unregister","Returns","self","Notes"]},{"l":"xml","p":["Signature","plugins.core.tangent.manager.controls:xml() - cp.web.xml","Type","Method","Description","Returns the xml configuration for the Group.","Parameters","None","Returns","The xml for the Group.","Notes"]}],[{"i":"pluginscoretangentmanagergroup","l":"plugins.core.tangent.manager.group","p":["Represents a Tangent Group. Groups can also be used to enable/disable multiple Parameters/Actions/Menus by enabling/disabling the containing group."]},{"l":"API Overview","p":["action","active","binding","Constructors- API calls which return an object, typically one that offers API methods","controls","enabled","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","group","is","localActive","menu","Methods- API calls which can only be made on an object returned by a constructor","name","parameter","parent","reset","tangent","xml"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","plugins.core.tangent.manager.group.is(thing) - boolean","Type","Function","Description","Checks if the thing is a group.","Parameters","thing - The thing to check.","Returns","true if it is a group, false otherwise.","Notes"]},{"l":"Constructors"},{"l":"group","p":["Signature","plugins.core.tangent.manager.group(name, manager, parent, localActive) - None","Type","Constructor","Description","Creates a new Group instance.","Parameters","name - The name of the group. manager - The Tangent Manager. parent - The parent group. localActive - If true, this group will ignore the parent's active status when determining its own active status. Defaults to false.","Returns","None","Notes"]},{"l":"Fields"},{"l":"active","p":["Signature","plugins.core.tangent.manager.group.active cp.prop: boolean; read-only","Type","Field","Description","Indicates if the group is active. It will only be active if"]},{"l":"enabled","p":["Signature","plugins.core.tangent.manager.group.enabled cp.prop: boolean","Type","Field","Description","Indicates if the group is enabled."]},{"l":"localActive","p":["Signature","plugins.core.tangent.manager.group.localActive cp.prop: boolean","Type","Field","Description","Indicates if the group should ignore the parent's enabled state when determining if the group is active."]},{"l":"Methods"},{"l":"action","p":["Signature","plugins.core.tangent.manager.group:action(id[, name[, localActive]]) - action","Type","Method","Description","Adds an action to this group.","Parameters","id - The ID number of the new action name - The name of the action. localActive - If true, the parent group's active state is ignored when determining if this action is active.","Returns","The new action","Notes"]},{"l":"binding","p":["Signature","plugins.core.tangent.manager.group:binding(id[, name]) - binding","Type","Method","Description","Adds an binding to this group.","Parameters","id - The ID number of the new binding name - The name of the binding.","Returns","The new binding","Notes"]},{"l":"controls","p":["Signature","plugins.core.tangent.manager.group:controls() - controls","Type","Method","Description","Retrieves the controls for this group. May be nil if the group was created independently.","Parameters","None","Returns","The controls, or nil.","Notes"]},{"i":"group-1","l":"group","p":["Signature","plugins.core.tangent.manager.group:group(name, [localActive]) - group","Type","Method","Description","Adds a subgroup to this group.","Parameters","name - the name of the new sub-group localActive - An optional boolean. If true, this group will ignore the parent's active status when determining its own active status. Defaults to false.","Returns","The new group","Notes"]},{"l":"menu","p":["Signature","plugins.core.tangent.manager.group:menu(id[, name]) - menu","Type","Method","Description","Adds an menu to this group.","Parameters","id - The ID number of the new menu name - The name of the menu.","Returns","The new menu","Notes"]},{"l":"name","p":["Signature","plugins.core.tangent.manager.group:name() - string","Type","Method","Description","Returns the name given to the group.","Parameters","None","Returns","The name.","Notes"]},{"l":"parameter","p":["Signature","plugins.core.tangent.manager.group:parameter(id[, name]) - parameter","Type","Method","Description","Adds an parameter to this group.","Parameters","id - The ID number of the new parameter name - The name of the parameter.","Returns","The new parameter","Notes"]},{"l":"parent","p":["Signature","plugins.core.tangent.manager.group:parent() - group | controls","Type","Method","Description","Returns the parent of the group, which should be either a group, controls or nil.","Parameters","None","Returns","The group's parents.","Notes"]},{"l":"reset","p":["Signature","plugins.core.tangent.manager.group:reset() - self","Type","Method","Description","This will remove all parameters, actions, menus and bindings from the group. It does not remove sub-groups. Use with care!","Parameters","None","Returns","The group instance.","Notes"]},{"l":"tangent","p":["Signature","plugins.core.tangent.manager.group:tangent() - hs.tangent","Type","Method","Description","The hs.tangent connection.","Parameters","None","Returns","The hs.tangent.","Notes"]},{"l":"xml","p":["Signature","plugins.core.tangent.manager.group:xml() - cp.web.xml","Type","Method","Description","Returns the xml configuration for the Group, sorted alphabetically.","Parameters","None","Returns","The xml for the Group.","Notes"]}],[{"i":"pluginscoretangentmanagermenu","l":"plugins.core.tangent.manager.menu","p":["Represents a Tangent Menu. Menus are controls that have a fixed set of non-numerical values. This could be as simple as \"On\" and \"Off\", or a long list of options."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","menu","Methods- API calls which can only be made on an object returned by a constructor","get","next","onGet","onNext","onPrev","onReset","prev","reset","update","xml"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","plugins.core.tangent.manager.menu.is(thing) - boolean","Type","Function","Description","Checks if the thing is a menu instance.","Parameters","thing - The other object to test.","Returns","true if it is a menu, false if not.","Notes"]},{"l":"Constructors"},{"l":"menu","p":["Signature","plugins.core.tangent.manager.menu(id[, name[, parent]]) - menu","Type","Constructor","Description","Creates a new Action instance.","Parameters","id - The ID number of the menu. name - The name of the menu. parent - The parent of the menu.","Returns","the new menu.","Notes"]},{"l":"Methods"},{"l":"get","p":["Signature","plugins.core.tangent.manager.menu:get() - string","Type","Method","Description","Executes the get function, if present, returning the string value for the current menu.","Parameters","None","Returns","nil","Notes"]},{"l":"next","p":["Signature","plugins.core.tangent.manager.menu:next() - nil","Type","Method","Description","Executes the next function, if present.","Parameters","None","Returns","nil","Notes"]},{"l":"onGet","p":["Signature","plugins.core.tangent.manager.menu:onGet(getFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a menu string request.","Parameters","getFn - The function to call when the Tangent requests the menu string.","Returns","The parameter instance.","Notes","--- This function should have this signature: function() - string"]},{"l":"onNext","p":["Signature","plugins.core.tangent.manager.menu:onNext(nextFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a menu change +1 request.","Parameters","nextFn - The function to call when the Tangent requests the menu change +1.","Returns","The parameter instance.","Notes","This function should have this signature: function() - nil It is suggested that when arriving at the end of the list of options a subsequent next call will cycle back to the beginning of the options. This is particularly useful for menus with two options."]},{"l":"onPrev","p":["Signature","plugins.core.tangent.manager.menu:onPrev(prevFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a menu change -1 request.","Parameters","prevFn - The function to call when the Tangent requests the menu change -1.","Returns","The parameter instance.","Notes","This function should have this signature: function() - nil It is suggested that when arriving at the start of the list of options a subsequent prev call will cycle to the end of the options. This is particularly useful for menus with two options."]},{"l":"onReset","p":["Signature","plugins.core.tangent.manager.menu:onReset(resetFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a 'parameter reset' request.","Parameters","resetFn - The function to call when the Tangent requests the parameter reset.","Returns","The parameter instance.","Notes","This function should have this signature: function() - nil"]},{"l":"prev","p":["Signature","plugins.core.tangent.manager.menu:prev() - nil","Type","Method","Description","Executes the prev function, if present.","Parameters","None","Returns","nil","Notes"]},{"l":"reset","p":["Signature","plugins.core.tangent.manager.menu:reset() - number","Type","Method","Description","Executes the reset function if present. Returns the current value of the parameter after reset.","Parameters","None","Returns","The current value, or nil if it can't be accessed.","Notes"]},{"l":"update","p":["Signature","plugins.core.tangent.manager.menu:update() - nil","Type","Method","Description","Updates the Tangent panel with the current value.","Parameters","None","Returns","true if the update was sent.","Notes"]},{"l":"xml","p":["Signature","plugins.core.tangent.manager.menu:xml() - cp.web.xml","Type","Method","Description","Returns the xml configuration for the Action.","Parameters","None","Returns","The xml for the Action.","Notes"]}],[{"i":"pluginscoretangentmanagermode","l":"plugins.core.tangent.manager.mode","p":["Represents a Tangent Mode"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","Constructors- API calls which return an object, typically one that offers API methods","mode","Methods- API calls which can only be made on an object returned by a constructor","activate","onActivate","onDeactivate","xml"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","plugins.core.tangent.manager.mode.is(thing) - boolean","Type","Function","Description","Checks to see if thing is a mode or not.","Parameters","thing - The item to check","Returns","true if is a mode otherwise false","Notes"]},{"l":"Constructors"},{"l":"mode","p":["Signature","plugins.core.tangent.manager.mode(id, name)","Type","Constructor","Description","Creates a new Mode instance.","Parameters","id - The ID number of the mode. name - The name of the mode.","Returns","*","Notes"]},{"l":"Methods"},{"l":"activate","p":["Signature","plugins.core.tangent.manager.mode:activate() - nil","Type","Method","Description","Executes the activate function, if present.","Parameters","None","Returns","nil","Notes"]},{"l":"onActivate","p":["Signature","plugins.core.tangent.manager.mode:onActivate(activateFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a 'mode change' request.","Parameters","activateFn - The function to call when the Tangent requests the mode change.","Returns","The parameter instance.","Notes","This function should have this signature: lua/lilifunction() - nil/lili"]},{"l":"onDeactivate","p":["Signature","plugins.core.tangent.manager.mode:onDeactivate(deactivateFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a 'mode change' request and switche to a different mode.","Parameters","deactivateFn - The function to call when the Tangent requests the mode change.","Returns","The parameter instance.","Notes","This function should have this signature: function() - nil"]},{"l":"xml","p":["Signature","plugins.core.tangent.manager.mode:xml() - cp.web.xml","Type","Method","Description","Returns the xml configuration for the Mode.","Parameters","None","Returns","The xml for the Mode.","Notes"]}],[{"i":"pluginscoretangentmanagernamed","l":"plugins.core.tangent.manager.named","p":["Provides common functions for 'named' Tangent nodes","Tables with named in it's metatable chain will have name methods added as described below."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","is","xml","Constructors- API calls which return an object, typically one that offers API methods","named","Fields- Variables which can only be accessed from an object returned by a constructor","active","enabled","Methods- API calls which can only be made on an object returned by a constructor","controls","name","nameX","parent","tangent"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","plugins.core.tangent.manager.named.is(thing) - boolean","Type","Function","Description","Check if the thing is a named table.","Parameters","thing - The thing to check.","Returns","true if it is `named.","Notes"]},{"l":"xml","p":["Signature","plugins.core.tangent.manager.named.xml(thing) - cp.web.xml","Type","Function","Description","Returns the xml configuration for the Action.","Parameters","thing - The thing to retrieve the names from.","Returns","The xml for the Action.","Notes"]},{"l":"Constructors"},{"l":"named","p":["Signature","plugins.core.tangent.manager.named(id, name, parent) - named","Type","Constructor","Description","Creates a new named instance, with the specified base name.","Parameters","id - the unique ID for the value. name - The base name of the parent - the parent","Returns","None","Notes"]},{"l":"Fields"},{"l":"active","p":["Signature","plugins.core.tangent.manager.named.active cp.prop: boolean; read-only","Type","Field","Description","Indicates if the parameter is active. It will only be active if"]},{"l":"enabled","p":["Signature","plugins.core.tangent.manager.named.enabled cp.prop: boolean","Type","Field","Description","Indicates if the parameter is enabled."]},{"l":"Methods"},{"l":"controls","p":["Signature","plugins.core.tangent.manager.named:controls()","Type","Method","Description","Returns the controls the parameter belongs to.","Parameters","None","Returns","The controls, or nil if not specified.","Notes"]},{"l":"name","p":["Signature","plugins.core.tangent.manager.named:name(value) - string | self","Type","Method","Description","Gets or sets the full name.","Parameters","value - The new name value.","Returns","The current value, or self if a new value was provided.","Notes"]},{"l":"nameX","p":["Signature","plugins.core.tangent.manager.named:nameX(value) - string | self","Type","Method","Description","Sets the name X, where X is a number as defined when the named was created.","Parameters","value - The new name value.","Returns","The current value, or self if a new value was provided.","Notes"]},{"l":"parent","p":["Signature","plugins.core.tangent.manager.named:parent() - group | controls","Type","Method","Description","Returns the group or controls that contains this parameter.","Parameters","None","Returns","The parent.","Notes"]},{"l":"tangent","p":["Signature","plugins.core.tangent.manager.named:tangent() - hs.tangent","Type","Method","Description","The Tangent Hub connection for this value, from the parent.","Parameters","None","Returns","The hs.tangent, if available.","Notes"]}],[{"i":"pluginscoretangentmanagerparameter","l":"plugins.core.tangent.manager.parameter","p":["Represents a Tangent Parameter control."]},{"l":"API Overview","p":["change","Constructors- API calls which return an object, typically one that offers API methods","Functions- API calls offered directly by the extension","get","is","maxValue","Methods- API calls which can only be made on an object returned by a constructor","minValue","onChange","onGet","onReset","parameter","press","release","reset","stepSize","update","xml"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"is","p":["Signature","plugins.core.tangent.manager.parameter.is(thing) - boolean","Type","Function","Description","Checks if the thing is a parameter instance.","Parameters","thing - The other object to test.","Returns","true if it is a parameter, false if not.","Notes"]},{"l":"update","p":["Signature","plugins.core.tangent.manager.parameter:update()","Type","Function","Description","Updates the Tangent with the current value of the parameter.","Parameters","None","Returns","Nothing.","Notes"]},{"l":"Constructors"},{"l":"parameter","p":["Signature","plugins.core.tangent.manager.parameter(id[, name[, parent]) - parameter","Type","Constructor","Description","Creates a new Parameter instance.","Parameters","id - The ID number of the parameter. name - The name of the parameter. parent - The parent of the parameter.","Returns","the new parameter.","Notes"]},{"l":"Methods"},{"l":"change","p":["Signature","plugins.core.tangent.manager.parameter:change(amount) - number","Type","Method","Description","Executes the change function if present, and returns the new result. If none has been set, nil is returned.","Parameters","amount - The amount to change the parameter.","Returns","The current value, or nil if it can't be accessed.","Notes"]},{"l":"get","p":["Signature","plugins.core.tangent.manager.parameter:get() - number","Type","Method","Description","Executes the get function if present, and returns the result. If none has been set, nil is returned.","Parameters","None","Returns","The current value, or nil if it can't be accessed.","Notes"]},{"l":"maxValue","p":["Signature","plugins.core.tangent.manager.parameter:maxValue([value]) - number | self","Type","Method","Description","Gets or sets the maximum value for the parameter.","Parameters","value - The new value.","Returns","If value is nil, the current value is returned, otherwise returns self.","Notes"]},{"l":"minValue","p":["Signature","plugins.core.tangent.manager.parameter:minValue([value]) - number | self","Type","Method","Description","Gets or sets the minimum value for the parameter.","Parameters","value - The new value.","Returns","If value is nil, the current value is returned, otherwise returns self.","Notes"]},{"l":"onChange","p":["Signature","plugins.core.tangent.manager.parameter:onChange(changeFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a 'parameter change' request.","Parameters","getFn - The function to call when the Tangent requests the parameter change.","Returns","The parameter instance.","Notes","This function should have this signature: function(amount) - number The return value should be the new value of the parameter."]},{"l":"onGet","p":["Signature","plugins.core.tangent.manager.parameter:onGet(getFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a 'parameter value' request.","Parameters","getFn - The function to call when the Tangent requests the parameter value.","Returns","The parameter instance.","Notes","This function should have this signature: function() - number"]},{"l":"onReset","p":["Signature","plugins.core.tangent.manager.parameter:onReset(resetFn) - self","Type","Method","Description","Sets the function that will be called when the Tangent sends a 'parameter reset' request.","Parameters","resetFn - The function to call when the Tangent requests the parameter reset.","Returns","The parameter instance.","Notes","This function should have this signature: function() - nil"]},{"l":"press","p":["Signature","plugins.core.tangent.manager.parameter:press() - nil","Type","Method","Description","Executes the press function, if present.","Parameters","None","Returns","nil","Notes"]},{"l":"release","p":["Signature","plugins.core.tangent.manager.parameter:release() - nil","Type","Method","Description","Executes the release function, if present.","Parameters","None","Returns","nil","Notes"]},{"l":"reset","p":["Signature","plugins.core.tangent.manager.parameter:reset() - number","Type","Method","Description","Executes the reset function if present. Returns the current value of the parameter after reset.","Parameters","None","Returns","The current value, or nil if it can't be accessed.","Notes"]},{"l":"stepSize","p":["Signature","plugins.core.tangent.manager.parameter:stepSize([value]) - number | self","Type","Method","Description","Gets or sets the step size for the parameter.","Parameters","value - The new value.","Returns","If value is nil, the current value is returned, otherwise returns self.","Notes"]},{"l":"xml","p":["Signature","plugins.core.tangent.manager.parameter:xml() - cp.web.xml","Type","Method","Description","Returns the xml configuration for the Parameter.","Parameters","None","Returns","The xml for the Parameter.","Notes"]}],[{"i":"pluginscoretangentprefs","l":"plugins.core.tangent.prefs","p":["Tangent Preferences Panel"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.core.tangent.prefs.init() - none","Type","Function","Description","Initialise Module.","Parameters","None","Returns","Notes"]}],[{"i":"pluginscoretoolboxintro","l":"plugins.core.toolbox.intro","p":["Intro Toolbox Panel."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoretoolboxmanager","l":"plugins.core.toolbox.manager","p":["Manager for the CommandPost Toolbox Window."]},{"l":"API Overview","p":["_handlers","_panels","addHandler","addPanel","Constants- Useful values which cannot be changed","currentPanelID","DEFAULT_HEIGHT","DEFAULT_WIDTH","focus","Functions- API calls offered directly by the extension","getHandler","getLabel","getWebview","hide","init","injectScript","lastTab","maxPanelHeight","new","position","refresh","selectPanel","setPanelRenderer","show","Variables- Configurable values","WEBVIEW_LABEL"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_HEIGHT","p":["Signature","plugins.core.toolbox.manager.DEFAULT_HEIGHT - number","Type","Constant","Description","Default Height of Preferences Window"]},{"l":"DEFAULT_WIDTH","p":["Signature","plugins.core.toolbox.manager.DEFAULT_WIDTH - number","Type","Constant","Description","Default Width of Preferences Window"]},{"l":"lastTab","p":["Signature","plugins.core.toolbox.manager.lastTab","Type","Constant","Description","Returns the last tab saved in settings."]},{"l":"position","p":["Signature","plugins.core.toolbox.manager.position","Type","Constant","Description","Returns the last frame saved in settings."]},{"l":"WEBVIEW_LABEL","p":["Signature","plugins.core.toolbox.manager.WEBVIEW_LABEL - string","Type","Constant","Description","The WebView Label"]},{"l":"Variables"},{"l":"_handlers","p":["Signature","plugins.core.toolbox.manager._handlers - table","Type","Variable","Description","Table containing handlers."]},{"l":"_panels","p":["Signature","plugins.core.toolbox.manager._panels - table","Type","Variable","Description","Table containing panels."]},{"l":"Functions"},{"l":"addHandler","p":["Signature","plugins.core.toolbox.manager.addHandler(id, handlerFn) - string","Type","Function","Description","Adds a Handler","Parameters","id - The ID handlerFn - the handler function","Returns","Nothing","Notes"]},{"l":"addPanel","p":["Signature","plugins.core.toolbox.manager.addPanel(params) - plugins.core.toolbox.manager.panel","Type","Function","Description","Adds a new panel with the specified params to the preferences manager.","Parameters","params- The parameters table. Details below.","Returns","The new panel instance.","Notes","The params can have the following properties. The priority and id and properties are required.** priority- An integer value specifying the priority of the panel compared to others.** id- A string containing the unique ID of the panel.** label- The human-readable label for the panel icon.** image- The hs.image for the panel icon.** tooltip- The human-readable details for the toolbar icon when the mouse is hovering over it.** closeFn- A callback function that's triggered when the Preferences window is closed."]},{"l":"currentPanelID","p":["Signature","plugins.core.toolbox.manager.currentPanelID() - string","Type","Function","Description","Returns the panel ID with the highest priority.","Parameters","None","Returns","The panel ID as a string","Notes"]},{"l":"focus","p":["Signature","plugins.core.toolbox.manager.focus() - boolean","Type","Function","Description","Puts focus on the Preferences Window.","Parameters","None","Returns","true if successful or otherwise false.","Notes"]},{"l":"getHandler","p":["Signature","plugins.core.toolbox.manager.getHandler(id) - string","Type","Function","Description","Returns the handler for a given ID.","Parameters","id - The ID","Returns","Table","Notes"]},{"l":"getLabel","p":["Signature","plugins.core.toolbox.manager.getLabel() - string","Type","Function","Description","Returns the Webview label.","Parameters","None","Returns","The Webview label as a string.","Notes"]},{"l":"getWebview","p":["Signature","plugins.core.toolbox.manager.getWebview() - hs.webview","Type","Function","Description","Returns the Webview of the Preferences Window.","Parameters","None","Returns","A hs.webview","Notes"]},{"l":"hide","p":["Signature","plugins.core.toolbox.manager.hide() - none","Type","Function","Description","Hides the Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"init","p":["Signature","plugins.core.toolbox.manager.init() - nothing","Type","Function","Description","Initialises the preferences panel.","Parameters","None","Returns","Nothing","Notes"]},{"l":"injectScript","p":["Signature","plugins.core.toolbox.manager.injectScript(script) - none","Type","Function","Description","Injects JavaScript into the Preferences Webview.","Parameters","script - The JavaScript code you want to inject in the form of a string.","Returns","None","Notes"]},{"l":"maxPanelHeight","p":["Signature","plugins.core.toolbox.manager.maxPanelHeight() - number","Type","Function","Description","Returns the maximum size defined by a panel.","Parameters","None","Returns","The maximum panel height.","Notes"]},{"l":"new","p":["Signature","plugins.core.toolbox.manager.new() - none","Type","Function","Description","Creates a new Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"refresh","p":["Signature","plugins.core.toolbox.manager.refresh() - none","Type","Function","Description","Refreshes the Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"selectPanel","p":["Signature","plugins.core.toolbox.manager.selectPanel(id) - none","Type","Function","Description","Selects a Preferences Panel.","Parameters","id - the ID of the panel you want to select.","Returns","None","Notes"]},{"l":"setPanelRenderer","p":["Signature","plugins.core.toolbox.manager.setPanelRenderer(renderer) - none","Type","Function","Description","Sets a Panel Renderer","Parameters","renderer - The renderer","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.core.toolbox.manager.show([panelID]) - boolean","Type","Function","Description","Shows the Preferences Window","Parameters","[panelID] - An optional panel ID","Returns","True if successful or nil if an error occurred","Notes"]}],[{"i":"pluginscoretoolscaffeinate","l":"plugins.core.tools.caffeinate","p":["Prevents your Mac from going to sleep."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoretouchbarbanks","l":"plugins.core.touchbar.banks","p":["Touch Bar Bank Actions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoretouchbarlocation","l":"plugins.core.touchbar.location","p":["Virtual Touch Bar Update Location Callback"]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","callbackFn","delete","get","getAll","id","new"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"callbackFn","p":["Signature","plugins.core.touchbar.location:callbackFn() - function","Type","Method","Description","Returns the callbackFn of the current Update Location Callback","Parameters","None","Returns","The callbackFn of the current Shutdown Callback","Notes"]},{"l":"delete","p":["Signature","plugins.core.touchbar.location:delete() - none","Type","Method","Description","Deletes a Update Location Callback based on an ID.","Parameters","None","Returns","Notes"]},{"l":"get","p":["Signature","plugins.core.touchbar.location:get(id) - table","Type","Method","Description","Gets an Update Location Callback based on an ID.","Parameters","id- The unique ID for the callback you want to return.","Returns","table containing the callback","Notes"]},{"l":"getAll","p":["Signature","plugins.core.touchbar.location:getAll() - table","Type","Method","Description","Returns all of the created Update Location Callbacks","Parameters","None","Returns","table containing all of the created callbacks","Notes"]},{"l":"id","p":["Signature","plugins.core.touchbar.location:id() - string","Type","Method","Description","Returns the ID of the current Update Location Callback","Parameters","None","Returns","The ID of the current File Dropped to Dock Icon Callback as a string","Notes"]},{"l":"new","p":["Signature","plugins.core.touchbar.location:new(id, callbackFn) - table","Type","Method","Description","Creates a new Update Location Callback","Parameters","id- The unique ID for this callback. callbackFn- The callback function.","Returns","table that has been created","Notes"]}],[{"i":"pluginscoretouchbarmanager","l":"plugins.core.touchbar.manager","p":["Touch Bar Manager Plugin."]},{"l":"Submodules","p":["plugins.core.touchbar.manager.widgets"]},{"l":"API Overview","p":["activeGroup","activeSubGroup","buttons","clear","Constants- Useful values which cannot be changed","DEFAULT_GROUP","enabled","Fields- Variables which can only be accessed from an object returned by a constructor","FILE_NAME","FOLDER_NAME","forceGroupChange","Functions- API calls offered directly by the extension","getAction","getActionHandlerID","getActionTitle","getBankLabel","getIcon","getLabel","gotoSubGroup","groupStatus","incrementActiveSubGroup","init","maxItems","nextSubGroup","numberOfSubGroups","previousSubGroup","start","stop","supported","toggle","touchbar","update","updateAction","updateBankLabel","updateIcon","updateLabel","updateOrder","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_GROUP","p":["Signature","plugins.core.touchbar.manager.DEFAULT_GROUP - string","Type","Constant","Description","The default group."]},{"l":"FILE_NAME","p":["Signature","plugins.core.touchbar.manager.FILE_NAME - string","Type","Constant","Description","File name of settings file."]},{"l":"FOLDER_NAME","p":["Signature","plugins.core.touchbar.manager.FOLDER_NAME - string","Type","Constant","Description","Folder Name where settings file is contained."]},{"l":"Variables"},{"l":"maxItems","p":["Signature","plugins.core.touchbar.manager.maxItems - number","Type","Variable","Description","The maximum number of Touch Bar items per group."]},{"l":"numberOfSubGroups","p":["Signature","plugins.core.touchbar.manager.numberOfSubGroups - number","Type","Variable","Description","The number of Sub Groups per Touch Bar Group."]},{"l":"Functions"},{"l":"activeGroup","p":["Signature","plugins.core.touchbar.manager.activeGroup() - string","Type","Function","Description","Returns the active group.","Parameters","None","Returns","Returns the active group or manager.defaultGroup as a string.","Notes"]},{"l":"activeSubGroup","p":["Signature","plugins.core.touchbar.manager.activeSubGroup() - string","Type","Function","Description","Returns the active sub-group.","Parameters","None","Returns","Returns the active sub group as string","Notes"]},{"l":"clear","p":["Signature","plugins.core.touchbar.manager.clear() - none","Type","Function","Description","Clears the Touch Bar items.","Parameters","None","Returns","Notes"]},{"l":"forceGroupChange","p":["Signature","plugins.core.touchbar.manager.forceGroupChange(combinedGroupAndSubGroupID) - none","Type","Function","Description","Loads a specific sub-group.","Parameters","combinedGroupAndSubGroupID - The group and subgroup as a single string.","Returns","None","Notes"]},{"l":"getAction","p":["Signature","plugins.core.touchbar.manager.getAction(button, group) - string","Type","Function","Description","Returns a specific Touch Bar Action.","Parameters","button - Button ID as string group - Group ID as string","Returns","Action as string","Notes"]},{"l":"getActionHandlerID","p":["Signature","plugins.core.touchbar.manager.getActionHandlerID(button, group) - string","Type","Function","Description","Returns a specific Touch Bar Action Handler ID.","Parameters","button - Button ID as string group - Group ID as string","Returns","Action as string","Notes"]},{"l":"getActionTitle","p":["Signature","plugins.core.touchbar.manager.getActionTitle(button, group) - string","Type","Function","Description","Returns a specific Touch Bar Action Title.","Parameters","button - Button ID as string group - Group ID as string","Returns","Action as string","Notes"]},{"l":"getBankLabel","p":["Signature","plugins.core.touchbar.manager.getBankLabel(group) - string","Type","Function","Description","Returns a specific Touch Bar Bank Label.","Parameters","group - Group ID as string","Returns","Label as string","Notes"]},{"l":"getIcon","p":["Signature","plugins.core.touchbar.manager.getIcon(button, group) - string","Type","Function","Description","Returns a specific Touch Bar Icon.","Parameters","button - Button ID as string group - Group ID as string","Returns","Icon data as string","Notes"]},{"l":"getLabel","p":["Signature","plugins.core.touchbar.manager.getLabel(button, group) - string","Type","Function","Description","Returns a specific Touch Bar Label.","Parameters","button - Button ID as string group - Group ID as string","Returns","Label as string","Notes"]},{"l":"gotoSubGroup","p":["Signature","plugins.core.touchbar.manager.gotoSubGroup() - none","Type","Function","Description","Loads a specific sub-group.","Parameters","id - The ID of the sub-group.","Returns","None","Notes"]},{"l":"groupStatus","p":["Signature","plugins.core.touchbar.manager.groupStatus(groupID, status) - none","Type","Function","Description","Updates a group's visibility status.","Parameters","groupID - the group you want to update as a string. status - the status of the group as a boolean.","Returns","None","Notes"]},{"l":"incrementActiveSubGroup","p":["Signature","plugins.core.touchbar.manager.incrementActiveSubGroup() - none","Type","Function","Description","Increments the active sub-group","Parameters","None","Returns","Notes"]},{"l":"init","p":["Signature","plugins.core.touchbar.manager.init(deps) - self","Type","Function","Description","Initialises the module.","Parameters","None","Returns","The module.","Notes"]},{"l":"nextSubGroup","p":["Signature","plugins.core.touchbar.manager.nextSubGroup() - none","Type","Function","Description","Goes to the next sub-group for the active group.","Parameters","None","Returns","Notes"]},{"l":"previousSubGroup","p":["Signature","plugins.core.touchbar.manager.previousSubGroup() - none","Type","Function","Description","Goes to the previous sub-group for the active group.","Parameters","None","Returns","Notes"]},{"l":"start","p":["Signature","plugins.core.touchbar.manager.start() - none","Type","Function","Description","Starts the CommandPost Touch Bar module.","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","plugins.core.touchbar.manager.stop() - none","Type","Function","Description","Stops the CommandPost Touch Bar module.","Parameters","None","Returns","Notes"]},{"l":"toggle","p":["Signature","plugins.core.touchbar.manager.toggle() - none","Type","Function","Description","Toggles the CommandPost Touch Bar module.","Parameters","None","Returns","Notes"]},{"l":"touchbar","p":["Signature","plugins.core.touchbar.manager.touchbar() - none","Type","Function","Description","Returns the hs._asm.undocumented.touchbar object if it exists.","Parameters","None","Returns","hs._asm.undocumented.touchbar","Notes"]},{"l":"update","p":["Signature","plugins.core.touchbar.manager.update() - none","Type","Function","Description","Updates the Touch Bar.","Parameters","None","Returns","Notes"]},{"l":"updateAction","p":["Signature","plugins.core.touchbar.manager.updateAction(button, group, actionTitle, handlerID, action) - boolean","Type","Function","Description","Updates a Touch Bar action.","Parameters","button - Button ID as string group - Group ID as string actionTitle - Action Title as string handlerID - Handler ID as string action - Action as table","Returns","true if successfully updated, or false if a duplicate entry was found","Notes"]},{"l":"updateBankLabel","p":["Signature","plugins.core.touchbar.manager.updateBankLabel(group, label) - none","Type","Function","Description","Updates a Touch Bar Bank Label.","Parameters","group - Group ID as string label - Label as string","Returns","None","Notes"]},{"l":"updateIcon","p":["Signature","plugins.core.touchbar.manager.updateIcon(button, group, icon) - none","Type","Function","Description","Updates a Touch Bar icon.","Parameters","button - Button ID as string group - Group ID as string icon - Icon Data as string","Returns","None","Notes"]},{"l":"updateLabel","p":["Signature","plugins.core.touchbar.manager.updateLabel(button, group, label) - none","Type","Function","Description","Updates a Touch Bar label.","Parameters","button - Button ID as string group - Group ID as string label - Label as string","Returns","None","Notes"]},{"l":"updateOrder","p":["Signature","plugins.core.touchbar.manager.updateOrder(direction, button, group) - none","Type","Function","Description","Shifts a Touch Bar button either up or down.","Parameters","direction - Either \"up\" or \"down\" button - Button ID as string group - Group ID as string","Returns","None","Notes"]},{"l":"Fields"},{"l":"buttons","p":["Signature","plugins.core.touchbar.manager.buttons cp.prop: table","Type","Field","Description","Contains all the saved Touch Bar Buttons"]},{"l":"enabled","p":["Signature","plugins.core.touchbar.manager.enabled cp.prop: boolean","Type","Field","Description","Enable or disable Touch Bar Support."]},{"l":"supported","p":["Signature","plugins.core.touchbar.manager.supported cp.prop: boolean; read-only","Type","Field","Description","Is true if the Touch Bar is supported on this version of macOS."]}],[{"i":"pluginscoretouchbarmanagerwidgets","l":"plugins.core.touchbar.manager.widgets","p":["Touch Bar Widgets Manager"]},{"l":"API Overview","p":["Variables- Configurable values","widgets","Functions- API calls offered directly by the extension","allGroups","Methods- API calls which can only be made on an object returned by a constructor","get","getAll","id","new","params"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"widgets","p":["Signature","plugins.core.touchbar.manager.widgets - table","Type","Variable","Description","Widget Manager"]},{"l":"Functions"},{"l":"allGroups","p":["Signature","plugins.core.touchbar.manager.widgets.allGroups() - table","Type","Function","Description","Returns a table containing all of the widget groups.","Parameters","None","Returns","Table","Notes"]},{"l":"Methods"},{"l":"get","p":["Signature","plugins.core.touchbar.manager.widgets:get(id) - table","Type","Method","Description","Gets a Touch Bar widget","Parameters","id- The unique ID for the widget you want to return.","Returns","table containing the widget","Notes"]},{"l":"getAll","p":["Signature","plugins.core.touchbar.manager.widgets:getAll() - table","Type","Method","Description","Returns all of the created widgets","Parameters","None","Returns","table containing all of the created callbacks","Notes"]},{"l":"id","p":["Signature","plugins.core.touchbar.manager.widgets:id() - string","Type","Method","Description","Returns the ID of the widget","Parameters","None","Returns","The ID of the widget as a string","Notes"]},{"l":"new","p":["Signature","plugins.core.touchbar.manager.widgets:new(id, params) - table","Type","Method","Description","Creates a new Touch Bar Widget.","Parameters","id- The unique ID for this widget. params- A table of parameters","Returns","table that has been created","Notes"]},{"l":"params","p":["Signature","plugins.core.touchbar.manager.widgets:params() - function","Type","Method","Description","Returns the paramaters of the widget","Parameters","None","Returns","The paramaters of the widget","Notes"]}],[{"i":"pluginscoretouchbarprefs","l":"plugins.core.touchbar.prefs","p":["Touch Bar Preferences Panel"]},{"l":"API Overview","p":["Variables- Configurable values","defaultIconPath","maxItems","supportedExtensions","Functions- API calls offered directly by the extension","getGroupEditor","init","setGroupEditor","Fields- Variables which can only be accessed from an object returned by a constructor","enabled","lastGroup","scrollBarPosition"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"defaultIconPath","p":["Signature","plugins.core.touchbar.prefs.defaultIconPath - string","Type","Variable","Description","Default Path where built-in icons are stored"]},{"l":"maxItems","p":["Signature","plugins.core.touchbar.prefs.maxItems - number","Type","Variable","Description","The maximum number of Touch Bar items per group."]},{"l":"supportedExtensions","p":["Signature","plugins.core.touchbar.prefs.supportedExtensions - string","Type","Variable","Description","Table of supported extensions for Touch Bar Icons."]},{"l":"Functions"},{"l":"getGroupEditor","p":["Signature","plugins.core.touchbar.prefs.getGroupEditor(groupId) - none","Type","Function","Description","Gets the Group Editor","Parameters","groupId - Group ID","Returns","Group Editor","Notes"]},{"l":"init","p":["Signature","plugins.core.touchbar.prefs.init(deps, env) - module","Type","Function","Description","Initialise the Module.","Parameters","deps - Dependancies Table env - Environment Table","Returns","The Module","Notes"]},{"l":"setGroupEditor","p":["Signature","plugins.core.touchbar.prefs.setGroupEditor(groupId, editorFn) - none","Type","Function","Description","Sets the Group Editor","Parameters","groupId - Group ID editorFn - Editor Function","Returns","None","Notes"]},{"l":"Fields"},{"l":"enabled","p":["Signature","plugins.core.touchbar.prefs.enabled cp.prop: boolean","Type","Field","Description","Enable or disable Touch Bar Support."]},{"l":"lastGroup","p":["Signature","plugins.core.touchbar.prefs.lastGroup cp.prop: string","Type","Field","Description","Last group used in the Preferences Drop Down."]},{"l":"scrollBarPosition","p":["Signature","plugins.core.touchbar.prefs.scrollBarPosition cp.prop: string","Type","Field","Description","Last group used in the Preferences Drop Down."]}],[{"i":"pluginscoretouchbarvirtual","l":"plugins.core.touchbar.virtual","p":["Virtual Touch Bar Manager"]},{"l":"API Overview","p":["callback","Constants- Useful values which cannot be changed","enabled","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","hide","init","isActive","lastLocation","LOCATION_DEFAULT_VALUE","LOCATION_DRAGGABLE","LOCATION_MOUSE","macOSVersionSupported","show","start","stop","supported","touchbar","update","updateLocationCallback","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"LOCATION_DEFAULT_VALUE","p":["Signature","plugins.core.touchbar.virtual.LOCATION_DEFAULT_VALUE - string","Type","Constant","Description","Default location value."]},{"l":"LOCATION_DRAGGABLE","p":["Signature","plugins.core.touchbar.virtual.LOCATION_DRAGGABLE - string","Type","Constant","Description","Location is Draggable."]},{"l":"LOCATION_MOUSE","p":["Signature","plugins.core.touchbar.virtual.LOCATION_MOUSE - string","Type","Constant","Description","Location is Mouse."]},{"l":"Variables"},{"l":"updateLocationCallback","p":["Signature","plugins.core.touchbar.virtual.updateLocationCallback - table","Type","Variable","Description","Update Location Callback"]},{"l":"Functions"},{"l":"callback","p":["Signature","plugins.core.touchbar.virtual.callback(_, message) - none","Type","Function","Description","Callback Function for the Virtual Touch Bar","Parameters","obj - the touchbarObject the callback is for message - the message to the callback, either \"didEnter\" or \"didExit\"","Returns","None","Notes"]},{"l":"hide","p":["Signature","plugins.core.touchbar.virtual.hide() - none","Type","Function","Description","Hide the Virtual Touch Bar","Parameters","None","Returns","Notes"]},{"l":"init","p":["Signature","plugins.core.touchbar.virtual.init() - self","Type","Function","Description","Initialise the module.","Parameters","None","Returns","Self","Notes"]},{"l":"show","p":["Signature","plugins.core.touchbar.virtual.show() - none","Type","Function","Description","Show the Virtual Touch Bar","Parameters","None","Returns","Notes"]},{"l":"start","p":["Signature","plugins.core.touchbar.virtual.start() - none","Type","Function","Description","Initialises the Virtual Touch Bar","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","plugins.core.touchbar.virtual.stop() - none","Type","Function","Description","Stops the Virtual Touch Bar","Parameters","None","Returns","Notes"]},{"l":"touchbar","p":["Signature","plugins.core.touchbar.virtual.touchbar() - none","Type","Function","Description","Returns the hs._asm.undocumented.touchbar object if it exists.","Parameters","None","Returns","hs._asm.undocumented.touchbar","Notes"]},{"l":"update","p":["Signature","plugins.core.touchbar.virtual.update() - none","Type","Function","Description","Updates the visibility and location of the Virtual Touch Bar","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"enabled","p":["Signature","plugins.core.touchbar.virtual.enabled cp.prop: boolean","Type","Field","Description","Is true if the plugin is enabled."]},{"l":"isActive","p":["Signature","plugins.core.touchbar.virtual.isActive cp.prop: boolean; read-only","Type","Field","Description","Is true if the plugin is enabled and the TouchBar is supported on this OS."]},{"l":"lastLocation","p":["Signature","plugins.core.touchbar.virtual.lastLocation cp.prop: point table","Type","Field","Description","The last known Virtual Touch Bar Location"]},{"l":"macOSVersionSupported","p":["Signature","plugins.core.touchbar.virtual.macOSVersionSupported cp.prop: boolean","Type","Field","Description","Does the macOS version support the Touch Bar?"]},{"l":"supported","p":["Signature","plugins.core.touchbar.virtual.supported cp.prop: boolean; read-only","Type","Field","Description","Is true if the Touch Bar is supported on this version of macOS."]}],[{"i":"pluginscoretouchbarwidgetsvolume","l":"plugins.core.touchbar.widgets.volume","p":["Volume Slider"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","widget"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.core.touchbar.widgets.volume.init() - nil","Type","Function","Description","Initialise the module.","Parameters","None","Returns","Notes"]},{"l":"widget","p":["Signature","plugins.core.touchbar.widgets.volume.widget() - hs._ asm.undocumented.touchbar.item``","Type","Function","Description","The Widget","Parameters","None","Returns","A hs._asm.undocumented.touchbar.item","Notes"]}],[{"i":"pluginscoretouchbarwidgetswindowslide","l":"plugins.core.touchbar.widgets.windowSlide","p":["Window Slide Widget for Touch Bar."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","widget"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.core.touchbar.widgets.windowSlide.init() - nil","Type","Function","Description","Initialise the module.","Parameters","None","Returns","Notes"]},{"l":"widget","p":["Signature","plugins.core.touchbar.widgets.windowSlide.widget() - hs._ asm.undocumented.touchbar.item``","Type","Function","Description","The Widget","Parameters","None","Returns","A hs._asm.undocumented.touchbar.item","Notes"]}],[{"i":"pluginscoretourboxchangeapplications","l":"plugins.core.tourbox.changeapplications","p":["Allows you to change the TourBox application if set to manual."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginscoretourboxmanager","l":"plugins.core.tourbox.manager","p":["Loupedeck CT Manager Plugin."]},{"l":"API Overview","p":["Variables- Configurable values","defaultLayout","Functions- API calls offered directly by the extension","connectToTourBox","reset","resetTimers","Fields- Variables which can only be accessed from an object returned by a constructor","activeBanks","automaticallySwitchApplications","displayMessageWhenChangingBanks","enabled","items"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"defaultLayout","p":["Signature","plugins.core.tourbox.manager.defaultLayout - table","Type","Variable","Description","Default Loupedeck CT Layout"]},{"l":"Functions"},{"l":"connectToTourBox","p":["Signature","plugins.core.tourbox.manager.connectToTourBox([portName]) - none","Type","Function","Description","Attempts to establish the TourBox serial connection.","Parameters","portName - The optional port name of the device.","Returns","None","Notes"]},{"l":"reset","p":["Signature","plugins.core.tourbox.manager.reset()","Type","Function","Description","Resets the config back to the default layout.","Parameters","None","Returns","Notes"]},{"l":"resetTimers","p":["Signature","plugins.core.tourbox.manager.resetTimers() - none","Type","Function","Description","Resets all the various timers and memories.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"activeBanks","p":["Signature","plugins.core.tourbox.manager.activeBanks cp.prop: table","Type","Field","Description","Table of active banks for each application."]},{"l":"automaticallySwitchApplications","p":["Signature","plugins.core.tourbox.manager.automaticallySwitchApplications cp.prop: boolean","Type","Field","Description","Enable or disable the automatic switching of applications."]},{"l":"displayMessageWhenChangingBanks","p":["Signature","plugins.core.tourbox.manager.displayMessageWhenChangingBanks cp.prop: boolean","Type","Field","Description","Display message when changing banks?"]},{"l":"enabled","p":["Signature","plugins.core.tourbox.manager.enabled cp.prop: boolean","Type","Field","Description","Is Loupedeck CT support enabled?"]},{"l":"items","p":["Signature","plugins.core.tourbox.manager.items cp.prop: table","Type","Field","Description","Contains all the saved TourBox layouts."]}],[{"i":"pluginscoretourboxprefs","l":"plugins.core.tourbox.prefs","p":["TourBox Preferences Panel"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","lastApplication","lastControlType","lastExportPath","lastImportPath","lastPage"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"lastApplication","p":["Signature","plugins.core.tourbox.prefs.lastApplication cp.prop: string","Type","Field","Description","Last Bank used in the Preferences Panel."]},{"l":"lastControlType","p":["Signature","plugins.core.tourbox.prefs.lastControlType cp.prop: string","Type","Field","Description","Last Selected Control Type used in the Preferences Panel."]},{"l":"lastExportPath","p":["Signature","plugins.core.tourbox.prefs.lastExportPath cp.prop: string","Type","Field","Description","Last Export path."]},{"l":"lastImportPath","p":["Signature","plugins.core.tourbox.prefs.lastImportPath cp.prop: string","Type","Field","Description","Last Import path."]},{"l":"lastPage","p":["Signature","plugins.core.tourbox.prefs.lastPage cp.prop: number","Type","Field","Description","Last Page used in the Preferences Panel."]}],[{"i":"pluginscoreutilitiesmanagerpanel","l":"plugins.core.utilities.manager.panel","p":["CommandPost Preferences Panel."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","addButton","addCheckbox","addContent","addHandler","addHeading","addParagraph","addPassword","addSelect","addTextbox","getToolbarItem"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.core.utilities.manager.panel.new(params, manager) - cp.core.utilities.manager.panel","Type","Constructor","Description","Constructs a new panel with the specified priority and ID.","Parameters","params - Table of parameters manager - The manager","Returns","A cp.core.utilities.manager.panel object","Notes"]},{"l":"Methods"},{"l":"addButton","p":["Signature","plugins.core.utilities.manager.panel:addButton(params) - panel","Type","Method","Description","Adds a button to the panel.","Parameters","params - The list of parameters.","Returns","The same panel.","Notes","The params table may contain:** id- (optional) the unique ID for the button. If none is provided, one is generated.** value- The value of the button. This is sent to the onclick function.** label- The text label for the button. Defaults to the value if not provided.** width- The width of the button in pixels.** onclick- the function to execute when the button is clicked. The function should have the signature of function(id, value), where id is the id of the button that was clicked, and value is the value of the button."]},{"l":"addCheckbox","p":["Signature","plugins.core.utilities.manager.panel:addCheckbox(priority, params) - panel","Type","Method","Description","Adds a checkbox to the panel with the specified priority and params.","Parameters","priority- The priority number for the checkbox. params- The set of parameters for the checkbox.","Returns","The panel.","Notes","The params can contain the following fields:** id- (optional) The unique ID. If none is provided, one will be generated.** name- (optional) The name of the checkbox field.** label- (optional) The text label to display after the checkbox.** onchange- (optional) a function that will get called when the checkbox value changes. It will be passed two parameters, id and params, the latter of which is a table containing the value and checked values of the checkbox.** class- (optional) the CSS class list to apply to the checkbox."]},{"l":"addContent","p":["Signature","plugins.core.utilities.manager.panel:addContent(priority, content[, escaped]) - panel","Type","Method","Description","Adds the specified content to the panel, with the specified priority order.","Parameters","priority- the priority order of the content. content- a value that can be converted to a string. escaped- if true, the content will be escaped.","Returns","The panel.","Notes"]},{"l":"addHandler","p":["Signature","plugins.core.utilities.manager.panel:addHandler(event, id, handlerFn, keys) - none","Type","Method","Description","Gets a handler from an Handler ID","Parameters","event - The event id - the Handler ID handlerFn - The Handler function keys - Keys","Returns","None","Notes"]},{"l":"addHeading","p":["Signature","plugins.core.utilities.manager.panel:addHeading(text) - panel","Type","Method","Description","Adds a heading to the panel","Parameters","text - The text of the heading as a string","Returns","The panel object.","Notes"]},{"l":"addParagraph","p":["Signature","plugins.core.utilities.manager.panel:addParagraph(content[, escaped[, class]]) - panel","Type","Method","Description","Adds a Paragraph to the panel","Parameters","content - The content as a string escaped - Whether or not the HTML should be escaped as a boolean. Defaults to true for simple text. class - The class as a string","Returns","The panel object.","Notes"]},{"l":"addPassword","p":["Signature","plugins.core.utilities.manager.panel:addPassword(params) - panel","Type","Method","Description","Adds a password text-box to the panel.","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addSelect","p":["Signature","plugins.core.utilities.manager.panel:addSelect(priority, params) - panel","Type","Method","Description","Adds a select to the panel.","Parameters","priority - Priority of the item as number. params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addTextbox","p":["Signature","plugins.core.utilities.manager.panel:addTextbox(params) - panel","Type","Method","Description","Adds a text-box to the panel","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"getToolbarItem","p":["Signature","plugins.core.utilities.manager.panel:getToolbarItem() - table","Type","Method","Description","Gets the Tool Bar as a table","Parameters","None","Returns","The toolbar item as a table.","Notes"]}],[{"i":"pluginscorewatchfoldersmanager","l":"plugins.core.watchfolders.manager","p":["Manager for the CommandPost Watch Folders Panel."]},{"l":"Submodules","p":["plugins.core.watchfolders.manager.panel"]},{"l":"API Overview","p":["addHandler","addPanel","Constants- Useful values which cannot be changed","DEFAULT_HEIGHT","DEFAULT_TITLE","DEFAULT_WIDTH","DEFAULT_WINDOW_STYLE","Functions- API calls offered directly by the extension","getHandler","getLabel","hide","init","injectScript","maxPanelHeight","position","selectPanel","setPanelRenderer","show","WEBVIEW_LABEL"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_HEIGHT","p":["Signature","plugins.core.watchfolders.manager.DEFAULT_HEIGHT - number","Type","Constant","Description","Default Height of the Watch Folder Window"]},{"l":"DEFAULT_TITLE","p":["Signature","plugins.core.watchfolders.manager.DEFAULT_TITLE - number","Type","Constant","Description","Default Title of the Watch Folder Window"]},{"l":"DEFAULT_WIDTH","p":["Signature","plugins.core.watchfolders.manager.DEFAULT_WIDTH - number","Type","Constant","Description","Default Width of the Watch Folder Window"]},{"l":"DEFAULT_WINDOW_STYLE","p":["Signature","plugins.core.watchfolders.manager.DEFAULT_WINDOW_STYLE - table","Type","Constant","Description","Table of Default Window Style"]},{"l":"position","p":["Signature","plugins.core.watchfolders.manager.position cp.prop: table","Type","Constant","Description","Returns the last frame saved in settings."]},{"l":"WEBVIEW_LABEL","p":["Signature","plugins.core.watchfolders.manager.WEBVIEW_LABEL - string","Type","Constant","Description","WebView Label"]},{"l":"Functions"},{"l":"addHandler","p":["Signature","plugins.core.watchfolders.manager.addHandler(id, handlerFn) - string","Type","Function","Description","Adds a Handler","Parameters","id - The ID handlerFn - the handler function","Returns","Nothing","Notes"]},{"l":"addPanel","p":["Signature","plugins.core.watchfolders.manager.addPanel(params) - plugins.core.watchfolders.manager.panel","Type","Function","Description","Adds a new panel with the specified params to the preferences manager.","Parameters","params- The parameters table. Details below.","Returns","The new panel instance.","Notes","The params can have the following properties. The priority and id and properties are required.** priority- An integer value specifying the priority of the panel compared to others.** id- A string containing the unique ID of the panel.** label- The human-readable label for the panel icon.** image- The hs.image for the panel icon.** tooltip- The human-readable details for the toolbar icon when the mouse is hovering over it."]},{"l":"getHandler","p":["Signature","plugins.core.watchfolders.manager.getHandler(id) - string","Type","Function","Description","Returns the handler for a given ID.","Parameters","id - The ID","Returns","Table","Notes"]},{"l":"getLabel","p":["Signature","plugins.core.watchfolders.manager.getLabel() - string","Type","Function","Description","Returns the Webview label.","Parameters","None","Returns","The Webview label as a string.","Notes"]},{"l":"hide","p":["Signature","plugins.core.watchfolders.manager.hide() - boolean","Type","Function","Description","Hides the Watch Folders Window","Parameters","None","Returns","True if successful or nil if an error occurred","Notes"]},{"l":"init","p":["Signature","plugins.core.watchfolders.manager.init() - none","Type","Function","Description","Initialises the Watch Folder Manager.","Parameters","None","Returns","Nothing","Notes"]},{"l":"injectScript","p":["Signature","plugins.core.watchfolders.manager.injectScript(script) - none","Type","Function","Description","Injects JavaScript into the Watch Folders Webview.","Parameters","script - The JavaScript code you want to inject in the form of a string.","Returns","None","Notes"]},{"l":"maxPanelHeight","p":["Signature","plugins.core.watchfolders.manager.maxPanelHeight() - number","Type","Function","Description","Gets the maximum panel height as a number","Parameters","None","Returns","A number","Notes"]},{"l":"selectPanel","p":["Signature","plugins.core.watchfolders.manager.selectPanel(id) - none","Type","Function","Description","Selects a Preferences Panel.","Parameters","id - the ID of the panel you want to select.","Returns","None","Notes"]},{"l":"setPanelRenderer","p":["Signature","plugins.core.watchfolders.manager.setPanelRenderer(renderer) - none","Type","Function","Description","Sets a Panel Renderer","Parameters","renderer - The renderer","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.core.watchfolders.manager.show([panelID]) - boolean","Type","Function","Description","Shows the Watch Folders Window","Parameters","[panelID] - An optional panel ID","Returns","True if successful or nil if an error occurred","Notes"]}],[{"i":"pluginscorewatchfoldersmanagerpanel","l":"plugins.core.watchfolders.manager.panel","p":["Watch Folder Panel Manager."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","addButton","addCheckbox","addContent","addHandler","addHeading","addParagraph","addPassword","addSelect","addTextbox","generateContent","getToolbarItem"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.core.watchfolders.manager.panel.new(params, manager) - panel object","Type","Constructor","Description","Constructs a new panel with the specified priority and ID.","Parameters","params - Table of parameters manager - The manager","Returns","A panel object","Notes"]},{"l":"Methods"},{"l":"addButton","p":["Signature","plugins.core.watchfolders.manager.panel:addButton(priority, params) - panel","Type","Method","Description","Adds a button to the panel with the specified priority and params.","Parameters","priority- The priority number for the button. params- The set of parameters for the button.","Returns","The panel.","Notes"]},{"l":"addCheckbox","p":["Signature","plugins.core.watchfolders.manager.panel:addCheckbox(priority, params) - panel","Type","Method","Description","Adds a checkbox to the panel with the specified priority and params.","Parameters","priority- The priority number for the checkbox. params- The set of parameters for the checkbox.","Returns","The panel.","Notes","The params can contain the following fields:** id- (optional) The unique ID. If none is provided, one will be generated.** name- (optional) The name of the checkbox field.** label- (optional) The text label to display after the checkbox.** onchange- (optional) a function that will get called when the checkbox value changes. It will be passed two parameters, id and params, the latter of which is a table containing the value and checked values of the checkbox.** class- (optional) the CSS class list to apply to the checkbox."]},{"l":"addContent","p":["Signature","plugins.core.watchfolders.manager.panel:addContent(priority, content[, escaped]) - panel","Type","Method","Description","Adds the specified content to the panel, with the specified priority order.","Parameters","priority- the priority order of the content. content- a value that can be converted to a string. escaped- if true, the content will be escaped.","Returns","The panel object","Notes"]},{"l":"addHandler","p":["Signature","plugins.core.watchfolders.manager.panel:addHandler(event, id, handlerFn, keys) - none","Type","Method","Description","Adds a handler","Parameters","event - The JavaScript event as string id - The ID as string handlerFn - The handler function keys - Table of keys","Returns","The panel object","Notes"]},{"l":"addHeading","p":["Signature","plugins.core.watchfolders.manager.panel:addHeading(priority, text, level) - panel","Type","Method","Description","Adds a heading to the panel with the specified priority and text.","Parameters","priority- The priority number for the heading. text- The content of the heading as a string. level- The level of the heading.","Returns","The panel object","Notes"]},{"l":"addParagraph","p":["Signature","plugins.core.watchfolders.manager.panel:addParagraph(priority, content[, escaped[, class]]) - panel","Type","Method","Description","Adds a paragraph to the panel with the specified priority and content.","Parameters","priority- The priority number for the paragraph. content- The content you want to include as a string. escaped- Whether or not the HTML is escaped as a boolean. class- The class name as a string.","Returns","The panel object","Notes"]},{"l":"addPassword","p":["Signature","plugins.core.watchfolders.manager.panel:addPassword(priority, params) - panel","Type","Method","Description","Adds a password textbox to the panel with the specified priority and params.","Parameters","priority- The priority number for the password. params- The set of parameters for the password.","Returns","The panel.","Notes"]},{"l":"addSelect","p":["Signature","plugins.core.watchfolders.manager.panel:addSelect(priority, params) - panel","Type","Method","Description","Adds a select to the panel with the specified priority and params.","Parameters","priority- The priority number for the select. params- The set of parameters for the select.","Returns","The panel.","Notes"]},{"l":"addTextbox","p":["Signature","plugins.core.watchfolders.manager.panel:addTextbox(priority, params) - panel","Type","Method","Description","Adds a textbox to the panel with the specified priority and params.","Parameters","priority- The priority number for the textbox. params- The set of parameters for the textbox.","Returns","The panel.","Notes"]},{"l":"generateContent","p":["Signature","plugins.core.watchfolders.manager.panel:generateContent() - string","Type","Method","Description","Gets generated toolbar content","Parameters","None","Returns","A string of generated content","Notes"]},{"l":"getToolbarItem","p":["Signature","plugins.core.watchfolders.manager.panel:getToolbarItem() - table","Type","Method","Description","Returns a Toolbar Item","Parameters","None","Returns","Table of Toolbar Item Values","Notes"]}],[{"i":"pluginsdiskutilityapplicationmanager","l":"plugins.diskutility.application.manager","p":["Registers Disk Utility with the Core Application Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsecammliveapplicationmanager","l":"plugins.ecammlive.application.manager","p":["Registers Ecamm Live with the Core Application Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutproactionscustom","l":"plugins.finalcutpro.actions.custom","p":["Creates a bunch of commands that can be used to assign actions to. This allows you to assign any action to a shortcut key in CommandPost."]},{"l":"API Overview","p":["Variables- Configurable values","shortcuts","Functions- API calls offered directly by the extension","apply","assign"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"shortcuts","p":["Signature","plugins.finalcutpro.actions.custom.shortcuts cp.prop: table","Type","Variable","Description","Table of shortcuts."]},{"l":"Functions"},{"l":"apply","p":["Signature","plugins.finalcutpro.actions.custom.apply(id) - none","Type","Function","Description","Applies a shortcut.","Parameters","id- The Custom Action ID.","Returns","None","Notes"]},{"l":"assign","p":["Signature","plugins.finalcutpro.actions.custom.assign(id, handlerId) - none","Type","Function","Description","Assigns an Action to a Shortcut via a Console.","Parameters","id- The Custom Action ID. completionFn- An optional completion function that triggers when a selection is made.","Returns","None","Notes"]}],[{"i":"pluginsfinalcutproadvancedbackupinterval","l":"plugins.finalcutpro.advanced.backupinterval","p":["Change Final Cut Pro's Backup Interval."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutproadvanceddisablewaveforms","l":"plugins.finalcutpro.advanced.disablewaveforms","p":["Disable Waveforms Plugin."]},{"l":"API Overview","p":["Variables- Configurable values","disableWaveform"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"disableWaveform","p":["Signature","plugins.finalcutpro.advanced.disablewaveforms.disableWaveform cp.prop: boolean","Type","Variable","Description","Waveforms Disabled?"]}],[{"i":"pluginsfinalcutproadvancedfcpxml","l":"plugins.finalcutpro.advanced.fcpxml","p":["Adds preferences for extra FCPXML import and export options."]},{"l":"API Overview","p":["Variables- Configurable values","exportEnabled","importEnabled"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"exportEnabled","p":["Signature","plugins.finalcutpro.advanced.fcpxml.exportEnabled cp.prop: boolean","Type","Variable","Description","Are extra FCPXML export options enabled?"]},{"l":"importEnabled","p":["Signature","plugins.finalcutpro.advanced.fcpxml.importEnabled cp.prop: boolean","Type","Variable","Description","Are extra FCPXML import options enabled?"]}],[{"i":"pluginsfinalcutproadvancedmulticam","l":"plugins.finalcutpro.advanced.multicam","p":["Show Timeline In Player."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","enabled"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"enabled","p":["Signature","plugins.finalcutpro.advanced.multicam.enabled cp.prop: boolean; live","Type","Constant","Description","Use Better Quality in Angles Viewer?"]}],[{"i":"pluginsfinalcutproadvancedplaybackrendering","l":"plugins.finalcutpro.advanced.playbackrendering","p":["Playback Rendering Plugin."]},{"l":"API Overview","p":["Variables- Configurable values","enabled"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"enabled","p":["Signature","plugins.finalcutpro.advanced.playbackrendering.enabled cp.prop: boolean","Type","Variable","Description","Gets whether or not Playback Rendering is enabled."]}],[{"i":"pluginsfinalcutproadvancedshowtimelineinviewers","l":"plugins.finalcutpro.advanced.showtimelineinviewers","p":["Show Timeline In Player."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","enabled"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"enabled","p":["Signature","plugins.finalcutpro.advanced.showtimelineinviewers.enabled cp.prop: boolean; live","Type","Constant","Description","Show Timeline in Player Enabled?"]}],[{"i":"pluginsfinalcutproapplicationmanager","l":"plugins.finalcutpro.application.manager","p":["Registers Final Cut Pro with the Core Application Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprobrowseraddnote","l":"plugins.finalcutpro.browser.addnote","p":["Add Note Plugin."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","addNoteToSelectedClip","Fields- Variables which can only be accessed from an object returned by a constructor","recentNotes"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"addNoteToSelectedClip","p":["Signature","plugins.finalcutpro.browser.addnote.addNoteToSelectedClip() - none","Type","Function","Description","Add Note to Selected Clip.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"recentNotes","p":["Signature","plugins.finalcutpro.browser.addnote.recentNotes cp.prop: table","Type","Field","Description","Table of recent notes."]}],[{"i":"pluginsfinalcutprobrowserappearanceandfiltering","l":"plugins.finalcutpro.browser.appearanceandfiltering","p":["Solo a clip in the Final Cut Pro Browser."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprobrowserclearnotes","l":"plugins.finalcutpro.browser.clearnotes","p":["Clear Notes in Final Cut Pro Browser."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprobrowsercsv","l":"plugins.finalcutpro.browser.csv","p":["Save Browser to CSV"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","saveBrowserContentsToCSV"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"saveBrowserContentsToCSV","p":["Signature","plugins.finalcutpro.browser.csv.saveBrowserContentsToCSV() - none","Type","Function","Description","Save Browser Contents to CSV","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprobrowserduration","l":"plugins.finalcutpro.browser.duration","p":["Shortcut for changing Final Cut Pro's Browser Height"]},{"l":"API Overview","p":["Variables- Configurable values","changeBrowserDurationAlreadyInProgress","Functions- API calls offered directly by the extension","changeBrowserDuration"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"changeBrowserDurationAlreadyInProgress","p":["Signature","plugins.finalcutpro.browser.duration.changeBrowserDurationAlreadyInProgress - boolean","Type","Variable","Description","Change timeline clip height already in progress."]},{"l":"Functions"},{"l":"changeBrowserDuration","p":["Signature","plugins.finalcutpro.browser.duration.changeBrowserDuration(direction) - none","Type","Function","Description","Change the Browser Clip Height","Parameters","direction - \"up\" or \"down\"","Returns","None","Notes"]}],[{"i":"pluginsfinalcutprobrowserframeiotomarkers","l":"plugins.finalcutpro.browser.frameiotomarkers","p":["Takes the contents of a Frame.io CSV file and adds markers to a clip selected in the Final Cut Pro Browser. Only one clip can be selected."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprobrowserheight","l":"plugins.finalcutpro.browser.height","p":["Shortcut for changing Final Cut Pro's Browser Height"]},{"l":"API Overview","p":["Variables- Configurable values","changeBrowserClipHeightAlreadyInProgress","Functions- API calls offered directly by the extension","changeBrowserClipHeight"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"changeBrowserClipHeightAlreadyInProgress","p":["Signature","plugins.finalcutpro.browser.height.changeBrowserClipHeightAlreadyInProgress - boolean","Type","Variable","Description","Change timeline clip height already in progress."]},{"l":"Functions"},{"l":"changeBrowserClipHeight","p":["Signature","plugins.finalcutpro.browser.height.changeBrowserClipHeight(direction) - none","Type","Function","Description","Change the Browser Clip Height","Parameters","direction - \"up\" or \"down\"","Returns","None","Notes"]}],[{"i":"pluginsfinalcutprobrowserinsertvertical","l":"plugins.finalcutpro.browser.insertvertical","p":["Insert Clips Vertically from Browser to Timeline."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprobrowserkeywords","l":"plugins.finalcutpro.browser.keywords","p":["Browser Keywords Presets."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","NUMBER_OF_PRESETS","NUMBER_OF_SHORTCUTS","Functions- API calls offered directly by the extension","restore","save"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"NUMBER_OF_PRESETS","p":["Signature","plugins.finalcutpro.browser.keywords.NUMBER_OF_PRESETS - number","Type","Constant","Description","The number of presets available."]},{"l":"NUMBER_OF_SHORTCUTS","p":["Signature","plugins.finalcutpro.browser.keywords.NUMBER_OF_SHORTCUTS - number","Type","Constant","Description","The number of Keyword Keyboard shortcuts available."]},{"l":"Functions"},{"l":"restore","p":["Signature","plugins.finalcutpro.browser.keywords.restore(preset) - none","Type","Function","Description","Restores a Keyword preset.","Parameters","preset - A preset number between 1 and the value of plugins.finalcutpro.browser.keywords.NUMBER_OF_PRESETS.","Returns","None","Notes"]},{"l":"save","p":["Signature","plugins.finalcutpro.browser.keywords.save(preset) - none","Type","Function","Description","Saves a Keyword preset.","Parameters","preset - A preset number between 1 and the value of plugins.finalcutpro.browser.keywords.NUMBER_OF_PRESETS.","Returns","None","Notes"]}],[{"i":"pluginsfinalcutprobrowserlayouts","l":"plugins.finalcutpro.browser.layouts","p":["Allows you to save and restore Browser Layouts.","This plugin creates two different types of actions:","Save/Restore Browser Layout to Memory This feature allows you save and restore five custom browser layouts, which can be easily triggered by a CommandPost action, such as a keyboard shortcut.","Save/Restore/Set Browser Layout for Selected Collection* This feature allows you to save a browser layout for the currently selected collection. This feature will only work if a single collection (either Keyword Collection or Smart Collection) is selected - if more than one is selected then you'll just hear an error beep. Once you save a browser layout, then the next time you click on the collection with your mouse, your previously saved browser layout will be automatically restored. Browser layouts are only automatically loaded when you use your mouse - collection layouts won't be loaded if you change collections using keyboard shortcuts. You can also temporarily prevent a browser layout from automatically loading by holding down the OPTION key.","Developer Note: This plugin currently uses a hs.eventtap rather than AX Notifications, because in testing we found the AX Notifications to be too unreliable. We also opted to just use the collection name as the reference point, rather than the path to the collection name (i.e. \"Edits\" instead of\"Library Name > Event Name > Folder Name > Collection Name\") so that browser layouts can easily be common across multiple libraries (i.e if you always have a Smart Collection called \"Edits\", then this smart collection will always have the same browser layout across all your libraries.","We're also currently using the menu position for selecting \"Show/Hide All Columns\" as the strings for these values are contained within a .nib file not a .strings file."]},{"l":"API Overview","p":["Variables- Configurable values","busy","lastCollection","Functions- API calls offered directly by the extension","getActiveColumnsNames","getClipNameSize","getSingleSelectedCollection","resetBrowserLayoutForSelectedCollection","restoreBrowserLayoutForSelectedCollection","restoreLayoutFromTable","saveBrowserLayoutForSelectedCollection","saveLayoutToTable","setupWatcher"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"busy","p":["Signature","plugins.finalcutpro.browser.layouts.busy - boolean","Type","Variable","Description","Are we already in the process of doing something?"]},{"l":"lastCollection","p":["Signature","plugins.finalcutpro.browser.layouts.lastCollection - string | nil","Type","Variable","Description","The last collection registered."]},{"l":"Functions"},{"l":"getActiveColumnsNames","p":["Signature","plugins.finalcutpro.browser.layouts.getActiveColumnsNames() - table","Type","Function","Description","Get active column names in a table.","Parameters","None","Returns","A table of active column names or an empty table if something goes wrong.","Notes"]},{"l":"getClipNameSize","p":["Signature","plugins.finalcutpro.browser.layouts.getClipNameSize() - string | nil","Type","Function","Description","Gets the Clip Name Size as a string.","Parameters","None","Returns","The Clip Name Size as a string or nil if cannot be found.","Notes"]},{"l":"getSingleSelectedCollection","p":["Signature","plugins.finalcutpro.browser.layouts.getSingleSelectedCollection() - string | nil","Type","Function","Description","If a single collection is selected in the browser it's value is returned as a string.","Parameters","None","Returns","A string if successful otherwise nil.","Notes"]},{"l":"resetBrowserLayoutForSelectedCollection","p":["Signature","plugins.finalcutpro.browser.layouts.resetBrowserLayoutForSelectedCollection() - none","Type","Function","Description","Reset Browser Layout for selected collection.","Parameters","None","Returns","Notes","An error sound will play if there's nothing to reset."]},{"l":"restoreBrowserLayoutForSelectedCollection","p":["Signature","plugins.finalcutpro.browser.layouts.restoreBrowserLayoutForSelectedCollection() - none","Type","Function","Description","Restore Browser Layout for selected collection.","Parameters","None","Returns","Notes","An error sound will play if there's nothing to restore."]},{"l":"restoreLayoutFromTable","p":["Signature","plugins.finalcutpro.browser.layouts.restoreLayoutFromTable(layout) - boolean","Type","Function","Description","Restore Layout from Table.","Parameters","layout - The layout settings in a table.","Returns","true if successful otherwise false","Notes"]},{"l":"saveBrowserLayoutForSelectedCollection","p":["Signature","plugins.finalcutpro.browser.layouts.saveBrowserLayoutForSelectedCollection() - none","Type","Function","Description","Save Browser Layout for selected collection.","Parameters","None","Returns","Notes","An error sound will play if there's nothing to save."]},{"l":"saveLayoutToTable","p":["Signature","plugins.finalcutpro.browser.layouts.saveLayoutToTable() - table | boolean","Type","Function","Description","Save Layout to Table.","Parameters","None","Returns","A table containing the layout settings if successful otherwise false.","Notes"]},{"l":"setupWatcher","p":["Signature","plugins.finalcutpro.browser.layouts.setupWatcher() - none","Type","Function","Description","Creates or destroys the keyboard watcher.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprobrowserpasteboardtomarkers","l":"plugins.finalcutpro.browser.pasteboardtomarkers","p":["Take the contents of the Pasteboard and pastes it as clip markers on the selected clip in the Final Cut Pro Browser. Only one clip can be selected.","Supported format:","If a * is place before the timecode, it will make the clip as a favourite between the current timecode value and the next timecode value.","If a # is place before the timecode, it will create a \"To Do\" marker."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","process"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.browser.pasteboardtomarkers.init() - deps","Type","Function","Description","Initialise the module.","Parameters","deps - Plugin Dependencies","Returns","None","Notes"]},{"l":"process","p":["Signature","plugins.finalcutpro.browser.pasteboardtomarkers.process() - nil","Type","Function","Description","Processes Pasteboard to Markers","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprobrowserplayhead","l":"plugins.finalcutpro.browser.playhead","p":["Browser Playhead Plugin."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","changeHighlightColor","deleteHighlight","getHighlightColor","getHighlightCustomColor","getHighlightShape","getHighlightTime","highlight","highlightFrame","setHighlightColor","setHighlightCustomColor","setHighlightShape","setHighlightTime"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"changeHighlightColor","p":["Signature","plugins.finalcutpro.browser.playhead.changeHighlightColor([value]) - none","Type","Function","Description","Prompts the user to change the Playhead Highlight Colour.","Parameters","value - An RGB table with the selected colour (see hs.drawing.color)","Returns","None","Notes"]},{"l":"deleteHighlight","p":["Signature","plugins.finalcutpro.browser.playhead.deleteHighlight() - none","Type","Function","Description","Delete's the highlight if it's currently visible on the screen.","Parameters","None","Returns","Notes"]},{"l":"getHighlightColor","p":["Signature","plugins.finalcutpro.browser.playhead.getHighlightColor() - table","Type","Function","Description","Returns the current highlight colour.","Parameters","None","Returns","An RGB table with the selected colour (see hs.drawing.color) or nil","Notes"]},{"l":"getHighlightCustomColor","p":["Signature","plugins.finalcutpro.browser.playhead.getHighlightCustomColor() - table","Type","Function","Description","Returns the current custom highlight colour.","Parameters","None","Returns","An RGB table with the selected colour (see hs.drawing.color) or nil","Notes"]},{"l":"getHighlightShape","p":["Signature","plugins.finalcutpro.browser.playhead.getHighlightShape() - string","Type","Function","Description","Returns the current highlight shape.","Parameters","None","Returns","\"Rectangle\", \"Circle\" or \"Diamond\" or nil.","Notes"]},{"l":"getHighlightTime","p":["Signature","plugins.finalcutpro.browser.playhead.getHighlightTime() - number","Type","Function","Description","Returns the current highlight playhead time.","Parameters","None","Returns","A number or nil","Notes"]},{"l":"highlight","p":["Signature","plugins.finalcutpro.browser.playhead.highlight() - none","Type","Function","Description","Highlight's the Final Cut Pro Browser Playhead.","Parameters","None","Returns","Notes"]},{"l":"highlightFrame","p":["Signature","plugins.finalcutpro.browser.playhead.highlightFrame([frame]) - none","Type","Function","Description","Highlights a specific frame.","Parameters","frame - Frame as per hs.geometry.rect","Returns","None","Notes"]},{"l":"setHighlightColor","p":["Signature","plugins.finalcutpro.browser.playhead.setHighlightColor([value]) - none","Type","Function","Description","Sets the Playhead Highlight Colour.","Parameters","value - An RGB table with the selected colour (see hs.drawing.color)","Returns","None","Notes"]},{"l":"setHighlightCustomColor","p":["Signature","plugins.finalcutpro.browser.playhead.setHighlightCustomColor([value]) - none","Type","Function","Description","Sets the Custom Playhead Highlight Colour.","Parameters","value - An RGB table with the selected colour (see hs.drawing.color)","Returns","None","Notes"]},{"l":"setHighlightShape","p":["Signature","plugins.finalcutpro.browser.playhead.setHighlightShape([value]) - none","Type","Function","Description","Sets the Custom Playhead Highlight Shape.","Parameters","value - A string which can be \"Rectangle\", \"Circle\" or \"Diamond\".","Returns","None","Notes"]},{"l":"setHighlightTime","p":["Signature","plugins.finalcutpro.browser.playhead.setHighlightTime([value]) - none","Type","Function","Description","Sets the Custom Playhead Highlight Time.","Parameters","value - A number","Returns","None","Notes"]}],[{"i":"pluginsfinalcutprobrowserselectlibrary","l":"plugins.finalcutpro.browser.selectlibrary","p":["Actions for selecting libraries"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprobrowsersoloclip","l":"plugins.finalcutpro.browser.soloclip","p":["Solo a clip in the Final Cut Pro Browser."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprocommands","l":"plugins.finalcutpro.commands","p":["The 'fcpx' command collection. These are only active when FCPX is the active (ie. frontmost) application."]},{"l":"Submodules","p":["plugins.finalcutpro.commands.actions"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprocommandsactions","l":"plugins.finalcutpro.commands.actions","p":["An action which will execute a command with matching group/id values. Registers itself with the core.action.manager."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","execute","getId","init","onChoices","onExecute","reset"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"execute","p":["Signature","plugins.finalcutpro.commands.actions.execute(action) - boolean","Type","Function","Description","Executes the action with the provided parameters.","Parameters","action- A table representing the action","Returns","true if successful otherwise false","Notes"]},{"l":"getId","p":["Signature","plugins.finalcutpro.commands.actionss.getId(action) - string","Type","Function","Description","Gets the ID from an action.","Parameters","action - The action table.","Returns","The ID as a string.","Notes"]},{"i":"getid-1","l":"getId","p":["Signature","plugins.finalcutpro.commands.actions.getId(action) - string","Type","Function","Description","Get ID.","Parameters","action - The action table.","Returns","The ID as a string.","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.commands.actions.init(actionmanager, cmds) - none","Type","Function","Description","Initialises the module.","Parameters","actionmanager - The action manager object cmds - Final Cut Pro commands manager","Returns","None","Notes"]},{"l":"onChoices","p":["Signature","plugins.finalcutpro.commands.actions.onChoices([choices]) - none","Type","Function","Description","Adds available choices to the selection.","Parameters","choices- The optional cp.choices to add choices to.","Returns","None","Notes"]},{"l":"onExecute","p":["Signature","plugins.finalcutpro.commands.actions.onExecute(action) - none","Type","Function","Description","On Execute.","Parameters","action - The action table.","Returns","None","Notes"]},{"l":"reset","p":["Signature","plugins.finalcutpro.commands.actions.reset() - nothing","Type","Function","Description","Resets the set of choices.","Parameters","None","Returns","Nothing","Notes"]}],[{"i":"pluginsfinalcutproconsole","l":"plugins.finalcutpro.console","p":["Final Cut Pro Search Consoles"]},{"l":"Submodules","p":["plugins.finalcutpro.console.font"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutproconsolefont","l":"plugins.finalcutpro.console.font","p":["Final Cut Pro Font Console"]},{"l":"API Overview","p":["Variables- Configurable values","processedFonts","Functions- API calls offered directly by the extension","onActivate","show"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"processedFonts","p":["Signature","plugins.finalcutpro.console.font.processedFonts - table","Type","Variable","Description","Table of font paths which have already been loaded or skipped."]},{"l":"Functions"},{"l":"onActivate","p":["Signature","plugins.finalcutpro.console.font.onActivate(_, action) - none","Type","Function","Description","Handles Console Activations.","Parameters","_- Placeholder action - Action table.","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.finalcutpro.console.font.show() - none","Type","Function","Description","Shows the Font Console.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutproexportbatch","l":"plugins.finalcutpro.export.batch","p":["Timeline Batch Export Plugin."]},{"l":"Submodules","p":["plugins.finalcutpro.export.batch.manager"]},{"l":"API Overview","p":["batchExport","batchExportTimelineClips","changeCustomFilename","changeExportDestinationFolder","changeExportDestinationPreset","Constants- Useful values which cannot be changed","customFilename","DEFAULT_CUSTOM_FILENAME","destinationPreset","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getDestinationFolder","getDestinationPreset","ignoreBackgroundTasks","ignoreInvalidCaptions","ignoreMissingEffects","ignoreProxies","performBatchExport","replaceExistingFiles","useCustomFilename"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_CUSTOM_FILENAME","p":["Signature","plugins.finalcutpro.export.batch.DEFAULT_CUSTOM_FILENAME - string","Type","Constant","Description","Default Custom Filename"]},{"l":"Functions"},{"l":"batchExport","p":["Signature","plugins.finalcutpro.export.batch.batchExport() - boolean","Type","Function","Description","Opens the Batch Export popup.","Parameters","None","Returns","true if successful otherwise false","Notes"]},{"l":"batchExportTimelineClips","p":["Signature","plugins.finalcutpro.export.batch.batchExportTimelineClips(clips) - boolean","Type","Function","Description","Batch Export Timeline Clips","Parameters","clips - table of selected Clips","Returns","true if successful otherwise false","Notes"]},{"l":"changeCustomFilename","p":["Signature","plugins.finalcutpro.export.batch.changeCustomFilename() - none","Type","Function","Description","Change Custom Filename String.","Parameters","None","Returns","Notes"]},{"l":"changeExportDestinationFolder","p":["Signature","plugins.finalcutpro.export.batch.changeExportDestinationFolder() - none","Type","Function","Description","Change Export Destination Folder.","Parameters","None","Returns","Notes"]},{"l":"changeExportDestinationPreset","p":["Signature","plugins.finalcutpro.export.batch.changeExportDestinationPreset() - none","Type","Function","Description","Change Export Destination Preset.","Parameters","None","Returns","Notes"]},{"l":"getDestinationFolder","p":["Signature","plugins.finalcutpro.export.batch.getDestinationFolder() - string","Type","Function","Description","Gets the destination folder path.","Parameters","None","Returns","The destination folder path as a string.","Notes"]},{"l":"getDestinationPreset","p":["Signature","plugins.finalcutpro.export.batch.getDestinationPreset() - string | nil","Type","Function","Description","Gets the destination preset.","Parameters","None","Returns","The destination preset as a string, or nil if no preset is set.","Notes"]},{"l":"performBatchExport","p":["Signature","plugins.finalcutpro.export.batch.performBatchExport() - none","Type","Function","Description","Performs the Browser Batch Export function.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"customFilename","p":["Signature","plugins.finalcutpro.export.batch.customFilename cp.prop: string","Type","Field","Description","Custom Filename for Batch Export."]},{"l":"destinationPreset","p":["Signature","plugins.finalcutpro.export.batch.destinationPreset cp.prop: boolean","Type","Field","Description","Destination Preset."]},{"l":"ignoreBackgroundTasks","p":["Signature","plugins.finalcutpro.export.batch.ignoreBackgroundTasks cp.prop: boolean","Type","Field","Description","Defines whether or not a Batch Export should Ignore Background Tasks."]},{"l":"ignoreInvalidCaptions","p":["Signature","plugins.finalcutpro.export.batch.ignoreInvalidCaptions cp.prop: boolean","Type","Field","Description","Defines whether or not a Batch Export should Ignore Invalid Captions."]},{"l":"ignoreMissingEffects","p":["Signature","plugins.finalcutpro.export.batch.ignoreMissingEffects cp.prop: boolean","Type","Field","Description","Defines whether or not a Batch Export should Ignore Missing Effects."]},{"l":"ignoreProxies","p":["Signature","plugins.finalcutpro.export.batch.ignoreProxies cp.prop: boolean","Type","Field","Description","Defines whether or not a Batch Export should Ignore Proxies."]},{"l":"replaceExistingFiles","p":["Signature","plugins.finalcutpro.export.batch.replaceExistingFiles cp.prop: boolean","Type","Field","Description","Defines whether or not a Batch Export should Replace Existing Files."]},{"l":"useCustomFilename","p":["Signature","plugins.finalcutpro.export.batch.useCustomFilename cp.prop: boolean","Type","Field","Description","Defines whether or not the Batch Export tool should override the clipname with a custom filename."]}],[{"i":"pluginsfinalcutproexportbatchmanager","l":"plugins.finalcutpro.export.batch.manager","p":["Manager for the Batch Export Window."]},{"l":"Submodules","p":["plugins.finalcutpro.export.batch.manager.panel"]},{"l":"API Overview","p":["_handlers","_panels","addHandler","addPanel","Constants- Useful values which cannot be changed","DEFAULT_HEIGHT","DEFAULT_WIDTH","disabledPanels","Functions- API calls offered directly by the extension","getHandler","getLabel","getWebview","hide","init","injectScript","lastTab","maxPanelHeight","new","position","refresh","selectPanel","setPanelRenderer","show","Variables- Configurable values","WEBVIEW_LABEL"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_HEIGHT","p":["Signature","plugins.finalcutpro.export.batch.manager.DEFAULT_HEIGHT - number","Type","Constant","Description","Default Height of Preferences Window"]},{"l":"DEFAULT_WIDTH","p":["Signature","plugins.finalcutpro.export.batch.manager.DEFAULT_WIDTH - number","Type","Constant","Description","Default Width of Preferences Window"]},{"l":"lastTab","p":["Signature","plugins.finalcutpro.export.batch.manager.lastTab","Type","Constant","Description","Returns the last tab saved in settings."]},{"l":"position","p":["Signature","plugins.finalcutpro.export.batch.manager.position","Type","Constant","Description","Returns the last frame saved in settings."]},{"l":"WEBVIEW_LABEL","p":["Signature","plugins.finalcutpro.export.batch.manager.WEBVIEW_LABEL - string","Type","Constant","Description","The WebView Label"]},{"l":"Variables"},{"l":"_handlers","p":["Signature","plugins.finalcutpro.export.batch.manager._handlers - table","Type","Variable","Description","Table containing handlers."]},{"l":"_panels","p":["Signature","plugins.finalcutpro.export.batch.manager._panels - table","Type","Variable","Description","Table containing panels."]},{"l":"Functions"},{"l":"addHandler","p":["Signature","plugins.finalcutpro.export.batch.manager.addHandler(id, handlerFn) - string","Type","Function","Description","Adds a Handler","Parameters","id - The ID handlerFn - the handler function","Returns","Nothing","Notes"]},{"l":"addPanel","p":["Signature","plugins.finalcutpro.export.batch.manager.addPanel(params) - plugins.finalcutpro.export.batch.manager.panel","Type","Function","Description","Adds a new panel with the specified params to the Batch Export manager.","Parameters","params- The parameters table. Details below.","Returns","The new panel instance.","Notes","The params can have the following properties. The priority and id and properties are required.** priority- An integer value specifying the priority of the panel compared to others.** id- A string containing the unique ID of the panel.** label- The human-readable label for the panel icon.** image- The hs.image for the panel icon.** tooltip- The human-readable details for the toolbar icon when the mouse is hovering over it.** closeFn- A callback function that's triggered when the Preferences window is closed."]},{"l":"disabledPanels","p":["Signature","plugins.finalcutpro.export.batch.manager.disabledPanels(ids) - none","Type","Function","Description","Sets which panels are disabled.","Parameters","ids - A table of panel ID's to disable","Returns","None","Notes"]},{"l":"getHandler","p":["Signature","plugins.finalcutpro.export.batch.manager.getHandler(id) - string","Type","Function","Description","Returns the handler for a given ID.","Parameters","id - The ID","Returns","Table","Notes"]},{"l":"getLabel","p":["Signature","plugins.finalcutpro.export.batch.manager.getLabel() - string","Type","Function","Description","Returns the Webview label.","Parameters","None","Returns","The Webview label as a string.","Notes"]},{"l":"getWebview","p":["Signature","plugins.finalcutpro.export.batch.manager.getWebview() - hs.webview","Type","Function","Description","Returns the Webview of the Preferences Window.","Parameters","None","Returns","A hs.webview","Notes"]},{"l":"hide","p":["Signature","plugins.finalcutpro.export.batch.manager.hide() - none","Type","Function","Description","Hides the Batch Export Window.","Parameters","None","Returns","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.export.batch.manager.init() - nothing","Type","Function","Description","Initialises the preferences panel.","Parameters","None","Returns","Nothing","Notes"]},{"l":"injectScript","p":["Signature","plugins.finalcutpro.export.batch.manager.injectScript(script) - none","Type","Function","Description","Injects JavaScript into the Batch Export Webview.","Parameters","script - The JavaScript code you want to inject in the form of a string.","Returns","None","Notes"]},{"l":"maxPanelHeight","p":["Signature","plugins.finalcutpro.export.batch.manager.maxPanelHeight() - number","Type","Function","Description","Returns the maximum size defined by a panel.","Parameters","None","Returns","The maximum panel height.","Notes"]},{"l":"new","p":["Signature","plugins.finalcutpro.export.batch.manager.new() - none","Type","Function","Description","Creates a new Preferences Window.","Parameters","None","Returns","Notes"]},{"l":"refresh","p":["Signature","plugins.finalcutpro.export.batch.manager.refresh() - none","Type","Function","Description","Refreshes the Batch Export Window.","Parameters","None","Returns","Notes"]},{"l":"selectPanel","p":["Signature","plugins.finalcutpro.export.batch.manager.selectPanel(id) - none","Type","Function","Description","Selects a Batch Export Panel.","Parameters","id - the ID of the panel you want to select.","Returns","None","Notes"]},{"l":"setPanelRenderer","p":["Signature","plugins.finalcutpro.export.batch.manager.setPanelRenderer(renderer) - none","Type","Function","Description","Sets a Panel Renderer","Parameters","renderer - The renderer","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.finalcutpro.export.batch.manager.show() - boolean","Type","Function","Description","Shows the Preferences Window","Parameters","None","Returns","True if successful or nil if an error occurred","Notes"]}],[{"i":"pluginsfinalcutproexportbatchmanagerpanel","l":"plugins.finalcutpro.export.batch.manager.panel","p":["CommandPost Batch Export Panel."]},{"l":"API Overview","p":["Constructors- API calls which return an object, typically one that offers API methods","new","Methods- API calls which can only be made on an object returned by a constructor","addButton","addCheckbox","addContent","addHandler","addHeading","addParagraph","addPassword","addSelect","addStatus","addTextbox","getToolbarItem"]},{"l":"API Documentation"},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.finalcutpro.export.batch.manager.panel.new(params, manager) - cp.core.preferences.manager.panel","Type","Constructor","Description","Constructs a new panel with the specified priority and ID.","Parameters","params - Table of parameters manager - The manager","Returns","Self","Notes"]},{"l":"Methods"},{"l":"addButton","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addButton(params) - panel","Type","Method","Description","Adds a button to the panel.","Parameters","params - The list of parameters.","Returns","The same panel.","Notes","The params table may contain:** id- (optional) the unique ID for the button. If none is provided, one is generated.** value- The value of the button. This is sent to the onclick function.** label- The text label for the button. Defaults to the value if not provided.** width- The width of the button in pixels.** onclick- the function to execute when the button is clicked. The function should have the signature of function(id, value), where id is the id of the button that was clicked, and value is the value of the button."]},{"l":"addCheckbox","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addCheckbox(priority, params) - panel","Type","Method","Description","Adds a checkbox to the panel with the specified priority and params.","Parameters","priority- The priority number for the checkbox. params- The set of parameters for the checkbox.","Returns","The panel.","Notes","The params can contain the following fields:** id- (optional) The unique ID. If none is provided, one will be generated.** name- (optional) The name of the checkbox field.** label- (optional) The text label to display after the checkbox.** onchange- (optional) a function that will get called when the checkbox value changes. It will be passed two parameters, id and params, the latter of which is a table containing the value and checked values of the checkbox.** class- (optional) the CSS class list to apply to the checkbox."]},{"l":"addContent","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addContent(priority, content[, escaped]) - panel","Type","Method","Description","Adds the specified content to the panel, with the specified priority order.","Parameters","priority- the priority order of the content. content- a value that can be converted to a string. escaped- if true, the content will be escaped.","Returns","The panel.","Notes"]},{"l":"addHandler","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addHandler(event, id, handlerFn, keys) - none","Type","Method","Description","Gets a handler from an Handler ID","Parameters","event - The event id - the Handler ID handlerFn - The Handler function keys - Keys","Returns","None","Notes"]},{"l":"addHeading","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addHeading(text) - panel","Type","Method","Description","Adds a heading to the panel","Parameters","text - The text of the heading as a string","Returns","The panel object.","Notes"]},{"l":"addParagraph","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addParagraph(content[, escaped[, class]]) - panel","Type","Method","Description","Adds a Paragraph to the panel","Parameters","content - The content as a string escaped - Whether or not the HTML should be escaped as a boolean. Defaults to true for simple text. class - The class as a string","Returns","The panel object.","Notes"]},{"l":"addPassword","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addPassword(params) - panel","Type","Method","Description","Adds a password text-box to the panel.","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addSelect","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addSelect(priority, params) - panel","Type","Method","Description","Adds a select to the panel.","Parameters","priority - Priority of the item as number. params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"addStatus","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addStatus(priority, content, default) - panel","Type","Method","Description","Adds a Paragraph to the panel","Parameters","priority - Priority content - The content value default - The default value to display if the content is nil. It will be displayed with a different style.","Returns","The panel object.","Notes"]},{"l":"addTextbox","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:addTextbox(params) - panel","Type","Method","Description","Adds a text-box to the panel","Parameters","params - A table of parameters","Returns","The panel object.","Notes"]},{"l":"getToolbarItem","p":["Signature","plugins.finalcutpro.export.batch.manager.panel:getToolbarItem() - table","Type","Method","Description","Gets the Tool Bar as a table","Parameters","None","Returns","The toolbar item as a table.","Notes"]}],[{"i":"pluginsfinalcutprofeedbackbugreport","l":"plugins.finalcutpro.feedback.bugreport","p":["Sends Apple a Bug Report or Feature Request for Final Cut Pro."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","DEFAULT_HEIGHT","DEFAULT_WIDTH","Functions- API calls offered directly by the extension","open","Fields- Variables which can only be accessed from an object returned by a constructor","position"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_HEIGHT","p":["Signature","plugins.finalcutpro.feedback.bugreport.DEFAULT_HEIGHT - number","Type","Constant","Description","Default Window Height"]},{"l":"DEFAULT_WIDTH","p":["Signature","plugins.finalcutpro.feedback.bugreport.DEFAULT_WIDTH - number","Type","Constant","Description","Default Window Width"]},{"l":"Functions"},{"l":"open","p":["Signature","plugins.finalcutpro.feedback.bugreport.open(bugReport) - none","Type","Function","Description","Opens Final Cut Pro Feedback Screen","Parameters","bugReport - Is it a bug report or an enhancement request?","Returns","None","Notes"]},{"l":"Fields"},{"l":"position","p":["Signature","plugins.finalcutpro.feedback.bugreport.position - cp.prop: table","Type","Field","Description","Webview Position"]}],[{"i":"pluginsfinalcutprofullscreendisableesc","l":"plugins.finalcutpro.fullscreen.disableesc","p":["Disables the ESC key when Final Cut Pro is in fullscreen mode."]},{"l":"API Overview","p":["Variables- Configurable values","enabled"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"enabled","p":["Signature","plugins.finalcutpro.fullscreen.disableesc.enabled cp.prop: boolean","Type","Variable","Description","Is the Disable ESC Key Function enabled?"]}],[{"i":"pluginsfinalcutprofullscreendockicon","l":"plugins.finalcutpro.fullscreen.dockicon","p":["Manages the CommandPost dock icon when FCP is full-screen. Due to some quirkiness in how macOS manages full-screen windows, it seems that we need to make CP 'dockless' when an app we are working with goes full-screen. Otherwise our drawing/canvas images will not display correctly."]},{"l":"API Overview","p":["Variables- Configurable values","dockIconEnabled","fcpActiveFullScreen"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"dockIconEnabled","p":["Signature","plugins.finalcutpro.fullscreen.dockicon.dockIconEnabled cp.prop: boolean; read-only; live","Type","Variable","Description","If true the CommandPost dock icon should be hidden."]},{"l":"fcpActiveFullScreen","p":["Signature","plugins.finalcutpro.fullscreen.dockicon.fcpActiveFullScreen cp.prop: boolean; read-only; live","Type","Variable","Description","If true FCP is full-screen and the frontmost app."]}],[{"i":"pluginsfinalcutprofullscreenshortcuts","l":"plugins.finalcutpro.fullscreen.shortcuts","p":["Fullscreen Shortcuts"]},{"l":"API Overview","p":["Variables- Configurable values","enabled","Functions- API calls offered directly by the extension","checkCommand","ninjaKeyStroke","performCommand","update"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"enabled","p":["Signature","plugins.finalcutpro.fullscreen.shortcuts.enabled cp.prop: boolean","Type","Variable","Description","Is the module enabled?"]},{"l":"Functions"},{"l":"checkCommand","p":["Signature","plugins.finalcutpro.fullscreen.shortcuts.checkCommand(whichModifier, whichKey) - none","Type","Function","Description","Checks to see if a shortcut has been pressed, then processes.","Parameters","whichModifier - Which modifier key to check. whichKey - Which key to check.","Returns","None","Notes"]},{"l":"ninjaKeyStroke","p":["Signature","plugins.finalcutpro.fullscreen.shortcuts.ninjaKeyStroke(whichModifier, whichKey) - none","Type","Function","Description","Performs a Ninja Key Stoke.","Parameters","whichModifier - Modifier Key whichKey - Key","Returns","None","Notes"]},{"l":"performCommand","p":["Signature","plugins.finalcutpro.fullscreen.shortcuts.performCommand(cmd, whichModifier, whichKey) - boolean","Type","Function","Description","Performs a command.","Parameters","cmd - The Command. whichModifier - Which modifier key to check. whichKey - Which key to check.","Returns","true if successful otherwise false","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.fullscreen.shortcuts.update() - none","Type","Function","Description","Toggles the watches for monitoring fullscreen playback.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprofullscreenstopped","l":"plugins.finalcutpro.fullscreen.stopped","p":["Play Full Screen & Stop"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprohudmanager","l":"plugins.finalcutpro.hud.manager","p":["Manager for the Final Cut Pro HUD."]},{"l":"API Overview","p":["_handlers","_panels","addHandler","addPanel","Constants- Useful values which cannot be changed","currentPanelID","DEFAULT_HEIGHT","DEFAULT_WIDTH","delete","enabled","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getHandler","getLabel","getWebview","hide","injectScript","lastTab","maxPanelHeight","new","position","refresh","resize","selectPanel","show","update","updatePosition","updateVisibility","Variables- Configurable values"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_HEIGHT","p":["Signature","plugins.finalcutpro.hud.manager.DEFAULT_HEIGHT - number","Type","Constant","Description","Default Height of HUD"]},{"l":"DEFAULT_WIDTH","p":["Signature","plugins.finalcutpro.hud.manager.DEFAULT_WIDTH - number","Type","Constant","Description","Default Width of HUD"]},{"l":"lastTab","p":["Signature","plugins.finalcutpro.hud.manager.lastTab","Type","Constant","Description","Returns the last tab saved in settings."]},{"l":"position","p":["Signature","plugins.finalcutpro.hud.manager.position","Type","Constant","Description","Returns the last frame saved in settings."]},{"l":"Variables"},{"l":"_handlers","p":["Signature","plugins.finalcutpro.hud.manager._handlers - table","Type","Variable","Description","Table containing handlers."]},{"l":"_panels","p":["Signature","plugins.finalcutpro.hud.manager._panels - table","Type","Variable","Description","Table containing panels."]},{"l":"Functions"},{"l":"addHandler","p":["Signature","plugins.finalcutpro.hud.manager.addHandler(id, handlerFn) - string","Type","Function","Description","Adds a Handler","Parameters","id - The ID handlerFn - the handler function","Returns","Nothing","Notes"]},{"l":"addPanel","p":["Signature","plugins.finalcutpro.hud.manager.addPanel(params) - plugins.finalcutpro.hud.manager.panel","Type","Function","Description","Adds a new panel with the specified params to the HUD manager.","Parameters","params- The parameters table. Details below.","Returns","The new panel instance.","Notes","The params can have the following properties. The priority and id and properties are required.** priority- An integer value specifying the priority of the panel compared to others.** id- A string containing the unique ID of the panel.** label- The human-readable label for the panel icon.** image- The hs.image for the panel icon.** tooltip- The human-readable details for the toolbar icon when the mouse is hovering over it.** openFn- A callback function that's triggered when the panel is opened.** closeFn- A callback function that's triggered when the panel is closed.** loadedFn- A callback function that's triggered when the panel is loaded."]},{"l":"currentPanelID","p":["Signature","plugins.finalcutpro.hud.manager.currentPanelID() - string","Type","Function","Description","Returns the panel ID with the highest priority.","Parameters","None","Returns","The panel ID as a string","Notes"]},{"l":"delete","p":["Signature","plugins.finalcutpro.hud.manager.delete()","Type","Function","Description","Deletes the existing HUD if it exists","Parameters","None","Returns","Notes"]},{"l":"getHandler","p":["Signature","plugins.finalcutpro.hud.manager.getHandler(id) - string","Type","Function","Description","Returns the handler for a given ID.","Parameters","id - The ID","Returns","Table","Notes"]},{"l":"getLabel","p":["Signature","plugins.finalcutpro.hud.manager.getLabel() - string","Type","Function","Description","Returns the Webview label.","Parameters","None","Returns","The Webview label as a string.","Notes"]},{"l":"getWebview","p":["Signature","plugins.finalcutpro.hud.manager.getWebview() - hs.webview","Type","Function","Description","Returns the Webview of the HUD.","Parameters","None","Returns","A hs.webview","Notes"]},{"l":"hide","p":["Signature","plugins.finalcutpro.hud.manager.hide() - none","Type","Function","Description","Hides the HUD.","Parameters","None","Returns","Notes"]},{"l":"injectScript","p":["Signature","plugins.finalcutpro.hud.manager.injectScript(script) - none","Type","Function","Description","Injects JavaScript into the HUD Webview.","Parameters","script - The JavaScript code you want to inject in the form of a string.","Returns","None","Notes"]},{"l":"maxPanelHeight","p":["Signature","plugins.finalcutpro.hud.manager.maxPanelHeight() - number","Type","Function","Description","Returns the maximum size defined by a panel.","Parameters","None","Returns","The maximum panel height.","Notes"]},{"l":"new","p":["Signature","plugins.finalcutpro.hud.manager.new() - none","Type","Function","Description","Creates a new HUD.","Parameters","None","Returns","Notes"]},{"l":"refresh","p":["Signature","plugins.finalcutpro.hud.manager.refresh() - none","Type","Function","Description","Refreshes the HUD.","Parameters","None","Returns","Notes"]},{"l":"resize","p":["Signature","plugins.finalcutpro.hud.manager.resize()","Type","Function","Description","Resizes the HUD.","Parameters","height - The new height of the HUD as number.","Returns","None","Notes"]},{"l":"selectPanel","p":["Signature","plugins.finalcutpro.hud.manager.selectPanel([id]) - none","Type","Function","Description","Selects a HUD Panel.","Parameters","id - the optional ID of the panel you want to select. If no ID is supplied then the current panel ID will be used.","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.finalcutpro.hud.manager.show() - boolean","Type","Function","Description","Shows the HUD","Parameters","None","Returns","True if successful or nil if an error occurred","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.hud.manager.update() - none","Type","Function","Description","Enables or Disables the HUD.","Parameters","None","Returns","Notes"]},{"l":"updatePosition","p":["Signature","plugins.finalcutpro.hud.manager.updatePosition() - none","Type","Function","Description","Updates the HUD position.","Parameters","None","Returns","Notes"]},{"l":"updateVisibility","p":["Signature","plugins.finalcutpro.hud.manager.updateVisibility() - none","Type","Function","Description","Update the visibility of the HUD.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"enabled","p":["Signature","plugins.finalcutpro.hud.manager.enabled cp.prop: boolean","Type","Field","Description","Is the HUD enabled in the settings?"]}],[{"i":"pluginsfinalcutprohudpanelsfcpxml","l":"plugins.finalcutpro.hud.panels.fcpxml","p":["FCPXML Panel for the Final Cut Pro HUD."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","lastValue"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"lastValue","p":["Signature","plugins.finalcutpro.hud.panels.fcpxml.lastValue cp.prop: table","Type","Field","Description","Last value in FCPXML HUD."]}],[{"i":"pluginsfinalcutprohudpanelsinfo","l":"plugins.finalcutpro.hud.panels.info","p":["Info Panel for the Final Cut Pro HUD."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","updateInfo","updateWatchers"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"updateInfo","p":["Signature","plugins.finalcutpro.hud.panels.info.updateInfo() - none","Type","Function","Description","Update the Info Panel HTML content.","Parameters","None","Returns","Notes"]},{"l":"updateWatchers","p":["Signature","plugins.finalcutpro.hud.panels.info.updateWatchers(enabled) - none","Type","Function","Description","Sets up or destroys the Info Panel watchers.","Parameters","enabled - true to setup, false to destroy","Returns","None","Notes"]}],[{"i":"pluginsfinalcutprohudpanelsminimise","l":"plugins.finalcutpro.hud.panels.minimise","p":["Minimise button for the Final Cut Pro HUD."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprohudpanelsnotes","l":"plugins.finalcutpro.hud.panels.notes","p":["Notes Panel for the Final Cut Pro HUD."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","updateInfo"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"updateInfo","p":["Signature","plugins.finalcutpro.hud.panels.notes.updateInfo() - none","Type","Function","Description","Update the Notes Panel HTML content.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprohudpanelspasteboard","l":"plugins.finalcutpro.hud.panels.pasteboard","p":["FCPXML Panel for the Final Cut Pro HUD."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","lastValue"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"lastValue","p":["Signature","plugins.finalcutpro.hud.panels.pasteboard.lastValue cp.prop: table","Type","Field","Description","Last value in FCPXML HUD."]}],[{"i":"pluginsfinalcutprohudpanelsrename","l":"plugins.finalcutpro.hud.panels.rename","p":["Batch Rename Panel for the Final Cut Pro HUD."]},{"l":"API Overview","p":["Variables- Configurable values","code","codeProcessing","find","keepOriginal","padding","prefix","replace","sequence","startWith","stepValue","suffix","Functions- API calls offered directly by the extension","updateInfo"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"code","p":["Signature","plugins.finalcutpro.hud.panels.rename.code cp.prop: string","Type","Variable","Description"]},{"l":"codeProcessing","p":["Signature","plugins.finalcutpro.hud.panels.rename.codeProcessing cp.prop: boolean","Type","Variable","Description","Code Processing"]},{"l":"find","p":["Signature","plugins.finalcutpro.hud.panels.rename.find cp.prop: string","Type","Variable","Description","Find Preference"]},{"l":"keepOriginal","p":["Signature","plugins.finalcutpro.hud.panels.rename.keepOriginal cp.prop: boolean","Type","Variable","Description","Keep Original Preference"]},{"l":"padding","p":["Signature","plugins.finalcutpro.hud.panels.rename.padding cp.prop: number","Type","Variable","Description"]},{"l":"prefix","p":["Signature","plugins.finalcutpro.hud.panels.rename.prefix cp.prop: string","Type","Variable","Description","Prefix Preference"]},{"l":"replace","p":["Signature","plugins.finalcutpro.hud.panels.rename.replace cp.prop: string","Type","Variable","Description","Replace Preference"]},{"l":"sequence","p":["Signature","plugins.finalcutpro.hud.panels.rename.sequence cp.prop: string","Type","Variable","Description","Sequence mode"]},{"l":"startWith","p":["Signature","plugins.finalcutpro.hud.panels.rename.startWith cp.prop: number","Type","Variable","Description","Start with"]},{"l":"stepValue","p":["Signature","plugins.finalcutpro.hud.panels.rename.stepValue cp.prop: number","Type","Variable","Description","Start with"]},{"l":"suffix","p":["Signature","plugins.finalcutpro.hud.panels.rename.suffix cp.prop: string","Type","Variable","Description","Suffix Preference"]},{"l":"Functions"},{"l":"updateInfo","p":["Signature","plugins.finalcutpro.hud.panels.rename.updateInfo() - none","Type","Function","Description","Update the Buttons Panel HTML content.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprohudpanelssearch","l":"plugins.finalcutpro.hud.panels.search","p":["Ten Panel for the Final Cut Pro HUD."]},{"l":"API Overview","p":["Variables- Configurable values","exactMatch","filterBrowserBeforeSearch","history","lastColumn","lastValue","loopSearch","matchCase","openProject","playAfterFind","searchEntireLibrary","wholeWords"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"exactMatch","p":["Signature","plugins.finalcutpro.hud.panels.search.exactMatch cp.prop: boolean","Type","Variable","Description","Match Case"]},{"l":"filterBrowserBeforeSearch","p":["Signature","plugins.finalcutpro.hud.panels.search.filterBrowserBeforeSearch cp.prop: boolean","Type","Variable","Description","Filter Browser Before Search"]},{"l":"history","p":["Signature","plugins.finalcutpro.hud.panels.search.history cp.prop: table","Type","Variable","Description","Search History"]},{"l":"lastColumn","p":["Signature","plugins.finalcutpro.hud.panels.search.lastColumn cp.prop: string","Type","Variable","Description","Last Column"]},{"l":"lastValue","p":["Signature","plugins.finalcutpro.hud.panels.search.lastValue cp.prop: string","Type","Variable","Description","Last Value"]},{"l":"loopSearch","p":["Signature","plugins.finalcutpro.hud.panels.search.loopSearch cp.prop: boolean","Type","Variable","Description","Loop Search"]},{"l":"matchCase","p":["Signature","plugins.finalcutpro.hud.panels.search.matchCase cp.prop: boolean","Type","Variable","Description","Match Case"]},{"l":"openProject","p":["Signature","plugins.finalcutpro.hud.panels.search.openProject cp.prop: boolean","Type","Variable","Description","Open Project"]},{"l":"playAfterFind","p":["Signature","plugins.finalcutpro.hud.panels.search.playAfterFind cp.prop: boolean","Type","Variable","Description","Play After Find"]},{"l":"searchEntireLibrary","p":["Signature","plugins.finalcutpro.hud.panels.search.searchEntireLibrary cp.prop: boolean","Type","Variable","Description","Search Entire Library"]},{"l":"wholeWords","p":["Signature","plugins.finalcutpro.hud.panels.search.wholeWords cp.prop: boolean","Type","Variable","Description","Whole Words"]}],[{"i":"pluginsfinalcutprohudpanelstenbuttons","l":"plugins.finalcutpro.hud.panels.tenbuttons","p":["Ten Panel for the Final Cut Pro HUD."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","updateInfo","Fields- Variables which can only be accessed from an object returned by a constructor","buttons"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"updateInfo","p":["Signature","plugins.finalcutpro.hud.panels.tenbuttons.updateInfo() - none","Type","Function","Description","Update the Buttons Panel HTML content.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"buttons","p":["Signature","plugins.finalcutpro.hud.panels.tenbuttons.buttons cp.prop: table","Type","Field","Description","Table of HUD button values."]}],[{"i":"pluginsfinalcutprohudpanelstwelvebuttons","l":"plugins.finalcutpro.hud.panels.twelvebuttons","p":["Twelve Button Panel for the Final Cut Pro HUD."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","updateInfo","Fields- Variables which can only be accessed from an object returned by a constructor","buttons"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"updateInfo","p":["Signature","plugins.finalcutpro.hud.panels.twelvebuttons.updateInfo() - none","Type","Function","Description","Update the Buttons Panel HTML content.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"buttons","p":["Signature","plugins.finalcutpro.hud.panels.twelvebuttons.buttons cp.prop: table","Type","Field","Description","Table of HUD button values."]}],[{"i":"pluginsfinalcutprohudpanelstwentyfourbuttons","l":"plugins.finalcutpro.hud.panels.twentyfourbuttons","p":["Twenty Four Button Panel for the Final Cut Pro HUD."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","updateInfo","Fields- Variables which can only be accessed from an object returned by a constructor","buttons"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"updateInfo","p":["Signature","plugins.finalcutpro.hud.panels.twentyfourbuttons.updateInfo() - none","Type","Function","Description","Update the Buttons Panel HTML content.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"buttons","p":["Signature","plugins.finalcutpro.hud.panels.twentyfourbuttons.buttons cp.prop: table","Type","Field","Description","Table of HUD button values."]}],[{"i":"pluginsfinalcutproimportignorecard","l":"plugins.finalcutpro.import.ignorecard","p":["Ignore Final Cut Pro's Media Import Window."]},{"l":"API Overview","p":["Variables- Configurable values","enabled","Functions- API calls offered directly by the extension","start","stop","update"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"enabled","p":["Signature","plugins.finalcutpro.import.ignorecard.enabled cp.prop: boolean","Type","Variable","Description","Toggles the Ignore Card Plugin"]},{"l":"Functions"},{"l":"start","p":["Signature","plugins.finalcutpro.import.ignorecard.start() - none","Type","Function","Description","Starts the Media Import Window Watcher","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","plugins.finalcutpro.import.ignorecard.stop() - none","Type","Function","Description","Stops the Media Import Window Watcher","Parameters","None","Returns","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.import.ignorecard.update() - none","Type","Function","Description","Starts to stops the Ignore Card device watcher.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutproimportpreferences","l":"plugins.finalcutpro.import.preferences","p":["Import Preferences"]},{"l":"API Overview","p":["Variables- Configurable values","createMulticamOptimizedMedia","createOptimizedMedia","createProxyMedia","leaveInPlace"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"createMulticamOptimizedMedia","p":["Signature","plugins.finalcutpro.import.preferences.createMulticamOptimizedMedia cp.prop: boolean","Type","Variable","Description","Create Multicam Optimised Media"]},{"l":"createOptimizedMedia","p":["Signature","plugins.finalcutpro.import.preferences.createOptimizedMedia cp.prop: boolean","Type","Variable","Description","Create Optimised Media"]},{"l":"createProxyMedia","p":["Signature","plugins.finalcutpro.import.preferences.createProxyMedia cp.prop: boolean","Type","Variable","Description","Create Proxy Media"]},{"l":"leaveInPlace","p":["Signature","plugins.finalcutpro.import.preferences.leaveInPlace cp.prop: boolean","Type","Variable","Description","Leave In Place."]}],[{"i":"pluginsfinalcutproinspectoraudio","l":"plugins.finalcutpro.inspector.audio","p":["Final Cut Pro Audio Inspector Additions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutproinspectorinfo","l":"plugins.finalcutpro.inspector.info","p":["Final Cut Pro Info Inspector Additions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutproinspectorshow","l":"plugins.finalcutpro.inspector.show","p":["Final Cut Pro Inspector Additions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutproinspectortext","l":"plugins.finalcutpro.inspector.text","p":["Final Cut Pro Text Inspector Additions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutproinspectorvideo","l":"plugins.finalcutpro.inspector.video","p":["Final Cut Pro Video Inspector Additions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprolanguage","l":"plugins.finalcutpro.language","p":["Final Cut Pro Language Plugin."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","change"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"change","p":["Signature","plugins.finalcutpro.language.change(locale) - none","Type","Function","Description","Changes the Final Cut Pro Language to the specified locale, if supported.","Parameters","locale - The cp.i18n.localeID or locale string you want to change to.","Returns","true if successful otherwise false","Notes"]}],[{"i":"pluginsfinalcutpromenumanager","l":"plugins.finalcutpro.menu.manager","p":["Final Cut Pro Menu Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpromenumenuaction","l":"plugins.finalcutpro.menu.menuaction","p":["A action which will trigger an Final Cut Pro menu with a matching path, if available/enabled. Registers itself with the plugins.core.actions.actionmanager."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","actionId","init"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"actionId","p":["Signature","plugins.finalcutpro.menu.menuaction.actionId(params) - string","Type","Function","Description","Gets the action ID from the parameters table.","Parameters","params - Parameters table.","Returns","Action ID as string.","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.menu.menuaction.init(actionmanager) - none","Type","Function","Description","Initialises the Menu Action plugin","Parameters","actionmanager- the Action Manager plugin","Returns","None","Notes"]}],[{"i":"pluginsfinalcutpromenuproxyicon","l":"plugins.finalcutpro.menu.proxyicon","p":["Final Cut Pro Proxy Icon Plugin."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","procyMenuIconEnabled","Functions- API calls offered directly by the extension","generateProxyTitle","init","Fields- Variables which can only be accessed from an object returned by a constructor","usingProxies"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"procyMenuIconEnabled","p":["Signature","plugins.finalcutpro.menu.proxyicon.procyMenuIconEnabled cp.prop: boolean","Type","Constant","Description","Toggles the Enable Proxy Menu Icon"]},{"l":"Functions"},{"l":"generateProxyTitle","p":["Signature","plugins.finalcutpro.menu.proxyicon.generateProxyTitle() - string","Type","Function","Description","Generates the Proxy Title","Parameters","None","Returns","String containing the Proxy Title","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.menu.proxyicon.init(menuManager) - none","Type","Function","Description","Initalise the module.","Parameters","menuManager - The menu manager plugin","Returns","None","Notes"]},{"l":"Fields"},{"l":"usingProxies","p":["Signature","plugins.finalcutpro.menu.proxyicon.usingProxies - cp.prop: boolean","Type","Field","Description","Using Proxies?"]}],[{"i":"pluginsfinalcutpromidicontrolsaudio","l":"plugins.finalcutpro.midi.controls.audio","p":["Final Cut Pro MIDI Audio Controls."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpromidicontrolscolorboard","l":"plugins.finalcutpro.midi.controls.colorboard","p":["Final Cut Pro MIDI Color Board Controls."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpromidicontrolscolorwheels","l":"plugins.finalcutpro.midi.controls.colorwheels","p":["Final Cut Pro MIDI Color Controls."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpromidicontrolscontroluiabsolute","l":"plugins.finalcutpro.midi.controls.controlui.absolute","p":["Adds the ability to control any Final Cut Pro User Interface Element via a MIDI Knob/Slider."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","control","init"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"control","p":["Signature","plugins.finalcutpro.midi.controls.controlui.absolute.control() - nil","Type","Function","Description","Control Function","Parameters","metadata - table of metadata from the MIDI callback","Returns","None","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.midi.controls.controlui.absolute.init() - module","Type","Function","Description","Initialise the module.","Parameters","None","Returns","The module","Notes"]}],[{"i":"pluginsfinalcutpromidicontrolscontroluirelative","l":"plugins.finalcutpro.midi.controls.controlui.relative","p":["Adds the ability to control any Final Cut Pro User Interface Element via a MIDI Knob/Slider."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","control","init"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"control","p":["Signature","plugins.finalcutpro.midi.controls.controlui.relative.control() - nil","Type","Function","Description","Control Function","Parameters","metadata - table of metadata from the MIDI callback","Returns","None","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.midi.controls.controlui.relative.init() - module","Type","Function","Description","Initialise the module.","Parameters","None","Returns","The module","Notes"]}],[{"i":"pluginsfinalcutpromidicontrolstimeline","l":"plugins.finalcutpro.midi.controls.timeline","p":["Final Cut Pro MIDI Timeline Controls."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpromidicontrolsvideo","l":"plugins.finalcutpro.midi.controls.video","p":["Final Cut Pro MIDI Video Inspector Controls."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpromidicontrolszoom","l":"plugins.finalcutpro.midi.controls.zoom","p":["Final Cut Pro MIDI Zoom Control."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpronotificationsifttt","l":"plugins.finalcutpro.notifications.ifttt","p":["IFTTT Notifications Plugin.","Author: JFtechOfficial"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","sendNotification","update","Fields- Variables which can only be accessed from an object returned by a constructor","appAPIKey","enabled","userAPIKey"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.notifications.ifttt.init() - none","Type","Function","Description","Initialises the plugin.","Parameters","None","Returns","Notes"]},{"l":"sendNotification","p":["Signature","plugins.finalcutpro.notifications.ifttt.sendNotification(message, [title]) - none","Type","Function","Description","Sends a notification.","Parameters","message - The message you want to send as a string.[title] - An optional Title for the message as a string.","Returns","success - true if successful otherwise false errorMessage - a string containing any error messages","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.notifications.ifttt.update() - none","Type","Function","Description","Enables or disables ifttt Notifications depending on the user's preferences.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"appAPIKey","p":["Signature","plugins.finalcutpro.notifications.ifttt.appAPIKey cp.prop: string","Type","Field","Description","Application API Key"]},{"l":"enabled","p":["Signature","plugins.finalcutpro.notifications.ifttt.enabled cp.prop: boolean","Type","Field","Description","Whether or not the plugin has been enabled."]},{"l":"userAPIKey","p":["Signature","plugins.finalcutpro.notifications.ifttt.userAPIKey cp.prop: string","Type","Field","Description","User API Key"]}],[{"i":"pluginsfinalcutpronotificationsimessage","l":"plugins.finalcutpro.notifications.imessage","p":["iMessage Notifications Plugin."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","sendNotification","update","Fields- Variables which can only be accessed from an object returned by a constructor","enabled","target"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.notifications.imessage.init() - none","Type","Function","Description","Initialises the plugin.","Parameters","None","Returns","Notes"]},{"l":"sendNotification","p":["Signature","plugins.finalcutpro.notifications.imessage.sendNotification(message) - none","Type","Function","Description","Sends a notification.","Parameters","message - The message you want to send as a string.","Returns","None","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.notifications.imessage.update() - none","Type","Function","Description","Enables or disables iMessage Notifications depending on the user's preferences.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"enabled","p":["Signature","plugins.finalcutpro.notifications.imessage.enabled cp.prop: boolean","Type","Field","Description","Whether or not the plugin has been enabled."]},{"l":"target","p":["Signature","plugins.finalcutpro.notifications.imessage.target cp.prop: string","Type","Field","Description","A string containing a mobile number or Apple ID"]}],[{"i":"pluginsfinalcutpronotificationsmanager","l":"plugins.finalcutpro.notifications.manager","p":["Notifications Manager Plugin."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","manager","Variables- Configurable values","watchers","Functions- API calls offered directly by the extension","unwatch","watch"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"manager","p":["Signature","plugins.finalcutpro.notifications.manager - table","Type","Constant","Description","Event Types"]},{"l":"Variables"},{"l":"watchers","p":["Signature","plugins.finalcutpro.notifications.manager.watchers - watcher","Type","Variable","Description"]},{"l":"Functions"},{"l":"unwatch","p":["Signature","plugins.finalcutpro.notifications.manager.unwatch(id) - none","Type","Function","Description","Start Watchers","Parameters","id - The ID of the watcher to unwatch as string","Returns","None","Notes"]},{"l":"watch","p":["Signature","plugins.finalcutpro.notifications.manager.watch(event) - string","Type","Function","Description","Start Watchers","Parameters","events - Events to watch","Returns","The ID of the watcher as string","Notes"]}],[{"i":"pluginsfinalcutpronotificationsprowl","l":"plugins.finalcutpro.notifications.prowl","p":["Prowl Notifications Plugin."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","sendNotification","update","validateAPIKey","Fields- Variables which can only be accessed from an object returned by a constructor","apiKey","apiValidated","enabled"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.notifications.prowl.init() - none","Type","Function","Description","Initialises the plugin.","Parameters","None","Returns","Notes"]},{"l":"sendNotification","p":["Signature","plugins.finalcutpro.notifications.prowl.sendNotification(message, [title]) - none","Type","Function","Description","Sends a notification.","Parameters","message - The message you want to send as a string.[title] - An optional Title for the message as a string.","Returns","success - true if successful otherwise false errorMessage - a string containing any error messages","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.notifications.prowl.update() - none","Type","Function","Description","Enables or disables Prowl Notifications depending on the user's preferences.","Parameters","None","Returns","Notes"]},{"l":"validateAPIKey","p":["Signature","plugins.finalcutpro.notifications.prowl.validateAPIKey(key) - success, errorMessage","Type","Function","Description","Validates a Growl API Key","Parameters","key - The API key as string","Returns","success - true if successful otherwise false errorMessage - a string containing any error messages","Notes"]},{"l":"Fields"},{"l":"apiKey","p":["Signature","plugins.finalcutpro.notifications.prowl.apiKey cp.prop: string","Type","Field","Description","Prowl API Key"]},{"l":"apiValidated","p":["Signature","plugins.finalcutpro.notifications.prowl.apiValidated cp.prop: boolean","Type","Field","Description","Whether or not the API key has been validated."]},{"l":"enabled","p":["Signature","plugins.finalcutpro.notifications.prowl.enabled cp.prop: boolean","Type","Field","Description","Whether or not the plugin has been enabled."]}],[{"i":"pluginsfinalcutpronotificationspushover","l":"plugins.finalcutpro.notifications.pushover","p":["Pushover Notifications Plugin."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","sendNotification","update","validateAPIKeys","Fields- Variables which can only be accessed from an object returned by a constructor","apiValidated","appAPIKey","enabled","userAPIKey"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.notifications.pushover.init() - none","Type","Function","Description","Initialises the plugin.","Parameters","None","Returns","Notes"]},{"l":"sendNotification","p":["Signature","plugins.finalcutpro.notifications.pushover.sendNotification(message, [title]) - none","Type","Function","Description","Sends a notification.","Parameters","message - The message you want to send as a string.[title] - An optional Title for the message as a string.","Returns","success - true if successful otherwise false errorMessage - a string containing any error messages","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.notifications.pushover.update() - none","Type","Function","Description","Enables or disables Pushover Notifications depending on the user's preferences.","Parameters","None","Returns","Notes"]},{"l":"validateAPIKeys","p":["Signature","plugins.finalcutpro.notifications.pushover.validateAPIKeys(userKey, appKey) - success, errorMessage","Type","Function","Description","Validates a Pushover User & Application API Key","Parameters","userKey - The User API Key as a string appKey - The Application API Key as a string","Returns","success - true if successful otherwise false errorMessage - a string containing any error messages","Notes"]},{"l":"Fields"},{"l":"apiValidated","p":["Signature","plugins.finalcutpro.notifications.pushover.apiValidated cp.prop: boolean","Type","Field","Description","Whether or not the API keys have been validated."]},{"l":"appAPIKey","p":["Signature","plugins.finalcutpro.notifications.pushover.appAPIKey cp.prop: string","Type","Field","Description","Application API Key"]},{"l":"enabled","p":["Signature","plugins.finalcutpro.notifications.pushover.enabled cp.prop: boolean","Type","Field","Description","Whether or not the plugin has been enabled."]},{"l":"userAPIKey","p":["Signature","plugins.finalcutpro.notifications.pushover.userAPIKey cp.prop: string","Type","Field","Description","User API Key"]}],[{"i":"pluginsfinalcutproopen","l":"plugins.finalcutpro.open","p":["Opens Final Cut Pro via Global Shortcut & Menubar."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","app","commandEditor"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"app","p":["Signature","plugins.finalcutpro.open.app() - none","Type","Function","Description","Opens Final Cut Pro","Parameters","None","Returns","Notes"]},{"l":"commandEditor","p":["Signature","plugins.finalcutpro.open.commandEditor() - none","Type","Function","Description","Opens the Final Cut Pro Command Editor","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutpropasteboardhistory","l":"plugins.finalcutpro.pasteboard.history","p":["Pasteboard History"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","FILE_NAME","FOLDER_NAME","HISTORY_MAXIMUM_SIZE","Functions- API calls offered directly by the extension","addHistoryItem","clearHistory","doPasteHistoryItem","init","update","Fields- Variables which can only be accessed from an object returned by a constructor","_history","enabled"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"FILE_NAME","p":["Signature","plugins.finalcutpro.pasteboard.history.FILE_NAME - string","Type","Constant","Description","File name of settings file."]},{"l":"FOLDER_NAME","p":["Signature","plugins.finalcutpro.pasteboard.history.FOLDER_NAME - string","Type","Constant","Description","Folder Name where settings file is contained."]},{"l":"HISTORY_MAXIMUM_SIZE","p":["Signature","plugins.finalcutpro.pasteboard.history.HISTORY_MAXIMUM_SIZE - number","Type","Constant","Description","Maximum Size of Pasteboard History"]},{"l":"Functions"},{"l":"addHistoryItem","p":["Signature","plugins.finalcutpro.pasteboard.history.addHistoryItem(data, label) - none","Type","Function","Description","Adds an item to the Pasteboard history.","Parameters","data - The data label - The label","Returns","None","Notes"]},{"l":"clearHistory","p":["Signature","plugins.finalcutpro.pasteboard.history.clearHistory() - none","Type","Function","Description","Clears the Pasteboard History.","Parameters","None","Returns","Notes"]},{"l":"doPasteHistoryItem","p":["Signature","plugins.finalcutpro.pasteboard.history.doPasteHistoryItem(index) - cp.rx.go.Statement","Type","Function","Description","Returns a function which will paste a Pasteboard History Item when executed.","Parameters","index - The index of the Pasteboard history item.","Returns","A Statement to be executed.","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.pasteboard.history.init(manager) - Pasteboard History Object","Type","Function","Description","Initialises the module.","Parameters","manager - The Pasteboard manager object.","Returns","Pasteboard History Object","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.pasteboard.history.update() - none","Type","Function","Description","Enable or disable the Pasteboard History.","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"_history","p":["Signature","plugins.finalcutpro.pasteboard.history._history cp.prop: table","Type","Field","Description","Contains all the saved Touch Bar Buttons"]},{"l":"enabled","p":["Signature","plugins.finalcutpro.pasteboard.history.enabled cp.prop: boolean","Type","Field","Description","Enable or disable the Pasteboard History."]}],[{"i":"pluginsfinalcutpropasteboardmanager","l":"plugins.finalcutpro.pasteboard.manager","p":["Pasteboard Manager."]},{"l":"API Overview","p":["buffer","Constants- Useful values which cannot be changed","copyWithCustomClipName","doDecodeBuffer","doRestoreFromBuffer","doSaveToBuffer","doWaitForData","doWaitForFreshData","excludedClassnames","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","getClassname","isTimelineClip","ninjaPasteboardCopy","NUMBER_OF_PASTEBOARD_BUFFERS","overrideNextClipName","processArray","processContent","processObject","readFCPXData","RESTART_DELAY","startWatching","stopWatching","supportsContainedItems","unarchiveFCPXData","unwatch","Variables- Configurable values","watch","WATCHER_FREQUENCY","watching","writeFCPXData"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"NUMBER_OF_PASTEBOARD_BUFFERS","p":["Signature","plugins.finalcutpro.pasteboard.manager.NUMBER_OF_PASTEBOARD_BUFFERS - number","Type","Constant","Description","Number of Pasteboard Buffers."]},{"l":"RESTART_DELAY","p":["Signature","plugins.finalcutpro.pasteboard.manager.RESTART_DELAY - number","Type","Constant","Description","How long to wait until we restart any Pasteboard Watchers in milliseconds."]},{"l":"Variables"},{"l":"excludedClassnames","p":["Signature","plugins.finalcutpro.pasteboard.manager.excludedClassnames - table","Type","Variable","Description","Table of data we don't want to count when copying."]},{"l":"WATCHER_FREQUENCY","p":["Signature","plugins.finalcutpro.pasteboard.manager.WATCHER_FREQUENCY - number","Type","Variable","Description","The Pasteboard Watcher Update frequency."]},{"l":"Functions"},{"l":"copyWithCustomClipName","p":["Signature","plugins.finalcutpro.pasteboard.manager.copyWithCustomClipName() - none","Type","Function","Description","Copy with custom label.","Parameters","None","Returns","Notes"]},{"l":"doDecodeBuffer","p":["Signature","plugins.finalcutpro.pasteboard.manager.doDecodeBuffer(id) - cp.rx.go.Statement","Type","Function","Description","A Statement which decodes the buffer with the specified ID.","Parameters","id - The ID to decode","Returns","A Statement that sends the decoded buffer, or throws an error if not available.","Notes"]},{"l":"doRestoreFromBuffer","p":["Signature","plugins.finalcutpro.pasteboard.manager.doRestoreFromBuffer(id) - cp.rx.go.Statement","Type","Function","Description","A Statement which restore a Pasteboard item from the buffer.","Parameters","id - The ID of the buffer item.","Returns","A Statement","Notes"]},{"l":"doSaveToBuffer","p":["Signature","plugins.finalcutpro.pasteboard.manager.doSaveToBuffer(id) - cp.rx.go.Statement","Type","Function","Description","A Statement which saves a Pasteboard item to the buffer.","Parameters","id - The ID of the buffer item.","Returns","A Statement","Notes"]},{"l":"doWaitForData","p":["Signature","plugins.finalcutpro.pasteboard.manager.doWaitForData(newData) - cp.rx.go.Statement","Type","Function","Description","A Statement which waits for up to 10 seconds for new data to appear on the clipboard. If none is found, an error is sent.","Parameters","newData - The new Pasteboard data.","Returns","A Statement","Notes"]},{"l":"doWaitForFreshData","p":["Signature","plugins.finalcutpro.pasteboard.manager.doWaitForFreshData(oldData) - cp.rx.go.Statement","Type","Function","Description","A Statement which waits for up to 10 seconds for new data to copy to the clipboard. If none is found, an error is sent.","Parameters","oldData - The original Pasteboard data.","Returns","A Statement","Notes"]},{"l":"getClassname","p":["Signature","plugins.finalcutpro.pasteboard.manager.getClassname(data) - string","Type","Function","Description","Gets a class anem from data","Parameters","data - The data object to process","Returns","Class name as string","Notes"]},{"l":"isTimelineClip","p":["Signature","plugins.finalcutpro.pasteboard.manager.isTimelineClip(data) - boolean","Type","Function","Description","Is the data a timeline clip.","Parameters","data - The pasteboard data you want to check.","Returns","true if a timeline clip otherwise false.","Notes"]},{"l":"ninjaPasteboardCopy","p":["Signature","plugins.finalcutpro.pasteboard.manager.ninjaPasteboardCopy() - boolean, data","Type","Function","Description","Ninja Pasteboard Copy. Copies something to the pasteboard, then restores the original pasteboard item.","Parameters","None","Returns","true if successful otherwise false The pasteboard data","Notes"]},{"l":"overrideNextClipName","p":["Signature","plugins.finalcutpro.pasteboard.manager.overrideNextClipName(overrideName) - none","Type","Function","Description","Overrides the name for the next clip which is copied from FCPX to the specified value. Once the override has been used, the standard clip name via mod.findClipName(...) will be used for subsequent copy operations.","Parameters","overrideName - The override name.","Returns","None","Notes"]},{"l":"processArray","p":["Signature","plugins.finalcutpro.pasteboard.manager.processArray(data) - string, number","Type","Function","Description","Processes an 'array' table.","Parameters","data - The data object to process","Returns","The primary clip name as a string. The number of clips as number.","Notes"]},{"l":"processContent","p":["Signature","plugins.finalcutpro.pasteboard.manager.processContent(fcpxData, default) - string, number","Type","Function","Description","Searches the Pasteboard binary plist data for the first clip name, and returns it.","Parameters","fcpxData - The data object to process default - The default value","Returns","Returns the 'default' value if the pasteboard contains a media clip but we could not interpret it, otherwise nil if the data did not contain Final Cut Pro Clip data.","Notes","Example usage: local name = mod.findClipName(myFcpxData, Unknown)"]},{"l":"processObject","p":["Signature","plugins.finalcutpro.pasteboard.manager.processObject(data) - string, number","Type","Function","Description","Processes the provided data object, which should have a '$class' property.","Parameters","data - The pasteboard data you want to check.","Returns","The primary clip name as a string. The number of clips as number.","Notes"]},{"l":"readFCPXData","p":["Signature","plugins.finalcutpro.pasteboard.manager.readFCPXData() - data | nil","Type","Function","Description","Reads Final Cut Pro Data from the Pasteboard as a binary Property List, if present.","Parameters","None","Returns","The pasteboard data or nil.","Notes"]},{"l":"startWatching","p":["Signature","plugins.finalcutpro.pasteboard.manager.startWatching() - none","Type","Function","Description","Start Watching the Pasteboard.","Parameters","None","Returns","Notes"]},{"l":"stopWatching","p":["Signature","plugins.finalcutpro.pasteboard.manager.stopWatching() - none","Type","Function","Description","Stop Watching the Pasteboard.","Parameters","None","Returns","Notes"]},{"l":"supportsContainedItems","p":["Signature","plugins.finalcutpro.pasteboard.manager.supportsContainedItems(data) - boolean","Type","Function","Description","Gets whether or not the data supports contained items.","Parameters","data - The data object to process","Returns","true if supported otherwise false.","Notes"]},{"l":"unarchiveFCPXData","p":["Signature","plugins.finalcutpro.pasteboard.manager.unarchiveFCPXData(fcpxData) - data | nil","Type","Function","Description","Unarchive Final Cut Pro data.","Parameters","fcpxData - The data object to process","Returns","The unarchived Final Cut Pro Pasteboard data or nil.","Notes"]},{"l":"unwatch","p":["Signature","plugins.finalcutpro.pasteboard.manager.unwatch(id) - boolean","Type","Function","Description","Stop a watcher.","Parameters","id - The ID of the watcher you want to stop.","Returns","true if successful otherwise false.","Notes"]},{"l":"watch","p":["Signature","plugins.finalcutpro.pasteboard.manager.watch(events) - table","Type","Function","Description","Watch events.","Parameters","events - Table of events","Returns","Table of watchers.","Notes"]},{"l":"writeFCPXData","p":["Signature","plugins.finalcutpro.pasteboard.manager.writeFCPXData(fcpxData, quiet) - boolean","Type","Function","Description","Write Final Cut Pro data to Pasteboard.","Parameters","fcpxData - The data to write quiet - Whether or not we should stop/start the watcher.","Returns","true if the operation succeeded, otherwise false(which most likely means ownership of the pasteboard has changed).","Notes"]},{"l":"Fields"},{"l":"buffer","p":["Signature","plugins.finalcutpro.pasteboard.manager.buffer cp.prop: table","Type","Field","Description","Contains the Pasteboard Buffer."]},{"l":"watching","p":["Signature","plugins.finalcutpro.pasteboard.manager.watching cp.prop: boolean","Type","Field","Description","Gets whether or not we're watching the pasteboard as a boolean."]}],[{"i":"pluginsfinalcutpropasteboardshared","l":"plugins.finalcutpro.pasteboard.shared","p":["Shared Pasteboard Plugin."]},{"l":"API Overview","p":["copyWithCustomClipName","copyWithCustomClipNameAndFolder","doDecodeHistoryItem","doPasteHistoryItem","enabled","Fields- Variables which can only be accessed from an object returned by a constructor","Functions- API calls offered directly by the extension","generateSharedPasteboardMenu","getFolderNames","getHistory","getHistoryPath","getLocalFolderName","overrideNextFolderName","path","setHistory","update","validRootPath"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"copyWithCustomClipName","p":["Signature","plugins.finalcutpro.pasteboard.shared.copyWithCustomClipName() - None","Type","Function","Description","Triggers a copy with custom clip name action.","Parameters","None","Returns","Notes"]},{"l":"copyWithCustomClipNameAndFolder","p":["Signature","plugins.finalcutpro.pasteboard.shared.copyWithCustomClipNameAndFolder() - none","Type","Function","Description","Copy with Custom Label & Folder.","Parameters","None","Returns","Notes"]},{"l":"doDecodeHistoryItem","p":["Signature","plugins.finalcutpro.pasteboard.shared.doDecodeHistoryItem(folderName, index) - string | nil","Type","Function","Description","Decodes a Paste History Item.","Parameters","folderName - The folder name index - The index of the item you want to decode","Returns","The decoded Pasteboard History Item or nil.","Notes"]},{"l":"doPasteHistoryItem","p":["Signature","plugins.finalcutpro.pasteboard.shared.doPasteHistoryItem(folderName, index) - none","Type","Function","Description","Paste History Item.","Parameters","folderName - The folder name index - The index of the item you want to paste","Returns","None","Notes"]},{"l":"generateSharedPasteboardMenu","p":["Signature","plugins.finalcutpro.pasteboard.shared.generateSharedPasteboardMenu() - table","Type","Function","Description","Generates the shared pasteboard menu.","Parameters","None","Returns","The shared pasteboard menu as a table.","Notes"]},{"l":"getFolderNames","p":["Signature","plugins.finalcutpro.pasteboard.shared.getFolderNames() - table","Type","Function","Description","Returns the list of folder names as an array of strings.","Parameters","None","Returns","A table of folder names.","Notes"]},{"l":"getHistory","p":["Signature","plugins.finalcutpro.pasteboard.shared.getHistory(folderName) - table","Type","Function","Description","Gets the history for a supplied folder name.","Parameters","folderName - The folder name","Returns","The history in a table.","Notes"]},{"l":"getHistoryPath","p":["Signature","plugins.finalcutpro.pasteboard.shared.getHistoryPath(folderName, fileExtension) - string","Type","Function","Description","Gets the History Path.","Parameters","folderName - The folder name fileExtension - The file extension","Returns","The history path as a string","Notes"]},{"l":"getLocalFolderName","p":["Signature","plugins.finalcutpro.pasteboard.shared.getLocalFolderName() - string","Type","Function","Description","Gets the local folder name.","Parameters","None","Returns","The local folder name as a string.","Notes"]},{"l":"overrideNextFolderName","p":["Signature","plugins.finalcutpro.pasteboard.shared.overrideNextFolderName(overrideFolder) - none","Type","Function","Description","Overrides the folder name for the next clip which is copied from Final Cut Pro to the specified value. Once the override has been used, the standard folder name via mod.getLocalFolderName() will be used for subsequent copy operations.","Parameters","None","Returns","The local folder name as a string.","Notes"]},{"l":"setHistory","p":["Signature","plugins.finalcutpro.pasteboard.shared.setHistory(folderName) - none","Type","Function","Description","Clears the history.","Parameters","folderName - The folder name","Returns","None","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.pasteboard.shared.update() - none","Type","Function","Description","Starts or stops the Shared Pasteboard watcher.","Parameters","None","Returns","Notes"]},{"l":"validRootPath","p":["Signature","plugins.finalcutpro.pasteboard.shared.validRootPath() - boolean","Type","Function","Description","Gets whether or not the current root path exists.","Parameters","None","Returns","true if it exists otherwise false.","Notes"]},{"l":"Fields"},{"l":"enabled","p":["Signature","plugins.finalcutpro.pasteboard.shared.enabled cp.prop: boolean","Type","Field","Description","Gets whether or not the shared pasteboard is enabled as a boolean."]},{"l":"path","p":["Signature","plugins.finalcutpro.pasteboard.shared.path cp.prop: string","Type","Field","Description","The Shared Pasteboard Root Path."]}],[{"i":"pluginsfinalcutpropreferencesanimations","l":"plugins.finalcutpro.preferences.animations","p":["Adds Preference for \"Enable User Interface Animations\" within Final Cut Pro X."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpropreferencesclearcache","l":"plugins.finalcutpro.preferences.clearcache","p":["Adds a \"Clear Cache\" button to the Final Cut Pro Preferences."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpropreferencesgeneral","l":"plugins.finalcutpro.preferences.general","p":["Final Cut Pro General Preferences"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpropreferencesmanager","l":"plugins.finalcutpro.preferences.manager","p":["Final Cut Pro Preferences Panel Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutpropreferencesspelling","l":"plugins.finalcutpro.preferences.spelling","p":["Adds Preference for \"Correct Spelling Automatically\" within Final Cut Pro X."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprosetupscan","l":"plugins.finalcutpro.setup.scan","p":["Show setup panel if Final Cut Pro needs scanning."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.setup.scan.init(deps) - self","Type","Function","Description","Initialises the module.","Parameters","deps - A table of dependencies.","Returns","self","Notes"]}],[{"i":"pluginsfinalcutprotangentaudio","l":"plugins.finalcutpro.tangent.audio","p":["Final Cut Pro Audio Inspector for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentbrowser","l":"plugins.finalcutpro.tangent.browser","p":["Final Cut Pro Tangent Browser Group"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentclip","l":"plugins.finalcutpro.tangent.clip","p":["Final Cut Pro Tangent View Group"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentcolor","l":"plugins.finalcutpro.tangent.color","p":["Final Cut Pro Tangent Color Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentcommandpostfunctions","l":"plugins.finalcutpro.tangent.commandpost.functions","p":["CommandPost Functions for Tangent."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentcommon","l":"plugins.finalcutpro.tangent.common","p":["Common Final Cut Pro functions for Tangent"]},{"l":"API Overview","p":["buttonParameter","checkboxParameter","checkboxParameterByIndex","checkboxSliderParameter","commandParameter","doShowParameter","dynamicPopupSliderParameter","functionParameter","Functions- API calls offered directly by the extension","menuParameter","popupParameter","popupParameters","popupSliderParameter","radioButtonParameter","shortcutParameter","sliderParameter","volumeSliderParameter","xyParameter"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"buttonParameter","p":["Signature","plugins.finalcutpro.tangent.common.buttonParameter(group, param, id, label) - number","Type","Function","Description","Sets up a new Button Parameter for the Tangent","Parameters","group - The Tangent Group. param - The Parameter id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string.","Returns","An updated ID","Notes"]},{"l":"checkboxParameter","p":["Signature","plugins.finalcutpro.tangent.common.checkboxParameter(group, param, id, label) - number","Type","Function","Description","Sets up a new Checkbox Parameter for the Tangent","Parameters","group - The Tangent Group. param - The Parameter id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string.","Returns","An updated ID","Notes"]},{"l":"checkboxParameterByIndex","p":["Signature","plugins.finalcutpro.tangent.common.checkboxParameterByIndex(group, section, nextSection, id, label, index) - number","Type","Function","Description","Sets up a new AXCheckBox object for the Tangent.","Parameters","group - The Tangent Group. section - The section as it appears in the FCPX Inspector. nextSection - The next section as it appears in the FCPX Inspector. id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string. index - The index of the checkbox in the section.","Returns","An updated ID","Notes"]},{"l":"checkboxSliderParameter","p":["Signature","plugins.finalcutpro.tangent.common.checkboxSliderParameter(group, id, label, options, resetIndex) - number","Type","Function","Description","Sets up a new Popup Slider parameter for the Tangent","Parameters","group - The Tangent Group. id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string. options - A table of options. The key for each option should be a number ID (in the order it appears in the UI), and the value should be another table with keys for flexoID and i18n values. resetIndex - An index of which item to use when \"reset\" is triggered.","Returns","An updated ID","Notes"]},{"l":"commandParameter","p":["Signature","plugins.finalcutpro.tangent.common.commandParameter(group, id, commandID) - number","Type","Function","Description","Sets up a new Command Parameter for the Tangent","Parameters","group - The Tangent Group. id - The Tangent ID. commandID - The command ID.","Returns","An updated ID","Notes"]},{"l":"doShowParameter","p":["Signature","plugins.finalcutpro.tangent.common.doShowParameter(group, param, id, label) - number","Type","Function","Description","Sets up a new DoShow Parameter for the Tangent","Parameters","group - The Tangent Group. param - The Parameter id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string.","Returns","An updated ID","Notes"]},{"l":"dynamicPopupSliderParameter","p":["Signature","plugins.finalcutpro.tangent.common.dynamicPopupSliderParameter(group, param, id, label, defaultValue) - number","Type","Function","Description","Sets up a new Popup Slider parameter for the Tangent","Parameters","group - The Tangent Group. param - The Parameter id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string. defaultValue - The default value to use when the reset button is pressed.","Returns","An updated ID","Notes"]},{"l":"functionParameter","p":["Signature","plugins.finalcutpro.tangent.common.functionParameter(group, id, label, fn) - number","Type","Function","Description","Sets up a new Function Parameter for the Tangent.","Parameters","group - The Tangent Group. id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string. path - The list of menu items you'd like to activate as a table.","Returns","An updated ID","Notes"]},{"l":"menuParameter","p":["Signature","plugins.finalcutpro.tangent.common.menuParameter(group, id, label, path) - number","Type","Function","Description","Sets up a new Final Cut Pro Menu Parameter for the Tangent.","Parameters","group - The Tangent Group. id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string. path - The list of menu items you'd like to activate as a table.","Returns","An updated ID","Notes"]},{"l":"popupParameter","p":["Signature","plugins.finalcutpro.tangent.common.popupParameter(group, param, id, value, label) - number","Type","Function","Description","Sets up a new Popup Parameter for the Tangent","Parameters","group - The Tangent Group. param - The Parameter. id - The Tangent ID. value - The value to select as a string. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string.","Returns","An updated ID","Notes"]},{"l":"popupParameters","p":["Signature","plugins.finalcutpro.tangent.common.popupParameters(group, param, id, options) - number","Type","Function","Description","Sets up a new Popup Parameter for the Tangent","Parameters","group - The Tangent Group. param - The Parameter id - The Tangent ID. options - A table of options. The key for each option should be a number ID (in the order it appears in the UI), and the value should be another table with keys for flexoID and i18n values.","Returns","An updated ID","Notes"]},{"l":"popupSliderParameter","p":["Signature","plugins.finalcutpro.tangent.common.popupSliderParameter(group, param, id, label, options, resetIndex) - number","Type","Function","Description","Sets up a new Popup Slider parameter for the Tangent","Parameters","group - The Tangent Group. param - The Parameter id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string. options - A table of options. The key for each option should be a number ID (in the order it appears in the UI), and the value should be another table with keys for flexoID and i18n values. resetIndex - An index of which item to use when \"reset\" is triggered.","Returns","An updated ID","Notes"]},{"l":"radioButtonParameter","p":["Signature","plugins.finalcutpro.tangent.common.radioButtonParameter(group, param, id, label) - number","Type","Function","Description","Sets up a new Checkbox Parameter for the Tangent","Parameters","group - The Tangent Group. param - The Parameter id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string.","Returns","An updated ID","Notes"]},{"l":"shortcutParameter","p":["Signature","plugins.finalcutpro.tangent.common.shortcutParameter(group, id, label, shortcutID) - number","Type","Function","Description","Sets up a new Final Cut Pro Shortcut Parameter for the Tangent.","Parameters","group - The Tangent Group. id - The Tangent ID. label - The label to be used by the Tangent. This can either be an i18n ID or a plain string. shortcutID - The shortcut ID.","Returns","An updated ID","Notes"]},{"l":"sliderParameter","p":["Signature","plugins.finalcutpro.tangent.common.sliderParameter(group, param, id, minValue, maxValue, stepSize, default, label, optionalParamA, optionalParamB) - number, parameter","Type","Function","Description","Sets up a new Slider Parameter","Parameters","group - The Tangent Group param - The Parameter id - The Tangent ID minValue - The minimum value maxValue - The maximum value stepSize - The step size default - The default value label - An optional label as an i18n ID or plain string. If no label is supplied the param label will be used. optionalParamA - An optional parameter. Useful if you need to link parameters. optionalParamB - An optional parameter. Useful if you need to link parameters.","Returns","An updated ID The parameters value","Notes"]},{"l":"volumeSliderParameter","p":["Signature","plugins.finalcutpro.tangent.common.volumeSliderParameter(group, param, id, minValue, maxValue, stepSize, default, label) - number, parameter","Type","Function","Description","Sets up a new Volume Slider Parameter","Parameters","group - The Tangent Group param - The Parameter id - The Tangent ID minValue - The minimum value maxValue - The maximum value stepSize - The step size default - The default value label - An optional label as an i18n ID or plain string. If no label is supplied the param label will be used.","Returns","An updated ID The parameters value","Notes"]},{"l":"xyParameter","p":["Signature","plugins.finalcutpro.tangent.common.xyParameter(group, param, id, minValue, maxValue, stepSize) - number","Type","Function","Description","Sets up a new XY Parameter","Parameters","group - The Tangent Group param - The Parameter id - The Tangent ID minValue - The minimum value maxValue - The maximum value stepSize - The step size","Returns","An updated ID The x parameter value The y parameter value The xy binding","Notes"]}],[{"i":"pluginsfinalcutprotangentedit","l":"plugins.finalcutpro.tangent.edit","p":["Final Cut Pro Tangent View Group"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentfeatures","l":"plugins.finalcutpro.tangent.features","p":["Final Cut Pro CommandPost Actions for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentgenerator","l":"plugins.finalcutpro.tangent.generator","p":["Final Cut Pro Generator Inspector for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentinfo","l":"plugins.finalcutpro.tangent.info","p":["Final Cut Pro Info Inspector for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentmanager","l":"plugins.finalcutpro.tangent.manager","p":["Manager for Final Cut Pro's Tangent Support"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentnew","l":"plugins.finalcutpro.tangent.new","p":["Final Cut Pro Tangent View Group"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","group","Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"group","p":["Signature","plugins.finalcutpro.tangent.new.group","Type","Constant","Description","The core.tangent.manager.group that collects Final Cut Pro New actions/parameters/etc."]},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.tangent.new.init() - none","Type","Function","Description","Initialises the module.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotangentopen","l":"plugins.finalcutpro.tangent.open","p":["Final Cut Pro Tangent Open FCPX."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentos","l":"plugins.finalcutpro.tangent.os","p":["macOS Group for the Tangent."]},{"l":"Submodules","p":["plugins.finalcutpro.tangent.os.display","plugins.finalcutpro.tangent.os.pasteboard","plugins.finalcutpro.tangent.os.sound","plugins.finalcutpro.tangent.os.window"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentosdisplay","l":"plugins.finalcutpro.tangent.os.display","p":["Tangent Display Functions."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.tangent.os.display.init() - self","Type","Function","Description","Initialise the module.","Parameters","deps - Dependancies","Returns","Self","Notes"]}],[{"i":"pluginsfinalcutprotangentospasteboard","l":"plugins.finalcutpro.tangent.os.pasteboard","p":["Pasteboard Tools for Tangent."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentossound","l":"plugins.finalcutpro.tangent.os.sound","p":["Tangent Sound Functions."]},{"l":"API Overview","p":["Variables- Configurable values","currentOutputDevice","group","Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"currentOutputDevice","p":["Signature","plugins.finalcutpro.tangent.os.sound.currentOutputDevice cp.prop: audio","Type","Variable","Description","Current Output Device."]},{"l":"group","p":["Signature","plugins.finalcutpro.tangent.os.sound.group cp.prop: audio","Type","Variable","Description","Tangent Sound Group."]},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.tangent.os.sound.init() - self","Type","Function","Description","Initialise the module.","Parameters","deps - Dependancies","Returns","Self","Notes"]}],[{"i":"pluginsfinalcutprotangentoswindow","l":"plugins.finalcutpro.tangent.os.window","p":["Window Management Tools for Tangent."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentoverlay","l":"plugins.finalcutpro.tangent.overlay","p":["Final Cut Pro Tangent Viewer Overlay Group"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","group","Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"group","p":["Signature","plugins.finalcutpro.tangent.overlay.group","Type","Constant","Description","The core.tangent.manager.group that collects Final Cut Pro New actions/parameters/etc."]},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.tangent.overlay.init() - none","Type","Function","Description","Initialises the module.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotangentpasteboard","l":"plugins.finalcutpro.tangent.pasteboard","p":["Final Cut Pro Tangent Pasteboard Group"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","group","Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"group","p":["Signature","plugins.finalcutpro.tangent.pasteboard.group","Type","Constant","Description","The core.tangent.manager.group that collects Final Cut Pro New actions/parameters/etc."]},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.tangent.pasteboard.init() - none","Type","Function","Description","Initialises the module.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotangentplayback","l":"plugins.finalcutpro.tangent.playback","p":["Final Cut Pro Tangent Playback Group/Management"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentshare","l":"plugins.finalcutpro.tangent.share","p":["Final Cut Pro Share Inspector for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangenttext","l":"plugins.finalcutpro.tangent.text","p":["Final Cut Pro Text Inspector for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangenttimeline","l":"plugins.finalcutpro.tangent.timeline","p":["Final Cut Pro Tangent Timeline Group/Management"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangenttitle","l":"plugins.finalcutpro.tangent.title","p":["Final Cut Pro Title Inspector for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangenttransition","l":"plugins.finalcutpro.tangent.transition","p":["Final Cut Pro Transition Inspector for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangenttrim","l":"plugins.finalcutpro.tangent.trim","p":["Final Cut Pro Tangent Trim Group"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","group","Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"group","p":["Signature","plugins.finalcutpro.tangent.trim.group","Type","Constant","Description","The core.tangent.manager.group that collects Final Cut Pro Trim actions/parameters/etc."]},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.tangent.trim.init() - none","Type","Function","Description","Initialises the module.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotangentvideo","l":"plugins.finalcutpro.tangent.video","p":["Final Cut Pro Video Inspector for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentview","l":"plugins.finalcutpro.tangent.view","p":["Final Cut Pro Tangent View Group"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","group","Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"group","p":["Signature","plugins.finalcutpro.tangent.view.group","Type","Constant","Description","The core.tangent.manager.group that collects Final Cut Pro View actions/parameters/etc."]},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.tangent.view.init() - none","Type","Function","Description","Initialises the module.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotangentviewer","l":"plugins.finalcutpro.tangent.viewer","p":["Final Cut Pro Viewer Actions for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotangentworkspaces","l":"plugins.finalcutpro.tangent.workspaces","p":["Final Cut Pro Workspace Actions for Tangent"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotext2speech","l":"plugins.finalcutpro.text2speech","p":["Text to Speech Plugin."]},{"l":"API Overview","p":["addCaption","addCustomKeyword","addKeywordForVoiceName","addTextToNotesFieldAfterImport","assignClipAudioRoleToVoiceName","chooseFolder","Constants- Useful values which cannot be changed","copyToMediaFolder","currentIncrementalNumber","customPrefix","deleteFileAfterImport","enableCustomPrefix","Functions- API calls offered directly by the extension","includeTextInFilename","insertFromPasteboard","insertIntoTimeline","path","recentText","replaceSpaceWithUnderscore","show","tag","useUnderscore","Variables- Configurable values","voice"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"copyToMediaFolder","p":["Signature","plugins.finalcutpro.text2speech.copyToMediaFolder cp.prop: boolean; live","Type","Constant","Description","Copy to Media Folder Preferences Key."]},{"l":"Variables"},{"l":"addCaption","p":["Signature","plugins.finalcutpro.text2speech.addCaption","Type","Variable","Description","Option to Add Text to Notes Field After Importing"]},{"l":"addCustomKeyword","p":["Signature","plugins.finalcutpro.text2speech.addCustomKeyword","Type","Variable","Description","Boolean that sets whether or not to add a custom keyword."]},{"l":"addKeywordForVoiceName","p":["Signature","plugins.finalcutpro.text2speech.addKeywordForVoiceName","Type","Variable","Description","Boolean that sets whether or not a tag should be added for the voice."]},{"l":"addTextToNotesFieldAfterImport","p":["Signature","plugins.finalcutpro.text2speech.addTextToNotesFieldAfterImport","Type","Variable","Description","Option to Add Text to Notes Field After Importing"]},{"l":"assignClipAudioRoleToVoiceName","p":["Signature","plugins.finalcutpro.text2speech.assignClipAudioRoleToVoiceName","Type","Variable","Description","Assign Clip Audio Role to Voice Name"]},{"l":"currentIncrementalNumber","p":["Signature","plugins.finalcutpro.text2speech.currentIncrementalNumber","Type","Variable","Description","Current Incremental Number as number"]},{"l":"customPrefix","p":["Signature","plugins.finalcutpro.text2speech.customPrefix","Type","Variable","Description","String which contains the custom prefix."]},{"l":"deleteFileAfterImport","p":["Signature","plugins.finalcutpro.text2speech.deleteFileAfterImport","Type","Variable","Description","Delete File After Import"]},{"l":"enableCustomPrefix","p":["Signature","plugins.finalcutpro.text2speech.enableCustomPrefix","Type","Variable","Description","Boolean that sets whether or not a custom prefix for the generated filename is enabled."]},{"l":"includeTextInFilename","p":["Signature","plugins.finalcutpro.text2speech.includeTextInFilename","Type","Variable","Description","Includes the entered text in the filename"]},{"l":"insertIntoTimeline","p":["Signature","plugins.finalcutpro.text2speech.insertIntoTimeline","Type","Variable","Description","Boolean that sets whether or not new generated voice file are automatically added to the timeline or not."]},{"l":"path","p":["Signature","plugins.finalcutpro.text2speech.path","Type","Variable","Description","Text to Speech Path for generated files."]},{"l":"recentText","p":["Signature","plugins.finalcutpro.text2speech.recentText","Type","Variable","Description","Table of recent items in Text to Speech Search."]},{"l":"replaceSpaceWithUnderscore","p":["Signature","plugins.finalcutpro.text2speech.replaceSpaceWithUnderscore","Type","Variable","Description","Replace Space with Underscore"]},{"l":"tag","p":["Signature","plugins.finalcutpro.text2speech.tag","Type","Variable","Description","Tag that will be added to generated voice overs."]},{"l":"useUnderscore","p":["Signature","plugins.finalcutpro.text2speech.useUnderscore","Type","Variable","Description","If true then an underscore will be used in the Custom Prefix filename otherwise a dash will be used."]},{"l":"voice","p":["Signature","plugins.finalcutpro.text2speech.voice","Type","Variable","Description","Text to Speech Voice."]},{"l":"Functions"},{"l":"chooseFolder","p":["Signature","plugins.finalcutpro.text2speech.chooseFolder() - string or false","Type","Function","Description","Prompts the user to choose a folder for the Text to Speech Tool.","Parameters","None","Returns","A string of the selected path or false if cancelled.","Notes"]},{"l":"insertFromPasteboard","p":["Signature","plugins.finalcutpro.text2speech.insertFromPasteboard() - none","Type","Function","Description","Inserts Text to Speech by reading the Pasteboard.","Parameters","None","Returns","Notes"]},{"l":"show","p":["Signature","plugins.finalcutpro.text2speech.show() - none","Type","Function","Description","Shows the Text to Speech Chooser.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotimelineaudioeffects","l":"plugins.finalcutpro.timeline.audioeffects","p":["Controls Final Cut Pro's Audio Effects."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","audioeffects"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"audioeffects","p":["Signature","plugins.finalcutpro.timeline.audioeffects(action) - boolean","Type","Function","Description","Applies the specified action as a audio effect.","Parameters","action- A table with the name/category/theme for the audio effect to apply, or a string with just the name.","Returns","true if a matching audio effect was found and applied to the timeline.","Notes","Expects action to be a table with the following structure: lua/lili{ name = XXX, category = YYY, theme = ZZZ }/lili...where XXX, YYY and ZZZ are in the current FCPX language. The category and theme are optional, but if they are known it's recommended to use them, or it will simply execute the first matching audio effect with that name. Alternatively, you can also supply a string with just the name."]}],[{"i":"pluginsfinalcutprotimelinecaptions","l":"plugins.finalcutpro.timeline.captions","p":["Caption Tools"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","doPasteTextAsCaption"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"doPasteTextAsCaption","p":["Signature","plugins.finalcutpro.timeline.captions.doPasteTextAsCaption() - cp.rx.go.Statement","Type","Function","Description","A Statement to Paste Text As Caption.","Parameters","None","Returns","cp.rx.go.Statement","Notes"]}],[{"i":"pluginsfinalcutprotimelineclipnavigation","l":"plugins.finalcutpro.timeline.clipnavigation","p":["Clip Navigation Actions."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinecolorboard","l":"plugins.finalcutpro.timeline.colorboard","p":["Color Board Plugins."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","colorBoardMousePuckRelease","nextAspect","startMousePuck","startShiftingPuck","stopShiftingPuck"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"colorBoardMousePuckRelease","p":["Signature","plugins.finalcutpro.timeline.colorboard.colorBoardMousePuckRelease() - none","Type","Function","Description","Color Board Mouse Puck Release","Parameters","None","Returns","Notes"]},{"l":"nextAspect","p":["Signature","plugins.finalcutpro.timeline.colorboard.nextAspect() - none","Type","Function","Description","Goes to the next Color Board aspect.","Parameters","None","Returns","Notes"]},{"l":"startMousePuck","p":["Signature","plugins.finalcutpro.timeline.colorboard.startMousePuck(aspect, property) - none","Type","Function","Description","Color Board - Puck Control Via Mouse","Parameters","aspect - \"global\", \"shadows\", \"midtones\" or \"highlights\" property - \"Color\", \"Saturation\" or \"Exposure\"","Returns","None","Notes"]},{"l":"startShiftingPuck","p":["Signature","plugins.finalcutpro.timeline.colorboard.startShiftingPuck(puck, percentShift, angleShift) - none","Type","Function","Description","Starts shifting the puck, repeating at the keyboard repeat rate. Runs until stopShiftingPuck() is called.","Parameters","puck - The puck to shift property - The property to shift (typically the percent or angle value for the puck) amount - The amount to shift the property.","Returns","None","Notes"]},{"l":"stopShiftingPuck","p":["Signature","plugins.finalcutpro.timeline.colorboard.stopShiftingPuck() - none","Type","Function","Description","Stops the puck from shifting with the keyboard.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotimelinecolorboardv2","l":"plugins.finalcutpro.timeline.colorboardv2","p":["Color Board Plugins."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinecolorwheels","l":"plugins.finalcutpro.timeline.colorwheels","p":["Color Wheel Enhancements."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinecommandsetactions","l":"plugins.finalcutpro.timeline.commandsetactions","p":["Adds Actions to the Console for triggering Final Cut Pro shortcuts as defined in the Command Set files."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinecsv","l":"plugins.finalcutpro.timeline.csv","p":["Save Timeline Index to CSV"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","saveTimelineIndexToCSV"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"saveTimelineIndexToCSV","p":["Signature","plugins.finalcutpro.timeline.csv.saveTimelineIndexToCSV() - none","Type","Function","Description","Save Timeline Index to CSV","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotimelineeditnewtitle","l":"plugins.finalcutpro.timeline.editnewtitle","p":["Allows adding and editing titles in Final Cut Pro's timeline."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","doEditNewLowerThirds","doEditNewTitle"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"doEditNewLowerThirds","p":["Signature","plugins.finalcutpro.timeline.editnewtitle.doEditNewLowerThirds() - cp.rx.go.Statement","Type","Function","Description","Creates the new two-thirds title.","Parameters","None","Returns","The Statement that will create the new title.","Notes"]},{"l":"doEditNewTitle","p":["Signature","plugins.finalcutpro.timeline.editnewtitle.doEditNewTitle() - cp.rx.go.Statement","Type","Function","Description","Creates the new default title.","Parameters","None","Returns","The Statement that will create the new title.","Notes"]}],[{"i":"pluginsfinalcutprotimelinegenerators","l":"plugins.finalcutpro.timeline.generators","p":["Controls Final Cut Pro's Generators."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","apply"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"apply","p":["Signature","plugins.finalcutpro.timeline.generators.apply(action) - boolean","Type","Function","Description","Applies the specified action as a generator.","Parameters","action- A table with the name/category/theme for the generator to apply, or a string with just the name.","Returns","true if a matching generator was found and applied to the timeline.","Notes","Expects action to be a table with the following structure: lua/lili{ name = XXX, category = YYY, theme = ZZZ }/lili...where XXX, YYY and ZZZ are in the current FCPX language. The category and theme are optional, but if they are known it's recommended to use them, or it will simply execute the first matching generator with that name. Alternatively, you can also supply a string with just the name. Actions will be cached each session, so that if the user applies the effect multiple times, only the first time will require GUI scripting - subsequent uses will just use the Pasteboard."]}],[{"i":"pluginsfinalcutprotimelineheight","l":"plugins.finalcutpro.timeline.height","p":["Shortcut for changing Final Cut Pro's Timeline Height"]},{"l":"API Overview","p":["Variables- Configurable values","changeTimelineClipHeightAlreadyInProgress","Functions- API calls offered directly by the extension","changeTimelineClipHeight","changeTimelineClipHeightRelease","shiftClipHeight"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"changeTimelineClipHeightAlreadyInProgress","p":["Signature","plugins.finalcutpro.timeline.height.changeTimelineClipHeightAlreadyInProgress - boolean","Type","Variable","Description","Change timeline clip height already in progress."]},{"l":"Functions"},{"l":"changeTimelineClipHeight","p":["Signature","plugins.finalcutpro.timeline.height.changeTimelineClipHeight(direction) - none","Type","Function","Description","Change the Timeline Clip Height","Parameters","direction - \"up\" or \"down\"","Returns","None","Notes"]},{"l":"changeTimelineClipHeightRelease","p":["Signature","plugins.finalcutpro.timeline.height.changeTimelineClipHeightRelease() - none","Type","Function","Description","Change Timeline Clip Height Release.","Parameters","None","Returns","Notes"]},{"l":"shiftClipHeight","p":["Signature","plugins.finalcutpro.timeline.height.shiftClipHeight(direction) - boolean","Type","Function","Description","Shift Clip Height","Parameters","None","Returns","true if successful otherwise false.","Notes"]}],[{"i":"pluginsfinalcutprotimelinehorizontal","l":"plugins.finalcutpro.timeline.horizontal","p":["Actions for changing the Timeline Horizontally"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinelanes","l":"plugins.finalcutpro.timeline.lanes","p":["Controls Final Cut Pro's Lanes."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","selectClipAtLane"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"selectClipAtLane","p":["Signature","plugins.finalcutpro.timeline.lanes.selectClipAtLane(whichLane) - boolean","Type","Function","Description","Select Clip at Lane in Final Cut Pro","Parameters","whichLane - Lane Number","Returns","true if successful otherwise false","Notes"]}],[{"i":"pluginsfinalcutprotimelinemarkallclips","l":"plugins.finalcutpro.timeline.markallclips","p":["Add a marker to all selected clips under the playhead, or all clips if only one clip is selected."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","markAllClips"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"markAllClips","p":["Signature","plugins.finalcutpro.timeline.markallclips.markAllClips - none","Type","Function","Description","Add a marker to all selected clips under the playhead, or all clips if only one clip is selected.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotimelinematchframe","l":"plugins.finalcutpro.timeline.matchframe","p":["Match Frame Tools for Final Cut Pro."]},{"l":"API Overview","p":["Variables- Configurable values","hiddenKeywords","Functions- API calls offered directly by the extension","getMulticamAngleFromSelectedClip","matchFrame","multicamMatchFrame"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"hiddenKeywords","p":["Signature","plugins.finalcutpro.timeline.matchframe.hiddenKeywords cp.prop: table","Type","Variable","Description","Favourite Keywords"]},{"l":"Functions"},{"l":"getMulticamAngleFromSelectedClip","p":["Signature","plugins.finalcutpro.timeline.matchframe.getMulticamAngleFromSelectedClip() - angle | boolean","Type","Function","Description","Get Multicam Angle From Selected Clip","Parameters","None","Returns","Angle or false on error","Notes"]},{"l":"matchFrame","p":["Signature","plugins.finalcutpro.timeline.matchframe.matchFrame() - none","Type","Function","Description","Performs a Single Match Frame.","Parameters","focus- If set to true, the library will search for the matched clip title","Returns","None","Notes"]},{"l":"multicamMatchFrame","p":["Signature","plugins.finalcutpro.timeline.matchframe.multicamMatchFrame(goBackToTimeline) - none","Type","Function","Description","Multicam Match Frame","Parameters","goBackToTimeline - true if you want to go back to the timeline after opening the clip in the Multicam Editor","Returns","None","Notes"]}],[{"i":"pluginsfinalcutprotimelinemousezoom","l":"plugins.finalcutpro.timeline.mousezoom","p":["Allows you to zoom in or out of a Final Cut Pro timeline using the mechanical scroll wheel on your mouse or the Touch Pad on the Magic Mouse when holding down the OPTION modifier key.","Special Thanks: Iain Anderson (@funwithstuff) for all his incredible testing!"]},{"l":"API Overview","p":["Variables- Configurable values","customModifier","enabled","numberOfTouchDevices","offset","sensitivity","threshold","Functions- API calls offered directly by the extension","findMagicMouses","start","stop","update"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"customModifier","p":["Signature","plugins.finalcutpro.timeline.mousezoom.customModifier cp.prop: boolean","Type","Variable","Description","Should Mouse Zoom be inverted?"]},{"l":"enabled","p":["Signature","plugins.finalcutpro.timeline.mousezoom.enabled cp.prop: boolean","Type","Variable","Description","Toggles the Enable Proxy Menu Icon"]},{"l":"numberOfTouchDevices","p":["Signature","plugins.finalcutpro.timeline.mousezoom.numberOfTouchDevices - number","Type","Variable","Description","Number of Touch Devices Detected."]},{"l":"offset","p":["Signature","plugins.finalcutpro.timeline.mousezoom.offset - number","Type","Variable","Description","Offset Value used in difference calculations."]},{"l":"sensitivity","p":["Signature","plugins.finalcutpro.timeline.mousezoom.sensitivity cp.prop: string","Type","Variable","Description","Sensitivity Level"]},{"l":"threshold","p":["Signature","plugins.finalcutpro.timeline.mousezoom.threshold - number","Type","Variable","Description","Threshold Value used in difference calculations."]},{"l":"Functions"},{"l":"findMagicMouses","p":["Signature","plugins.finalcutpro.timeline.mousezoom.findMagicMouses() - none","Type","Function","Description","Find Magic Mouse Devices and adds them to a table.","Parameters","None","Returns","Notes"]},{"l":"start","p":["Signature","plugins.finalcutpro.timeline.mousezoom.start() - none","Type","Function","Description","Enables the ability to zoon a timeline using your mouse scroll wheel and the OPTION modifier key.","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","plugins.finalcutpro.timeline.mousezoom.stop() - none","Type","Function","Description","Disables the ability to zoom a timeline using your mouse scroll wheel and the OPTION modifier key.","Parameters","None","Returns","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.timeline.mousezoom.update() - none","Type","Function","Description","Checks to see whether or not we should enable the timeline zoom watchers.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotimelinemovetoplayhead","l":"plugins.finalcutpro.timeline.movetoplayhead","p":["Move To Playhead."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinemulticam","l":"plugins.finalcutpro.timeline.multicam","p":["Multicam Tools."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","doCutAndSwitchMulticam"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"doCutAndSwitchMulticam","p":["Signature","plugins.finalcutpro.timeline.multicam.doCutAndSwitchMulticam(whichMode, whichAngle) - Statement","Type","Function","Description","Creates a Statement to Cut & Switch Multicam.","Parameters","whichMode - \"Audio\", \"Video\" or \"Both\" as string whichAngle - Number of Angle","Returns","Statement to execute","Notes"]}],[{"i":"pluginsfinalcutprotimelinenavigation","l":"plugins.finalcutpro.timeline.navigation","p":["Actions to control Timeline Navigation."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinepasteboard","l":"plugins.finalcutpro.timeline.pasteboard","p":["Actions related to the pasteboard."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelineplayback","l":"plugins.finalcutpro.timeline.playback","p":["Playback Plugin."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","pause","play"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"pause","p":["Signature","plugins.finalcutpro.timeline.playback.pause() - none","Type","Function","Description","'Pause' in Final Cut Pro","Parameters","None","Returns","Notes"]},{"l":"play","p":["Signature","plugins.finalcutpro.timeline.playback.play() - none","Type","Function","Description","'Play' in Final Cut Pro","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotimelineplayhead","l":"plugins.finalcutpro.timeline.playhead","p":["Manages features relating to the Timeline Playhead."]},{"l":"API Overview","p":["Variables- Configurable values","alwaysCentered","scrollingTimeline","tracking"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"alwaysCentered","p":["Signature","plugins.finalcutpro.timeline.playhead.alwaysCentered cp.prop: boolean","Type","Variable","Description","If true, the playhead will be centered in the view while scrolling."]},{"l":"scrollingTimeline","p":["Signature","plugins.finalcutpro.timeline.playhead.scrollingTimeline cp.prop: boolean","Type","Variable","Description","Enables or disables the scrolling timeline."]},{"l":"tracking","p":["Signature","plugins.finalcutpro.timeline.playhead.tracking cp.prop: boolean; read-only; live","Type","Variable","Description","If true, we are tracking the playhead position."]}],[{"i":"pluginsfinalcutprotimelinepluginactions","l":"plugins.finalcutpro.timeline.pluginactions","p":["Adds Final Cut Pro Plugins (i.e. Effects, Generators, Titles and Transitions) to CommandPost Actions."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.timeline.pluginactions.init(actionmanager, generators, titles, transitions, audioeffects, videoeffects) - module","Type","Function","Description","Initialise the module.","Parameters","actionmanager- Action Manager Plugin generators- Generators Plugin titles- Titles Plugin transitions- Transitions Plugin audioeffects- Audio Effects Plugin videoeffects- Video Effects Plugin","Returns","The module","Notes"]}],[{"i":"pluginsfinalcutprotimelinepreferences","l":"plugins.finalcutpro.timeline.preferences","p":["Final Cut Pro Timeline Preferences."]},{"l":"API Overview","p":["Variables- Configurable values","backgroundRender","Functions- API calls offered directly by the extension","getAutoRenderDelay"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"backgroundRender","p":["Signature","plugins.finalcutpro.timeline.preferences.backgroundRender cp.prop: boolean","Type","Variable","Description","Is Background Render enabled?"]},{"l":"Functions"},{"l":"getAutoRenderDelay","p":["Signature","plugins.finalcutpro.timeline.preferences.getAutoRenderDelay() - number","Type","Function","Description","Gets the 'FFAutoRenderDelay' value from the Final Cut Pro Preferences file.","Parameters","None","Returns","'FFAutoRenderDelay' value as number.","Notes"]}],[{"i":"pluginsfinalcutprotimelinerenameclip","l":"plugins.finalcutpro.timeline.renameclip","p":["Rename Clip"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelineselectalltimelineclips","l":"plugins.finalcutpro.timeline.selectalltimelineclips","p":["Select All Timeline Clips"]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","selectalltimelineclips"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"selectalltimelineclips","p":["Signature","plugins.finalcutpro.timeline.selectalltimelineclips(forwards) - boolean","Type","Function","Description","Selects all timeline clips to the left or right of the timeline playhead in Final Cut Pro.","Parameters","forwards - true if you want to select forwards","Returns","true if successful otherwise false","Notes"]}],[{"i":"pluginsfinalcutprotimelinespeed","l":"plugins.finalcutpro.timeline.speed","p":["Speed Related Actions"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinetitles","l":"plugins.finalcutpro.timeline.titles","p":["Controls Final Cut Pro's Titles."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","apply"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"apply","p":["Signature","plugins.finalcutpro.timeline.titles.apply(action) - boolean","Type","Function","Description","Applies the specified action as a title.","Parameters","action- A table with the name/category/theme for the title to apply, or a string with just the name.","Returns","true if a matching title was found and applied to the timeline.","Notes","Expects action to be a table with the following structure: lua/lili{ name = XXX, category = YYY, theme = ZZZ }/lili...where XXX, YYY and ZZZ are in the current FCPX language. The category and theme are optional, but if they are known it's recommended to use them, or it will simply execute the first matching title with that name. Alternatively, you can also supply a string with just the name. Actions will be cached each session, so that if the user applies the effect multiple times, only the first time will require GUI scripting - subsequent uses will just use the Pasteboard."]}],[{"i":"pluginsfinalcutprotimelinetranscode","l":"plugins.finalcutpro.timeline.transcode","p":["Adds actions that allows you to transcode clips from the timeline."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","transcodeType","Functions- API calls offered directly by the extension","doTranscodeSelectedBrowserClips","doTranscodeSelectedClips","doTranscodeSelectedTimelineClips","optimizeSelectedClips","proxySelectedClips","transcodeSelectedClips"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"transcodeType","p":["Signature","plugins.finalcutpro.timeline.transcode.transcodeType - table","Type","Constant","Description","Transcode type."]},{"l":"Functions"},{"l":"doTranscodeSelectedBrowserClips","p":["Signature","plugins.finalcutpro.timeline.transcode.doTranscodeSelectedBrowserClips() - Statement","Type","Function","Description","Creates a Statement to transcode selected browser clips.","Parameters","transcodeType - Either \"optimized\" or \"proxy\"","Returns","Statement to execute","Notes"]},{"l":"doTranscodeSelectedClips","p":["Signature","plugins.finalcutpro.timeline.transcode.doTranscodeSelectedClips() - Statement","Type","Function","Description","Creates a Statement to transcode selected clips.","Parameters","transcodeType - Either \"optimized\" or \"proxy\"","Returns","Statement to execute","Notes"]},{"l":"doTranscodeSelectedTimelineClips","p":["Signature","plugins.finalcutpro.timeline.transcode.doTranscodeSelectedTimelineClips() - Statement","Type","Function","Description","Creates a Statement to transcode selected timeline clips.","Parameters","transcodeType - Either \"optimized\" or \"proxy\"","Returns","Statement to execute","Notes"]},{"l":"optimizeSelectedClips","p":["Signature","plugins.finalcutpro.timeline.transcode.optimizeSelectedClips() - none","Type","Function","Description","Create optimised media for selected clips.","Parameters","None","Returns","Notes"]},{"l":"proxySelectedClips","p":["Signature","plugins.finalcutpro.timeline.transcode.proxySelectedClips() - none","Type","Function","Description","Create Proxies for selected clips.","Parameters","None","Returns","Notes"]},{"l":"transcodeSelectedClips","p":["Signature","plugins.finalcutpro.timeline.transcode.transcodeSelectedClips(transcodeType) - none","Type","Function","Description","Transcode selected clips.","Parameters","transcodeType - Either \"optimized\" or \"proxy\"","Returns","None","Notes"]}],[{"i":"pluginsfinalcutprotimelinetransitions","l":"plugins.finalcutpro.timeline.transitions","p":["Controls Final Cut Pro's Transitions."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","transitions"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"transitions","p":["Signature","plugins.finalcutpro.timeline.transitions(action) - boolean","Type","Function","Description","Applies the specified action as a transition.","Parameters","action- A table with the name/category/theme for the transition to apply, or a string with just the name.","Returns","true if a matching transition was found and applied to the timeline.","Notes","Expects action to be a table with the following structure: lua/lili{ name = XXX, category = YYY, theme = ZZZ }/lili...where XXX, YYY and ZZZ are in the current FCPX language. The category and theme are optional, but if they are known it's recommended to use them, or it will simply execute the first matching transition with that name. Alternatively, you can also supply a string with just the name."]}],[{"i":"pluginsfinalcutprotimelinevideoanimation","l":"plugins.finalcutpro.timeline.videoanimation","p":["Video Animation Actions"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinevideoeffects","l":"plugins.finalcutpro.timeline.videoeffects","p":["Controls Final Cut Pro's Video Effects."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","videoeffects"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"videoeffects","p":["Signature","plugins.finalcutpro.timeline.videoeffects(action) - boolean","Type","Function","Description","Applies the specified action as a video effect.","Parameters","action- A table with the name/category/theme for the video effect to apply, or a string with just the name.","Returns","true if a matching video effect was found and applied to the timeline.","Notes","Expects action to be a table with the following structure: lua/lili{ name = XXX, category = YYY, theme = ZZZ }/lili...where XXX, YYY and ZZZ are in the current FCPX language. The category and theme are optional, but if they are known it's recommended to use them, or it will simply execute the first matching video effect with that name. Alternatively, you can also supply a string with just the name."]}],[{"i":"pluginsfinalcutprotimelinezoom","l":"plugins.finalcutpro.timeline.zoom","p":["Action for changing Final Cut Pro's Timeline Zoom Level"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprotimelinezoomtoselection","l":"plugins.finalcutpro.timeline.zoomtoselection","p":["Zoom the Timeline to fit the currently-selected clips."]},{"l":"API Overview","p":["Methods- API calls which can only be made on an object returned by a constructor","toggleZoomToFit","toggleZoomToSelection","zoomToSelection"]},{"l":"API Documentation"},{"l":"Methods"},{"l":"toggleZoomToFit","p":["Signature","plugins.finalcutpro.timeline.zoomtoselection.toggleZoomToFit() - none","Type","Method","Description","Toggles between \"Zoom to Selection\" and the last zoom amount.","Parameters","None","Returns","Notes"]},{"l":"toggleZoomToSelection","p":["Signature","plugins.finalcutpro.timeline.zoomtoselection.toggleZoomToSelection() - none","Type","Method","Description","Toggles between \"Zoom to Selection\" and the last zoom amount.","Parameters","None","Returns","Notes"]},{"l":"zoomToSelection","p":["Signature","plugins.finalcutpro.timeline.zoomtoselection.zoomToSelection() - boolean","Type","Method","Description","Zooms the view to fit the currently-selected clips.","Parameters","None","Returns","true if there is selected content in the timeline and zooming was successful.","Notes"]}],[{"i":"pluginsfinalcutprotoolboxautosequence","l":"plugins.finalcutpro.toolbox.autosequence","p":["Orders clips on a timeline by timecode."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","removeGaps"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"removeGaps","p":["Signature","plugins.finalcutpro.toolbox.autosequence.removeGaps cp.prop: boolean","Type","Field","Description","Remove Gaps?"]}],[{"i":"pluginsfinalcutprotoolboxfcpxmltitles","l":"plugins.finalcutpro.toolbox.fcpxmltitles","p":["FCPXML Titles Toolbox Panel"]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","ignoreFirstRow","lastBatchProcessPath","lastExportCSVPath","lastExportFCPXMLPath","lastFCPXMLPath","newTitleColumn","originalTitleColumn","removeLineBreaks","sentToFinalCutPro","trimWhiteSpace"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"ignoreFirstRow","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.ignoreFirstRow cp.prop: boolean","Type","Field","Description","Ignore first row of CSV?"]},{"l":"lastBatchProcessPath","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.lastBatchProcessPath cp.prop: string","Type","Field","Description","Last Batch Process Path"]},{"l":"lastExportCSVPath","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.lastExportCSVPath cp.prop: string","Type","Field","Description","Last Export CSV Path"]},{"l":"lastExportFCPXMLPath","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.lastExportFCPXMLPath cp.prop: string","Type","Field","Description","Last Export Path"]},{"l":"lastFCPXMLPath","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.lastFCPXMLPath cp.prop: string","Type","Field","Description","Last FCPXMLPath"]},{"l":"newTitleColumn","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.newTitleColumn cp.prop: string","Type","Field","Description","New Title Column"]},{"l":"originalTitleColumn","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.originalTitleColumn cp.prop: string","Type","Field","Description","Original Title Column"]},{"l":"removeLineBreaks","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.removeLineBreaks cp.prop: boolean","Type","Field","Description","Remove Line Breaks"]},{"l":"sentToFinalCutPro","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.sentToFinalCutPro cp.prop: boolean","Type","Field","Description","Send to Final Cut Pro"]},{"l":"trimWhiteSpace","p":["Signature","plugins.finalcutpro.toolbox.fcpxmltitles.trimWhiteSpace cp.prop: boolean","Type","Field","Description","Trim White Space"]}],[{"i":"pluginsfinalcutprotoolboxnotion","l":"plugins.finalcutpro.toolbox.notion","p":["Notion Toolbox Panel."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","databaseURL","defaultEmoji","mergeData","settings","token"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"databaseURL","p":["Signature","plugins.finalcutpro.toolbox.notion.databaseURL cp.prop: string","Type","Field","Description","Notion Database URL."]},{"l":"defaultEmoji","p":["Signature","plugins.finalcutpro.toolbox.notion.defaultEmoji cp.prop: string","Type","Field","Description","Default Emoji"]},{"l":"mergeData","p":["Signature","plugins.finalcutpro.toolbox.notion.mergeData cp.prop: boolean","Type","Field","Description","Merge data?"]},{"l":"settings","p":["Signature","plugins.finalcutpro.toolbox.notion.settings cp.prop: table","Type","Field","Description","Snippets"]},{"l":"token","p":["Signature","plugins.finalcutpro.toolbox.notion.token cp.prop: string","Type","Field","Description","Notion Token."]}],[{"i":"pluginsfinalcutprotoolboxshotdata","l":"plugins.finalcutpro.toolbox.shotdata","p":["Shot Data Toolbox Panel."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","automaticallyUploadCSV","databaseURL","defaultEmoji","destinationPath","lastOpenPath","lastUploadPath","mergeData","settings","token"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"automaticallyUploadCSV","p":["Signature","plugins.finalcutpro.toolbox.shotdata.automaticallyUploadCSV cp.prop: boolean","Type","Field","Description","Automatically Upload CSV?"]},{"l":"databaseURL","p":["Signature","plugins.finalcutpro.toolbox.shotdata.databaseURL cp.prop: string","Type","Field","Description","Notion Database URL."]},{"l":"defaultEmoji","p":["Signature","plugins.finalcutpro.toolbox.shotdata.defaultEmoji cp.prop: table","Type","Field","Description","Ignore Columns"]},{"l":"destinationPath","p":["Signature","plugins.finalcutpro.toolbox.shotdata.destinationPath cp.prop: string","Type","Field","Description","Last save path"]},{"l":"lastOpenPath","p":["Signature","plugins.finalcutpro.toolbox.shotdata.lastOpenPath cp.prop: string","Type","Field","Description","Last open path"]},{"l":"lastUploadPath","p":["Signature","plugins.finalcutpro.toolbox.shotdata.lastUploadPath cp.prop: string","Type","Field","Description","Last upload path"]},{"l":"mergeData","p":["Signature","plugins.finalcutpro.toolbox.shotdata.mergeData cp.prop: boolean","Type","Field","Description","Merge data?"]},{"l":"settings","p":["Signature","plugins.finalcutpro.toolbox.shotdata.settings cp.prop: table","Type","Field","Description","Snippets"]},{"l":"token","p":["Signature","plugins.finalcutpro.toolbox.shotdata.token cp.prop: string","Type","Field","Description","Notion Token."]}],[{"i":"pluginsfinalcutprotoolboxsonytimecode","l":"plugins.finalcutpro.toolbox.sonytimecode","p":["Adds correct timecode from Sony cameras in a FCPXML."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","lastExportPath"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"lastExportPath","p":["Signature","plugins.finalcutpro.toolbox.sonytimecode.lastExportPath cp.prop: string","Type","Field","Description","Last Export Path"]}],[{"i":"pluginsfinalcutprotoolboxtitlestokeywords","l":"plugins.finalcutpro.toolbox.titlestokeywords","p":["Converts Titles to Keywords"]},{"l":"API Overview","p":["addSpaceAfterSequence","duration","Fields- Variables which can only be accessed from an object returned by a constructor","mergeWithExistingEvent","padding","prefix","removeProjectFromEvent","replaceCommasWithAlternativeCommas","startOrEnd","startWith","stepValue","suffix","textEditor","textEditorTwo","treatFavoriteAndRejectAsRatingsInsteadOfKeywords","useTitleContentsInsteadOfTitleName"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"addSpaceAfterSequence","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.addSpaceAfterSequence cp.prop: boolean","Type","Field","Description","Add Space After Sequence"]},{"l":"duration","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.duration cp.prop: string","Type","Field","Description","Duration of the titles created by \"Create Titles from Text\""]},{"l":"mergeWithExistingEvent","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.mergeWithExistingEvent cp.prop: boolean","Type","Field","Description","Merge With Existing Event?"]},{"l":"padding","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.padding cp.prop: string","Type","Field","Description","Last Padding Value"]},{"l":"prefix","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.prefix cp.prop: string","Type","Field","Description","Last Prefix Value"]},{"l":"removeProjectFromEvent","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.removeProjectFromEvent cp.prop: boolean","Type","Field","Description","Remove Project from Event"]},{"l":"replaceCommasWithAlternativeCommas","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.replaceCommasWithAlternativeCommas cp.prop: boolean","Type","Field","Description","Remove Project from Event"]},{"l":"startOrEnd","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.startOrEnd cp.prop: string","Type","Field","Description","Last Start or End Value"]},{"l":"startWith","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.startWith cp.prop: string","Type","Field","Description","Last Start With Value"]},{"l":"stepValue","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.stepValue cp.prop: string","Type","Field","Description","Last Step With Value"]},{"l":"suffix","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.suffix cp.prop: string","Type","Field","Description","Last Suffix Value"]},{"l":"textEditor","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.textEditor cp.prop: string","Type","Field","Description","Last Text Editor Value"]},{"l":"textEditorTwo","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.textEditorTwo cp.prop: string","Type","Field","Description","Last Text Editor Two Value"]},{"l":"treatFavoriteAndRejectAsRatingsInsteadOfKeywords","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.treatFavoriteAndRejectAsRatingsInsteadOfKeywords cp.prop: boolean","Type","Field","Description","Treat FAVORITE and REJECT as ratings instead of keywords"]},{"l":"useTitleContentsInsteadOfTitleName","p":["Signature","plugins.finalcutpro.toolbox.titlestokeywords.useTitleContentsInsteadOfTitleName cp.prop: boolean","Type","Field","Description","Use Title Contents Instead of Title Name?"]}],[{"i":"pluginsfinalcutprotouchbarmanager","l":"plugins.finalcutpro.touchbar.manager","p":["Final Cut Pro Touch Bar Manager."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","enabled"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"enabled","p":["Signature","plugins.finalcutpro.touchbar.manager.enabled cp.prop: boolean","Type","Field","Description","Is true if the plugin is enabled."]}],[{"i":"pluginsfinalcutprotouchbarvirtual","l":"plugins.finalcutpro.touchbar.virtual","p":["Virtual Touch Bar Plugin."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","LOCATION_TIMELINE","VISIBILITY_ALWAYS","VISIBILITY_DEFAULT","VISIBILITY_FCP","Functions- API calls offered directly by the extension","updateLocation","Fields- Variables which can only be accessed from an object returned by a constructor","enabled","location","visibility"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"LOCATION_TIMELINE","p":["Signature","plugins.finalcutpro.touchbar.virtual.LOCATION_TIMELINE - string","Type","Constant","Description","Virtual Touch Bar is displayed in the top centre of the Final Cut Pro timeline"]},{"l":"VISIBILITY_ALWAYS","p":["Signature","plugins.finalcutpro.touchbar.virtual.VISIBILITY_ALWAYS - string","Type","Constant","Description","Virtual Touch Bar is Always Visible"]},{"l":"VISIBILITY_DEFAULT","p":["Signature","plugins.finalcutpro.touchbar.virtual.VISIBILITY_DEFAULT - string","Type","Constant","Description","The default visibility."]},{"l":"VISIBILITY_FCP","p":["Signature","plugins.finalcutpro.touchbar.virtual.VISIBILITY_FCP - string","Type","Constant","Description","Virtual Touch Bar is only visible when Final Cut Pro is active."]},{"l":"Functions"},{"l":"updateLocation","p":["Signature","plugins.finalcutpro.touchbar.virtual.updateLocation() - none","Type","Function","Description","Updates the Location of the Virtual Touch Bar","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"enabled","p":["Signature","plugins.finalcutpro.touchbar.virtual.enabled cp.prop: boolean","Type","Field","Description","Is true if the plugin is enabled."]},{"l":"location","p":["Signature","plugins.finalcutpro.touchbar.virtual.location cp.prop: string","Type","Field","Description","The Virtual Touch Bar Location Setting"]},{"l":"visibility","p":["Signature","plugins.finalcutpro.touchbar.virtual.visibility cp.prop: string","Type","Field","Description","When should the Virtual Touch Bar be visible?"]}],[{"i":"pluginsfinalcutprotouchbarwidgetscolorboard","l":"plugins.finalcutpro.touchbar.widgets.colorboard","p":["A collection of Final Cut Pro Color Board Widgets for the Touch Bar."]},{"l":"API Overview","p":["Variables- Configurable values","active","hasWidgets","updateInterval","Functions- API calls offered directly by the extension","init","start","stop"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"active","p":["Signature","plugins.finalcutpro.touchbar.widgets.colorboard.active cp.prop: boolean","Type","Variable","Description","Indicates if the widget is active."]},{"l":"hasWidgets","p":["Signature","plugins.finalcutpro.touchbar.widgets.colorboard.hasWidgets cp.prop: boolean","Type","Variable","Description","Indicates if any widgests have been created."]},{"l":"updateInterval","p":["Signature","plugins.finalcutpro.touchbar.widgets.colorboard.updateInterval - number","Type","Variable","Description","How often the Touch Bar widgets should be refreshed in seconds"]},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.touchbar.widgets.colorboard.init() - nil","Type","Function","Description","Initialise the module.","Parameters","None","Returns","Notes"]},{"l":"start","p":["Signature","plugins.finalcutpro.touchbar.widgets.colorboard.start() - nil","Type","Function","Description","Stops the Timer.","Parameters","None","Returns","Notes"]},{"l":"stop","p":["Signature","plugins.finalcutpro.touchbar.widgets.colorboard.stop() - nil","Type","Function","Description","Stops the Timer.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprotouchbarwidgetsduration","l":"plugins.finalcutpro.touchbar.widgets.duration","p":["Final Cut Pro Browser Duration Control Widget for Touch Bar."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","widget"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.touchbar.widgets.duration.init() - nil","Type","Function","Description","Initialise the module.","Parameters","None","Returns","Notes"]},{"l":"widget","p":["Signature","plugins.finalcutpro.touchbar.widgets.duration.widget() - hs._ asm.undocumented.touchbar.item``","Type","Function","Description","The Widget","Parameters","None","Returns","A hs._asm.undocumented.touchbar.item","Notes"]}],[{"i":"pluginsfinalcutprotouchbarwidgetsheight","l":"plugins.finalcutpro.touchbar.widgets.height","p":["Final Cut Pro Browser Height Control Widget for Touch Bar."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","widget"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.touchbar.widgets.height.init() - nil","Type","Function","Description","Initialise the module.","Parameters","None","Returns","Notes"]},{"l":"widget","p":["Signature","plugins.finalcutpro.touchbar.widgets.height.widget() - hs._ asm.undocumented.touchbar.item``","Type","Function","Description","The Widget","Parameters","None","Returns","A hs._asm.undocumented.touchbar.item","Notes"]}],[{"i":"pluginsfinalcutprotouchbarwidgetszoom","l":"plugins.finalcutpro.touchbar.widgets.zoom","p":["Final Cut Pro Zoom Control Widget for Touch Bar."]},{"l":"API Overview","p":["Functions- API calls offered directly by the extension","init","widget"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"init","p":["Signature","plugins.finalcutpro.touchbar.widgets.zoom.init() - nil","Type","Function","Description","Initialise the module.","Parameters","None","Returns","Notes"]},{"l":"widget","p":["Signature","plugins.finalcutpro.touchbar.widgets.zoom.widget() - hs._ asm.undocumented.touchbar.item``","Type","Function","Description","The Widget","Parameters","None","Returns","A hs._asm.undocumented.touchbar.item","Notes"]}],[{"i":"pluginsfinalcutprovieweractions","l":"plugins.finalcutpro.viewer.actions","p":["Viewer Actions"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinalcutprovieweroverlays","l":"plugins.finalcutpro.viewer.overlays","p":["Final Cut Pro Viewer Overlays."]},{"l":"API Overview","p":["activeMemory","basicGridEnabled","capslock","crossHairAlpha","crossHairColor","crossHairEnabled","customCrossHairColor","customGridColor","customGuideColor","deleteMemory","disableAllDraggableGuides","disabled","draggableGuideEnabled","draggableGuidesEnabled","enableAllDraggableGuides","enableViewerRightClick","Functions- API calls offered directly by the extension","getCustomGuideColor","getDraggableGuideEnabled","getGuideAlpha","getGuideColor","getGuidePosition","getMemory","getStillsFolderPath","gridAlpha","gridColor","gridSpacing","guideAlpha","guideColor","guidePosition","hide","importMemory","letterboxEnabled","letterboxHeight","resetDraggableGuide","resetOverlays","saveMemory","setCustomCrossHairColor","setCustomGridColor","setCustomGuideColor","setGridAlpha","setGridColor","setGridSpacing","setGuideAlpha","setGuideColor","show","stillsLayout","toggleDraggableGuide","update","Variables- Configurable values","viewMemory"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"activeMemory","p":["Signature","plugins.finalcutpro.viewer.overlays.activeMemory cp.prop: number","Type","Variable","Description","Viewer Custom Grid Color as HTML value"]},{"l":"basicGridEnabled","p":["Signature","plugins.finalcutpro.viewer.overlays.basicGridEnabled cp.prop: boolean","Type","Variable","Description","Is Viewer Grid Enabled?"]},{"l":"capslock","p":["Signature","plugins.finalcutpro.viewer.overlays.capslock cp.prop: boolean","Type","Variable","Description","Toggle Viewer Overlays with Caps Lock."]},{"l":"crossHairAlpha","p":["Signature","plugins.finalcutpro.viewer.overlays.crossHairAlpha cp.prop: number","Type","Variable","Description","Viewer Grid Alpha"]},{"l":"crossHairColor","p":["Signature","plugins.finalcutpro.viewer.overlays.crossHairColor cp.prop: string","Type","Variable","Description","Viewer Grid Color as HTML value"]},{"l":"crossHairEnabled","p":["Signature","plugins.finalcutpro.viewer.overlays.crossHairEnabled cp.prop: boolean","Type","Variable","Description","Is Viewer Cross Hair Enabled?"]},{"l":"customCrossHairColor","p":["Signature","plugins.finalcutpro.viewer.overlays.customCrossHairColor cp.prop: table","Type","Variable","Description","Viewer Custom Cross Hair Color as HTML value"]},{"l":"customGridColor","p":["Signature","plugins.finalcutpro.viewer.overlays.customGridColor cp.prop: string","Type","Variable","Description","Viewer Custom Grid Color as HTML value"]},{"l":"customGuideColor","p":["Signature","plugins.finalcutpro.viewer.overlays.customGuideColor cp.prop: table","Type","Variable","Description","Viewer Custom Guide Color as HTML value"]},{"l":"disabled","p":["Signature","plugins.finalcutpro.viewer.overlays.disabled cp.prop: boolean","Type","Variable","Description","Are all the Viewer Overlay's disabled?"]},{"l":"draggableGuideEnabled","p":["Signature","plugins.finalcutpro.viewer.overlays.draggableGuideEnabled cp.prop: table","Type","Variable","Description","Is Viewer Grid Enabled?"]},{"l":"enableViewerRightClick","p":["Signature","plugins.finalcutpro.viewer.overlays.enableViewerRightClick cp.prop: boolean","Type","Variable","Description","Allow the user to right click on the top of the viewer to access the menu?"]},{"l":"gridAlpha","p":["Signature","plugins.finalcutpro.viewer.overlays.gridAlpha cp.prop: number","Type","Variable","Description","Viewer Grid Alpha"]},{"l":"gridColor","p":["Signature","plugins.finalcutpro.viewer.overlays.gridColor cp.prop: string","Type","Variable","Description","Viewer Grid Color as HTML value"]},{"l":"gridSpacing","p":["Signature","plugins.finalcutpro.viewer.overlays.gridSpacing cp.prop: number","Type","Variable","Description","Viewer Custom Grid Color as HTML value"]},{"l":"guideAlpha","p":["Signature","plugins.finalcutpro.viewer.overlays.guideAlpha cp.prop: table","Type","Variable","Description","Viewer Guide Alpha"]},{"l":"guideColor","p":["Signature","plugins.finalcutpro.viewer.overlays.guideColor cp.prop: table","Type","Variable","Description","Viewer Guide Color as HTML value"]},{"l":"guidePosition","p":["Signature","plugins.finalcutpro.viewer.overlays.guidePosition cp.prop: table","Type","Variable","Description","Guide Position."]},{"l":"letterboxEnabled","p":["Signature","plugins.finalcutpro.viewer.overlays.letterboxEnabled cp.prop: boolean","Type","Variable","Description","Is Viewer Letterbox Enabled?"]},{"l":"letterboxHeight","p":["Signature","plugins.finalcutpro.viewer.overlays.letterboxHeight cp.prop: number","Type","Variable","Description","Letterbox Height"]},{"l":"stillsLayout","p":["Signature","plugins.finalcutpro.viewer.overlays.stillsLayout cp.prop: string","Type","Variable","Description","Stills layout."]},{"l":"Functions"},{"l":"deleteMemory","p":["Signature","plugins.finalcutpro.viewer.overlays.deleteMemory() - none","Type","Function","Description","Deletes a memory.","Parameters","id - An identifier in the form of a number.","Returns","None","Notes"]},{"l":"disableAllDraggableGuides","p":["Signature","plugins.finalcutpro.viewer.overlays.disableAllDraggableGuides() - none","Type","Function","Description","Disable all draggable guides.","Parameters","None","Returns","Notes"]},{"l":"draggableGuidesEnabled","p":["Signature","plugins.finalcutpro.viewer.overlays.draggableGuidesEnabled() - boolean","Type","Function","Description","Are any draggable guides enabled?","Parameters","None","Returns","true if at least one draggable guide is enabled otherwise false","Notes"]},{"l":"enableAllDraggableGuides","p":["Signature","plugins.finalcutpro.viewer.overlays.enableAllDraggableGuides() - none","Type","Function","Description","Enable all draggable guides.","Parameters","None","Returns","Notes"]},{"l":"getCustomGuideColor","p":["Signature","plugins.finalcutpro.viewer.overlays.getCustomGuideColor(id) - none","Type","Function","Description","Get Custom Guide Color.","Parameters","id - The ID of the guide.","Returns","None","Notes"]},{"l":"getDraggableGuideEnabled","p":["Signature","plugins.finalcutpro.viewer.overlays.getDraggableGuideEnabled(id) - none","Type","Function","Description","Get Guide Enabled.","Parameters","id - The ID of the guide.","Returns","None","Notes"]},{"l":"getGuideAlpha","p":["Signature","plugins.finalcutpro.viewer.overlays.getGuideAlpha() - none","Type","Function","Description","Get Guide Alpha.","Parameters","id - The ID of the guide.","Returns","None","Notes"]},{"l":"getGuideColor","p":["Signature","plugins.finalcutpro.viewer.overlays.getGuideColor(id) - none","Type","Function","Description","Get Guide Color.","Parameters","id - The ID of the guide.","Returns","None","Notes"]},{"l":"getGuidePosition","p":["Signature","plugins.finalcutpro.viewer.overlays.getGuidePosition() - none","Type","Function","Description","Get Guide Position.","Parameters","id - The ID of the guide.","Returns","None","Notes"]},{"l":"getMemory","p":["Signature","plugins.finalcutpro.viewer.overlays.getMemory(id) - image | nil","Type","Function","Description","Gets an image from memory.","Parameters","id - The ID of the memory you want to retrieve.","Returns","The memory as a hs.image or nil if the memory could not be retrieved.","Notes"]},{"l":"getStillsFolderPath","p":["Signature","plugins.finalcutpro.viewer.overlays.getStillsFolderPath() - string | nil","Type","Function","Description","Gets the stills folder path.","Parameters","None","Returns","The stills folder path as a string or nil if an error occurs.","Notes"]},{"l":"hide","p":["Signature","plugins.finalcutpro.viewer.overlays.hide() - none","Type","Function","Description","Hides the Viewer Grid.","Parameters","None","Returns","Notes"]},{"l":"importMemory","p":["Signature","plugins.finalcutpro.viewer.overlays.importMemory() - none","Type","Function","Description","Import a file to memory.","Parameters","id - An identifier in the form of a number.","Returns","None","Notes"]},{"l":"resetDraggableGuide","p":["Signature","plugins.finalcutpro.viewer.overlays.resetDraggableGuide(id) - none","Type","Function","Description","Reset a specific Draggable Guide.","Parameters","id - The ID of the guide.","Returns","None","Notes"]},{"l":"resetOverlays","p":["Signature","plugins.finalcutpro.viewer.overlays.resetOverlays() - none","Type","Function","Description","Resets all overlays to their default values.","Parameters","None","Returns","Notes"]},{"l":"saveMemory","p":["Signature","plugins.finalcutpro.viewer.overlays.saveMemory() - none","Type","Function","Description","Saves a still frame to file.","Parameters","id - An identifier in the form of a number.","Returns","None","Notes"]},{"l":"setCustomCrossHairColor","p":["Signature","plugins.finalcutpro.viewer.overlays.setCustomCrossHairColor() - none","Type","Function","Description","Pops up a Color Dialog box allowing the user to select a custom colour for cross hairs.","Parameters","None","Returns","Notes"]},{"l":"setCustomGridColor","p":["Signature","plugins.finalcutpro.viewer.overlays.setCustomGridColor() - none","Type","Function","Description","Pops up a Color Dialog box allowing the user to select a custom colour for grid lines.","Parameters","None","Returns","Notes"]},{"l":"setCustomGuideColor","p":["Signature","plugins.finalcutpro.viewer.overlays.setCustomGuideColor() - none","Type","Function","Description","Pops up a Color Dialog box allowing the user to select a custom colour for guide lines.","Parameters","None","Returns","Notes"]},{"l":"setGridAlpha","p":["Signature","plugins.finalcutpro.viewer.overlays.setGridAlpha(value) - none","Type","Function","Description","Sets Grid Alpha.","Parameters","value - The value you want to set.","Returns","None","Notes"]},{"l":"setGridColor","p":["Signature","plugins.finalcutpro.viewer.overlays.setGridColor(value) - none","Type","Function","Description","Sets Grid Color.","Parameters","value - The value you want to set.","Returns","None","Notes"]},{"l":"setGridSpacing","p":["Signature","plugins.finalcutpro.viewer.overlays.setGridSpacing(value) - none","Type","Function","Description","Sets Grid Spacing.","Parameters","value - The value you want to set.","Returns","None","Notes"]},{"l":"setGuideAlpha","p":["Signature","plugins.finalcutpro.viewer.overlays.setGuideAlpha(id, value) - none","Type","Function","Description","Sets Guide Alpha.","Parameters","id - The ID of the guide. value - The value you want to set.","Returns","None","Notes"]},{"l":"setGuideColor","p":["Signature","plugins.finalcutpro.viewer.overlays.setGuideColor(id, value) - none","Type","Function","Description","Sets Guide Color.","Parameters","id - The ID of the guide. value - The value you want to set.","Returns","None","Notes"]},{"l":"show","p":["Signature","plugins.finalcutpro.viewer.overlays.show() - none","Type","Function","Description","Show's the Viewer Grid.","Parameters","None","Returns","Notes"]},{"l":"toggleDraggableGuide","p":["Signature","plugins.finalcutpro.viewer.overlays.toggleDraggableGuide(id) - none","Type","Function","Description","Toggle Guide Enabled.","Parameters","id - The ID of the guide.","Returns","None","Notes"]},{"l":"update","p":["Signature","plugins.finalcutpro.viewer.overlays.update() - none","Type","Function","Description","Updates the Viewer Grid.","Parameters","None","Returns","Notes"]},{"l":"viewMemory","p":["Signature","plugins.finalcutpro.viewer.overlays.viewMemory(id) - none","Type","Function","Description","View a memory.","Parameters","id - The ID of the memory you want to retrieve.","Returns","None","Notes"]}],[{"i":"pluginsfinalcutprowatchfoldersfcpxml","l":"plugins.finalcutpro.watchfolders.fcpxml","p":["Final Cut Pro FCPXML Watch Folder Plugin."]},{"l":"API Overview","p":["addWatchFolder","automaticallyImport","Constants- Useful values which cannot be changed","controllerCallback","createNotification","deleteAfterImport","disableImport","filesInTransit","Functions- API calls offered directly by the extension","generateTable","importFile","init","insertFilesIntoFinalCutPro","newWatcher","notifications","refreshTable","removeWatcher","savedNotifications","SECONDS_UNTIL_DELETE","setupWatchers","styleSheet","Variables- Configurable values","watchFolders","watchFolderTableID","watchFolderTriggered"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"SECONDS_UNTIL_DELETE","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.SECONDS_UNTIL_DELETE - number","Type","Constant","Description","Seconds until a file is deleted."]},{"l":"Variables"},{"l":"automaticallyImport","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.automaticallyImport cp.prop: boolean","Type","Variable","Description","Boolean that sets whether or not new generated voice file are automatically added to the timeline or not."]},{"l":"deleteAfterImport","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.deleteAfterImport cp.prop: boolean","Type","Variable","Description","Boolean that sets whether or not you want to delete file after they've been imported."]},{"l":"disableImport","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.disableImport - boolean","Type","Variable","Description","When true Notifications will no longer be triggered."]},{"l":"filesInTransit","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.filesInTransit - table","Type","Variable","Description","Files currently being copied"]},{"l":"notifications","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.notifications - table","Type","Variable","Description","Table of Notifications"]},{"l":"savedNotifications","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.savedNotifications cp.prop: table","Type","Variable","Description","Table of Notifications that are saved between restarts"]},{"l":"watchFolders","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.watchFolders cp.prop: table","Type","Variable","Description","Table of the users watch folders."]},{"l":"watchFolderTableID","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.watchFolderTableID - string","Type","Variable","Description","Watch Folder Table ID"]},{"l":"Functions"},{"l":"addWatchFolder","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.addWatchFolder() - none","Type","Function","Description","Opens the \"Add Watch Folder\" Dialog.","Parameters","None","Returns","Notes"]},{"l":"controllerCallback","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.controllerCallback(id, params) - none","Type","Function","Description","Callback Controller","Parameters","id - ID as string params - table of Parameters","Returns","None","Notes"]},{"l":"createNotification","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.createNotification(file) - none","Type","Function","Description","Creates a new notification","Parameters","file - File name","Returns","None","Notes"]},{"l":"generateTable","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.generateTable() - string","Type","Function","Description","Generate HTML Table","Parameters","None","Returns","Returns a HTML table as a string","Notes"]},{"l":"importFile","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.importFile(file, obj) - none","Type","Function","Description","Imports a file into Final Cut Pro","Parameters","file - File name tag - The notification tag","Returns","None","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.init(deps, env) - table","Type","Function","Description","Initialises the module.","Parameters","deps - The dependencies environment env - The plugin environment","Returns","Table of the module.","Notes"]},{"l":"insertFilesIntoFinalCutPro","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.insertFilesIntoFinalCutPro(files) - none","Type","Function","Description","Imports a file into Final Cut Pro","Parameters","files - File names in table","Returns","None","Notes"]},{"l":"newWatcher","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.newWatcher(path) - none","Type","Function","Description","New Folder Watcher","Parameters","path - Path to Watch Folder","Returns","None","Notes"]},{"l":"refreshTable","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.refreshTable() - string","Type","Function","Description","Refreshes the Final Cut Pro Watch Folder Panel via JavaScript Injection","Parameters","None","Returns","Notes"]},{"l":"removeWatcher","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.removeWatcher(path) - none","Type","Function","Description","Remove Folder Watcher","Parameters","path - Path to Watch Folder","Returns","None","Notes"]},{"l":"setupWatchers","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.setupWatchers(path) - none","Type","Function","Description","Setup Folder Watchers","Parameters","None","Returns","Notes"]},{"l":"styleSheet","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.styleSheet() - cp.web.html","Type","Function","Description","Generates Style Sheet","Parameters","None","Returns","Returns Style Sheet as a string","Notes"]},{"l":"watchFolderTriggered","p":["Signature","plugins.finalcutpro.watchfolders.fcpxml.watchFolderTriggered(files) - none","Type","Function","Description","Watch Folder Triggered","Parameters","files - A table of files","Returns","None","Notes"]}],[{"i":"pluginsfinalcutprowatchfoldersmedia","l":"plugins.finalcutpro.watchfolders.media","p":["Final Cut Pro Media Watch Folder Plugin."]},{"l":"Submodules","p":["plugins.finalcutpro.watchfolders.media.MediaFolder","plugins.finalcutpro.watchfolders.media.panel"]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","SECONDS_UNTIL_DELETE","Variables- Configurable values","automaticallyImport","deleteAfterImport","insertIntoTimeline","Functions- API calls offered directly by the extension","addMediaFolder","hasMediaFolder","init","loadMediaFolders","mediaFolders","removeMediaFolder","saveMediaFolders"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"SECONDS_UNTIL_DELETE","p":["Signature","plugins.finalcutpro.watchfolders.media.SECONDS_UNTIL_DELETE - number","Type","Constant","Description","Seconds until a file is deleted."]},{"l":"Variables"},{"l":"automaticallyImport","p":["Signature","plugins.finalcutpro.watchfolders.media.automaticallyImport cp.prop: boolean","Type","Variable","Description","Boolean that sets whether or not new generated voice file are automatically added to the timeline or not."]},{"l":"deleteAfterImport","p":["Signature","plugins.finalcutpro.watchfolders.media.deleteAfterImport cp.prop: boolean","Type","Variable","Description","Boolean that sets whether or not you want to delete file after they've been imported."]},{"l":"insertIntoTimeline","p":["Signature","plugins.finalcutpro.watchfolders.media.insertIntoTimeline cp.prop: boolean","Type","Variable","Description","Boolean that sets whether or not the files are automatically added to the timeline or not."]},{"l":"Functions"},{"l":"addMediaFolder","p":["Signature","plugins.finalcutpro.watchfolders.media.addMediaFolder(path, videoTag, audioTag, imageTag) - none","Type","Function","Description","Removes a media folder.","Parameters","path - The path of the folder to remove. videoTag - An optional video tag as a string. audioTag - An optional audio tag as a string. imageTag - An optional image tag as a string.","Returns","None","Notes"]},{"l":"hasMediaFolder","p":["Signature","plugins.finalcutpro.watchfolders.media.hasMediaFolder(path) - boolean","Type","Function","Description","Checks to see if a path has a media folder already saved.","Parameters","path - The path to check.","Returns","A boolean","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.watchfolders.media.init(deps, env) - table","Type","Function","Description","Initialises the module.","Parameters","deps - The dependencies environment env - The plugin environment","Returns","Table of the module.","Notes"]},{"l":"loadMediaFolders","p":["Signature","plugins.finalcutpro.watchfolders.media.loadMediaFolders() - none","Type","Function","Description","Loads the MediaFolder list from storage. Any existing MediaFolder instances will be destroyed before loading.","Parameters","None","Returns","Notes"]},{"l":"mediaFolders","p":["Signature","plugins.finalcutpro.watchfolders.media.mediaFolders() - table","Type","Function","Description","Gets a table of all the media folders.","Parameters","None","Returns","A table of all the media folders.","Notes"]},{"l":"removeMediaFolder","p":["Signature","plugins.finalcutpro.watchfolders.media.removeMediaFolder(path) - boolean","Type","Function","Description","Removes a media folder.","Parameters","path - The path of the folder to remove.","Returns","None","Notes"]},{"l":"saveMediaFolders","p":["Signature","plugins.finalcutpro.watchfolders.media.saveMediaFolders()","Type","Function","Description","Saves the current state of the media folders, including notifications, etc.","Parameters","None","Returns","Nothing","Notes"]}],[{"i":"pluginsfinalcutprowatchfoldersmediamediafolder","l":"plugins.finalcutpro.watchfolders.media.MediaFolder","p":["Final Cut Pro Media Watch Folder Plugin."]},{"l":"API Overview","p":["addIncoming","addReady","checkNotifications","Constructors- API calls which return an object, typically one that offers API methods","destroy","doDeleteImportedFiles","doImportNext","doRestoreOriginalPasteboard","doRevealInFinder","doTagFiles","freeze","Functions- API calls offered directly by the extension","handleImport","importAll","importFiles","importFirst","importTag","init","Methods- API calls which can only be made on an object returned by a constructor","new","processFiles","removeFile","save","skipAll","skipOne","thaw","updateIncomingNotification","updateReadyNotification"]},{"l":"API Documentation"},{"l":"Functions"},{"l":"freeze","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder.freeze(mediaFolder) - table","Type","Function","Description","Returns a table with the details of the MediaFolder, ready to be stored. It can be brought back via the MediaFolder.thaw(...) function.","Parameters","mediaFolder - The MediaFolder to freeze.","Returns","A table of details.","Notes"]},{"l":"Constructors"},{"l":"new","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder.new(mod, path, videoTag, audioTag, imageTag) - MediaFolder","Type","Constructor","Description","Creates a new Media Folder.","Parameters","mod - The module. path - Path to the Media Folder. videoTag - Video Tag as String audioTag - Audio Tag as String imageTag - Image Tag as String","Returns","A new MediaFolder object.","Notes"]},{"l":"thaw","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder.thaw(details) - MediaFolder","Type","Constructor","Description","Creates a new MediaFolder based on the details provided. The details have typically come from a call to MediaFolder.freeze(...)","Parameters","details - The table with details of the media folder when it was frozen.","Returns","A new MediaFolder instance with the specified details.","Notes"]},{"l":"Methods"},{"l":"addIncoming","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:addIncoming(file) - nil","Type","Method","Description","Adds the file to the 'incoming' list and updates the notification.","Parameters","file - The file to add.","Returns","nil","Notes"]},{"l":"addReady","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:addReady(file) - nil","Type","Method","Description","Adds the file to the 'ready' list and updates the notifications.","Parameters","file - The file to add.","Returns","nil","Notes"]},{"l":"checkNotifications","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:checkNotifications() - none","Type","Method","Description","Checks Notifications.","Parameters","None","Returns","Notes"]},{"l":"destroy","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:destroy()","Type","Method","Description","Destroys the MediaFolder. It should not be used after this is called.","Parameters","None","Returns","Notes"]},{"l":"doDeleteImportedFiles","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:doDeleteImportedFiles(context) - nil","Type","Method","Description","Checks if we are deleting after import, and if so schedules them to be deleted.","Parameters","files - a table of file paths.","Returns","None","Notes"]},{"l":"doImportNext","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:doImportNext() - nil","Type","Method","Description","Imports the next file in the Media Folder.","Parameters","None","Returns","Notes"]},{"l":"doRestoreOriginalPasteboard","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:doRestoreOriginalPasteboard(context) - nil","Type","Method","Description","Restore original Pasteboard contents after 2 seconds.","Parameters","context - The context.","Returns","None","Notes"]},{"l":"doRevealInFinder","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:doRevealInFinder() - cp.rx.go.Statement","Type","Method","Description","Returns a Statement that will reveal the MediaFolder path in the Finder.","Parameters","None","Returns","Statement","Notes"]},{"l":"doTagFiles","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:doTagFiles(files) - nil","Type","Method","Description","Tags a table of files.","Parameters","None","Returns","Notes"]},{"l":"handleImport","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:handleImport(notification) - nil","Type","Method","Description","Handles the importing of a file.","Parameters","notification - The notification object.","Returns","None","Notes"]},{"l":"importAll","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:importAll() - nil","Type","Method","Description","Begins importing all ready files, removing them from the ready queue.","Parameters","None","Returns","Notes"]},{"l":"importFiles","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:importFiles(files) - nil","Type","Method","Description","Requests for the files to be imported.","Parameters","files - a table/list of files to be imported.","Returns","None","Notes"]},{"l":"importFirst","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:importFirst() - nil","Type","Method","Description","Begins importing the first ready file, removing it from the ready queue.","Parameters","None","Returns","Notes"]},{"l":"importTag","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:importTag() - string","Type","Method","Description","Returns the import tag.","Parameters","None","Returns","The import tag as a string.","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:init() - nil","Type","Method","Description","Initialises the folder, getting any watchers, notifications, etc. running.","Parameters","None","Returns","Notes"]},{"l":"processFiles","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:processFiles(files, fileFlags) - none","Type","Method","Description","Process files.","Parameters","files - A table of files to process. fileFlags - A table of file flags.","Returns","None","Notes"]},{"l":"removeFile","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:removeFile(file) - MediaFolder","Type","Method","Description","Removes the file from any queues it might be in, updating relevant notifications.","Parameters","file - the full path to the file.","Returns","The MediaFolder instance","Notes"]},{"l":"save","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:save()","Type","Method","Description","Ensures the MediaFolder is saved.","Parameters","None","Returns","Notes"]},{"l":"skipAll","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:skipAll() - nil","Type","Method","Description","Skip all files in the Media Folder.","Parameters","None","Returns","Notes"]},{"l":"skipOne","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:skipOne() - nil","Type","Method","Description","Skip one file in the Media Folder.","Parameters","None","Returns","Notes"]},{"l":"updateIncomingNotification","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:updateIncomingNotification() - nil","Type","Method","Description","Updates the 'incoming' notification based on the current set of files in the incoming queue.","Parameters","None","Returns","Notes"]},{"l":"updateReadyNotification","p":["Signature","plugins.finalcutpro.watchfolders.media.MediaFolder:updateReadyNotification() - nil","Type","Method","Description","Updates the 'ready' notification based on the current set of files in the ready queue.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsfinalcutprowatchfoldersmediapanel","l":"plugins.finalcutpro.watchfolders.media.panel","p":["Watch Folder Media Panel."]},{"l":"API Overview","p":["Variables- Configurable values","watchFolderTableID","Functions- API calls offered directly by the extension","addWatchFolder","controllerCallback","generateTable","init","refreshTable","styleSheet"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"watchFolderTableID","p":["Signature","plugins.finalcutpro.watchfolders.media.panel.watchFolderTableID - string","Type","Variable","Description","Watch Folder Table ID"]},{"l":"Functions"},{"l":"addWatchFolder","p":["Signature","plugins.finalcutpro.watchfolders.media.panel.addWatchFolder() - none","Type","Function","Description","Opens the \"Add Watch Folder\" Dialog.","Parameters","None","Returns","Notes"]},{"l":"controllerCallback","p":["Signature","plugins.finalcutpro.watchfolders.media.panel.controllerCallback(id, params) - none","Type","Function","Description","Callback Controller","Parameters","id - ID as string params - table of Parameters","Returns","None","Notes"]},{"l":"generateTable","p":["Signature","plugins.finalcutpro.watchfolders.media.panel.generateTable() - string","Type","Function","Description","Generate HTML Table","Parameters","None","Returns","Returns a HTML table as a string","Notes"]},{"l":"init","p":["Signature","plugins.finalcutpro.watchfolders.media.panel.init(mediaFolderManager, panelManager) - self","Type","Function","Description","Initialises the module.","Parameters","mediaFolderManager - Media Folder Manager panelManager - Panel Manager","Returns","Self","Notes"]},{"l":"refreshTable","p":["Signature","plugins.finalcutpro.watchfolders.media.panel.refreshTable() - string","Type","Function","Description","Refreshes the Final Cut Pro Watch Folder Panel via JavaScript Injection","Parameters","None","Returns","Notes"]},{"l":"styleSheet","p":["Signature","plugins.finalcutpro.watchfolders.media.panel.styleSheet() - string","Type","Function","Description","Generates Style Sheet","Parameters","None","Returns","Returns Style Sheet as a string","Notes"]}],[{"i":"pluginsfinalcutproworkflowextension","l":"plugins.finalcutpro.workflowextension","p":["Workflow Extension Helper","Commands that can be SENT to the Workflow Extension:","PING - Send a ping INCR f - Increment by Frame (where f is number of frames) DECR f - Decrement by Frame (where f is number of frames) GOTO s - Goto Timeline Position (where s is number of seconds)","Commands that can be RECEIVED from the Workflow Extension:","DONE - Connection successful DEAD - Server is shutting down PONG - Recieve a pong PLHD s - The playhead time has changed (where s is playhead position in seconds)","SEQC sequenceName || startTime || duration || frameDuration || container || timecodeFormat || objectType - The active sequence has changed (sequenceName is a string) (startTime in seconds) (duration in seconds) (frameDuration in seconds) (container as a string) (timecodeFormat as a string: DropFrame, NonDropFrame, Unspecified or Unknown) (objectType as a string: Event, Library, Project, Sequence or Unknown)","RNGC startTime || duration - The active sequence time range has changed (startTime in seconds) (duration in seconds)"]},{"l":"API Overview","p":["callback","connect","connected","connectionCallback","decrementPlayhead","disconnect","Fields- Variables which can only be accessed from an object returned by a constructor","forcefullyInstall","Functions- API calls offered directly by the extension","hasWorkflowExtensionBeenAddedVersion","hasWorkflowExtensionBeenMovedVersion","incrementPlayhead","lastPlayheadPosition","movePlayheadToSeconds","ping","repositionWorkflowExtension","sendCommand","setupActions","skimmingRestoreTimer","Variables- Configurable values","wasSkimmingEnabled"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"connected","p":["Signature","plugins.finalcutpro.workflowextension.connected - boolean","Type","Variable","Description","Is CommandPost connecting to the Workflow Extension?"]},{"l":"lastPlayheadPosition","p":["Signature","plugins.finalcutpro.workflowextension.lastPlayheadPosition - string","Type","Variable","Description","The last playhead position."]},{"l":"skimmingRestoreTimer","p":["Signature","plugins.finalcutpro.workflowextension.skimmingRestoreTimer - hs.timer.delayed","Type","Variable","Description","Delayed Timer to Restore the Skimming Feature (if required)"]},{"l":"wasSkimmingEnabled","p":["Signature","plugins.finalcutpro.workflowextension.wasSkimmingEnabled - boolean","Type","Variable","Description","Was the Skimming Feature enabled?"]},{"l":"Functions"},{"l":"callback","p":["Signature","plugins.finalcutpro.workflowextension.callback() - none","Type","Function","Description","Triggers when the Socket receives data.","Parameters","data - The incoming data.","Returns","None","Notes"]},{"l":"connect","p":["Signature","plugins.finalcutpro.workflowextension.connect() - none","Type","Function","Description","Connect to the Workflow Extension Socket Server.","Parameters","None","Returns","Notes"]},{"l":"connectionCallback","p":["Signature","plugins.finalcutpro.workflowextension.connectionCallback() - none","Type","Function","Description","Triggers when the Socket makes a connection.","Parameters","None","Returns","Notes"]},{"l":"decrementPlayhead","p":["Signature","plugins.finalcutpro.workflowextension.decrementPlayhead(frames) - none","Type","Function","Description","Decrements the Final Cut Pro playhead via the Workflow Extension","Parameters","frames - The amount of frames to increment by","Returns","None","Notes"]},{"l":"disconnect","p":["Signature","plugins.finalcutpro.workflowextension.disconnect() - none","Type","Function","Description","Disconnects from the Workflow Extension Socket Server.","Parameters","None","Returns","Notes"]},{"l":"forcefullyInstall","p":["Signature","plugins.finalcutpro.workflowextension.forcefullyInstall() - none","Type","Function","Description","Forcefully installs the Workflow Extension.","Parameters","None","Returns","Notes"]},{"l":"incrementPlayhead","p":["Signature","plugins.finalcutpro.workflowextension.incrementPlayhead(frames) - none","Type","Function","Description","Increments the Final Cut Pro playhead via the Workflow Extension","Parameters","frames - The amount of frames to increment by","Returns","None","Notes"]},{"l":"movePlayheadToSeconds","p":["Signature","plugins.finalcutpro.workflowextension.movePlayheadToSeconds(seconds) - none","Type","Function","Description","Moves the Final Cut Pro playhead via the Workflow Extension","Parameters","seconds - The value you want the timeline playhead to move to in seconds","Returns","None","Notes"]},{"l":"ping","p":["Signature","plugins.finalcutpro.workflowextension.ping() - none","Type","Function","Description","Sends a ping to the Workflow Extension","Parameters","None","Returns","Notes"]},{"l":"repositionWorkflowExtension","p":["Signature","plugins.finalcutpro.workflowextension.repositionWorkflowExtension() - none","Type","Function","Description","Repositions the Workflow Extension.","Parameters","None","Returns","Notes"]},{"l":"sendCommand","p":["Signature","plugins.finalcutpro.workflowextension.sendCommand(command) - none","Type","Function","Description","Sends a command to the Workflow","Parameters","command - The command as a string","Returns","None","Notes"]},{"l":"setupActions","p":["Signature","plugins.finalcutpro.workflowextension.setupActions() - none","Type","Function","Description","Setup the Workflow Extension Actions","Parameters","None","Returns","Notes"]},{"l":"Fields"},{"l":"hasWorkflowExtensionBeenAddedVersion","p":["Signature","plugins.finalcutpro.workflowextension.hasWorkflowExtensionBeenAddedVersion - cp.prop","Type","Field","Description","Returns the CommandPost Version String for the last time the Workflow Extension was added."]},{"l":"hasWorkflowExtensionBeenMovedVersion","p":["Signature","plugins.finalcutpro.workflowextension.hasWorkflowExtensionBeenMovedVersion - cp.prop","Type","Field","Description","Returns the CommandPost Version String for the last time the Workflow Extension was moved."]}],[{"i":"pluginsfinderapplicationmanager","l":"plugins.finder.application.manager","p":["Registers Finder with the Core Application Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinderaudio","l":"plugins.finder.audio","p":["Actions for Audio Controls"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinderdateandtime","l":"plugins.finder.dateandtime","p":["Types the date and time in the \"YYYYMMDD HHMM\" format."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinderpasteboard","l":"plugins.finder.pasteboard","p":["Handy text tools."]},{"l":"Submodules","p":["plugins.finder.pasteboard.history"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinderpasteboardhistory","l":"plugins.finder.pasteboard.history","p":["Adds text pasteboard history actions to the Search Console."]},{"l":"API Overview","p":["Fields- Variables which can only be accessed from an object returned by a constructor","enabled","history","historySize"]},{"l":"API Documentation"},{"l":"Fields"},{"l":"enabled","p":["Signature","plugins.finder.pasteboard.history.enabled cp.prop: boolean","Type","Field","Description","Is Text Pasteboard History Enabled?"]},{"l":"history","p":["Signature","plugins.finder.pasteboard.history.history cp.prop: table","Type","Field","Description","Contains the pasteboard history."]},{"l":"historySize","p":["Signature","plugins.finder.pasteboard.history.historySize cp.prop: number","Type","Field","Description","Maximum Pasteboard History Size"]}],[{"i":"pluginsfinderpreferencespanel","l":"plugins.finder.preferences.panel","p":["General Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinderpreferencespowerchime","l":"plugins.finder.preferences.powerchime","p":["General Preferences Panel"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsfinderwindow","l":"plugins.finder.window","p":["Handy tools for Windows Management in macOS.","Inspired by WinWin for Hammerspoon."]},{"l":"API Overview","p":["Variables- Configurable values","gridparts","Functions- API calls offered directly by the extension","centerCursor","grid","hints","moveAndResize","moveToScreen","stepMove","stepResize","undo"]},{"l":"API Documentation"},{"l":"Variables"},{"l":"gridparts","p":["Signature","plugins.finder.window.gridparts","Type","Variable","Description","An integer specifying how many gridparts the screen should be divided into. Defaults to 30."]},{"l":"Functions"},{"l":"centerCursor","p":["Signature","plugins.finder.window.centerCursor() - nil","Type","Function","Description","Center the cursor on the focused window.","Parameters","None","Returns","Notes"]},{"l":"grid","p":["Signature","plugins.finder.window.grid() - nil","Type","Function","Description","Shows a modal keyboard driven interface for interactive window resizing.","Parameters","None","Returns","Notes"]},{"l":"hints","p":["Signature","plugins.finder.window.hints() - nil","Type","Function","Description","Displays a keyboard hint for switching focus to each window.","Parameters","None","Returns","Notes"]},{"l":"moveAndResize","p":["Signature","plugins.finder.window.moveAndResize(option)","Type","Function","Description","Move and resize the focused window.","Parameters","option - A string specifying the option, valid strings are: halfleft, halfright, halfup, halfdown, cornerNW, cornerSW, cornerNE, cornerSE, center, fullscreen, expand, shrink.","Returns","None","Notes"]},{"l":"moveToScreen","p":["Signature","plugins.finder.window.moveToScreen(direction)","Type","Function","Description","Move the focused window between all of the screens in the direction.","Parameters","direction - A string specifying the direction, valid strings are: left, right, up, down, next.","Returns","None","Notes"]},{"l":"stepMove","p":["Signature","plugins.finder.window.stepMove(direction)","Type","Function","Description","Move the focused window in the direction by one step. The step scale equals to the width/height of one gridpart.","Parameters","direction - A string specifying the direction, valid strings are: left, right, up, down.","Returns","None","Notes"]},{"l":"stepResize","p":["Signature","plugins.finder.window.stepResize(direction)","Type","Function","Description","Resize the focused window in the direction by on step.","Parameters","direction - A string specifying the direction, valid strings are: left, right, up, down.","Returns","None","Notes"]},{"l":"undo","p":["Signature","plugins.finder.window.undo()","Type","Function","Description","Undo the last window manipulation. Only those \"moveAndResize\" manipulations can be undone.","Parameters","None","Returns","Notes"]}],[{"i":"pluginsmicrosoftteamsapplicationmanager","l":"plugins.microsoftteams.application.manager","p":["Registers Microsoft Teams with the Core Application Manager if installed."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsmotionapplicationmanager","l":"plugins.motion.application.manager","p":["Registers Motion with the Core Application Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsmotionfeedbackbugreport","l":"plugins.motion.feedback.bugreport","p":["Sends Apple a Bug Report or Feature Request for Motion."]},{"l":"API Overview","p":["Constants- Useful values which cannot be changed","DEFAULT_HEIGHT","DEFAULT_TITLE","DEFAULT_WIDTH","Functions- API calls offered directly by the extension","open","Fields- Variables which can only be accessed from an object returned by a constructor","position"]},{"l":"API Documentation"},{"l":"Constants"},{"l":"DEFAULT_HEIGHT","p":["Signature","plugins.motion.feedback.bugreport.DEFAULT_HEIGHT - number","Type","Constant","Description","Default Window Height"]},{"l":"DEFAULT_TITLE","p":["Signature","plugins.motion.feedback.bugreport.DEFAULT_TITLE - string","Type","Constant","Description","Default Window Title"]},{"l":"DEFAULT_WIDTH","p":["Signature","plugins.motion.feedback.bugreport.DEFAULT_WIDTH - number","Type","Constant","Description","Default Window Width"]},{"l":"Functions"},{"l":"open","p":["Signature","plugins.motion.feedback.bugreport.open(bugReport) - none","Type","Function","Description","Opens Final Cut Pro Feedback Screen","Parameters","bugReport - Is it a bug report or an enhancement request?","Returns","None","Notes"]},{"l":"Fields"},{"l":"position","p":["Signature","plugins.motion.feedback.bugreport.position cp.prop: table","Type","Field","Description","Webview Position"]}],[{"i":"pluginsresolveapplicationmanager","l":"plugins.resolve.application.manager","p":["Registers Motion with the Core Application Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsresolvetangentemulation","l":"plugins.resolve.tangent.emulation","p":["Emulates a Tangent Element Panel."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsresolvetangentmanager","l":"plugins.resolve.tangent.manager","p":["Manager for DaVinci Resolve's Tangent Support"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsskypeapplicationmanager","l":"plugins.skype.application.manager","p":["Registers Skype with the Core Application Manager if installed."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsskypeshortcuts","l":"plugins.skype.shortcuts","p":["Trigger Skype Shortcuts"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsspotifyapplicationmanager","l":"plugins.spotify.application.manager","p":["Registers Spotify with the Core Application Manager if installed."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginsspotifyloupedeckplugin","l":"plugins.spotify.loupedeckplugin","p":["Spotify Loupedeck Plugin Actions"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginssystempreferencesapplicationmanager","l":"plugins.systempreferences.application.manager","p":["Registers System Preferences with the Core Application Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginstexteditapplicationmanager","l":"plugins.textedit.application.manager","p":["Registers TextEdit with the Core Application Manager."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginszoomapplicationmanager","l":"plugins.zoom.application.manager","p":["Registers Zoom with the Core Application Manager if installed."]},{"l":"API Overview"},{"l":"API Documentation"}],[{"i":"pluginszoomshortcuts","l":"plugins.zoom.shortcuts","p":["Trigger Zoom Shortcuts"]},{"l":"API Overview"},{"l":"API Documentation"}],[{"l":"Privacy Policy","p":["By using our site and products, you consent to this privacy policy."]},{"l":"Important Notes","p":["Starting in CommandPost 1.0.7-beta.11 (11 Aug 2020) we switch from Crashlytics to Sentry.","You can view our previous privacy policy here."]},{"l":"Facts","p":["CommandPost uses Sentry to collect information about crashes in the application and extensions (hereafter known as Crash Data).","You can read the Sentry Privacy Policy on their website.","This feature is enabled by default, however users can opt-out using the CommandPost preferences window.","Crash Data is uploaded securely to the Sentry servers.","No personally identifying data is collected or transmitted by CommandPost, with the possible exception of path names. If you run CommandPost from a path that contains your name (e.g. /Users/MyRealNameIsBobAnderson/Applications/CommandPost.app then your name would be included in Crash Data.","No Sentry features have been enabled that collect or transmit any personal information about the user.","Some information about the hardware and operating system is collected and transmitted.","The location of the CommandPost app bundle in your filesystem, is collected (e.g. /Applications/CommandPost.app).","The location of the CommandPost extensions you use, is collected (e.g. /Applications/CommandPost.app/Contents/Resources/extensions/ipc/internal-ipc.so).","User-created CommandPost scripts/plugins are not collected or transmitted, nor is any personal data that may be stored by CommandPost (e.g. the contents of your clipboard, or the contents of Lua variables).","When you Provide Feedback via the CommandPost menu bar, you can OPTIONALLY supply your full name, email and a screenshot of your current screen - however you have the choice of submitting anonymously. Submitting feedback will email your message to the CommandPost Developers.","Our website is hosted by GitHub. You can read GitHub's Privacy Policy here.","Our User Guide & Developers Guide is hosted by GitBook. You can read GitBook's Privacy Policy here."]},{"i":"why-do-we-do-this","l":"Why do we do this?","p":["It is very important to us that CommandPost contain as few bugs as possible, particularly ones which case it to crash.","We need your help to make this happen, so we collect low level information about which part of CommandPost has caused a crash, so we can fix it."]},{"l":"Promises","p":["We will never attempt to identify CommandPost users using the Crash Data.","We will never sell any CommandPost Crash Data.","We will never distribute any CommandPost Crash Data for any other purpose than the fixing of bugs.","Some Crash Data may be distributed in the form of GitHub Issues (i.e. bug reports) if it is important/relevant for the discussion of a bug."]},{"l":"If you do not want to upload Crash Data","p":["Click on the CommandPost menubar icon and choose Preferences, untick Send crash data, quit CommandPost and re-open it. The Sentry or Crashlytics framework will no longer be initialised."]},{"l":"Third Party Links","p":["Occasionally, at our discretion, we may include or offer third party products or services on our website. These third party sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these sites."]},{"i":"do-we-disclose-any-information-to-outside-parties","l":"Do we disclose any information to outside parties?","p":["We do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our website, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety. However, non-personally identifiable visitor information may be provided to other parties for marketing, advertising, or other uses."]},{"i":"do-we-use-cookies","l":"Do we use cookies?","p":["No, we don't use cookies or any third-party analytics on this website.","Our website is hosted by GitHub. You can read GitHub's Privacy Policy here."]},{"l":"Contact Us","p":["If you have concerns about the way CommandPost is handling your User Personal Information, please let us know immediately. We want to help.","If there are any questions regarding this privacy policy you may contact us via email ( support@latenitefilms.com) or file an issue on GitHub. We will respond promptly."]}],[{"l":"Credits","p":["CommandPost was created by Chris Hocking as a proof-of-concept to make finding the Final Cut Pro browser playhead easier for Scott Simmons.","You can read the origin story here.","It’s now developed, maintained and supported by Chris Hocking& David Peterson through GitHub.","CommandPost’s icon was designed by Matthew Skiles."]}],[{"l":"Contribute","p":["The CommandPost website is entirely open source and hosted on GitHub.","GitHub is a safe and secure developers platform used by over 73 million users worldwide.","CommandPost uses VentraIP for domain hosting.","You can make changes to the site by submitting pull requests on GitHub.","We welcome and encourage users submitting changes to the website's content.","You can see all the current contributors here. Everything is tracked and archived on GitHub.","The entire site is written in Markdown, so it's very easy to modify and update without necessarily knowing any HTML or code.","The website is build on Retype, which has a lot of power and flexibility, so you can easily add all kinds of components just using Markdown.","However, if you're not confident using GitHub, you can also email us content here: support@latenitefilms.com"]},{"l":"Our To-Do List","p":["If you're interested in collaborating, and helping the CommandPost website grow, here's some ideas of some of the things you can do:","Add any missing documentation","Replace still images with GIFs"]},{"l":"Our Mission","p":["We want this site to be:","Open: This site will remain open-source on GitHub for anyone to suggest pull requests","Up-to-date & Relevant: We want this site to always be up-to-date and relevant","No bullshit: We want this site to be honest, truthful, useful and professional","Community Driven: This isn't our site, it's \"owned\" by the professional CommandPost Community","Modern: This site should work great on the latest browsers, including mobile","Fast & Clean: This site should load quickly, and be easy to navigate","No analytics or user tracking: No cookies here!"]},{"i":"whats-a-pull-request","l":"What's a Pull Request?","p":["Imagine you're working with a group of friends on a big school project, and you're all adding different parts to it. Now, you're all using the same master copy of the project, but you're all working separately. When you're ready to add your part to the master copy, you don't just want to plop it in there. You want your friends to check it over, make sure it fits with everything else, and then add it in when they agree it's ready. This way, you ensure that everyone's work meshes well together and the project doesn't become a mess.","A GitHub pull request is basically the same idea. When you're working on a shared codebase, or \"project,\" you often work on your own copy, or \"branch\". When you think your changes are ready to be added to the shared codebase, you make a \"pull request\". This is a proposal that says \"I think these changes I made should be added to our shared project\".","Your teammates then can look over your changes, suggest edits, and finally, if they agree that your changes are good, they \"merge\" them into the shared project. This way, everyone keeps the code clean and organized, and you have a record of who added what and when.","So, in simple terms, a pull request is a way of proposing changes to a shared project and allowing others to review and approve those changes before they're added."]},{"l":"Navigating GitHub","p":["To create the fastest website possible, CommandPost is what's called a \"static site\". It just a collection of HTML files in a folder - nothing fancy.","However, to make sure the website is super easy to update and improve, we use GitHub Actions to \"do stuff\" to our markdown files whenever we submit a pull request."]},{"l":"How to Edit Pages","p":["If you're not already registered with GitHub, create a free account.","There's an Edit this page on GitHub link at the bottom of every page.","Edit this file","You can edit the contents of this page by clicking the link at the bottom of this page.","To make changes simply click the little pencil Edit this file button.","You can then make changes in the text editor using the Markdown syntax. Copying and pasting existing syntax is the best way to get started.","You should make sure all external links open in a new tab/window (edit this page to see how that works).","You can learn more about basic formatting here.","Once done click Commit changes. You can enter a message and description for the commit. Press Commit changes again.","You will now be presented with a Open a pull request page.","You can add a title and detailed description to the pull request. Once you're done click Create pull request.","This will send your changes to the CommandPost team to review and approve.","If changes are required, they'll add comments within the pull request.","If you have questions, you can ask them on the Discussions board.","You can also email us here: support@latenitefilms.com"]},{"l":"GitHub Web-based Editor","p":["You can use the github.dev web-based editor to edit files and commit your changes.","Simply replace the .com with .dev on any GitHub URL.","For example to edit this page you can use:","You can learn more here."]},{"l":"External Links","p":["All external links should open in a new tab/window.","The trick is to add {target=_blank} at the end of the link.","Here's an example of how to do this in Markdown:"]},{"l":"Embedded Videos","p":["To keep that site as fast as possible, and free from tracking/cookies, we've decided not to allow embedded videos.","Instead, we'll be posting the Video Thumbnail as a clickable link to the video.","Here's an example of how this looks in Markdown:","You can use this website for download YouTube Thumbnails."]},{"l":"Images","p":["All images should be stored within the /docs/static/ folder on GitHub.","You can find it here."]},{"l":"GitHub Desktop","p":["You can also use GitHub Desktop to essentially \"clone\" the entire CommandPost website to your local machine.","You can then make changes locally, and once done, submit a pull request back to the main GitHub repository.","You can download GitHub Desktop here.","You can then use a text editor like BBEdit to edit your Markdown files on your Mac."]},{"l":"Powered by Retype","p":["The CommandPost Website is powered by Retype and hosted on GitHub Pages.","We've VERY thankful for all the support Retype has given us!","The comments feature at the bottom of every page is powered by giscus."]},{"l":"Contributor Covenant Code of Conduct"},{"l":"Our Pledge","p":["We as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.","We pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community."]},{"l":"Our Standards","p":["Examples of behavior that contributes to a positive environment for our community include:","Demonstrating empathy and kindness toward other people","Being respectful of differing opinions, viewpoints, and experiences","Giving and gracefully accepting constructive feedback","Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience","Focusing on what is best not just for us as individuals, but for the overall community","Examples of unacceptable behavior include:","The use of sexualized language or imagery, and sexual attention or advances of any kind","Trolling, insulting or derogatory comments, and personal or political attacks","Public or private harassment","Publishing others' private information, such as a physical or email address, without their explicit permission","Other conduct which could reasonably be considered inappropriate in a professional setting"]},{"l":"Enforcement Responsibilities","p":["Community leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.","Community leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate."]},{"l":"Scope","p":["This Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces. Examples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event."]},{"l":"Enforcement","p":["Instances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at[INSERT CONTACT METHOD]. All complaints will be reviewed and investigated promptly and fairly.","All community leaders are obligated to respect the privacy and security of the reporter of any incident."]},{"l":"Enforcement Guidelines","p":["Community leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:"]},{"l":"1. Correction","p":["Community Impact: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.","Consequence: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested."]},{"l":"2. Warning","p":["Community Impact: A violation through a single incident or series of actions.","Consequence: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban."]},{"l":"3. Temporary Ban","p":["Community Impact: A serious violation of community standards, including sustained inappropriate behavior.","Consequence: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban."]},{"l":"4. Permanent Ban","p":["Community Impact: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.","Consequence: A permanent ban from any sort of public interaction within the community."]},{"l":"Attribution","p":["This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct.html.","Community Impact Guidelines were inspired by Mozilla's code of conduct enforcement ladder.","For answers to common questions about this code of conduct, see the FAQ at https://www.contributor-covenant.org/faq. Translations are available at https://www.contributor-covenant.org/translations."]}]]